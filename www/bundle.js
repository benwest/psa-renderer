(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

module.exports = absolutize

/**
 * redefine `path` with absolute coordinates
 *
 * @param {Array} path
 * @return {Array}
 */

function absolutize(path){
	var startX = 0
	var startY = 0
	var x = 0
	var y = 0

	return path.map(function(seg){
		seg = seg.slice()
		var type = seg[0]
		var command = type.toUpperCase()

		// is relative
		if (type != command) {
			seg[0] = command
			switch (type) {
				case 'a':
					seg[6] += x
					seg[7] += y
					break
				case 'v':
					seg[1] += y
					break
				case 'h':
					seg[1] += x
					break
				default:
					for (var i = 1; i < seg.length;) {
						seg[i++] += x
						seg[i++] += y
					}
			}
		}

		// update cursor state
		switch (command) {
			case 'Z':
				x = startX
				y = startY
				break
			case 'H':
				x = seg[1]
				break
			case 'V':
				y = seg[1]
				break
			case 'M':
				x = startX = seg[1]
				y = startY = seg[2]
				break
			default:
				x = seg[seg.length - 2]
				y = seg[seg.length - 1]
		}

		return seg
	})
}

},{}],2:[function(require,module,exports){
module.exports = add

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0]
    out[1] = a[1] + b[1]
    return out
}
},{}],3:[function(require,module,exports){
module.exports = clone

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
function clone(a) {
    var out = new Float32Array(2)
    out[0] = a[0]
    out[1] = a[1]
    return out
}
},{}],4:[function(require,module,exports){
module.exports = copy

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
function copy(out, a) {
    out[0] = a[0]
    out[1] = a[1]
    return out
}
},{}],5:[function(require,module,exports){
module.exports = create

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
function create() {
    var out = new Float32Array(2)
    out[0] = 0
    out[1] = 0
    return out
}
},{}],6:[function(require,module,exports){
module.exports = cross

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0]
    out[0] = out[1] = 0
    out[2] = z
    return out
}
},{}],7:[function(require,module,exports){
module.exports = distance

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1]
    return Math.sqrt(x*x + y*y)
}
},{}],8:[function(require,module,exports){
module.exports = divide

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0]
    out[1] = a[1] / b[1]
    return out
}
},{}],9:[function(require,module,exports){
module.exports = dot

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1]
}
},{}],10:[function(require,module,exports){
module.exports = forEach

var vec = require('./create')()

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
function forEach(a, stride, offset, count, fn, arg) {
    var i, l
    if(!stride) {
        stride = 2
    }

    if(!offset) {
        offset = 0
    }
    
    if(count) {
        l = Math.min((count * stride) + offset, a.length)
    } else {
        l = a.length
    }

    for(i = offset; i < l; i += stride) {
        vec[0] = a[i]
        vec[1] = a[i+1]
        fn(vec, vec, arg)
        a[i] = vec[0]
        a[i+1] = vec[1]
    }
    
    return a
}
},{"./create":5}],11:[function(require,module,exports){
module.exports = fromValues

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
function fromValues(x, y) {
    var out = new Float32Array(2)
    out[0] = x
    out[1] = y
    return out
}
},{}],12:[function(require,module,exports){
module.exports = {
  create: require('./create')
  , clone: require('./clone')
  , fromValues: require('./fromValues')
  , copy: require('./copy')
  , set: require('./set')
  , add: require('./add')
  , subtract: require('./subtract')
  , multiply: require('./multiply')
  , divide: require('./divide')
  , min: require('./min')
  , max: require('./max')
  , scale: require('./scale')
  , scaleAndAdd: require('./scaleAndAdd')
  , distance: require('./distance')
  , squaredDistance: require('./squaredDistance')
  , length: require('./length')
  , squaredLength: require('./squaredLength')
  , negate: require('./negate')
  , normalize: require('./normalize')
  , dot: require('./dot')
  , cross: require('./cross')
  , lerp: require('./lerp')
  , random: require('./random')
  , transformMat2: require('./transformMat2')
  , transformMat2d: require('./transformMat2d')
  , transformMat3: require('./transformMat3')
  , transformMat4: require('./transformMat4')
  , forEach: require('./forEach')
}
},{"./add":2,"./clone":3,"./copy":4,"./create":5,"./cross":6,"./distance":7,"./divide":8,"./dot":9,"./forEach":10,"./fromValues":11,"./length":13,"./lerp":14,"./max":15,"./min":16,"./multiply":17,"./negate":18,"./normalize":19,"./random":20,"./scale":21,"./scaleAndAdd":22,"./set":23,"./squaredDistance":24,"./squaredLength":25,"./subtract":26,"./transformMat2":27,"./transformMat2d":28,"./transformMat3":29,"./transformMat4":30}],13:[function(require,module,exports){
module.exports = length

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    var x = a[0],
        y = a[1]
    return Math.sqrt(x*x + y*y)
}
},{}],14:[function(require,module,exports){
module.exports = lerp

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
    var ax = a[0],
        ay = a[1]
    out[0] = ax + t * (b[0] - ax)
    out[1] = ay + t * (b[1] - ay)
    return out
}
},{}],15:[function(require,module,exports){
module.exports = max

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0])
    out[1] = Math.max(a[1], b[1])
    return out
}
},{}],16:[function(require,module,exports){
module.exports = min

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0])
    out[1] = Math.min(a[1], b[1])
    return out
}
},{}],17:[function(require,module,exports){
module.exports = multiply

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0]
    out[1] = a[1] * b[1]
    return out
}
},{}],18:[function(require,module,exports){
module.exports = negate

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
    out[0] = -a[0]
    out[1] = -a[1]
    return out
}
},{}],19:[function(require,module,exports){
module.exports = normalize

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1]
    var len = x*x + y*y
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
    }
    return out
}
},{}],20:[function(require,module,exports){
module.exports = random

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
function random(out, scale) {
    scale = scale || 1.0
    var r = Math.random() * 2.0 * Math.PI
    out[0] = Math.cos(r) * scale
    out[1] = Math.sin(r) * scale
    return out
}
},{}],21:[function(require,module,exports){
module.exports = scale

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b
    out[1] = a[1] * b
    return out
}
},{}],22:[function(require,module,exports){
module.exports = scaleAndAdd

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale)
    out[1] = a[1] + (b[1] * scale)
    return out
}
},{}],23:[function(require,module,exports){
module.exports = set

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
    out[0] = x
    out[1] = y
    return out
}
},{}],24:[function(require,module,exports){
module.exports = squaredDistance

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1]
    return x*x + y*y
}
},{}],25:[function(require,module,exports){
module.exports = squaredLength

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
    var x = a[0],
        y = a[1]
    return x*x + y*y
}
},{}],26:[function(require,module,exports){
module.exports = subtract

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0]
    out[1] = a[1] - b[1]
    return out
}
},{}],27:[function(require,module,exports){
module.exports = transformMat2

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2(out, a, m) {
    var x = a[0],
        y = a[1]
    out[0] = m[0] * x + m[2] * y
    out[1] = m[1] * x + m[3] * y
    return out
}
},{}],28:[function(require,module,exports){
module.exports = transformMat2d

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2d(out, a, m) {
    var x = a[0],
        y = a[1]
    out[0] = m[0] * x + m[2] * y + m[4]
    out[1] = m[1] * x + m[3] * y + m[5]
    return out
}
},{}],29:[function(require,module,exports){
module.exports = transformMat3

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat3(out, a, m) {
    var x = a[0],
        y = a[1]
    out[0] = m[0] * x + m[3] * y + m[6]
    out[1] = m[1] * x + m[4] * y + m[7]
    return out
}
},{}],30:[function(require,module,exports){
module.exports = transformMat4

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
    var x = a[0], 
        y = a[1]
    out[0] = m[0] * x + m[4] * y + m[12]
    out[1] = m[1] * x + m[5] * y + m[13]
    return out
}
},{}],31:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":50}],32:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],33:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],34:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],35:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":31,"./_getRawTag":45,"./_objectToString":48}],36:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":47,"./_toSource":53,"./isFunction":58,"./isObject":60}],37:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],38:[function(require,module,exports){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./_overRest":49,"./_setToString":51,"./identity":55}],39:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":42,"./constant":54,"./identity":55}],40:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],41:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":50}],42:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":44}],43:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],44:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":36,"./_getValue":46}],45:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":31}],46:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],47:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":41}],48:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],49:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":32}],50:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":43}],51:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":39,"./_shortOut":52}],52:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],53:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],54:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],55:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],56:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":58,"./isLength":59}],57:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":56,"./isObjectLike":61}],58:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":35,"./isObject":60}],59:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],60:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],61:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],62:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    arrayMap = require('./_arrayMap'),
    baseProperty = require('./_baseProperty'),
    baseTimes = require('./_baseTimes'),
    isArrayLikeObject = require('./isArrayLikeObject');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.zip` except that it accepts an array of grouped
 * elements and creates an array regrouping the elements to their pre-zip
 * configuration.
 *
 * @static
 * @memberOf _
 * @since 1.2.0
 * @category Array
 * @param {Array} array The array of grouped elements to process.
 * @returns {Array} Returns the new array of regrouped elements.
 * @example
 *
 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 *
 * _.unzip(zipped);
 * // => [['a', 'b'], [1, 2], [true, false]]
 */
function unzip(array) {
  if (!(array && array.length)) {
    return [];
  }
  var length = 0;
  array = arrayFilter(array, function(group) {
    if (isArrayLikeObject(group)) {
      length = nativeMax(group.length, length);
      return true;
    }
  });
  return baseTimes(length, function(index) {
    return arrayMap(array, baseProperty(index));
  });
}

module.exports = unzip;

},{"./_arrayFilter":33,"./_arrayMap":34,"./_baseProperty":37,"./_baseTimes":40,"./isArrayLikeObject":57}],63:[function(require,module,exports){
var baseRest = require('./_baseRest'),
    unzip = require('./unzip');

/**
 * Creates an array of grouped elements, the first of which contains the
 * first elements of the given arrays, the second of which contains the
 * second elements of the given arrays, and so on.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to process.
 * @returns {Array} Returns the new array of grouped elements.
 * @example
 *
 * _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 */
var zip = baseRest(unzip);

module.exports = zip;

},{"./_baseRest":38,"./unzip":62}],64:[function(require,module,exports){

var π = Math.PI
var _120 = radians(120)

module.exports = normalize

/**
 * describe `path` in terms of cubic bézier 
 * curves and move commands
 *
 * @param {Array} path
 * @return {Array}
 */

function normalize(path){
	// init state
	var prev
	var result = []
	var bezierX = 0
	var bezierY = 0
	var startX = 0
	var startY = 0
	var quadX = null
	var quadY = null
	var x = 0
	var y = 0

	for (var i = 0, len = path.length; i < len; i++) {
		var seg = path[i]
		var command = seg[0]
		switch (command) {
			case 'M':
				startX = seg[1]
				startY = seg[2]
				break
			case 'A':
				seg = arc(x, y,seg[1],seg[2],radians(seg[3]),seg[4],seg[5],seg[6],seg[7])
				// split multi part
				seg.unshift('C')
				if (seg.length > 7) {
					result.push(seg.splice(0, 7))
					seg.unshift('C')
				}
				break
			case 'S':
				// default control point
				var cx = x
				var cy = y
				if (prev == 'C' || prev == 'S') {
					cx += cx - bezierX // reflect the previous command's control
					cy += cy - bezierY // point relative to the current point
				}
				seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]
				break
			case 'T':
				if (prev == 'Q' || prev == 'T') {
					quadX = x * 2 - quadX // as with 'S' reflect previous control point
					quadY = y * 2 - quadY
				} else {
					quadX = x
					quadY = y
				}
				seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])
				break
			case 'Q':
				quadX = seg[1]
				quadY = seg[2]
				seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])
				break
			case 'L':
				seg = line(x, y, seg[1], seg[2])
				break
			case 'H':
				seg = line(x, y, seg[1], y)
				break
			case 'V':
				seg = line(x, y, x, seg[1])
				break
			case 'Z':
				seg = line(x, y, startX, startY)
				break
		}

		// update state
		prev = command
		x = seg[seg.length - 2]
		y = seg[seg.length - 1]
		if (seg.length > 4) {
			bezierX = seg[seg.length - 4]
			bezierY = seg[seg.length - 3]
		} else {
			bezierX = x
			bezierY = y
		}
		result.push(seg)
	}

	return result
}

function line(x1, y1, x2, y2){
	return ['C', x1, y1, x2, y2, x2, y2]
}

function quadratic(x1, y1, cx, cy, x2, y2){
	return [
		'C',
		x1/3 + (2/3) * cx,
		y1/3 + (2/3) * cy,
		x2/3 + (2/3) * cx,
		y2/3 + (2/3) * cy,
		x2,
		y2
	]
}

// This function is ripped from 
// github.com/DmitryBaranovskiy/raphael/blob/4d97d4/raphael.js#L2216-L2304 
// which references w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
// TODO: make it human readable

function arc(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
	if (!recursive) {
		var xy = rotate(x1, y1, -angle)
		x1 = xy.x
		y1 = xy.y
		xy = rotate(x2, y2, -angle)
		x2 = xy.x
		y2 = xy.y
		var x = (x1 - x2) / 2
		var y = (y1 - y2) / 2
		var h = (x * x) / (rx * rx) + (y * y) / (ry * ry)
		if (h > 1) {
			h = Math.sqrt(h)
			rx = h * rx
			ry = h * ry
		}
		var rx2 = rx * rx
		var ry2 = ry * ry
		var k = (large_arc_flag == sweep_flag ? -1 : 1)
			* Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)))
		if (k == Infinity) k = 1 // neutralize
		var cx = k * rx * y / ry + (x1 + x2) / 2
		var cy = k * -ry * x / rx + (y1 + y2) / 2
		var f1 = Math.asin(((y1 - cy) / ry).toFixed(9))
		var f2 = Math.asin(((y2 - cy) / ry).toFixed(9))

		f1 = x1 < cx ? π - f1 : f1
		f2 = x2 < cx ? π - f2 : f2
		if (f1 < 0) f1 = π * 2 + f1
		if (f2 < 0) f2 = π * 2 + f2
		if (sweep_flag && f1 > f2) f1 = f1 - π * 2
		if (!sweep_flag && f2 > f1) f2 = f2 - π * 2
	} else {
		f1 = recursive[0]
		f2 = recursive[1]
		cx = recursive[2]
		cy = recursive[3]
	}
	// greater than 120 degrees requires multiple segments
	if (Math.abs(f2 - f1) > _120) {
		var f2old = f2
		var x2old = x2
		var y2old = y2
		f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1)
		x2 = cx + rx * Math.cos(f2)
		y2 = cy + ry * Math.sin(f2)
		var res = arc(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy])
	}
	var t = Math.tan((f2 - f1) / 4)
	var hx = 4 / 3 * rx * t
	var hy = 4 / 3 * ry * t
	var curve = [
		2 * x1 - (x1 + hx * Math.sin(f1)),
		2 * y1 - (y1 - hy * Math.cos(f1)),
		x2 + hx * Math.sin(f2),
		y2 - hy * Math.cos(f2),
		x2,
		y2
	]
	if (recursive) return curve
	if (res) curve = curve.concat(res)
	for (var i = 0; i < curve.length;) {
		var rot = rotate(curve[i], curve[i+1], angle)
		curve[i++] = rot.x
		curve[i++] = rot.y
	}
	return curve
}

function rotate(x, y, rad){
	return {
		x: x * Math.cos(rad) - y * Math.sin(rad),
		y: x * Math.sin(rad) + y * Math.cos(rad)
	}
}

function radians(degress){
	return degress * (π / 180)
}

},{}],65:[function(require,module,exports){
var Scalar = require('./Scalar');

module.exports = Line;

/**
 * Container for line-related functions
 * @class Line
 */
function Line(){};

/**
 * Compute the intersection between two lines.
 * @static
 * @method lineInt
 * @param  {Array}  l1          Line vector 1
 * @param  {Array}  l2          Line vector 2
 * @param  {Number} precision   Precision to use when checking if the lines are parallel
 * @return {Array}              The intersection point.
 */
Line.lineInt = function(l1,l2,precision){
    precision = precision || 0;
    var i = [0,0]; // point
    var a1, b1, c1, a2, b2, c2, det; // scalars
    a1 = l1[1][1] - l1[0][1];
    b1 = l1[0][0] - l1[1][0];
    c1 = a1 * l1[0][0] + b1 * l1[0][1];
    a2 = l2[1][1] - l2[0][1];
    b2 = l2[0][0] - l2[1][0];
    c2 = a2 * l2[0][0] + b2 * l2[0][1];
    det = a1 * b2 - a2*b1;
    if (!Scalar.eq(det, 0, precision)) { // lines are not parallel
        i[0] = (b2 * c1 - b1 * c2) / det;
        i[1] = (a1 * c2 - a2 * c1) / det;
    }
    return i;
};

/**
 * Checks if two line segments intersects.
 * @method segmentsIntersect
 * @param {Array} p1 The start vertex of the first line segment.
 * @param {Array} p2 The end vertex of the first line segment.
 * @param {Array} q1 The start vertex of the second line segment.
 * @param {Array} q2 The end vertex of the second line segment.
 * @return {Boolean} True if the two line segments intersect
 */
Line.segmentsIntersect = function(p1, p2, q1, q2){
   var dx = p2[0] - p1[0];
   var dy = p2[1] - p1[1];
   var da = q2[0] - q1[0];
   var db = q2[1] - q1[1];

   // segments are parallel
   if(da*dy - db*dx == 0)
      return false;

   var s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx)
   var t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy)

   return (s>=0 && s<=1 && t>=0 && t<=1);
};


},{"./Scalar":68}],66:[function(require,module,exports){
module.exports = Point;

/**
 * Point related functions
 * @class Point
 */
function Point(){};

/**
 * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.
 * @static
 * @method area
 * @param  {Array} a
 * @param  {Array} b
 * @param  {Array} c
 * @return {Number}
 */
Point.area = function(a,b,c){
    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));
};

Point.left = function(a,b,c){
    return Point.area(a,b,c) > 0;
};

Point.leftOn = function(a,b,c) {
    return Point.area(a, b, c) >= 0;
};

Point.right = function(a,b,c) {
    return Point.area(a, b, c) < 0;
};

Point.rightOn = function(a,b,c) {
    return Point.area(a, b, c) <= 0;
};

var tmpPoint1 = [],
    tmpPoint2 = [];

/**
 * Check if three points are collinear
 * @method collinear
 * @param  {Array} a
 * @param  {Array} b
 * @param  {Array} c
 * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.
 * @return {Boolean}
 */
Point.collinear = function(a,b,c,thresholdAngle) {
    if(!thresholdAngle)
        return Point.area(a, b, c) == 0;
    else {
        var ab = tmpPoint1,
            bc = tmpPoint2;

        ab[0] = b[0]-a[0];
        ab[1] = b[1]-a[1];
        bc[0] = c[0]-b[0];
        bc[1] = c[1]-b[1];

        var dot = ab[0]*bc[0] + ab[1]*bc[1],
            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),
            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),
            angle = Math.acos(dot/(magA*magB));
        return angle < thresholdAngle;
    }
};

Point.sqdist = function(a,b){
    var dx = b[0] - a[0];
    var dy = b[1] - a[1];
    return dx * dx + dy * dy;
};

},{}],67:[function(require,module,exports){
var Line = require("./Line")
,   Point = require("./Point")
,   Scalar = require("./Scalar")

module.exports = Polygon;

/**
 * Polygon class.
 * @class Polygon
 * @constructor
 */
function Polygon(){

    /**
     * Vertices that this polygon consists of. An array of array of numbers, example: [[0,0],[1,0],..]
     * @property vertices
     * @type {Array}
     */
    this.vertices = [];
}

/**
 * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.
 * @method at
 * @param  {Number} i
 * @return {Array}
 */
Polygon.prototype.at = function(i){
    var v = this.vertices,
        s = v.length;
    return v[i < 0 ? i % s + s : i % s];
};

/**
 * Get first vertex
 * @method first
 * @return {Array}
 */
Polygon.prototype.first = function(){
    return this.vertices[0];
};

/**
 * Get last vertex
 * @method last
 * @return {Array}
 */
Polygon.prototype.last = function(){
    return this.vertices[this.vertices.length-1];
};

/**
 * Clear the polygon data
 * @method clear
 * @return {Array}
 */
Polygon.prototype.clear = function(){
    this.vertices.length = 0;
};

/**
 * Append points "from" to "to"-1 from an other polygon "poly" onto this one.
 * @method append
 * @param {Polygon} poly The polygon to get points from.
 * @param {Number}  from The vertex index in "poly".
 * @param {Number}  to The end vertex index in "poly". Note that this vertex is NOT included when appending.
 * @return {Array}
 */
Polygon.prototype.append = function(poly,from,to){
    if(typeof(from) == "undefined") throw new Error("From is not given!");
    if(typeof(to) == "undefined")   throw new Error("To is not given!");

    if(to-1 < from)                 throw new Error("lol1");
    if(to > poly.vertices.length)   throw new Error("lol2");
    if(from < 0)                    throw new Error("lol3");

    for(var i=from; i<to; i++){
        this.vertices.push(poly.vertices[i]);
    }
};

/**
 * Make sure that the polygon vertices are ordered counter-clockwise.
 * @method makeCCW
 */
Polygon.prototype.makeCCW = function(){
    var br = 0,
        v = this.vertices;

    // find bottom right point
    for (var i = 1; i < this.vertices.length; ++i) {
        if (v[i][1] < v[br][1] || (v[i][1] == v[br][1] && v[i][0] > v[br][0])) {
            br = i;
        }
    }

    // reverse poly if clockwise
    if (!Point.left(this.at(br - 1), this.at(br), this.at(br + 1))) {
        this.reverse();
    }
};

/**
 * Reverse the vertices in the polygon
 * @method reverse
 */
Polygon.prototype.reverse = function(){
    var tmp = [];
    for(var i=0, N=this.vertices.length; i!==N; i++){
        tmp.push(this.vertices.pop());
    }
    this.vertices = tmp;
};

/**
 * Check if a point in the polygon is a reflex point
 * @method isReflex
 * @param  {Number}  i
 * @return {Boolean}
 */
Polygon.prototype.isReflex = function(i){
    return Point.right(this.at(i - 1), this.at(i), this.at(i + 1));
};

var tmpLine1=[],
    tmpLine2=[];

/**
 * Check if two vertices in the polygon can see each other
 * @method canSee
 * @param  {Number} a Vertex index 1
 * @param  {Number} b Vertex index 2
 * @return {Boolean}
 */
Polygon.prototype.canSee = function(a,b) {
    var p, dist, l1=tmpLine1, l2=tmpLine2;

    if (Point.leftOn(this.at(a + 1), this.at(a), this.at(b)) && Point.rightOn(this.at(a - 1), this.at(a), this.at(b))) {
        return false;
    }
    dist = Point.sqdist(this.at(a), this.at(b));
    for (var i = 0; i !== this.vertices.length; ++i) { // for each edge
        if ((i + 1) % this.vertices.length === a || i === a) // ignore incident edges
            continue;
        if (Point.leftOn(this.at(a), this.at(b), this.at(i + 1)) && Point.rightOn(this.at(a), this.at(b), this.at(i))) { // if diag intersects an edge
            l1[0] = this.at(a);
            l1[1] = this.at(b);
            l2[0] = this.at(i);
            l2[1] = this.at(i + 1);
            p = Line.lineInt(l1,l2);
            if (Point.sqdist(this.at(a), p) < dist) { // if edge is blocking visibility to b
                return false;
            }
        }
    }

    return true;
};

/**
 * Copy the polygon from vertex i to vertex j.
 * @method copy
 * @param  {Number} i
 * @param  {Number} j
 * @param  {Polygon} [targetPoly]   Optional target polygon to save in.
 * @return {Polygon}                The resulting copy.
 */
Polygon.prototype.copy = function(i,j,targetPoly){
    var p = targetPoly || new Polygon();
    p.clear();
    if (i < j) {
        // Insert all vertices from i to j
        for(var k=i; k<=j; k++)
            p.vertices.push(this.vertices[k]);

    } else {

        // Insert vertices 0 to j
        for(var k=0; k<=j; k++)
            p.vertices.push(this.vertices[k]);

        // Insert vertices i to end
        for(var k=i; k<this.vertices.length; k++)
            p.vertices.push(this.vertices[k]);
    }

    return p;
};

/**
 * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.
 * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.
 * @method getCutEdges
 * @return {Array}
 */
Polygon.prototype.getCutEdges = function() {
    var min=[], tmp1=[], tmp2=[], tmpPoly = new Polygon();
    var nDiags = Number.MAX_VALUE;

    for (var i = 0; i < this.vertices.length; ++i) {
        if (this.isReflex(i)) {
            for (var j = 0; j < this.vertices.length; ++j) {
                if (this.canSee(i, j)) {
                    tmp1 = this.copy(i, j, tmpPoly).getCutEdges();
                    tmp2 = this.copy(j, i, tmpPoly).getCutEdges();

                    for(var k=0; k<tmp2.length; k++)
                        tmp1.push(tmp2[k]);

                    if (tmp1.length < nDiags) {
                        min = tmp1;
                        nDiags = tmp1.length;
                        min.push([this.at(i), this.at(j)]);
                    }
                }
            }
        }
    }

    return min;
};

/**
 * Decomposes the polygon into one or more convex sub-Polygons.
 * @method decomp
 * @return {Array} An array or Polygon objects.
 */
Polygon.prototype.decomp = function(){
    var edges = this.getCutEdges();
    if(edges.length > 0)
        return this.slice(edges);
    else
        return [this];
};

/**
 * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.
 * @method slice
 * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()
 * @return {Array}
 */
Polygon.prototype.slice = function(cutEdges){
    if(cutEdges.length == 0) return [this];
    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length==2 && cutEdges[0][0] instanceof Array){

        var polys = [this];

        for(var i=0; i<cutEdges.length; i++){
            var cutEdge = cutEdges[i];
            // Cut all polys
            for(var j=0; j<polys.length; j++){
                var poly = polys[j];
                var result = poly.slice(cutEdge);
                if(result){
                    // Found poly! Cut and quit
                    polys.splice(j,1);
                    polys.push(result[0],result[1]);
                    break;
                }
            }
        }

        return polys;
    } else {

        // Was given one edge
        var cutEdge = cutEdges;
        var i = this.vertices.indexOf(cutEdge[0]);
        var j = this.vertices.indexOf(cutEdge[1]);

        if(i != -1 && j != -1){
            return [this.copy(i,j),
                    this.copy(j,i)];
        } else {
            return false;
        }
    }
};

/**
 * Checks that the line segments of this polygon do not intersect each other.
 * @method isSimple
 * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]
 * @return {Boolean}
 * @todo Should it check all segments with all others?
 */
Polygon.prototype.isSimple = function(){
    var path = this.vertices;
    // Check
    for(var i=0; i<path.length-1; i++){
        for(var j=0; j<i-1; j++){
            if(Line.segmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){
                return false;
            }
        }
    }

    // Check the segment between the last and the first point to all others
    for(var i=1; i<path.length-2; i++){
        if(Line.segmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){
            return false;
        }
    }

    return true;
};

function getIntersectionPoint(p1, p2, q1, q2, delta){
    delta = delta || 0;
   var a1 = p2[1] - p1[1];
   var b1 = p1[0] - p2[0];
   var c1 = (a1 * p1[0]) + (b1 * p1[1]);
   var a2 = q2[1] - q1[1];
   var b2 = q1[0] - q2[0];
   var c2 = (a2 * q1[0]) + (b2 * q1[1]);
   var det = (a1 * b2) - (a2 * b1);

   if(!Scalar.eq(det,0,delta))
      return [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det]
   else
      return [0,0]
}

/**
 * Quickly decompose the Polygon into convex sub-polygons.
 * @method quickDecomp
 * @param  {Array} result
 * @param  {Array} [reflexVertices]
 * @param  {Array} [steinerPoints]
 * @param  {Number} [delta]
 * @param  {Number} [maxlevel]
 * @param  {Number} [level]
 * @return {Array}
 */
Polygon.prototype.quickDecomp = function(result,reflexVertices,steinerPoints,delta,maxlevel,level){
    maxlevel = maxlevel || 100;
    level = level || 0;
    delta = delta || 25;
    result = typeof(result)!="undefined" ? result : [];
    reflexVertices = reflexVertices || [];
    steinerPoints = steinerPoints || [];

    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points
    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars
    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers
    var lowerPoly=new Polygon(), upperPoly=new Polygon(); // polygons
    var poly = this,
        v = this.vertices;

    if(v.length < 3) return result;

    level++;
    if(level > maxlevel){
        console.warn("quickDecomp: max level ("+maxlevel+") reached.");
        return result;
    }

    for (var i = 0; i < this.vertices.length; ++i) {
        if (poly.isReflex(i)) {
            reflexVertices.push(poly.vertices[i]);
            upperDist = lowerDist = Number.MAX_VALUE;


            for (var j = 0; j < this.vertices.length; ++j) {
                if (Point.left(poly.at(i - 1), poly.at(i), poly.at(j))
                        && Point.rightOn(poly.at(i - 1), poly.at(i), poly.at(j - 1))) { // if line intersects with an edge
                    p = getIntersectionPoint(poly.at(i - 1), poly.at(i), poly.at(j), poly.at(j - 1)); // find the point of intersection
                    if (Point.right(poly.at(i + 1), poly.at(i), p)) { // make sure it's inside the poly
                        d = Point.sqdist(poly.vertices[i], p);
                        if (d < lowerDist) { // keep only the closest intersection
                            lowerDist = d;
                            lowerInt = p;
                            lowerIndex = j;
                        }
                    }
                }
                if (Point.left(poly.at(i + 1), poly.at(i), poly.at(j + 1))
                        && Point.rightOn(poly.at(i + 1), poly.at(i), poly.at(j))) {
                    p = getIntersectionPoint(poly.at(i + 1), poly.at(i), poly.at(j), poly.at(j + 1));
                    if (Point.left(poly.at(i - 1), poly.at(i), p)) {
                        d = Point.sqdist(poly.vertices[i], p);
                        if (d < upperDist) {
                            upperDist = d;
                            upperInt = p;
                            upperIndex = j;
                        }
                    }
                }
            }

            // if there are no vertices to connect to, choose a point in the middle
            if (lowerIndex == (upperIndex + 1) % this.vertices.length) {
                //console.log("Case 1: Vertex("+i+"), lowerIndex("+lowerIndex+"), upperIndex("+upperIndex+"), poly.size("+this.vertices.length+")");
                p[0] = (lowerInt[0] + upperInt[0]) / 2;
                p[1] = (lowerInt[1] + upperInt[1]) / 2;
                steinerPoints.push(p);

                if (i < upperIndex) {
                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);
                    lowerPoly.append(poly, i, upperIndex+1);
                    lowerPoly.vertices.push(p);
                    upperPoly.vertices.push(p);
                    if (lowerIndex != 0){
                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());
                        upperPoly.append(poly,lowerIndex,poly.vertices.length);
                    }
                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);
                    upperPoly.append(poly,0,i+1);
                } else {
                    if (i != 0){
                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());
                        lowerPoly.append(poly,i,poly.vertices.length);
                    }
                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);
                    lowerPoly.append(poly,0,upperIndex+1);
                    lowerPoly.vertices.push(p);
                    upperPoly.vertices.push(p);
                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);
                    upperPoly.append(poly,lowerIndex,i+1);
                }
            } else {
                // connect to the closest point within the triangle
                //console.log("Case 2: Vertex("+i+"), closestIndex("+closestIndex+"), poly.size("+this.vertices.length+")\n");

                if (lowerIndex > upperIndex) {
                    upperIndex += this.vertices.length;
                }
                closestDist = Number.MAX_VALUE;

                if(upperIndex < lowerIndex){
                    return result;
                }

                for (var j = lowerIndex; j <= upperIndex; ++j) {
                    if (Point.leftOn(poly.at(i - 1), poly.at(i), poly.at(j))
                            && Point.rightOn(poly.at(i + 1), poly.at(i), poly.at(j))) {
                        d = Point.sqdist(poly.at(i), poly.at(j));
                        if (d < closestDist) {
                            closestDist = d;
                            closestIndex = j % this.vertices.length;
                        }
                    }
                }

                if (i < closestIndex) {
                    lowerPoly.append(poly,i,closestIndex+1);
                    if (closestIndex != 0){
                        upperPoly.append(poly,closestIndex,v.length);
                    }
                    upperPoly.append(poly,0,i+1);
                } else {
                    if (i != 0){
                        lowerPoly.append(poly,i,v.length);
                    }
                    lowerPoly.append(poly,0,closestIndex+1);
                    upperPoly.append(poly,closestIndex,i+1);
                }
            }

            // solve smallest poly first
            if (lowerPoly.vertices.length < upperPoly.vertices.length) {
                lowerPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
                upperPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
            } else {
                upperPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
                lowerPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
            }

            return result;
        }
    }
    result.push(this);

    return result;
};

/**
 * Remove collinear points in the polygon.
 * @method removeCollinearPoints
 * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.
 * @return {Number}           The number of points removed
 */
Polygon.prototype.removeCollinearPoints = function(precision){
    var num = 0;
    for(var i=this.vertices.length-1; this.vertices.length>3 && i>=0; --i){
        if(Point.collinear(this.at(i-1),this.at(i),this.at(i+1),precision)){
            // Remove the middle point
            this.vertices.splice(i%this.vertices.length,1);
            i--; // Jump one point forward. Otherwise we may get a chain removal
            num++;
        }
    }
    return num;
};

},{"./Line":65,"./Point":66,"./Scalar":68}],68:[function(require,module,exports){
module.exports = Scalar;

/**
 * Scalar functions
 * @class Scalar
 */
function Scalar(){}

/**
 * Check if two scalars are equal
 * @static
 * @method eq
 * @param  {Number} a
 * @param  {Number} b
 * @param  {Number} [precision]
 * @return {Boolean}
 */
Scalar.eq = function(a,b,precision){
    precision = precision || 0;
    return Math.abs(a-b) < precision;
};

},{}],69:[function(require,module,exports){
module.exports = {
    Polygon : require("./Polygon"),
    Point : require("./Point"),
};

},{"./Point":66,"./Polygon":67}],70:[function(require,module,exports){
module.exports={
  "name": "p2",
  "version": "0.7.1",
  "description": "A JavaScript 2D physics engine.",
  "author": {
    "name": "Stefan Hedman",
    "email": "schteppe@gmail.com",
    "url": "http://steffe.se"
  },
  "keywords": [
    "p2.js",
    "p2",
    "physics",
    "engine",
    "2d"
  ],
  "main": "./src/p2.js",
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/schteppe/p2.js.git"
  },
  "bugs": {
    "url": "https://github.com/schteppe/p2.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-watch": "~0.5.0",
    "grunt-browserify": "~2.0.1",
    "grunt-contrib-concat": "^0.4.0"
  },
  "dependencies": {
    "poly-decomp": "0.1.1"
  },
  "gitHead": "d83c483f912362fd6e57c74b0634ea3f1f3e0c82",
  "homepage": "https://github.com/schteppe/p2.js#readme",
  "_id": "p2@0.7.1",
  "scripts": {},
  "_shasum": "25f2474d9bc3a6d3140a1da26a67c9e118ac9543",
  "_from": "p2@>=0.7.1 <0.8.0",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.2",
  "_npmUser": {
    "name": "schteppe",
    "email": "schteppe@gmail.com"
  },
  "maintainers": [
    {
      "name": "schteppe",
      "email": "schteppe@gmail.com"
    }
  ],
  "dist": {
    "shasum": "25f2474d9bc3a6d3140a1da26a67c9e118ac9543",
    "tarball": "https://registry.npmjs.org/p2/-/p2-0.7.1.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/p2/-/p2-0.7.1.tgz"
}

},{}],71:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Utils = require('../utils/Utils');

module.exports = AABB;

/**
 * Axis aligned bounding box class.
 * @class AABB
 * @constructor
 * @param {Object}  [options]
 * @param {Array}   [options.upperBound]
 * @param {Array}   [options.lowerBound]
 */
function AABB(options){

    /**
     * The lower bound of the bounding box.
     * @property lowerBound
     * @type {Array}
     */
    this.lowerBound = vec2.create();
    if(options && options.lowerBound){
        vec2.copy(this.lowerBound, options.lowerBound);
    }

    /**
     * The upper bound of the bounding box.
     * @property upperBound
     * @type {Array}
     */
    this.upperBound = vec2.create();
    if(options && options.upperBound){
        vec2.copy(this.upperBound, options.upperBound);
    }
}

var tmp = vec2.create();

/**
 * Set the AABB bounds from a set of points, transformed by the given position and angle.
 * @method setFromPoints
 * @param {Array} points An array of vec2's.
 * @param {Array} position
 * @param {number} angle
 * @param {number} skinSize Some margin to be added to the AABB.
 */
AABB.prototype.setFromPoints = function(points, position, angle, skinSize){
    var l = this.lowerBound,
        u = this.upperBound;

    if(typeof(angle) !== "number"){
        angle = 0;
    }

    // Set to the first point
    if(angle !== 0){
        vec2.rotate(l, points[0], angle);
    } else {
        vec2.copy(l, points[0]);
    }
    vec2.copy(u, l);

    // Compute cosines and sines just once
    var cosAngle = Math.cos(angle),
        sinAngle = Math.sin(angle);
    for(var i = 1; i<points.length; i++){
        var p = points[i];

        if(angle !== 0){
            var x = p[0],
                y = p[1];
            tmp[0] = cosAngle * x -sinAngle * y;
            tmp[1] = sinAngle * x +cosAngle * y;
            p = tmp;
        }

        for(var j=0; j<2; j++){
            if(p[j] > u[j]){
                u[j] = p[j];
            }
            if(p[j] < l[j]){
                l[j] = p[j];
            }
        }
    }

    // Add offset
    if(position){
        vec2.add(this.lowerBound, this.lowerBound, position);
        vec2.add(this.upperBound, this.upperBound, position);
    }

    if(skinSize){
        this.lowerBound[0] -= skinSize;
        this.lowerBound[1] -= skinSize;
        this.upperBound[0] += skinSize;
        this.upperBound[1] += skinSize;
    }
};

/**
 * Copy bounds from an AABB to this AABB
 * @method copy
 * @param  {AABB} aabb
 */
AABB.prototype.copy = function(aabb){
    vec2.copy(this.lowerBound, aabb.lowerBound);
    vec2.copy(this.upperBound, aabb.upperBound);
};

/**
 * Extend this AABB so that it covers the given AABB too.
 * @method extend
 * @param  {AABB} aabb
 */
AABB.prototype.extend = function(aabb){
    // Loop over x and y
    var i = 2;
    while(i--){
        // Extend lower bound
        var l = aabb.lowerBound[i];
        if(this.lowerBound[i] > l){
            this.lowerBound[i] = l;
        }

        // Upper
        var u = aabb.upperBound[i];
        if(this.upperBound[i] < u){
            this.upperBound[i] = u;
        }
    }
};

/**
 * Returns true if the given AABB overlaps this AABB.
 * @method overlaps
 * @param  {AABB} aabb
 * @return {Boolean}
 */
AABB.prototype.overlaps = function(aabb){
    var l1 = this.lowerBound,
        u1 = this.upperBound,
        l2 = aabb.lowerBound,
        u2 = aabb.upperBound;

    //      l2        u2
    //      |---------|
    // |--------|
    // l1       u1

    return ((l2[0] <= u1[0] && u1[0] <= u2[0]) || (l1[0] <= u2[0] && u2[0] <= u1[0])) &&
           ((l2[1] <= u1[1] && u1[1] <= u2[1]) || (l1[1] <= u2[1] && u2[1] <= u1[1]));
};

/**
 * @method containsPoint
 * @param  {Array} point
 * @return {boolean}
 */
AABB.prototype.containsPoint = function(point){
    var l = this.lowerBound,
        u = this.upperBound;
    return l[0] <= point[0] && point[0] <= u[0] && l[1] <= point[1] && point[1] <= u[1];
};

/**
 * Check if the AABB is hit by a ray.
 * @method overlapsRay
 * @param  {Ray} ray
 * @return {number} -1 if no hit, a number between 0 and 1 if hit.
 */
AABB.prototype.overlapsRay = function(ray){
    var t = 0;

    // ray.direction is unit direction vector of ray
    var dirFracX = 1 / ray.direction[0];
    var dirFracY = 1 / ray.direction[1];

    // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner
    var t1 = (this.lowerBound[0] - ray.from[0]) * dirFracX;
    var t2 = (this.upperBound[0] - ray.from[0]) * dirFracX;
    var t3 = (this.lowerBound[1] - ray.from[1]) * dirFracY;
    var t4 = (this.upperBound[1] - ray.from[1]) * dirFracY;

    var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));
    var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));

    // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us
    if (tmax < 0){
        //t = tmax;
        return -1;
    }

    // if tmin > tmax, ray doesn't intersect AABB
    if (tmin > tmax){
        //t = tmax;
        return -1;
    }

    return tmin;
};
},{"../math/vec2":94,"../utils/Utils":121}],72:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Body = require('../objects/Body');

module.exports = Broadphase;

/**
 * Base class for broadphase implementations.
 * @class Broadphase
 * @constructor
 */
function Broadphase(type){

    this.type = type;

    /**
     * The resulting overlapping pairs. Will be filled with results during .getCollisionPairs().
     * @property result
     * @type {Array}
     */
    this.result = [];

    /**
     * The world to search for collision pairs in. To change it, use .setWorld()
     * @property world
     * @type {World}
     * @readOnly
     */
    this.world = null;

    /**
     * The bounding volume type to use in the broadphase algorithms. Should be set to Broadphase.AABB or Broadphase.BOUNDING_CIRCLE.
     * @property {Number} boundingVolumeType
     */
    this.boundingVolumeType = Broadphase.AABB;
}

/**
 * Axis aligned bounding box type.
 * @static
 * @property {Number} AABB
 */
Broadphase.AABB = 1;

/**
 * Bounding circle type.
 * @static
 * @property {Number} BOUNDING_CIRCLE
 */
Broadphase.BOUNDING_CIRCLE = 2;

/**
 * Set the world that we are searching for collision pairs in.
 * @method setWorld
 * @param  {World} world
 */
Broadphase.prototype.setWorld = function(world){
    this.world = world;
};

/**
 * Get all potential intersecting body pairs.
 * @method getCollisionPairs
 * @param  {World} world The world to search in.
 * @return {Array} An array of the bodies, ordered in pairs. Example: A result of [a,b,c,d] means that the potential pairs are: (a,b), (c,d).
 */
Broadphase.prototype.getCollisionPairs = function(world){};

var dist = vec2.create();

/**
 * Check whether the bounding radius of two bodies overlap.
 * @method  boundingRadiusCheck
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.boundingRadiusCheck = function(bodyA, bodyB){
    vec2.sub(dist, bodyA.position, bodyB.position);
    var d2 = vec2.squaredLength(dist),
        r = bodyA.boundingRadius + bodyB.boundingRadius;
    return d2 <= r*r;
};

/**
 * Check whether the bounding radius of two bodies overlap.
 * @method  boundingRadiusCheck
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.aabbCheck = function(bodyA, bodyB){
    return bodyA.getAABB().overlaps(bodyB.getAABB());
};

/**
 * Check whether the bounding radius of two bodies overlap.
 * @method  boundingRadiusCheck
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.prototype.boundingVolumeCheck = function(bodyA, bodyB){
    var result;

    switch(this.boundingVolumeType){
    case Broadphase.BOUNDING_CIRCLE:
        result =  Broadphase.boundingRadiusCheck(bodyA,bodyB);
        break;
    case Broadphase.AABB:
        result = Broadphase.aabbCheck(bodyA,bodyB);
        break;
    default:
        throw new Error('Bounding volume type not recognized: '+this.boundingVolumeType);
    }
    return result;
};

/**
 * Check whether two bodies are allowed to collide at all.
 * @method  canCollide
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.canCollide = function(bodyA, bodyB){
    var KINEMATIC = Body.KINEMATIC;
    var STATIC = Body.STATIC;

    // Cannot collide static bodies
    if(bodyA.type === STATIC && bodyB.type === STATIC){
        return false;
    }

    // Cannot collide static vs kinematic bodies
    if( (bodyA.type === KINEMATIC && bodyB.type === STATIC) ||
        (bodyA.type === STATIC    && bodyB.type === KINEMATIC)){
        return false;
    }

    // Cannot collide kinematic vs kinematic
    if(bodyA.type === KINEMATIC && bodyB.type === KINEMATIC){
        return false;
    }

    // Cannot collide both sleeping bodies
    if(bodyA.sleepState === Body.SLEEPING && bodyB.sleepState === Body.SLEEPING){
        return false;
    }

    // Cannot collide if one is static and the other is sleeping
    if( (bodyA.sleepState === Body.SLEEPING && bodyB.type === STATIC) ||
        (bodyB.sleepState === Body.SLEEPING && bodyA.type === STATIC)){
        return false;
    }

    return true;
};

Broadphase.NAIVE = 1;
Broadphase.SAP = 2;

},{"../math/vec2":94,"../objects/Body":95}],73:[function(require,module,exports){
var Circle = require('../shapes/Circle'),
    Plane = require('../shapes/Plane'),
    Shape = require('../shapes/Shape'),
    Particle = require('../shapes/Particle'),
    Broadphase = require('../collision/Broadphase'),
    vec2 = require('../math/vec2');

module.exports = NaiveBroadphase;

/**
 * Naive broadphase implementation. Does N^2 tests.
 *
 * @class NaiveBroadphase
 * @constructor
 * @extends Broadphase
 */
function NaiveBroadphase(){
    Broadphase.call(this, Broadphase.NAIVE);
}
NaiveBroadphase.prototype = new Broadphase();
NaiveBroadphase.prototype.constructor = NaiveBroadphase;

/**
 * Get the colliding pairs
 * @method getCollisionPairs
 * @param  {World} world
 * @return {Array}
 */
NaiveBroadphase.prototype.getCollisionPairs = function(world){
    var bodies = world.bodies,
        result = this.result;

    result.length = 0;

    for(var i=0, Ncolliding=bodies.length; i!==Ncolliding; i++){
        var bi = bodies[i];

        for(var j=0; j<i; j++){
            var bj = bodies[j];

            if(Broadphase.canCollide(bi,bj) && this.boundingVolumeCheck(bi,bj)){
                result.push(bi,bj);
            }
        }
    }

    return result;
};

/**
 * Returns all the bodies within an AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @param {array} result An array to store resulting bodies in.
 * @return {array}
 */
NaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){
    result = result || [];

    var bodies = world.bodies;
    for(var i = 0; i < bodies.length; i++){
        var b = bodies[i];

        if(b.aabbNeedsUpdate){
            b.updateAABB();
        }

        if(b.aabb.overlaps(aabb)){
            result.push(b);
        }
    }

    return result;
};
},{"../collision/Broadphase":72,"../math/vec2":94,"../shapes/Circle":103,"../shapes/Particle":107,"../shapes/Plane":108,"../shapes/Shape":109}],74:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   sub = vec2.sub
,   add = vec2.add
,   dot = vec2.dot
,   Utils = require('../utils/Utils')
,   ContactEquationPool = require('../utils/ContactEquationPool')
,   FrictionEquationPool = require('../utils/FrictionEquationPool')
,   TupleDictionary = require('../utils/TupleDictionary')
,   Equation = require('../equations/Equation')
,   ContactEquation = require('../equations/ContactEquation')
,   FrictionEquation = require('../equations/FrictionEquation')
,   Circle = require('../shapes/Circle')
,   Convex = require('../shapes/Convex')
,   Shape = require('../shapes/Shape')
,   Body = require('../objects/Body')
,   Box = require('../shapes/Box');

module.exports = Narrowphase;

// Temp things
var yAxis = vec2.fromValues(0,1);

var tmp1 = vec2.fromValues(0,0)
,   tmp2 = vec2.fromValues(0,0)
,   tmp3 = vec2.fromValues(0,0)
,   tmp4 = vec2.fromValues(0,0)
,   tmp5 = vec2.fromValues(0,0)
,   tmp6 = vec2.fromValues(0,0)
,   tmp7 = vec2.fromValues(0,0)
,   tmp8 = vec2.fromValues(0,0)
,   tmp9 = vec2.fromValues(0,0)
,   tmp10 = vec2.fromValues(0,0)
,   tmp11 = vec2.fromValues(0,0)
,   tmp12 = vec2.fromValues(0,0)
,   tmp13 = vec2.fromValues(0,0)
,   tmp14 = vec2.fromValues(0,0)
,   tmp15 = vec2.fromValues(0,0)
,   tmp16 = vec2.fromValues(0,0)
,   tmp17 = vec2.fromValues(0,0)
,   tmp18 = vec2.fromValues(0,0)
,   tmpArray = [];

/**
 * Narrowphase. Creates contacts and friction given shapes and transforms.
 * @class Narrowphase
 * @constructor
 */
function Narrowphase(){

    /**
     * @property contactEquations
     * @type {Array}
     */
    this.contactEquations = [];

    /**
     * @property frictionEquations
     * @type {Array}
     */
    this.frictionEquations = [];

    /**
     * Whether to make friction equations in the upcoming contacts.
     * @property enableFriction
     * @type {Boolean}
     */
    this.enableFriction = true;

    /**
     * Whether to make equations enabled in upcoming contacts.
     * @property enabledEquations
     * @type {Boolean}
     */
    this.enabledEquations = true;

    /**
     * The friction slip force to use when creating friction equations.
     * @property slipForce
     * @type {Number}
     */
    this.slipForce = 10.0;

    /**
     * The friction value to use in the upcoming friction equations.
     * @property frictionCoefficient
     * @type {Number}
     */
    this.frictionCoefficient = 0.3;

    /**
     * Will be the .relativeVelocity in each produced FrictionEquation.
     * @property {Number} surfaceVelocity
     */
    this.surfaceVelocity = 0;

    /**
     * Keeps track of the allocated ContactEquations.
     * @property {ContactEquationPool} contactEquationPool
     *
     * @example
     *
     *     // Allocate a few equations before starting the simulation.
     *     // This way, no contact objects need to be created on the fly in the game loop.
     *     world.narrowphase.contactEquationPool.resize(1024);
     *     world.narrowphase.frictionEquationPool.resize(1024);
     */
    this.contactEquationPool = new ContactEquationPool({ size: 32 });

    /**
     * Keeps track of the allocated ContactEquations.
     * @property {FrictionEquationPool} frictionEquationPool
     */
    this.frictionEquationPool = new FrictionEquationPool({ size: 64 });

    /**
     * The restitution value to use in the next contact equations.
     * @property restitution
     * @type {Number}
     */
    this.restitution = 0;

    /**
     * The stiffness value to use in the next contact equations.
     * @property {Number} stiffness
     */
    this.stiffness = Equation.DEFAULT_STIFFNESS;

    /**
     * The stiffness value to use in the next contact equations.
     * @property {Number} stiffness
     */
    this.relaxation = Equation.DEFAULT_RELAXATION;

    /**
     * The stiffness value to use in the next friction equations.
     * @property frictionStiffness
     * @type {Number}
     */
    this.frictionStiffness = Equation.DEFAULT_STIFFNESS;

    /**
     * The relaxation value to use in the next friction equations.
     * @property frictionRelaxation
     * @type {Number}
     */
    this.frictionRelaxation = Equation.DEFAULT_RELAXATION;

    /**
     * Enable reduction of friction equations. If disabled, a box on a plane will generate 2 contact equations and 2 friction equations. If enabled, there will be only one friction equation. Same kind of simplifications are made  for all collision types.
     * @property enableFrictionReduction
     * @type {Boolean}
     * @deprecated This flag will be removed when the feature is stable enough.
     * @default true
     */
    this.enableFrictionReduction = true;

    /**
     * Keeps track of the colliding bodies last step.
     * @private
     * @property collidingBodiesLastStep
     * @type {TupleDictionary}
     */
    this.collidingBodiesLastStep = new TupleDictionary();

    /**
     * Contact skin size value to use in the next contact equations.
     * @property {Number} contactSkinSize
     * @default 0.01
     */
    this.contactSkinSize = 0.01;
}

var bodiesOverlap_shapePositionA = vec2.create();
var bodiesOverlap_shapePositionB = vec2.create();

/**
 * @method bodiesOverlap
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 * @todo shape world transforms are wrong
 */
Narrowphase.prototype.bodiesOverlap = function(bodyA, bodyB){
    var shapePositionA = bodiesOverlap_shapePositionA;
    var shapePositionB = bodiesOverlap_shapePositionB;

    // Loop over all shapes of bodyA
    for(var k=0, Nshapesi=bodyA.shapes.length; k!==Nshapesi; k++){
        var shapeA = bodyA.shapes[k];

        bodyA.toWorldFrame(shapePositionA, shapeA.position);

        // All shapes of body j
        for(var l=0, Nshapesj=bodyB.shapes.length; l!==Nshapesj; l++){
            var shapeB = bodyB.shapes[l];

            bodyB.toWorldFrame(shapePositionB, shapeB.position);

            if(this[shapeA.type | shapeB.type](
                bodyA,
                shapeA,
                shapePositionA,
                shapeA.angle + bodyA.angle,
                bodyB,
                shapeB,
                shapePositionB,
                shapeB.angle + bodyB.angle,
                true
            )){
                return true;
            }
        }
    }

    return false;
};

/**
 * Check if the bodies were in contact since the last reset().
 * @method collidedLastStep
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Narrowphase.prototype.collidedLastStep = function(bodyA, bodyB){
    var id1 = bodyA.id|0,
        id2 = bodyB.id|0;
    return !!this.collidingBodiesLastStep.get(id1, id2);
};

/**
 * Throws away the old equations and gets ready to create new
 * @method reset
 */
Narrowphase.prototype.reset = function(){
    this.collidingBodiesLastStep.reset();

    var eqs = this.contactEquations;
    var l = eqs.length;
    while(l--){
        var eq = eqs[l],
            id1 = eq.bodyA.id,
            id2 = eq.bodyB.id;
        this.collidingBodiesLastStep.set(id1, id2, true);
    }

    var ce = this.contactEquations,
        fe = this.frictionEquations;
    for(var i=0; i<ce.length; i++){
        this.contactEquationPool.release(ce[i]);
    }
    for(var i=0; i<fe.length; i++){
        this.frictionEquationPool.release(fe[i]);
    }

    // Reset
    this.contactEquations.length = this.frictionEquations.length = 0;
};

/**
 * Creates a ContactEquation, either by reusing an existing object or creating a new one.
 * @method createContactEquation
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {ContactEquation}
 */
Narrowphase.prototype.createContactEquation = function(bodyA, bodyB, shapeA, shapeB){
    var c = this.contactEquationPool.get();
    c.bodyA = bodyA;
    c.bodyB = bodyB;
    c.shapeA = shapeA;
    c.shapeB = shapeB;
    c.restitution = this.restitution;
    c.firstImpact = !this.collidedLastStep(bodyA,bodyB);
    c.stiffness = this.stiffness;
    c.relaxation = this.relaxation;
    c.needsUpdate = true;
    c.enabled = this.enabledEquations;
    c.offset = this.contactSkinSize;

    return c;
};

/**
 * Creates a FrictionEquation, either by reusing an existing object or creating a new one.
 * @method createFrictionEquation
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {FrictionEquation}
 */
Narrowphase.prototype.createFrictionEquation = function(bodyA, bodyB, shapeA, shapeB){
    var c = this.frictionEquationPool.get();
    c.bodyA = bodyA;
    c.bodyB = bodyB;
    c.shapeA = shapeA;
    c.shapeB = shapeB;
    c.setSlipForce(this.slipForce);
    c.frictionCoefficient = this.frictionCoefficient;
    c.relativeVelocity = this.surfaceVelocity;
    c.enabled = this.enabledEquations;
    c.needsUpdate = true;
    c.stiffness = this.frictionStiffness;
    c.relaxation = this.frictionRelaxation;
    c.contactEquations.length = 0;
    return c;
};

/**
 * Creates a FrictionEquation given the data in the ContactEquation. Uses same offset vectors ri and rj, but the tangent vector will be constructed from the collision normal.
 * @method createFrictionFromContact
 * @param  {ContactEquation} contactEquation
 * @return {FrictionEquation}
 */
Narrowphase.prototype.createFrictionFromContact = function(c){
    var eq = this.createFrictionEquation(c.bodyA, c.bodyB, c.shapeA, c.shapeB);
    vec2.copy(eq.contactPointA, c.contactPointA);
    vec2.copy(eq.contactPointB, c.contactPointB);
    vec2.rotate90cw(eq.t, c.normalA);
    eq.contactEquations.push(c);
    return eq;
};

// Take the average N latest contact point on the plane.
Narrowphase.prototype.createFrictionFromAverage = function(numContacts){
    var c = this.contactEquations[this.contactEquations.length - 1];
    var eq = this.createFrictionEquation(c.bodyA, c.bodyB, c.shapeA, c.shapeB);
    var bodyA = c.bodyA;
    var bodyB = c.bodyB;
    vec2.set(eq.contactPointA, 0, 0);
    vec2.set(eq.contactPointB, 0, 0);
    vec2.set(eq.t, 0, 0);
    for(var i=0; i!==numContacts; i++){
        c = this.contactEquations[this.contactEquations.length - 1 - i];
        if(c.bodyA === bodyA){
            vec2.add(eq.t, eq.t, c.normalA);
            vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);
            vec2.add(eq.contactPointB, eq.contactPointB, c.contactPointB);
        } else {
            vec2.sub(eq.t, eq.t, c.normalA);
            vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointB);
            vec2.add(eq.contactPointB, eq.contactPointB, c.contactPointA);
        }
        eq.contactEquations.push(c);
    }

    var invNumContacts = 1/numContacts;
    vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);
    vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);
    vec2.normalize(eq.t, eq.t);
    vec2.rotate90cw(eq.t, eq.t);
    return eq;
};

/**
 * Convex/line narrowphase
 * @method convexLine
 * @param  {Body}       convexBody
 * @param  {Convex}     convexShape
 * @param  {Array}      convexOffset
 * @param  {Number}     convexAngle
 * @param  {Body}       lineBody
 * @param  {Line}       lineShape
 * @param  {Array}      lineOffset
 * @param  {Number}     lineAngle
 * @param {boolean}     justTest
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.LINE | Shape.CONVEX] =
Narrowphase.prototype.convexLine = function(
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    lineBody,
    lineShape,
    lineOffset,
    lineAngle,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

/**
 * Line/box narrowphase
 * @method lineBox
 * @param  {Body}       lineBody
 * @param  {Line}       lineShape
 * @param  {Array}      lineOffset
 * @param  {Number}     lineAngle
 * @param  {Body}       boxBody
 * @param  {Box}  boxShape
 * @param  {Array}      boxOffset
 * @param  {Number}     boxAngle
 * @param  {Boolean}    justTest
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.LINE | Shape.BOX] =
Narrowphase.prototype.lineBox = function(
    lineBody,
    lineShape,
    lineOffset,
    lineAngle,
    boxBody,
    boxShape,
    boxOffset,
    boxAngle,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

function setConvexToCapsuleShapeMiddle(convexShape, capsuleShape){
    vec2.set(convexShape.vertices[0], -capsuleShape.length * 0.5, -capsuleShape.radius);
    vec2.set(convexShape.vertices[1],  capsuleShape.length * 0.5, -capsuleShape.radius);
    vec2.set(convexShape.vertices[2],  capsuleShape.length * 0.5,  capsuleShape.radius);
    vec2.set(convexShape.vertices[3], -capsuleShape.length * 0.5,  capsuleShape.radius);
}

var convexCapsule_tempRect = new Box({ width: 1, height: 1 }),
    convexCapsule_tempVec = vec2.create();

/**
 * Convex/capsule narrowphase
 * @method convexCapsule
 * @param  {Body}       convexBody
 * @param  {Convex}     convexShape
 * @param  {Array}      convexPosition
 * @param  {Number}     convexAngle
 * @param  {Body}       capsuleBody
 * @param  {Capsule}    capsuleShape
 * @param  {Array}      capsulePosition
 * @param  {Number}     capsuleAngle
 */
Narrowphase.prototype[Shape.CAPSULE | Shape.CONVEX] =
Narrowphase.prototype[Shape.CAPSULE | Shape.BOX] =
Narrowphase.prototype.convexCapsule = function(
    convexBody,
    convexShape,
    convexPosition,
    convexAngle,
    capsuleBody,
    capsuleShape,
    capsulePosition,
    capsuleAngle,
    justTest
){

    // Check the circles
    // Add offsets!
    var circlePos = convexCapsule_tempVec;
    vec2.set(circlePos, capsuleShape.length/2,0);
    vec2.rotate(circlePos,circlePos,capsuleAngle);
    vec2.add(circlePos,circlePos,capsulePosition);
    var result1 = this.circleConvex(capsuleBody,capsuleShape,circlePos,capsuleAngle, convexBody,convexShape,convexPosition,convexAngle, justTest, capsuleShape.radius);

    vec2.set(circlePos,-capsuleShape.length/2, 0);
    vec2.rotate(circlePos,circlePos,capsuleAngle);
    vec2.add(circlePos,circlePos,capsulePosition);
    var result2 = this.circleConvex(capsuleBody,capsuleShape,circlePos,capsuleAngle, convexBody,convexShape,convexPosition,convexAngle, justTest, capsuleShape.radius);

    if(justTest && (result1 || result2)){
        return true;
    }

    // Check center rect
    var r = convexCapsule_tempRect;
    setConvexToCapsuleShapeMiddle(r,capsuleShape);
    var result = this.convexConvex(convexBody,convexShape,convexPosition,convexAngle, capsuleBody,r,capsulePosition,capsuleAngle, justTest);

    return result + result1 + result2;
};

/**
 * Capsule/line narrowphase
 * @method lineCapsule
 * @param  {Body}       lineBody
 * @param  {Line}       lineShape
 * @param  {Array}      linePosition
 * @param  {Number}     lineAngle
 * @param  {Body}       capsuleBody
 * @param  {Capsule}    capsuleShape
 * @param  {Array}      capsulePosition
 * @param  {Number}     capsuleAngle
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.CAPSULE | Shape.LINE] =
Narrowphase.prototype.lineCapsule = function(
    lineBody,
    lineShape,
    linePosition,
    lineAngle,
    capsuleBody,
    capsuleShape,
    capsulePosition,
    capsuleAngle,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

var capsuleCapsule_tempVec1 = vec2.create();
var capsuleCapsule_tempVec2 = vec2.create();
var capsuleCapsule_tempRect1 = new Box({ width: 1, height: 1 });

/**
 * Capsule/capsule narrowphase
 * @method capsuleCapsule
 * @param  {Body}       bi
 * @param  {Capsule}    si
 * @param  {Array}      xi
 * @param  {Number}     ai
 * @param  {Body}       bj
 * @param  {Capsule}    sj
 * @param  {Array}      xj
 * @param  {Number}     aj
 */
Narrowphase.prototype[Shape.CAPSULE | Shape.CAPSULE] =
Narrowphase.prototype.capsuleCapsule = function(bi,si,xi,ai, bj,sj,xj,aj, justTest){

    var enableFrictionBefore;

    // Check the circles
    // Add offsets!
    var circlePosi = capsuleCapsule_tempVec1,
        circlePosj = capsuleCapsule_tempVec2;

    var numContacts = 0;


    // Need 4 circle checks, between all
    for(var i=0; i<2; i++){

        vec2.set(circlePosi,(i===0?-1:1)*si.length/2,0);
        vec2.rotate(circlePosi,circlePosi,ai);
        vec2.add(circlePosi,circlePosi,xi);

        for(var j=0; j<2; j++){

            vec2.set(circlePosj,(j===0?-1:1)*sj.length/2, 0);
            vec2.rotate(circlePosj,circlePosj,aj);
            vec2.add(circlePosj,circlePosj,xj);

            // Temporarily turn off friction
            if(this.enableFrictionReduction){
                enableFrictionBefore = this.enableFriction;
                this.enableFriction = false;
            }

            var result = this.circleCircle(bi,si,circlePosi,ai, bj,sj,circlePosj,aj, justTest, si.radius, sj.radius);

            if(this.enableFrictionReduction){
                this.enableFriction = enableFrictionBefore;
            }

            if(justTest && result){
                return true;
            }

            numContacts += result;
        }
    }

    if(this.enableFrictionReduction){
        // Temporarily turn off friction
        enableFrictionBefore = this.enableFriction;
        this.enableFriction = false;
    }

    // Check circles against the center boxs
    var rect = capsuleCapsule_tempRect1;
    setConvexToCapsuleShapeMiddle(rect,si);
    var result1 = this.convexCapsule(bi,rect,xi,ai, bj,sj,xj,aj, justTest);

    if(this.enableFrictionReduction){
        this.enableFriction = enableFrictionBefore;
    }

    if(justTest && result1){
        return true;
    }
    numContacts += result1;

    if(this.enableFrictionReduction){
        // Temporarily turn off friction
        var enableFrictionBefore = this.enableFriction;
        this.enableFriction = false;
    }

    setConvexToCapsuleShapeMiddle(rect,sj);
    var result2 = this.convexCapsule(bj,rect,xj,aj, bi,si,xi,ai, justTest);

    if(this.enableFrictionReduction){
        this.enableFriction = enableFrictionBefore;
    }

    if(justTest && result2){
        return true;
    }
    numContacts += result2;

    if(this.enableFrictionReduction){
        if(numContacts && this.enableFriction){
            this.frictionEquations.push(this.createFrictionFromAverage(numContacts));
        }
    }

    return numContacts;
};

/**
 * Line/line narrowphase
 * @method lineLine
 * @param  {Body}       bodyA
 * @param  {Line}       shapeA
 * @param  {Array}      positionA
 * @param  {Number}     angleA
 * @param  {Body}       bodyB
 * @param  {Line}       shapeB
 * @param  {Array}      positionB
 * @param  {Number}     angleB
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.LINE | Shape.LINE] =
Narrowphase.prototype.lineLine = function(
    bodyA,
    shapeA,
    positionA,
    angleA,
    bodyB,
    shapeB,
    positionB,
    angleB,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

/**
 * Plane/line Narrowphase
 * @method planeLine
 * @param  {Body}   planeBody
 * @param  {Plane}  planeShape
 * @param  {Array}  planeOffset
 * @param  {Number} planeAngle
 * @param  {Body}   lineBody
 * @param  {Line}   lineShape
 * @param  {Array}  lineOffset
 * @param  {Number} lineAngle
 */
Narrowphase.prototype[Shape.PLANE | Shape.LINE] =
Narrowphase.prototype.planeLine = function(planeBody, planeShape, planeOffset, planeAngle,
                                           lineBody,  lineShape,  lineOffset,  lineAngle, justTest){
    var worldVertex0 = tmp1,
        worldVertex1 = tmp2,
        worldVertex01 = tmp3,
        worldVertex11 = tmp4,
        worldEdge = tmp5,
        worldEdgeUnit = tmp6,
        dist = tmp7,
        worldNormal = tmp8,
        worldTangent = tmp9,
        verts = tmpArray,
        numContacts = 0;

    // Get start and end points
    vec2.set(worldVertex0, -lineShape.length/2, 0);
    vec2.set(worldVertex1,  lineShape.length/2, 0);

    // Not sure why we have to use worldVertex*1 here, but it won't work otherwise. Tired.
    vec2.rotate(worldVertex01, worldVertex0, lineAngle);
    vec2.rotate(worldVertex11, worldVertex1, lineAngle);

    add(worldVertex01, worldVertex01, lineOffset);
    add(worldVertex11, worldVertex11, lineOffset);

    vec2.copy(worldVertex0,worldVertex01);
    vec2.copy(worldVertex1,worldVertex11);

    // Get vector along the line
    sub(worldEdge, worldVertex1, worldVertex0);
    vec2.normalize(worldEdgeUnit, worldEdge);

    // Get tangent to the edge.
    vec2.rotate90cw(worldTangent, worldEdgeUnit);

    vec2.rotate(worldNormal, yAxis, planeAngle);

    // Check line ends
    verts[0] = worldVertex0;
    verts[1] = worldVertex1;
    for(var i=0; i<verts.length; i++){
        var v = verts[i];

        sub(dist, v, planeOffset);

        var d = dot(dist,worldNormal);

        if(d < 0){

            if(justTest){
                return true;
            }

            var c = this.createContactEquation(planeBody,lineBody,planeShape,lineShape);
            numContacts++;

            vec2.copy(c.normalA, worldNormal);
            vec2.normalize(c.normalA,c.normalA);

            // distance vector along plane normal
            vec2.scale(dist, worldNormal, d);

            // Vector from plane center to contact
            sub(c.contactPointA, v, dist);
            sub(c.contactPointA, c.contactPointA, planeBody.position);

            // From line center to contact
            sub(c.contactPointB, v,    lineOffset);
            add(c.contactPointB, c.contactPointB, lineOffset);
            sub(c.contactPointB, c.contactPointB, lineBody.position);

            this.contactEquations.push(c);

            if(!this.enableFrictionReduction){
                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }
            }
        }
    }

    if(justTest){
        return false;
    }

    if(!this.enableFrictionReduction){
        if(numContacts && this.enableFriction){
            this.frictionEquations.push(this.createFrictionFromAverage(numContacts));
        }
    }

    return numContacts;
};

Narrowphase.prototype[Shape.PARTICLE | Shape.CAPSULE] =
Narrowphase.prototype.particleCapsule = function(
    particleBody,
    particleShape,
    particlePosition,
    particleAngle,
    capsuleBody,
    capsuleShape,
    capsulePosition,
    capsuleAngle,
    justTest
){
    return this.circleLine(particleBody,particleShape,particlePosition,particleAngle, capsuleBody,capsuleShape,capsulePosition,capsuleAngle, justTest, capsuleShape.radius, 0);
};

/**
 * Circle/line Narrowphase
 * @method circleLine
 * @param  {Body} circleBody
 * @param  {Circle} circleShape
 * @param  {Array} circleOffset
 * @param  {Number} circleAngle
 * @param  {Body} lineBody
 * @param  {Line} lineShape
 * @param  {Array} lineOffset
 * @param  {Number} lineAngle
 * @param {Boolean} justTest If set to true, this function will return the result (intersection or not) without adding equations.
 * @param {Number} lineRadius Radius to add to the line. Can be used to test Capsules.
 * @param {Number} circleRadius If set, this value overrides the circle shape radius.
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.LINE] =
Narrowphase.prototype.circleLine = function(
    circleBody,
    circleShape,
    circleOffset,
    circleAngle,
    lineBody,
    lineShape,
    lineOffset,
    lineAngle,
    justTest,
    lineRadius,
    circleRadius
){
    var lineRadius = lineRadius || 0,
        circleRadius = typeof(circleRadius)!=="undefined" ? circleRadius : circleShape.radius,

        orthoDist = tmp1,
        lineToCircleOrthoUnit = tmp2,
        projectedPoint = tmp3,
        centerDist = tmp4,
        worldTangent = tmp5,
        worldEdge = tmp6,
        worldEdgeUnit = tmp7,
        worldVertex0 = tmp8,
        worldVertex1 = tmp9,
        worldVertex01 = tmp10,
        worldVertex11 = tmp11,
        dist = tmp12,
        lineToCircle = tmp13,
        lineEndToLineRadius = tmp14,

        verts = tmpArray;

    // Get start and end points
    vec2.set(worldVertex0, -lineShape.length/2, 0);
    vec2.set(worldVertex1,  lineShape.length/2, 0);

    // Not sure why we have to use worldVertex*1 here, but it won't work otherwise. Tired.
    vec2.rotate(worldVertex01, worldVertex0, lineAngle);
    vec2.rotate(worldVertex11, worldVertex1, lineAngle);

    add(worldVertex01, worldVertex01, lineOffset);
    add(worldVertex11, worldVertex11, lineOffset);

    vec2.copy(worldVertex0,worldVertex01);
    vec2.copy(worldVertex1,worldVertex11);

    // Get vector along the line
    sub(worldEdge, worldVertex1, worldVertex0);
    vec2.normalize(worldEdgeUnit, worldEdge);

    // Get tangent to the edge.
    vec2.rotate90cw(worldTangent, worldEdgeUnit);

    // Check distance from the plane spanned by the edge vs the circle
    sub(dist, circleOffset, worldVertex0);
    var d = dot(dist, worldTangent); // Distance from center of line to circle center
    sub(centerDist, worldVertex0, lineOffset);

    sub(lineToCircle, circleOffset, lineOffset);

    var radiusSum = circleRadius + lineRadius;

    if(Math.abs(d) < radiusSum){

        // Now project the circle onto the edge
        vec2.scale(orthoDist, worldTangent, d);
        sub(projectedPoint, circleOffset, orthoDist);

        // Add the missing line radius
        vec2.scale(lineToCircleOrthoUnit, worldTangent, dot(worldTangent, lineToCircle));
        vec2.normalize(lineToCircleOrthoUnit,lineToCircleOrthoUnit);
        vec2.scale(lineToCircleOrthoUnit, lineToCircleOrthoUnit, lineRadius);
        add(projectedPoint,projectedPoint,lineToCircleOrthoUnit);

        // Check if the point is within the edge span
        var pos =  dot(worldEdgeUnit, projectedPoint);
        var pos0 = dot(worldEdgeUnit, worldVertex0);
        var pos1 = dot(worldEdgeUnit, worldVertex1);

        if(pos > pos0 && pos < pos1){
            // We got contact!

            if(justTest){
                return true;
            }

            var c = this.createContactEquation(circleBody,lineBody,circleShape,lineShape);

            vec2.scale(c.normalA, orthoDist, -1);
            vec2.normalize(c.normalA, c.normalA);

            vec2.scale( c.contactPointA, c.normalA,  circleRadius);
            add(c.contactPointA, c.contactPointA, circleOffset);
            sub(c.contactPointA, c.contactPointA, circleBody.position);

            sub(c.contactPointB, projectedPoint, lineOffset);
            add(c.contactPointB, c.contactPointB, lineOffset);
            sub(c.contactPointB, c.contactPointB, lineBody.position);

            this.contactEquations.push(c);

            if(this.enableFriction){
                this.frictionEquations.push(this.createFrictionFromContact(c));
            }

            return 1;
        }
    }

    // Add corner
    verts[0] = worldVertex0;
    verts[1] = worldVertex1;

    for(var i=0; i<verts.length; i++){
        var v = verts[i];

        sub(dist, v, circleOffset);

        if(vec2.squaredLength(dist) < Math.pow(radiusSum, 2)){

            if(justTest){
                return true;
            }

            var c = this.createContactEquation(circleBody,lineBody,circleShape,lineShape);

            vec2.copy(c.normalA, dist);
            vec2.normalize(c.normalA,c.normalA);

            // Vector from circle to contact point is the normal times the circle radius
            vec2.scale(c.contactPointA, c.normalA, circleRadius);
            add(c.contactPointA, c.contactPointA, circleOffset);
            sub(c.contactPointA, c.contactPointA, circleBody.position);

            sub(c.contactPointB, v, lineOffset);
            vec2.scale(lineEndToLineRadius, c.normalA, -lineRadius);
            add(c.contactPointB, c.contactPointB, lineEndToLineRadius);
            add(c.contactPointB, c.contactPointB, lineOffset);
            sub(c.contactPointB, c.contactPointB, lineBody.position);

            this.contactEquations.push(c);

            if(this.enableFriction){
                this.frictionEquations.push(this.createFrictionFromContact(c));
            }

            return 1;
        }
    }

    return 0;
};

/**
 * Circle/capsule Narrowphase
 * @method circleCapsule
 * @param  {Body}   bi
 * @param  {Circle} si
 * @param  {Array}  xi
 * @param  {Number} ai
 * @param  {Body}   bj
 * @param  {Line}   sj
 * @param  {Array}  xj
 * @param  {Number} aj
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.CAPSULE] =
Narrowphase.prototype.circleCapsule = function(bi,si,xi,ai, bj,sj,xj,aj, justTest){
    return this.circleLine(bi,si,xi,ai, bj,sj,xj,aj, justTest, sj.radius);
};

/**
 * Circle/convex Narrowphase.
 * @method circleConvex
 * @param  {Body} circleBody
 * @param  {Circle} circleShape
 * @param  {Array} circleOffset
 * @param  {Number} circleAngle
 * @param  {Body} convexBody
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param  {Boolean} justTest
 * @param  {Number} circleRadius
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.CONVEX] =
Narrowphase.prototype[Shape.CIRCLE | Shape.BOX] =
Narrowphase.prototype.circleConvex = function(
    circleBody,
    circleShape,
    circleOffset,
    circleAngle,
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    justTest,
    circleRadius
){
    var circleRadius = typeof(circleRadius)==="number" ? circleRadius : circleShape.radius;

    var worldVertex0 = tmp1,
        worldVertex1 = tmp2,
        worldEdge = tmp3,
        worldEdgeUnit = tmp4,
        worldNormal = tmp5,
        centerDist = tmp6,
        convexToCircle = tmp7,
        orthoDist = tmp8,
        projectedPoint = tmp9,
        dist = tmp10,
        worldVertex = tmp11,

        closestEdge = -1,
        closestEdgeDistance = null,
        closestEdgeOrthoDist = tmp12,
        closestEdgeProjectedPoint = tmp13,
        candidate = tmp14,
        candidateDist = tmp15,
        minCandidate = tmp16,

        found = false,
        minCandidateDistance = Number.MAX_VALUE;

    var numReported = 0;

    // New algorithm:
    // 1. Check so center of circle is not inside the polygon. If it is, this wont work...
    // 2. For each edge
    // 2. 1. Get point on circle that is closest to the edge (scale normal with -radius)
    // 2. 2. Check if point is inside.

    var verts = convexShape.vertices;

    // Check all edges first
    for(var i=0; i!==verts.length+1; i++){
        var v0 = verts[i%verts.length],
            v1 = verts[(i+1)%verts.length];

        vec2.rotate(worldVertex0, v0, convexAngle);
        vec2.rotate(worldVertex1, v1, convexAngle);
        add(worldVertex0, worldVertex0, convexOffset);
        add(worldVertex1, worldVertex1, convexOffset);
        sub(worldEdge, worldVertex1, worldVertex0);

        vec2.normalize(worldEdgeUnit, worldEdge);

        // Get tangent to the edge. Points out of the Convex
        vec2.rotate90cw(worldNormal, worldEdgeUnit);

        // Get point on circle, closest to the polygon
        vec2.scale(candidate,worldNormal,-circleShape.radius);
        add(candidate,candidate,circleOffset);

        if(pointInConvex(candidate,convexShape,convexOffset,convexAngle)){

            vec2.sub(candidateDist,worldVertex0,candidate);
            var candidateDistance = Math.abs(vec2.dot(candidateDist,worldNormal));

            if(candidateDistance < minCandidateDistance){
                vec2.copy(minCandidate,candidate);
                minCandidateDistance = candidateDistance;
                vec2.scale(closestEdgeProjectedPoint,worldNormal,candidateDistance);
                vec2.add(closestEdgeProjectedPoint,closestEdgeProjectedPoint,candidate);
                found = true;
            }
        }
    }

    if(found){

        if(justTest){
            return true;
        }

        var c = this.createContactEquation(circleBody,convexBody,circleShape,convexShape);
        vec2.sub(c.normalA, minCandidate, circleOffset);
        vec2.normalize(c.normalA, c.normalA);

        vec2.scale(c.contactPointA,  c.normalA, circleRadius);
        add(c.contactPointA, c.contactPointA, circleOffset);
        sub(c.contactPointA, c.contactPointA, circleBody.position);

        sub(c.contactPointB, closestEdgeProjectedPoint, convexOffset);
        add(c.contactPointB, c.contactPointB, convexOffset);
        sub(c.contactPointB, c.contactPointB, convexBody.position);

        this.contactEquations.push(c);

        if(this.enableFriction){
            this.frictionEquations.push( this.createFrictionFromContact(c) );
        }

        return 1;
    }

    // Check all vertices
    if(circleRadius > 0){
        for(var i=0; i<verts.length; i++){
            var localVertex = verts[i];
            vec2.rotate(worldVertex, localVertex, convexAngle);
            add(worldVertex, worldVertex, convexOffset);

            sub(dist, worldVertex, circleOffset);
            if(vec2.squaredLength(dist) < Math.pow(circleRadius, 2)){

                if(justTest){
                    return true;
                }

                var c = this.createContactEquation(circleBody,convexBody,circleShape,convexShape);

                vec2.copy(c.normalA, dist);
                vec2.normalize(c.normalA,c.normalA);

                // Vector from circle to contact point is the normal times the circle radius
                vec2.scale(c.contactPointA, c.normalA, circleRadius);
                add(c.contactPointA, c.contactPointA, circleOffset);
                sub(c.contactPointA, c.contactPointA, circleBody.position);

                sub(c.contactPointB, worldVertex, convexOffset);
                add(c.contactPointB, c.contactPointB, convexOffset);
                sub(c.contactPointB, c.contactPointB, convexBody.position);

                this.contactEquations.push(c);

                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }

                return 1;
            }
        }
    }

    return 0;
};

var pic_worldVertex0 = vec2.create(),
    pic_worldVertex1 = vec2.create(),
    pic_r0 = vec2.create(),
    pic_r1 = vec2.create();

/*
 * Check if a point is in a polygon
 */
function pointInConvex(worldPoint,convexShape,convexOffset,convexAngle){
    var worldVertex0 = pic_worldVertex0,
        worldVertex1 = pic_worldVertex1,
        r0 = pic_r0,
        r1 = pic_r1,
        point = worldPoint,
        verts = convexShape.vertices,
        lastCross = null;
    for(var i=0; i!==verts.length+1; i++){
        var v0 = verts[i%verts.length],
            v1 = verts[(i+1)%verts.length];

        // Transform vertices to world
        // @todo The point should be transformed to local coordinates in the convex, no need to transform each vertex
        vec2.rotate(worldVertex0, v0, convexAngle);
        vec2.rotate(worldVertex1, v1, convexAngle);
        add(worldVertex0, worldVertex0, convexOffset);
        add(worldVertex1, worldVertex1, convexOffset);

        sub(r0, worldVertex0, point);
        sub(r1, worldVertex1, point);
        var cross = vec2.crossLength(r0,r1);

        if(lastCross===null){
            lastCross = cross;
        }

        // If we got a different sign of the distance vector, the point is out of the polygon
        if(cross*lastCross <= 0){
            return false;
        }
        lastCross = cross;
    }
    return true;
}

/**
 * Particle/convex Narrowphase
 * @method particleConvex
 * @param  {Body} particleBody
 * @param  {Particle} particleShape
 * @param  {Array} particleOffset
 * @param  {Number} particleAngle
 * @param  {Body} convexBody
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param {Boolean} justTest
 * @todo use pointInConvex and code more similar to circleConvex
 * @todo don't transform each vertex, but transform the particle position to convex-local instead
 */
Narrowphase.prototype[Shape.PARTICLE | Shape.CONVEX] =
Narrowphase.prototype[Shape.PARTICLE | Shape.BOX] =
Narrowphase.prototype.particleConvex = function(
    particleBody,
    particleShape,
    particleOffset,
    particleAngle,
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    justTest
){
    var worldVertex0 = tmp1,
        worldVertex1 = tmp2,
        worldEdge = tmp3,
        worldEdgeUnit = tmp4,
        worldTangent = tmp5,
        centerDist = tmp6,
        convexToparticle = tmp7,
        orthoDist = tmp8,
        projectedPoint = tmp9,
        dist = tmp10,
        worldVertex = tmp11,
        closestEdge = -1,
        closestEdgeDistance = null,
        closestEdgeOrthoDist = tmp12,
        closestEdgeProjectedPoint = tmp13,
        r0 = tmp14, // vector from particle to vertex0
        r1 = tmp15,
        localPoint = tmp16,
        candidateDist = tmp17,
        minEdgeNormal = tmp18,
        minCandidateDistance = Number.MAX_VALUE;

    var numReported = 0,
        found = false,
        verts = convexShape.vertices;

    // Check if the particle is in the polygon at all
    if(!pointInConvex(particleOffset,convexShape,convexOffset,convexAngle)){
        return 0;
    }

    if(justTest){
        return true;
    }

    // Check edges first
    var lastCross = null;
    for(var i=0; i!==verts.length+1; i++){
        var v0 = verts[i%verts.length],
            v1 = verts[(i+1)%verts.length];

        // Transform vertices to world
        vec2.rotate(worldVertex0, v0, convexAngle);
        vec2.rotate(worldVertex1, v1, convexAngle);
        add(worldVertex0, worldVertex0, convexOffset);
        add(worldVertex1, worldVertex1, convexOffset);

        // Get world edge
        sub(worldEdge, worldVertex1, worldVertex0);
        vec2.normalize(worldEdgeUnit, worldEdge);

        // Get tangent to the edge. Points out of the Convex
        vec2.rotate90cw(worldTangent, worldEdgeUnit);

        // Check distance from the infinite line (spanned by the edge) to the particle
        sub(dist, particleOffset, worldVertex0);
        var d = dot(dist, worldTangent);
        sub(centerDist, worldVertex0, convexOffset);

        sub(convexToparticle, particleOffset, convexOffset);

        vec2.sub(candidateDist,worldVertex0,particleOffset);
        var candidateDistance = Math.abs(vec2.dot(candidateDist,worldTangent));

        if(candidateDistance < minCandidateDistance){
            minCandidateDistance = candidateDistance;
            vec2.scale(closestEdgeProjectedPoint,worldTangent,candidateDistance);
            vec2.add(closestEdgeProjectedPoint,closestEdgeProjectedPoint,particleOffset);
            vec2.copy(minEdgeNormal,worldTangent);
            found = true;
        }
    }

    if(found){
        var c = this.createContactEquation(particleBody,convexBody,particleShape,convexShape);

        vec2.scale(c.normalA, minEdgeNormal, -1);
        vec2.normalize(c.normalA, c.normalA);

        // Particle has no extent to the contact point
        vec2.set(c.contactPointA,  0, 0);
        add(c.contactPointA, c.contactPointA, particleOffset);
        sub(c.contactPointA, c.contactPointA, particleBody.position);

        // From convex center to point
        sub(c.contactPointB, closestEdgeProjectedPoint, convexOffset);
        add(c.contactPointB, c.contactPointB, convexOffset);
        sub(c.contactPointB, c.contactPointB, convexBody.position);

        this.contactEquations.push(c);

        if(this.enableFriction){
            this.frictionEquations.push( this.createFrictionFromContact(c) );
        }

        return 1;
    }


    return 0;
};

/**
 * Circle/circle Narrowphase
 * @method circleCircle
 * @param  {Body} bodyA
 * @param  {Circle} shapeA
 * @param  {Array} offsetA
 * @param  {Number} angleA
 * @param  {Body} bodyB
 * @param  {Circle} shapeB
 * @param  {Array} offsetB
 * @param  {Number} angleB
 * @param {Boolean} justTest
 * @param {Number} [radiusA] Optional radius to use for shapeA
 * @param {Number} [radiusB] Optional radius to use for shapeB
 */
Narrowphase.prototype[Shape.CIRCLE] =
Narrowphase.prototype.circleCircle = function(
    bodyA,
    shapeA,
    offsetA,
    angleA,
    bodyB,
    shapeB,
    offsetB,
    angleB,
    justTest,
    radiusA,
    radiusB
){

    var dist = tmp1,
        radiusA = radiusA || shapeA.radius,
        radiusB = radiusB || shapeB.radius;

    sub(dist,offsetA,offsetB);
    var r = radiusA + radiusB;
    if(vec2.squaredLength(dist) > Math.pow(r,2)){
        return 0;
    }

    if(justTest){
        return true;
    }

    var c = this.createContactEquation(bodyA,bodyB,shapeA,shapeB);
    sub(c.normalA, offsetB, offsetA);
    vec2.normalize(c.normalA,c.normalA);

    vec2.scale( c.contactPointA, c.normalA,  radiusA);
    vec2.scale( c.contactPointB, c.normalA, -radiusB);

    add(c.contactPointA, c.contactPointA, offsetA);
    sub(c.contactPointA, c.contactPointA, bodyA.position);

    add(c.contactPointB, c.contactPointB, offsetB);
    sub(c.contactPointB, c.contactPointB, bodyB.position);

    this.contactEquations.push(c);

    if(this.enableFriction){
        this.frictionEquations.push(this.createFrictionFromContact(c));
    }
    return 1;
};

/**
 * Plane/Convex Narrowphase
 * @method planeConvex
 * @param  {Body} planeBody
 * @param  {Plane} planeShape
 * @param  {Array} planeOffset
 * @param  {Number} planeAngle
 * @param  {Body} convexBody
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param {Boolean} justTest
 */
Narrowphase.prototype[Shape.PLANE | Shape.CONVEX] =
Narrowphase.prototype[Shape.PLANE | Shape.BOX] =
Narrowphase.prototype.planeConvex = function(
    planeBody,
    planeShape,
    planeOffset,
    planeAngle,
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    justTest
){
    var worldVertex = tmp1,
        worldNormal = tmp2,
        dist = tmp3;

    var numReported = 0;
    vec2.rotate(worldNormal, yAxis, planeAngle);

    for(var i=0; i!==convexShape.vertices.length; i++){
        var v = convexShape.vertices[i];
        vec2.rotate(worldVertex, v, convexAngle);
        add(worldVertex, worldVertex, convexOffset);

        sub(dist, worldVertex, planeOffset);

        if(dot(dist,worldNormal) <= 0){

            if(justTest){
                return true;
            }

            // Found vertex
            numReported++;

            var c = this.createContactEquation(planeBody,convexBody,planeShape,convexShape);

            sub(dist, worldVertex, planeOffset);

            vec2.copy(c.normalA, worldNormal);

            var d = dot(dist, c.normalA);
            vec2.scale(dist, c.normalA, d);

            // rj is from convex center to contact
            sub(c.contactPointB, worldVertex, convexBody.position);


            // ri is from plane center to contact
            sub( c.contactPointA, worldVertex, dist);
            sub( c.contactPointA, c.contactPointA, planeBody.position);

            this.contactEquations.push(c);

            if(!this.enableFrictionReduction){
                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }
            }
        }
    }

    if(this.enableFrictionReduction){
        if(this.enableFriction && numReported){
            this.frictionEquations.push(this.createFrictionFromAverage(numReported));
        }
    }

    return numReported;
};

/**
 * Narrowphase for particle vs plane
 * @method particlePlane
 * @param  {Body}       particleBody
 * @param  {Particle}   particleShape
 * @param  {Array}      particleOffset
 * @param  {Number}     particleAngle
 * @param  {Body}       planeBody
 * @param  {Plane}      planeShape
 * @param  {Array}      planeOffset
 * @param  {Number}     planeAngle
 * @param {Boolean}     justTest
 */
Narrowphase.prototype[Shape.PARTICLE | Shape.PLANE] =
Narrowphase.prototype.particlePlane = function(
    particleBody,
    particleShape,
    particleOffset,
    particleAngle,
    planeBody,
    planeShape,
    planeOffset,
    planeAngle,
    justTest
){
    var dist = tmp1,
        worldNormal = tmp2;

    planeAngle = planeAngle || 0;

    sub(dist, particleOffset, planeOffset);
    vec2.rotate(worldNormal, yAxis, planeAngle);

    var d = dot(dist, worldNormal);

    if(d > 0){
        return 0;
    }
    if(justTest){
        return true;
    }

    var c = this.createContactEquation(planeBody,particleBody,planeShape,particleShape);

    vec2.copy(c.normalA, worldNormal);
    vec2.scale( dist, c.normalA, d );
    // dist is now the distance vector in the normal direction

    // ri is the particle position projected down onto the plane, from the plane center
    sub( c.contactPointA, particleOffset, dist);
    sub( c.contactPointA, c.contactPointA, planeBody.position);

    // rj is from the body center to the particle center
    sub( c.contactPointB, particleOffset, particleBody.position );

    this.contactEquations.push(c);

    if(this.enableFriction){
        this.frictionEquations.push(this.createFrictionFromContact(c));
    }
    return 1;
};

/**
 * Circle/Particle Narrowphase
 * @method circleParticle
 * @param  {Body} circleBody
 * @param  {Circle} circleShape
 * @param  {Array} circleOffset
 * @param  {Number} circleAngle
 * @param  {Body} particleBody
 * @param  {Particle} particleShape
 * @param  {Array} particleOffset
 * @param  {Number} particleAngle
 * @param  {Boolean} justTest
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.PARTICLE] =
Narrowphase.prototype.circleParticle = function(
    circleBody,
    circleShape,
    circleOffset,
    circleAngle,
    particleBody,
    particleShape,
    particleOffset,
    particleAngle,
    justTest
){
    var dist = tmp1;

    sub(dist, particleOffset, circleOffset);
    if(vec2.squaredLength(dist) > Math.pow(circleShape.radius, 2)){
        return 0;
    }
    if(justTest){
        return true;
    }

    var c = this.createContactEquation(circleBody,particleBody,circleShape,particleShape);
    vec2.copy(c.normalA, dist);
    vec2.normalize(c.normalA,c.normalA);

    // Vector from circle to contact point is the normal times the circle radius
    vec2.scale(c.contactPointA, c.normalA, circleShape.radius);
    add(c.contactPointA, c.contactPointA, circleOffset);
    sub(c.contactPointA, c.contactPointA, circleBody.position);

    // Vector from particle center to contact point is zero
    sub(c.contactPointB, particleOffset, particleBody.position);

    this.contactEquations.push(c);

    if(this.enableFriction){
        this.frictionEquations.push(this.createFrictionFromContact(c));
    }

    return 1;
};

var planeCapsule_tmpCircle = new Circle({ radius: 1 }),
    planeCapsule_tmp1 = vec2.create(),
    planeCapsule_tmp2 = vec2.create(),
    planeCapsule_tmp3 = vec2.create();

/**
 * @method planeCapsule
 * @param  {Body} planeBody
 * @param  {Circle} planeShape
 * @param  {Array} planeOffset
 * @param  {Number} planeAngle
 * @param  {Body} capsuleBody
 * @param  {Particle} capsuleShape
 * @param  {Array} capsuleOffset
 * @param  {Number} capsuleAngle
 * @param {Boolean} justTest
 */
Narrowphase.prototype[Shape.PLANE | Shape.CAPSULE] =
Narrowphase.prototype.planeCapsule = function(
    planeBody,
    planeShape,
    planeOffset,
    planeAngle,
    capsuleBody,
    capsuleShape,
    capsuleOffset,
    capsuleAngle,
    justTest
){
    var end1 = planeCapsule_tmp1,
        end2 = planeCapsule_tmp2,
        circle = planeCapsule_tmpCircle,
        dst = planeCapsule_tmp3;

    // Compute world end positions
    vec2.set(end1, -capsuleShape.length/2, 0);
    vec2.rotate(end1,end1,capsuleAngle);
    add(end1,end1,capsuleOffset);

    vec2.set(end2,  capsuleShape.length/2, 0);
    vec2.rotate(end2,end2,capsuleAngle);
    add(end2,end2,capsuleOffset);

    circle.radius = capsuleShape.radius;

    var enableFrictionBefore;

    // Temporarily turn off friction
    if(this.enableFrictionReduction){
        enableFrictionBefore = this.enableFriction;
        this.enableFriction = false;
    }

    // Do Narrowphase as two circles
    var numContacts1 = this.circlePlane(capsuleBody,circle,end1,0, planeBody,planeShape,planeOffset,planeAngle, justTest),
        numContacts2 = this.circlePlane(capsuleBody,circle,end2,0, planeBody,planeShape,planeOffset,planeAngle, justTest);

    // Restore friction
    if(this.enableFrictionReduction){
        this.enableFriction = enableFrictionBefore;
    }

    if(justTest){
        return numContacts1 || numContacts2;
    } else {
        var numTotal = numContacts1 + numContacts2;
        if(this.enableFrictionReduction){
            if(numTotal){
                this.frictionEquations.push(this.createFrictionFromAverage(numTotal));
            }
        }
        return numTotal;
    }
};

/**
 * Creates ContactEquations and FrictionEquations for a collision.
 * @method circlePlane
 * @param  {Body}    bi     The first body that should be connected to the equations.
 * @param  {Circle}  si     The circle shape participating in the collision.
 * @param  {Array}   xi     Extra offset to take into account for the Shape, in addition to the one in circleBody.position. Will *not* be rotated by circleBody.angle (maybe it should, for sake of homogenity?). Set to null if none.
 * @param  {Body}    bj     The second body that should be connected to the equations.
 * @param  {Plane}   sj     The Plane shape that is participating
 * @param  {Array}   xj     Extra offset for the plane shape.
 * @param  {Number}  aj     Extra angle to apply to the plane
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.PLANE] =
Narrowphase.prototype.circlePlane = function(   bi,si,xi,ai, bj,sj,xj,aj, justTest ){
    var circleBody = bi,
        circleShape = si,
        circleOffset = xi, // Offset from body center, rotated!
        planeBody = bj,
        shapeB = sj,
        planeOffset = xj,
        planeAngle = aj;

    planeAngle = planeAngle || 0;

    // Vector from plane to circle
    var planeToCircle = tmp1,
        worldNormal = tmp2,
        temp = tmp3;

    sub(planeToCircle, circleOffset, planeOffset);

    // World plane normal
    vec2.rotate(worldNormal, yAxis, planeAngle);

    // Normal direction distance
    var d = dot(worldNormal, planeToCircle);

    if(d > circleShape.radius){
        return 0; // No overlap. Abort.
    }

    if(justTest){
        return true;
    }

    // Create contact
    var contact = this.createContactEquation(planeBody,circleBody,sj,si);

    // ni is the plane world normal
    vec2.copy(contact.normalA, worldNormal);

    // rj is the vector from circle center to the contact point
    vec2.scale(contact.contactPointB, contact.normalA, -circleShape.radius);
    add(contact.contactPointB, contact.contactPointB, circleOffset);
    sub(contact.contactPointB, contact.contactPointB, circleBody.position);

    // ri is the distance from plane center to contact.
    vec2.scale(temp, contact.normalA, d);
    sub(contact.contactPointA, planeToCircle, temp ); // Subtract normal distance vector from the distance vector
    add(contact.contactPointA, contact.contactPointA, planeOffset);
    sub(contact.contactPointA, contact.contactPointA, planeBody.position);

    this.contactEquations.push(contact);

    if(this.enableFriction){
        this.frictionEquations.push( this.createFrictionFromContact(contact) );
    }

    return 1;
};

/**
 * Convex/convex Narrowphase.See <a href="http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/">this article</a> for more info.
 * @method convexConvex
 * @param  {Body} bi
 * @param  {Convex} si
 * @param  {Array} xi
 * @param  {Number} ai
 * @param  {Body} bj
 * @param  {Convex} sj
 * @param  {Array} xj
 * @param  {Number} aj
 */
Narrowphase.prototype[Shape.CONVEX] =
Narrowphase.prototype[Shape.CONVEX | Shape.BOX] =
Narrowphase.prototype[Shape.BOX] =
Narrowphase.prototype.convexConvex = function(  bi,si,xi,ai, bj,sj,xj,aj, justTest, precision ){
    var sepAxis = tmp1,
        worldPoint = tmp2,
        worldPoint0 = tmp3,
        worldPoint1 = tmp4,
        worldEdge = tmp5,
        projected = tmp6,
        penetrationVec = tmp7,
        dist = tmp8,
        worldNormal = tmp9,
        numContacts = 0,
        precision = typeof(precision) === 'number' ? precision : 0;

    var found = Narrowphase.findSeparatingAxis(si,xi,ai,sj,xj,aj,sepAxis);
    if(!found){
        return 0;
    }

    // Make sure the separating axis is directed from shape i to shape j
    sub(dist,xj,xi);
    if(dot(sepAxis,dist) > 0){
        vec2.scale(sepAxis,sepAxis,-1);
    }

    // Find edges with normals closest to the separating axis
    var closestEdge1 = Narrowphase.getClosestEdge(si,ai,sepAxis,true), // Flipped axis
        closestEdge2 = Narrowphase.getClosestEdge(sj,aj,sepAxis);

    if(closestEdge1 === -1 || closestEdge2 === -1){
        return 0;
    }

    // Loop over the shapes
    for(var k=0; k<2; k++){

        var closestEdgeA = closestEdge1,
            closestEdgeB = closestEdge2,
            shapeA =  si, shapeB =  sj,
            offsetA = xi, offsetB = xj,
            angleA = ai, angleB = aj,
            bodyA = bi, bodyB = bj;

        if(k === 0){
            // Swap!
            var tmp;
            tmp = closestEdgeA;
            closestEdgeA = closestEdgeB;
            closestEdgeB = tmp;

            tmp = shapeA;
            shapeA = shapeB;
            shapeB = tmp;

            tmp = offsetA;
            offsetA = offsetB;
            offsetB = tmp;

            tmp = angleA;
            angleA = angleB;
            angleB = tmp;

            tmp = bodyA;
            bodyA = bodyB;
            bodyB = tmp;
        }

        // Loop over 2 points in convex B
        for(var j=closestEdgeB; j<closestEdgeB+2; j++){

            // Get world point
            var v = shapeB.vertices[(j+shapeB.vertices.length)%shapeB.vertices.length];
            vec2.rotate(worldPoint, v, angleB);
            add(worldPoint, worldPoint, offsetB);

            var insideNumEdges = 0;

            // Loop over the 3 closest edges in convex A
            for(var i=closestEdgeA-1; i<closestEdgeA+2; i++){

                var v0 = shapeA.vertices[(i  +shapeA.vertices.length)%shapeA.vertices.length],
                    v1 = shapeA.vertices[(i+1+shapeA.vertices.length)%shapeA.vertices.length];

                // Construct the edge
                vec2.rotate(worldPoint0, v0, angleA);
                vec2.rotate(worldPoint1, v1, angleA);
                add(worldPoint0, worldPoint0, offsetA);
                add(worldPoint1, worldPoint1, offsetA);

                sub(worldEdge, worldPoint1, worldPoint0);

                vec2.rotate90cw(worldNormal, worldEdge); // Normal points out of convex 1
                vec2.normalize(worldNormal,worldNormal);

                sub(dist, worldPoint, worldPoint0);

                var d = dot(worldNormal,dist);

                if((i === closestEdgeA && d <= precision) || (i !== closestEdgeA && d <= 0)){
                    insideNumEdges++;
                }
            }

            if(insideNumEdges >= 3){

                if(justTest){
                    return true;
                }

                // worldPoint was on the "inside" side of each of the 3 checked edges.
                // Project it to the center edge and use the projection direction as normal

                // Create contact
                var c = this.createContactEquation(bodyA,bodyB,shapeA,shapeB);
                numContacts++;

                // Get center edge from body A
                var v0 = shapeA.vertices[(closestEdgeA)   % shapeA.vertices.length],
                    v1 = shapeA.vertices[(closestEdgeA+1) % shapeA.vertices.length];

                // Construct the edge
                vec2.rotate(worldPoint0, v0, angleA);
                vec2.rotate(worldPoint1, v1, angleA);
                add(worldPoint0, worldPoint0, offsetA);
                add(worldPoint1, worldPoint1, offsetA);

                sub(worldEdge, worldPoint1, worldPoint0);

                vec2.rotate90cw(c.normalA, worldEdge); // Normal points out of convex A
                vec2.normalize(c.normalA,c.normalA);

                sub(dist, worldPoint, worldPoint0); // From edge point to the penetrating point
                var d = dot(c.normalA,dist);             // Penetration
                vec2.scale(penetrationVec, c.normalA, d);     // Vector penetration

                sub(c.contactPointA, worldPoint, offsetA);
                sub(c.contactPointA, c.contactPointA, penetrationVec);
                add(c.contactPointA, c.contactPointA, offsetA);
                sub(c.contactPointA, c.contactPointA, bodyA.position);

                sub(c.contactPointB, worldPoint, offsetB);
                add(c.contactPointB, c.contactPointB, offsetB);
                sub(c.contactPointB, c.contactPointB, bodyB.position);

                this.contactEquations.push(c);

                // Todo reduce to 1 friction equation if we have 2 contact points
                if(!this.enableFrictionReduction){
                    if(this.enableFriction){
                        this.frictionEquations.push(this.createFrictionFromContact(c));
                    }
                }
            }
        }
    }

    if(this.enableFrictionReduction){
        if(this.enableFriction && numContacts){
            this.frictionEquations.push(this.createFrictionFromAverage(numContacts));
        }
    }

    return numContacts;
};

// .projectConvex is called by other functions, need local tmp vectors
var pcoa_tmp1 = vec2.fromValues(0,0);

/**
 * Project a Convex onto a world-oriented axis
 * @method projectConvexOntoAxis
 * @static
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param  {Array} worldAxis
 * @param  {Array} result
 */
Narrowphase.projectConvexOntoAxis = function(convexShape, convexOffset, convexAngle, worldAxis, result){
    var max=null,
        min=null,
        v,
        value,
        localAxis = pcoa_tmp1;

    // Convert the axis to local coords of the body
    vec2.rotate(localAxis, worldAxis, -convexAngle);

    // Get projected position of all vertices
    for(var i=0; i<convexShape.vertices.length; i++){
        v = convexShape.vertices[i];
        value = dot(v,localAxis);
        if(max === null || value > max){
            max = value;
        }
        if(min === null || value < min){
            min = value;
        }
    }

    if(min > max){
        var t = min;
        min = max;
        max = t;
    }

    // Project the position of the body onto the axis - need to add this to the result
    var offset = dot(convexOffset, worldAxis);

    vec2.set( result, min + offset, max + offset);
};

// .findSeparatingAxis is called by other functions, need local tmp vectors
var fsa_tmp1 = vec2.fromValues(0,0)
,   fsa_tmp2 = vec2.fromValues(0,0)
,   fsa_tmp3 = vec2.fromValues(0,0)
,   fsa_tmp4 = vec2.fromValues(0,0)
,   fsa_tmp5 = vec2.fromValues(0,0)
,   fsa_tmp6 = vec2.fromValues(0,0);

/**
 * Find a separating axis between the shapes, that maximizes the separating distance between them.
 * @method findSeparatingAxis
 * @static
 * @param  {Convex}     c1
 * @param  {Array}      offset1
 * @param  {Number}     angle1
 * @param  {Convex}     c2
 * @param  {Array}      offset2
 * @param  {Number}     angle2
 * @param  {Array}      sepAxis     The resulting axis
 * @return {Boolean}                Whether the axis could be found.
 */
Narrowphase.findSeparatingAxis = function(c1,offset1,angle1,c2,offset2,angle2,sepAxis){
    var maxDist = null,
        overlap = false,
        found = false,
        edge = fsa_tmp1,
        worldPoint0 = fsa_tmp2,
        worldPoint1 = fsa_tmp3,
        normal = fsa_tmp4,
        span1 = fsa_tmp5,
        span2 = fsa_tmp6;

    if(c1 instanceof Box && c2 instanceof Box){

        for(var j=0; j!==2; j++){
            var c = c1,
                angle = angle1;
            if(j===1){
                c = c2;
                angle = angle2;
            }

            for(var i=0; i!==2; i++){

                // Get the world edge
                if(i === 0){
                    vec2.set(normal, 0, 1);
                } else if(i === 1) {
                    vec2.set(normal, 1, 0);
                }
                if(angle !== 0){
                    vec2.rotate(normal, normal, angle);
                }

                // Project hulls onto that normal
                Narrowphase.projectConvexOntoAxis(c1,offset1,angle1,normal,span1);
                Narrowphase.projectConvexOntoAxis(c2,offset2,angle2,normal,span2);

                // Order by span position
                var a=span1,
                    b=span2,
                    swapped = false;
                if(span1[0] > span2[0]){
                    b=span1;
                    a=span2;
                    swapped = true;
                }

                // Get separating distance
                var dist = b[0] - a[1];
                overlap = (dist <= 0);

                if(maxDist===null || dist > maxDist){
                    vec2.copy(sepAxis, normal);
                    maxDist = dist;
                    found = overlap;
                }
            }
        }

    } else {

        for(var j=0; j!==2; j++){
            var c = c1,
                angle = angle1;
            if(j===1){
                c = c2;
                angle = angle2;
            }

            for(var i=0; i!==c.vertices.length; i++){
                // Get the world edge
                vec2.rotate(worldPoint0, c.vertices[i], angle);
                vec2.rotate(worldPoint1, c.vertices[(i+1)%c.vertices.length], angle);

                sub(edge, worldPoint1, worldPoint0);

                // Get normal - just rotate 90 degrees since vertices are given in CCW
                vec2.rotate90cw(normal, edge);
                vec2.normalize(normal,normal);

                // Project hulls onto that normal
                Narrowphase.projectConvexOntoAxis(c1,offset1,angle1,normal,span1);
                Narrowphase.projectConvexOntoAxis(c2,offset2,angle2,normal,span2);

                // Order by span position
                var a=span1,
                    b=span2,
                    swapped = false;
                if(span1[0] > span2[0]){
                    b=span1;
                    a=span2;
                    swapped = true;
                }

                // Get separating distance
                var dist = b[0] - a[1];
                overlap = (dist <= 0);

                if(maxDist===null || dist > maxDist){
                    vec2.copy(sepAxis, normal);
                    maxDist = dist;
                    found = overlap;
                }
            }
        }
    }


    /*
    // Needs to be tested some more
    for(var j=0; j!==2; j++){
        var c = c1,
            angle = angle1;
        if(j===1){
            c = c2;
            angle = angle2;
        }

        for(var i=0; i!==c.axes.length; i++){

            var normal = c.axes[i];

            // Project hulls onto that normal
            Narrowphase.projectConvexOntoAxis(c1, offset1, angle1, normal, span1);
            Narrowphase.projectConvexOntoAxis(c2, offset2, angle2, normal, span2);

            // Order by span position
            var a=span1,
                b=span2,
                swapped = false;
            if(span1[0] > span2[0]){
                b=span1;
                a=span2;
                swapped = true;
            }

            // Get separating distance
            var dist = b[0] - a[1];
            overlap = (dist <= Narrowphase.convexPrecision);

            if(maxDist===null || dist > maxDist){
                vec2.copy(sepAxis, normal);
                maxDist = dist;
                found = overlap;
            }
        }
    }
    */

    return found;
};

// .getClosestEdge is called by other functions, need local tmp vectors
var gce_tmp1 = vec2.fromValues(0,0)
,   gce_tmp2 = vec2.fromValues(0,0)
,   gce_tmp3 = vec2.fromValues(0,0);

/**
 * Get the edge that has a normal closest to an axis.
 * @method getClosestEdge
 * @static
 * @param  {Convex}     c
 * @param  {Number}     angle
 * @param  {Array}      axis
 * @param  {Boolean}    flip
 * @return {Number}             Index of the edge that is closest. This index and the next spans the resulting edge. Returns -1 if failed.
 */
Narrowphase.getClosestEdge = function(c,angle,axis,flip){
    var localAxis = gce_tmp1,
        edge = gce_tmp2,
        normal = gce_tmp3;

    // Convert the axis to local coords of the body
    vec2.rotate(localAxis, axis, -angle);
    if(flip){
        vec2.scale(localAxis,localAxis,-1);
    }

    var closestEdge = -1,
        N = c.vertices.length,
        maxDot = -1;
    for(var i=0; i!==N; i++){
        // Get the edge
        sub(edge, c.vertices[(i+1)%N], c.vertices[i%N]);

        // Get normal - just rotate 90 degrees since vertices are given in CCW
        vec2.rotate90cw(normal, edge);
        vec2.normalize(normal,normal);

        var d = dot(normal,localAxis);
        if(closestEdge === -1 || d > maxDot){
            closestEdge = i % N;
            maxDot = d;
        }
    }

    return closestEdge;
};

var circleHeightfield_candidate = vec2.create(),
    circleHeightfield_dist = vec2.create(),
    circleHeightfield_v0 = vec2.create(),
    circleHeightfield_v1 = vec2.create(),
    circleHeightfield_minCandidate = vec2.create(),
    circleHeightfield_worldNormal = vec2.create(),
    circleHeightfield_minCandidateNormal = vec2.create();

/**
 * @method circleHeightfield
 * @param  {Body}           bi
 * @param  {Circle}         si
 * @param  {Array}          xi
 * @param  {Body}           bj
 * @param  {Heightfield}    sj
 * @param  {Array}          xj
 * @param  {Number}         aj
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.HEIGHTFIELD] =
Narrowphase.prototype.circleHeightfield = function( circleBody,circleShape,circlePos,circleAngle,
                                                    hfBody,hfShape,hfPos,hfAngle, justTest, radius ){
    var data = hfShape.heights,
        radius = radius || circleShape.radius,
        w = hfShape.elementWidth,
        dist = circleHeightfield_dist,
        candidate = circleHeightfield_candidate,
        minCandidate = circleHeightfield_minCandidate,
        minCandidateNormal = circleHeightfield_minCandidateNormal,
        worldNormal = circleHeightfield_worldNormal,
        v0 = circleHeightfield_v0,
        v1 = circleHeightfield_v1;

    // Get the index of the points to test against
    var idxA = Math.floor( (circlePos[0] - radius - hfPos[0]) / w ),
        idxB = Math.ceil(  (circlePos[0] + radius - hfPos[0]) / w );

    /*if(idxB < 0 || idxA >= data.length)
        return justTest ? false : 0;*/

    if(idxA < 0){
        idxA = 0;
    }
    if(idxB >= data.length){
        idxB = data.length-1;
    }

    // Get max and min
    var max = data[idxA],
        min = data[idxB];
    for(var i=idxA; i<idxB; i++){
        if(data[i] < min){
            min = data[i];
        }
        if(data[i] > max){
            max = data[i];
        }
    }

    if(circlePos[1]-radius > max){
        return justTest ? false : 0;
    }

    /*
    if(circlePos[1]+radius < min){
        // Below the minimum point... We can just guess.
        // TODO
    }
    */

    // 1. Check so center of circle is not inside the field. If it is, this wont work...
    // 2. For each edge
    // 2. 1. Get point on circle that is closest to the edge (scale normal with -radius)
    // 2. 2. Check if point is inside.

    var found = false;

    // Check all edges first
    for(var i=idxA; i<idxB; i++){

        // Get points
        vec2.set(v0,     i*w, data[i]  );
        vec2.set(v1, (i+1)*w, data[i+1]);
        vec2.add(v0,v0,hfPos);
        vec2.add(v1,v1,hfPos);

        // Get normal
        vec2.sub(worldNormal, v1, v0);
        vec2.rotate(worldNormal, worldNormal, Math.PI/2);
        vec2.normalize(worldNormal,worldNormal);

        // Get point on circle, closest to the edge
        vec2.scale(candidate,worldNormal,-radius);
        vec2.add(candidate,candidate,circlePos);

        // Distance from v0 to the candidate point
        vec2.sub(dist,candidate,v0);

        // Check if it is in the element "stick"
        var d = vec2.dot(dist,worldNormal);
        if(candidate[0] >= v0[0] && candidate[0] < v1[0] && d <= 0){

            if(justTest){
                return true;
            }

            found = true;

            // Store the candidate point, projected to the edge
            vec2.scale(dist,worldNormal,-d);
            vec2.add(minCandidate,candidate,dist);
            vec2.copy(minCandidateNormal,worldNormal);

            var c = this.createContactEquation(hfBody,circleBody,hfShape,circleShape);

            // Normal is out of the heightfield
            vec2.copy(c.normalA, minCandidateNormal);

            // Vector from circle to heightfield
            vec2.scale(c.contactPointB,  c.normalA, -radius);
            add(c.contactPointB, c.contactPointB, circlePos);
            sub(c.contactPointB, c.contactPointB, circleBody.position);

            vec2.copy(c.contactPointA, minCandidate);
            vec2.sub(c.contactPointA, c.contactPointA, hfBody.position);

            this.contactEquations.push(c);

            if(this.enableFriction){
                this.frictionEquations.push( this.createFrictionFromContact(c) );
            }
        }
    }

    // Check all vertices
    found = false;
    if(radius > 0){
        for(var i=idxA; i<=idxB; i++){

            // Get point
            vec2.set(v0, i*w, data[i]);
            vec2.add(v0,v0,hfPos);

            vec2.sub(dist, circlePos, v0);

            if(vec2.squaredLength(dist) < Math.pow(radius, 2)){

                if(justTest){
                    return true;
                }

                found = true;

                var c = this.createContactEquation(hfBody,circleBody,hfShape,circleShape);

                // Construct normal - out of heightfield
                vec2.copy(c.normalA, dist);
                vec2.normalize(c.normalA,c.normalA);

                vec2.scale(c.contactPointB, c.normalA, -radius);
                add(c.contactPointB, c.contactPointB, circlePos);
                sub(c.contactPointB, c.contactPointB, circleBody.position);

                sub(c.contactPointA, v0, hfPos);
                add(c.contactPointA, c.contactPointA, hfPos);
                sub(c.contactPointA, c.contactPointA, hfBody.position);

                this.contactEquations.push(c);

                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }
            }
        }
    }

    if(found){
        return 1;
    }

    return 0;

};

var convexHeightfield_v0 = vec2.create(),
    convexHeightfield_v1 = vec2.create(),
    convexHeightfield_tilePos = vec2.create(),
    convexHeightfield_tempConvexShape = new Convex({ vertices: [vec2.create(),vec2.create(),vec2.create(),vec2.create()] });
/**
 * @method circleHeightfield
 * @param  {Body}           bi
 * @param  {Circle}         si
 * @param  {Array}          xi
 * @param  {Body}           bj
 * @param  {Heightfield}    sj
 * @param  {Array}          xj
 * @param  {Number}         aj
 */
Narrowphase.prototype[Shape.BOX | Shape.HEIGHTFIELD] =
Narrowphase.prototype[Shape.CONVEX | Shape.HEIGHTFIELD] =
Narrowphase.prototype.convexHeightfield = function( convexBody,convexShape,convexPos,convexAngle,
                                                    hfBody,hfShape,hfPos,hfAngle, justTest ){
    var data = hfShape.heights,
        w = hfShape.elementWidth,
        v0 = convexHeightfield_v0,
        v1 = convexHeightfield_v1,
        tilePos = convexHeightfield_tilePos,
        tileConvex = convexHeightfield_tempConvexShape;

    // Get the index of the points to test against
    var idxA = Math.floor( (convexBody.aabb.lowerBound[0] - hfPos[0]) / w ),
        idxB = Math.ceil(  (convexBody.aabb.upperBound[0] - hfPos[0]) / w );

    if(idxA < 0){
        idxA = 0;
    }
    if(idxB >= data.length){
        idxB = data.length-1;
    }

    // Get max and min
    var max = data[idxA],
        min = data[idxB];
    for(var i=idxA; i<idxB; i++){
        if(data[i] < min){
            min = data[i];
        }
        if(data[i] > max){
            max = data[i];
        }
    }

    if(convexBody.aabb.lowerBound[1] > max){
        return justTest ? false : 0;
    }

    var found = false;
    var numContacts = 0;

    // Loop over all edges
    // TODO: If possible, construct a convex from several data points (need o check if the points make a convex shape)
    for(var i=idxA; i<idxB; i++){

        // Get points
        vec2.set(v0,     i*w, data[i]  );
        vec2.set(v1, (i+1)*w, data[i+1]);
        vec2.add(v0,v0,hfPos);
        vec2.add(v1,v1,hfPos);

        // Construct a convex
        var tileHeight = 100; // todo
        vec2.set(tilePos, (v1[0] + v0[0])*0.5, (v1[1] + v0[1] - tileHeight)*0.5);

        vec2.sub(tileConvex.vertices[0], v1, tilePos);
        vec2.sub(tileConvex.vertices[1], v0, tilePos);
        vec2.copy(tileConvex.vertices[2], tileConvex.vertices[1]);
        vec2.copy(tileConvex.vertices[3], tileConvex.vertices[0]);
        tileConvex.vertices[2][1] -= tileHeight;
        tileConvex.vertices[3][1] -= tileHeight;

        // Do convex collision
        numContacts += this.convexConvex(   convexBody, convexShape, convexPos, convexAngle,
                                            hfBody, tileConvex, tilePos, 0, justTest);
    }

    return numContacts;
};
},{"../equations/ContactEquation":85,"../equations/Equation":86,"../equations/FrictionEquation":87,"../math/vec2":94,"../objects/Body":95,"../shapes/Box":101,"../shapes/Circle":103,"../shapes/Convex":104,"../shapes/Shape":109,"../utils/ContactEquationPool":112,"../utils/FrictionEquationPool":113,"../utils/TupleDictionary":120,"../utils/Utils":121}],75:[function(require,module,exports){
module.exports = Ray;

var vec2 = require('../math/vec2');
var RaycastResult = require('../collision/RaycastResult');
var Shape = require('../shapes/Shape');
var AABB = require('../collision/AABB');

/**
 * A line with a start and end point that is used to intersect shapes. For an example, see {{#crossLink "World/raycast:method"}}World.raycast{{/crossLink}}
 * @class Ray
 * @constructor
 * @param {object} [options]
 * @param {array} [options.from]
 * @param {array} [options.to]
 * @param {boolean} [options.checkCollisionResponse=true]
 * @param {boolean} [options.skipBackfaces=false]
 * @param {number} [options.collisionMask=-1]
 * @param {number} [options.collisionGroup=-1]
 * @param {number} [options.mode=Ray.ANY]
 * @param {number} [options.callback]
 */
function Ray(options){
    options = options || {};

    /**
     * Ray start point.
     * @property {array} from
     */
    this.from = options.from ? vec2.fromValues(options.from[0], options.from[1]) : vec2.create();

    /**
     * Ray end point
     * @property {array} to
     */
    this.to = options.to ? vec2.fromValues(options.to[0], options.to[1]) : vec2.create();

    /**
     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.
     * @property {Boolean} checkCollisionResponse
     */
    this.checkCollisionResponse = options.checkCollisionResponse !== undefined ? options.checkCollisionResponse : true;

    /**
     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.
     * @property {Boolean} skipBackfaces
     */
    this.skipBackfaces = !!options.skipBackfaces;

    /**
     * @property {number} collisionMask
     * @default -1
     */
    this.collisionMask = options.collisionMask !== undefined ? options.collisionMask : -1;

    /**
     * @property {number} collisionGroup
     * @default -1
     */
    this.collisionGroup = options.collisionGroup !== undefined ? options.collisionGroup : -1;

    /**
     * The intersection mode. Should be {{#crossLink "Ray/ANY:property"}}Ray.ANY{{/crossLink}}, {{#crossLink "Ray/ALL:property"}}Ray.ALL{{/crossLink}} or {{#crossLink "Ray/CLOSEST:property"}}Ray.CLOSEST{{/crossLink}}.
     * @property {number} mode
     */
    this.mode = options.mode !== undefined ? options.mode : Ray.ANY;

    /**
     * Current, user-provided result callback. Will be used if mode is Ray.ALL.
     * @property {Function} callback
     */
    this.callback = options.callback || function(result){};

    /**
     * @readOnly
     * @property {array} direction
     */
    this.direction = vec2.create();

    /**
     * Length of the ray
     * @readOnly
     * @property {number} length
     */
    this.length = 1;

    this.update();
}
Ray.prototype.constructor = Ray;

/**
 * This raycasting mode will make the Ray traverse through all intersection points and only return the closest one.
 * @static
 * @property {Number} CLOSEST
 */
Ray.CLOSEST = 1;

/**
 * This raycasting mode will make the Ray stop when it finds the first intersection point.
 * @static
 * @property {Number} ANY
 */
Ray.ANY = 2;

/**
 * This raycasting mode will traverse all intersection points and executes a callback for each one.
 * @static
 * @property {Number} ALL
 */
Ray.ALL = 4;

/**
 * Should be called if you change the from or to point.
 * @method update
 */
Ray.prototype.update = function(){

    // Update .direction and .length
    var d = this.direction;
    vec2.sub(d, this.to, this.from);
    this.length = vec2.length(d);
    vec2.normalize(d, d);

};

/**
 * @method intersectBodies
 * @param {Array} bodies An array of Body objects.
 */
Ray.prototype.intersectBodies = function (result, bodies) {
    for (var i = 0, l = bodies.length; !result.shouldStop(this) && i < l; i++) {
        var body = bodies[i];
        var aabb = body.getAABB();
        if(aabb.overlapsRay(this) >= 0 || aabb.containsPoint(this.from)){
            this.intersectBody(result, body);
        }
    }
};

var intersectBody_worldPosition = vec2.create();

/**
 * Shoot a ray at a body, get back information about the hit.
 * @method intersectBody
 * @private
 * @param {Body} body
 */
Ray.prototype.intersectBody = function (result, body) {
    var checkCollisionResponse = this.checkCollisionResponse;

    if(checkCollisionResponse && !body.collisionResponse){
        return;
    }

    var worldPosition = intersectBody_worldPosition;

    for (var i = 0, N = body.shapes.length; i < N; i++) {
        var shape = body.shapes[i];

        if(checkCollisionResponse && !shape.collisionResponse){
            continue; // Skip
        }

        if((this.collisionGroup & shape.collisionMask) === 0 || (shape.collisionGroup & this.collisionMask) === 0){
            continue;
        }

        // Get world angle and position of the shape
        vec2.rotate(worldPosition, shape.position, body.angle);
        vec2.add(worldPosition, worldPosition, body.position);
        var worldAngle = shape.angle + body.angle;

        this.intersectShape(
            result,
            shape,
            worldAngle,
            worldPosition,
            body
        );

        if(result.shouldStop(this)){
            break;
        }
    }
};

/**
 * @method intersectShape
 * @private
 * @param {Shape} shape
 * @param {number} angle
 * @param {array} position
 * @param {Body} body
 */
Ray.prototype.intersectShape = function(result, shape, angle, position, body){
    var from = this.from;

    // Checking radius
    var distance = distanceFromIntersectionSquared(from, this.direction, position);
    if (distance > shape.boundingRadius * shape.boundingRadius) {
        return;
    }

    this._currentBody = body;
    this._currentShape = shape;

    shape.raycast(result, this, position, angle);

    this._currentBody = this._currentShape = null;
};

/**
 * Get the AABB of the ray.
 * @method getAABB
 * @param  {AABB} aabb
 */
Ray.prototype.getAABB = function(result){
    var to = this.to;
    var from = this.from;
    vec2.set(
        result.lowerBound,
        Math.min(to[0], from[0]),
        Math.min(to[1], from[1])
    );
    vec2.set(
        result.upperBound,
        Math.max(to[0], from[0]),
        Math.max(to[1], from[1])
    );
};

var hitPointWorld = vec2.create();

/**
 * @method reportIntersection
 * @private
 * @param  {number} fraction
 * @param  {array} normal
 * @param  {number} [faceIndex=-1]
 * @return {boolean} True if the intersections should continue
 */
Ray.prototype.reportIntersection = function(result, fraction, normal, faceIndex){
    var from = this.from;
    var to = this.to;
    var shape = this._currentShape;
    var body = this._currentBody;

    // Skip back faces?
    if(this.skipBackfaces && vec2.dot(normal, this.direction) > 0){
        return;
    }

    switch(this.mode){

    case Ray.ALL:
        result.set(
            normal,
            shape,
            body,
            fraction,
            faceIndex
        );
        this.callback(result);
        break;

    case Ray.CLOSEST:

        // Store if closer than current closest
        if(fraction < result.fraction || !result.hasHit()){
            result.set(
                normal,
                shape,
                body,
                fraction,
                faceIndex
            );
        }
        break;

    case Ray.ANY:

        // Report and stop.
        result.set(
            normal,
            shape,
            body,
            fraction,
            faceIndex
        );
        break;
    }
};

var v0 = vec2.create(),
    intersect = vec2.create();
function distanceFromIntersectionSquared(from, direction, position) {

    // v0 is vector from from to position
    vec2.sub(v0, position, from);
    var dot = vec2.dot(v0, direction);

    // intersect = direction * dot + from
    vec2.scale(intersect, direction, dot);
    vec2.add(intersect, intersect, from);

    return vec2.squaredDistance(position, intersect);
}


},{"../collision/AABB":71,"../collision/RaycastResult":76,"../math/vec2":94,"../shapes/Shape":109}],76:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Ray = require('../collision/Ray');

module.exports = RaycastResult;

/**
 * Storage for Ray casting hit data.
 * @class RaycastResult
 * @constructor
 */
function RaycastResult(){

	/**
	 * The normal of the hit, oriented in world space.
	 * @property {array} normal
	 */
	this.normal = vec2.create();

	/**
	 * The hit shape, or null.
	 * @property {Shape} shape
	 */
	this.shape = null;

	/**
	 * The hit body, or null.
	 * @property {Body} body
	 */
	this.body = null;

	/**
	 * The index of the hit triangle, if the hit shape was indexable.
	 * @property {number} faceIndex
	 * @default -1
	 */
	this.faceIndex = -1;

	/**
	 * Distance to the hit, as a fraction. 0 is at the "from" point, 1 is at the "to" point. Will be set to -1 if there was no hit yet.
	 * @property {number} fraction
	 * @default -1
	 */
	this.fraction = -1;

	/**
	 * If the ray should stop traversing.
	 * @readonly
	 * @property {Boolean} isStopped
	 */
	this.isStopped = false;
}

/**
 * Reset all result data. Must be done before re-using the result object.
 * @method reset
 */
RaycastResult.prototype.reset = function () {
	vec2.set(this.normal, 0, 0);
	this.shape = null;
	this.body = null;
	this.faceIndex = -1;
	this.fraction = -1;
	this.isStopped = false;
};

/**
 * Get the distance to the hit point.
 * @method getHitDistance
 * @param {Ray} ray
 */
RaycastResult.prototype.getHitDistance = function (ray) {
	return vec2.distance(ray.from, ray.to) * this.fraction;
};

/**
 * Returns true if the ray hit something since the last reset().
 * @method hasHit
 */
RaycastResult.prototype.hasHit = function () {
	return this.fraction !== -1;
};

/**
 * Get world hit point.
 * @method getHitPoint
 * @param {array} out
 * @param {Ray} ray
 */
RaycastResult.prototype.getHitPoint = function (out, ray) {
	vec2.lerp(out, ray.from, ray.to, this.fraction);
};

/**
 * Can be called while iterating over hits to stop searching for hit points.
 * @method stop
 */
RaycastResult.prototype.stop = function(){
	this.isStopped = true;
};

/**
 * @method shouldStop
 * @private
 * @param {Ray} ray
 * @return {boolean}
 */
RaycastResult.prototype.shouldStop = function(ray){
	return this.isStopped || (this.fraction !== -1 && ray.mode === Ray.ANY);
};

/**
 * @method set
 * @private
 * @param {array} normal
 * @param {Shape} shape
 * @param {Body} body
 * @param {number} fraction
 */
RaycastResult.prototype.set = function(
	normal,
	shape,
	body,
	fraction,
	faceIndex
){
	vec2.copy(this.normal, normal);
	this.shape = shape;
	this.body = body;
	this.fraction = fraction;
	this.faceIndex = faceIndex;
};
},{"../collision/Ray":75,"../math/vec2":94}],77:[function(require,module,exports){
var Utils = require('../utils/Utils')
,   Broadphase = require('../collision/Broadphase');

module.exports = SAPBroadphase;

/**
 * Sweep and prune broadphase along one axis.
 *
 * @class SAPBroadphase
 * @constructor
 * @extends Broadphase
 */
function SAPBroadphase(){
    Broadphase.call(this,Broadphase.SAP);

    /**
     * List of bodies currently in the broadphase.
     * @property axisList
     * @type {Array}
     */
    this.axisList = [];

    /**
     * The axis to sort along. 0 means x-axis and 1 y-axis. If your bodies are more spread out over the X axis, set axisIndex to 0, and you will gain some performance.
     * @property axisIndex
     * @type {Number}
     */
    this.axisIndex = 0;

    var that = this;
    this._addBodyHandler = function(e){
        that.axisList.push(e.body);
    };

    this._removeBodyHandler = function(e){
        // Remove from list
        var idx = that.axisList.indexOf(e.body);
        if(idx !== -1){
            that.axisList.splice(idx,1);
        }
    };
}
SAPBroadphase.prototype = new Broadphase();
SAPBroadphase.prototype.constructor = SAPBroadphase;

/**
 * Change the world
 * @method setWorld
 * @param {World} world
 */
SAPBroadphase.prototype.setWorld = function(world){
    // Clear the old axis array
    this.axisList.length = 0;

    // Add all bodies from the new world
    Utils.appendArray(this.axisList, world.bodies);

    // Remove old handlers, if any
    world
        .off("addBody",this._addBodyHandler)
        .off("removeBody",this._removeBodyHandler);

    // Add handlers to update the list of bodies.
    world.on("addBody",this._addBodyHandler).on("removeBody",this._removeBodyHandler);

    this.world = world;
};

/**
 * Sorts bodies along an axis.
 * @method sortAxisList
 * @param {Array} a
 * @param {number} axisIndex
 * @return {Array}
 */
SAPBroadphase.sortAxisList = function(a, axisIndex){
    axisIndex = axisIndex|0;
    for(var i=1,l=a.length; i<l; i++) {
        var v = a[i];
        for(var j=i - 1;j>=0;j--) {
            if(a[j].aabb.lowerBound[axisIndex] <= v.aabb.lowerBound[axisIndex]){
                break;
            }
            a[j+1] = a[j];
        }
        a[j+1] = v;
    }
    return a;
};

SAPBroadphase.prototype.sortList = function(){
    var bodies = this.axisList,
    axisIndex = this.axisIndex;

    // Sort the lists
    SAPBroadphase.sortAxisList(bodies, axisIndex);
};

/**
 * Get the colliding pairs
 * @method getCollisionPairs
 * @param  {World} world
 * @return {Array}
 */
SAPBroadphase.prototype.getCollisionPairs = function(world){
    var bodies = this.axisList,
        result = this.result,
        axisIndex = this.axisIndex;

    result.length = 0;

    // Update all AABBs if needed
    var l = bodies.length;
    while(l--){
        var b = bodies[l];
        if(b.aabbNeedsUpdate){
            b.updateAABB();
        }
    }

    // Sort the lists
    this.sortList();

    // Look through the X list
    for(var i=0, N=bodies.length|0; i!==N; i++){
        var bi = bodies[i];

        for(var j=i+1; j<N; j++){
            var bj = bodies[j];

            // Bounds overlap?
            var overlaps = (bj.aabb.lowerBound[axisIndex] <= bi.aabb.upperBound[axisIndex]);
            if(!overlaps){
                break;
            }

            if(Broadphase.canCollide(bi,bj) && this.boundingVolumeCheck(bi,bj)){
                result.push(bi,bj);
            }
        }
    }

    return result;
};

/**
 * Returns all the bodies within an AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @param {array} result An array to store resulting bodies in.
 * @return {array}
 */
SAPBroadphase.prototype.aabbQuery = function(world, aabb, result){
    result = result || [];

    this.sortList();

    var axisIndex = this.axisIndex;
    var axis = 'x';
    if(axisIndex === 1){ axis = 'y'; }
    if(axisIndex === 2){ axis = 'z'; }

    var axisList = this.axisList;
    var lower = aabb.lowerBound[axis];
    var upper = aabb.upperBound[axis];
    for(var i = 0; i < axisList.length; i++){
        var b = axisList[i];

        if(b.aabbNeedsUpdate){
            b.updateAABB();
        }

        if(b.aabb.overlaps(aabb)){
            result.push(b);
        }
    }

    return result;
};
},{"../collision/Broadphase":72,"../utils/Utils":121}],78:[function(require,module,exports){
module.exports = Constraint;

var Utils = require('../utils/Utils');

/**
 * Base constraint class.
 *
 * @class Constraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} type
 * @param {Object} [options]
 * @param {Object} [options.collideConnected=true]
 */
function Constraint(bodyA, bodyB, type, options){

    /**
     * The type of constraint. May be one of Constraint.DISTANCE, Constraint.GEAR, Constraint.LOCK, Constraint.PRISMATIC or Constraint.REVOLUTE.
     * @property {number} type
     */
    this.type = type;

    options = Utils.defaults(options,{
        collideConnected : true,
        wakeUpBodies : true,
    });

    /**
     * Equations to be solved in this constraint
     *
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * First body participating in the constraint.
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second body participating in the constraint.
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;

    /**
     * Set to true if you want the connected bodies to collide.
     * @property collideConnected
     * @type {Boolean}
     * @default true
     */
    this.collideConnected = options.collideConnected;

    // Wake up bodies when connected
    if(options.wakeUpBodies){
        if(bodyA){
            bodyA.wakeUp();
        }
        if(bodyB){
            bodyB.wakeUp();
        }
    }
}

/**
 * Updates the internal constraint parameters before solve.
 * @method update
 */
Constraint.prototype.update = function(){
    throw new Error("method update() not implmemented in this Constraint subclass!");
};

/**
 * @static
 * @property {number} DISTANCE
 */
Constraint.DISTANCE = 1;

/**
 * @static
 * @property {number} GEAR
 */
Constraint.GEAR = 2;

/**
 * @static
 * @property {number} LOCK
 */
Constraint.LOCK = 3;

/**
 * @static
 * @property {number} PRISMATIC
 */
Constraint.PRISMATIC = 4;

/**
 * @static
 * @property {number} REVOLUTE
 */
Constraint.REVOLUTE = 5;

/**
 * Set stiffness for this constraint.
 * @method setStiffness
 * @param {Number} stiffness
 */
Constraint.prototype.setStiffness = function(stiffness){
    var eqs = this.equations;
    for(var i=0; i !== eqs.length; i++){
        var eq = eqs[i];
        eq.stiffness = stiffness;
        eq.needsUpdate = true;
    }
};

/**
 * Set relaxation for this constraint.
 * @method setRelaxation
 * @param {Number} relaxation
 */
Constraint.prototype.setRelaxation = function(relaxation){
    var eqs = this.equations;
    for(var i=0; i !== eqs.length; i++){
        var eq = eqs[i];
        eq.relaxation = relaxation;
        eq.needsUpdate = true;
    }
};

},{"../utils/Utils":121}],79:[function(require,module,exports){
var Constraint = require('./Constraint')
,   Equation = require('../equations/Equation')
,   vec2 = require('../math/vec2')
,   Utils = require('../utils/Utils');

module.exports = DistanceConstraint;

/**
 * Constraint that tries to keep the distance between two bodies constant.
 *
 * @class DistanceConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {number} [options.distance] The distance to keep between the anchor points. Defaults to the current distance between the bodies.
 * @param {Array} [options.localAnchorA] The anchor point for bodyA, defined locally in bodyA frame. Defaults to [0,0].
 * @param {Array} [options.localAnchorB] The anchor point for bodyB, defined locally in bodyB frame. Defaults to [0,0].
 * @param {object} [options.maxForce=Number.MAX_VALUE] Maximum force to apply.
 * @extends Constraint
 *
 * @example
 *     // If distance is not given as an option, then the current distance between the bodies is used.
 *     // In this example, the bodies will be constrained to have a distance of 2 between their centers.
 *     var bodyA = new Body({ mass: 1, position: [-1, 0] });
 *     var bodyB = new Body({ mass: 1, position: [1, 0] });
 *     var constraint = new DistanceConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 *
 * @example
 *     // Manually set the distance and anchors
 *     var constraint = new DistanceConstraint(bodyA, bodyB, {
 *         distance: 1,          // Distance to keep between the points
 *         localAnchorA: [1, 0], // Point on bodyA
 *         localAnchorB: [-1, 0] // Point on bodyB
 *     });
 *     world.addConstraint(constraint);
 */
function DistanceConstraint(bodyA,bodyB,options){
    options = Utils.defaults(options,{
        localAnchorA:[0,0],
        localAnchorB:[0,0]
    });

    Constraint.call(this,bodyA,bodyB,Constraint.DISTANCE,options);

    /**
     * Local anchor in body A.
     * @property localAnchorA
     * @type {Array}
     */
    this.localAnchorA = vec2.fromValues(options.localAnchorA[0], options.localAnchorA[1]);

    /**
     * Local anchor in body B.
     * @property localAnchorB
     * @type {Array}
     */
    this.localAnchorB = vec2.fromValues(options.localAnchorB[0], options.localAnchorB[1]);

    var localAnchorA = this.localAnchorA;
    var localAnchorB = this.localAnchorB;

    /**
     * The distance to keep.
     * @property distance
     * @type {Number}
     */
    this.distance = 0;

    if(typeof(options.distance) === 'number'){
        this.distance = options.distance;
    } else {
        // Use the current world distance between the world anchor points.
        var worldAnchorA = vec2.create(),
            worldAnchorB = vec2.create(),
            r = vec2.create();

        // Transform local anchors to world
        vec2.rotate(worldAnchorA, localAnchorA, bodyA.angle);
        vec2.rotate(worldAnchorB, localAnchorB, bodyB.angle);

        vec2.add(r, bodyB.position, worldAnchorB);
        vec2.sub(r, r, worldAnchorA);
        vec2.sub(r, r, bodyA.position);

        this.distance = vec2.length(r);
    }

    var maxForce;
    if(typeof(options.maxForce)==="undefined" ){
        maxForce = Number.MAX_VALUE;
    } else {
        maxForce = options.maxForce;
    }

    var normal = new Equation(bodyA,bodyB,-maxForce,maxForce); // Just in the normal direction
    this.equations = [ normal ];

    /**
     * Max force to apply.
     * @property {number} maxForce
     */
    this.maxForce = maxForce;

    // g = (xi - xj).dot(n)
    // dg/dt = (vi - vj).dot(n) = G*W = [n 0 -n 0] * [vi wi vj wj]'

    // ...and if we were to include offset points:
    // g =
    //      (xj + rj - xi - ri).dot(n) - distance
    //
    // dg/dt =
    //      (vj + wj x rj - vi - wi x ri).dot(n) =
    //      { term 2 is near zero } =
    //      [-n   -ri x n   n   rj x n] * [vi wi vj wj]' =
    //      G * W
    //
    // => G = [-n -rixn n rjxn]

    var r = vec2.create();
    var ri = vec2.create(); // worldAnchorA
    var rj = vec2.create(); // worldAnchorB
    var that = this;
    normal.computeGq = function(){
        var bodyA = this.bodyA,
            bodyB = this.bodyB,
            xi = bodyA.position,
            xj = bodyB.position;

        // Transform local anchors to world
        vec2.rotate(ri, localAnchorA, bodyA.angle);
        vec2.rotate(rj, localAnchorB, bodyB.angle);

        vec2.add(r, xj, rj);
        vec2.sub(r, r, ri);
        vec2.sub(r, r, xi);

        //vec2.sub(r, bodyB.position, bodyA.position);
        return vec2.length(r) - that.distance;
    };

    // Make the contact constraint bilateral
    this.setMaxForce(maxForce);

    /**
     * If the upper limit is enabled or not.
     * @property {Boolean} upperLimitEnabled
     */
    this.upperLimitEnabled = false;

    /**
     * The upper constraint limit.
     * @property {number} upperLimit
     */
    this.upperLimit = 1;

    /**
     * If the lower limit is enabled or not.
     * @property {Boolean} lowerLimitEnabled
     */
    this.lowerLimitEnabled = false;

    /**
     * The lower constraint limit.
     * @property {number} lowerLimit
     */
    this.lowerLimit = 0;

    /**
     * Current constraint position. This is equal to the current distance between the world anchor points.
     * @property {number} position
     */
    this.position = 0;
}
DistanceConstraint.prototype = new Constraint();
DistanceConstraint.prototype.constructor = DistanceConstraint;

/**
 * Update the constraint equations. Should be done if any of the bodies changed position, before solving.
 * @method update
 */
var n = vec2.create();
var ri = vec2.create(); // worldAnchorA
var rj = vec2.create(); // worldAnchorB
DistanceConstraint.prototype.update = function(){
    var normal = this.equations[0],
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        distance = this.distance,
        xi = bodyA.position,
        xj = bodyB.position,
        normalEquation = this.equations[0],
        G = normal.G;

    // Transform local anchors to world
    vec2.rotate(ri, this.localAnchorA, bodyA.angle);
    vec2.rotate(rj, this.localAnchorB, bodyB.angle);

    // Get world anchor points and normal
    vec2.add(n, xj, rj);
    vec2.sub(n, n, ri);
    vec2.sub(n, n, xi);
    this.position = vec2.length(n);

    var violating = false;
    if(this.upperLimitEnabled){
        if(this.position > this.upperLimit){
            normalEquation.maxForce = 0;
            normalEquation.minForce = -this.maxForce;
            this.distance = this.upperLimit;
            violating = true;
        }
    }

    if(this.lowerLimitEnabled){
        if(this.position < this.lowerLimit){
            normalEquation.maxForce = this.maxForce;
            normalEquation.minForce = 0;
            this.distance = this.lowerLimit;
            violating = true;
        }
    }

    if((this.lowerLimitEnabled || this.upperLimitEnabled) && !violating){
        // No constraint needed.
        normalEquation.enabled = false;
        return;
    }

    normalEquation.enabled = true;

    vec2.normalize(n,n);

    // Caluclate cross products
    var rixn = vec2.crossLength(ri, n),
        rjxn = vec2.crossLength(rj, n);

    // G = [-n -rixn n rjxn]
    G[0] = -n[0];
    G[1] = -n[1];
    G[2] = -rixn;
    G[3] = n[0];
    G[4] = n[1];
    G[5] = rjxn;
};

/**
 * Set the max force to be used
 * @method setMaxForce
 * @param {Number} maxForce
 */
DistanceConstraint.prototype.setMaxForce = function(maxForce){
    var normal = this.equations[0];
    normal.minForce = -maxForce;
    normal.maxForce =  maxForce;
};

/**
 * Get the max force
 * @method getMaxForce
 * @return {Number}
 */
DistanceConstraint.prototype.getMaxForce = function(){
    var normal = this.equations[0];
    return normal.maxForce;
};

},{"../equations/Equation":86,"../math/vec2":94,"../utils/Utils":121,"./Constraint":78}],80:[function(require,module,exports){
var Constraint = require('./Constraint')
,   Equation = require('../equations/Equation')
,   AngleLockEquation = require('../equations/AngleLockEquation')
,   vec2 = require('../math/vec2');

module.exports = GearConstraint;

/**
 * Constrains the angle of two bodies to each other to be equal. If a gear ratio is not one, the angle of bodyA must be a multiple of the angle of bodyB.
 * @class GearConstraint
 * @constructor
 * @author schteppe
 * @param {Body}            bodyA
 * @param {Body}            bodyB
 * @param {Object}          [options]
 * @param {Number}          [options.angle=0] Relative angle between the bodies. Will be set to the current angle between the bodies (the gear ratio is accounted for).
 * @param {Number}          [options.ratio=1] Gear ratio.
 * @param {Number}          [options.maxTorque] Maximum torque to apply.
 * @extends Constraint
 *
 * @example
 *     var constraint = new GearConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 *
 * @example
 *     var constraint = new GearConstraint(bodyA, bodyB, {
 *         ratio: 2,
 *         maxTorque: 1000
 *     });
 *     world.addConstraint(constraint);
 */
function GearConstraint(bodyA, bodyB, options){
    options = options || {};

    Constraint.call(this, bodyA, bodyB, Constraint.GEAR, options);

    /**
     * The gear ratio.
     * @property ratio
     * @type {Number}
     */
    this.ratio = options.ratio !== undefined ? options.ratio : 1;

    /**
     * The relative angle
     * @property angle
     * @type {Number}
     */
    this.angle = options.angle !== undefined ? options.angle : bodyB.angle - this.ratio * bodyA.angle;

    // Send same parameters to the equation
    options.angle = this.angle;
    options.ratio = this.ratio;

    this.equations = [
        new AngleLockEquation(bodyA,bodyB,options),
    ];

    // Set max torque
    if(options.maxTorque !== undefined){
        this.setMaxTorque(options.maxTorque);
    }
}
GearConstraint.prototype = new Constraint();
GearConstraint.prototype.constructor = GearConstraint;

GearConstraint.prototype.update = function(){
    var eq = this.equations[0];
    if(eq.ratio !== this.ratio){
        eq.setRatio(this.ratio);
    }
    eq.angle = this.angle;
};

/**
 * Set the max torque for the constraint.
 * @method setMaxTorque
 * @param {Number} torque
 */
GearConstraint.prototype.setMaxTorque = function(torque){
    this.equations[0].setMaxTorque(torque);
};

/**
 * Get the max torque for the constraint.
 * @method getMaxTorque
 * @return {Number}
 */
GearConstraint.prototype.getMaxTorque = function(torque){
    return this.equations[0].maxForce;
};
},{"../equations/AngleLockEquation":84,"../equations/Equation":86,"../math/vec2":94,"./Constraint":78}],81:[function(require,module,exports){
var Constraint = require('./Constraint')
,   vec2 = require('../math/vec2')
,   Equation = require('../equations/Equation');

module.exports = LockConstraint;

/**
 * Locks the relative position and rotation between two bodies.
 *
 * @class LockConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {Array}  [options.localOffsetB] The offset of bodyB in bodyA's frame. If not given the offset is computed from current positions.
 * @param {number} [options.localAngleB] The angle of bodyB in bodyA's frame. If not given, the angle is computed from current angles.
 * @param {number} [options.maxForce]
 * @extends Constraint
 *
 * @example
 *     // Locks the relative position and rotation between bodyA and bodyB
 *     var constraint = new LockConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 */
function LockConstraint(bodyA, bodyB, options){
    options = options || {};

    Constraint.call(this,bodyA,bodyB,Constraint.LOCK,options);

    var maxForce = ( typeof(options.maxForce)==="undefined" ? Number.MAX_VALUE : options.maxForce );

    var localAngleB = options.localAngleB || 0;

    // Use 3 equations:
    // gx =   (xj - xi - l) * xhat = 0
    // gy =   (xj - xi - l) * yhat = 0
    // gr =   (xi - xj + r) * that = 0
    //
    // ...where:
    //   l is the localOffsetB vector rotated to world in bodyA frame
    //   r is the same vector but reversed and rotated from bodyB frame
    //   xhat, yhat are world axis vectors
    //   that is the tangent of r
    //
    // For the first two constraints, we get
    // G*W = (vj - vi - ldot  ) * xhat
    //     = (vj - vi - wi x l) * xhat
    //
    // Since (wi x l) * xhat = (l x xhat) * wi, we get
    // G*W = [ -1   0   (-l x xhat)  1   0   0] * [vi wi vj wj]
    //
    // The last constraint gives
    // GW = (vi - vj + wj x r) * that
    //    = [  that   0  -that  (r x t) ]

    var x =     new Equation(bodyA,bodyB,-maxForce,maxForce),
        y =     new Equation(bodyA,bodyB,-maxForce,maxForce),
        rot =   new Equation(bodyA,bodyB,-maxForce,maxForce);

    var l = vec2.create(),
        g = vec2.create(),
        that = this;
    x.computeGq = function(){
        vec2.rotate(l, that.localOffsetB, bodyA.angle);
        vec2.sub(g, bodyB.position, bodyA.position);
        vec2.sub(g, g, l);
        return g[0];
    };
    y.computeGq = function(){
        vec2.rotate(l, that.localOffsetB, bodyA.angle);
        vec2.sub(g, bodyB.position, bodyA.position);
        vec2.sub(g, g, l);
        return g[1];
    };
    var r = vec2.create(),
        t = vec2.create();
    rot.computeGq = function(){
        vec2.rotate(r, that.localOffsetB, bodyB.angle - that.localAngleB);
        vec2.scale(r,r,-1);
        vec2.sub(g,bodyA.position,bodyB.position);
        vec2.add(g,g,r);
        vec2.rotate(t,r,-Math.PI/2);
        vec2.normalize(t,t);
        return vec2.dot(g,t);
    };

    /**
     * The offset of bodyB in bodyA's frame.
     * @property {Array} localOffsetB
     */
    this.localOffsetB = vec2.create();
    if(options.localOffsetB){
        vec2.copy(this.localOffsetB, options.localOffsetB);
    } else {
        // Construct from current positions
        vec2.sub(this.localOffsetB, bodyB.position, bodyA.position);
        vec2.rotate(this.localOffsetB, this.localOffsetB, -bodyA.angle);
    }

    /**
     * The offset angle of bodyB in bodyA's frame.
     * @property {Number} localAngleB
     */
    this.localAngleB = 0;
    if(typeof(options.localAngleB) === 'number'){
        this.localAngleB = options.localAngleB;
    } else {
        // Construct
        this.localAngleB = bodyB.angle - bodyA.angle;
    }

    this.equations.push(x, y, rot);
    this.setMaxForce(maxForce);
}
LockConstraint.prototype = new Constraint();
LockConstraint.prototype.constructor = LockConstraint;

/**
 * Set the maximum force to be applied.
 * @method setMaxForce
 * @param {Number} force
 */
LockConstraint.prototype.setMaxForce = function(force){
    var eqs = this.equations;
    for(var i=0; i<this.equations.length; i++){
        eqs[i].maxForce =  force;
        eqs[i].minForce = -force;
    }
};

/**
 * Get the max force.
 * @method getMaxForce
 * @return {Number}
 */
LockConstraint.prototype.getMaxForce = function(){
    return this.equations[0].maxForce;
};

var l = vec2.create();
var r = vec2.create();
var t = vec2.create();
var xAxis = vec2.fromValues(1,0);
var yAxis = vec2.fromValues(0,1);
LockConstraint.prototype.update = function(){
    var x =   this.equations[0],
        y =   this.equations[1],
        rot = this.equations[2],
        bodyA = this.bodyA,
        bodyB = this.bodyB;

    vec2.rotate(l,this.localOffsetB,bodyA.angle);
    vec2.rotate(r,this.localOffsetB,bodyB.angle - this.localAngleB);
    vec2.scale(r,r,-1);

    vec2.rotate(t,r,Math.PI/2);
    vec2.normalize(t,t);

    x.G[0] = -1;
    x.G[1] =  0;
    x.G[2] = -vec2.crossLength(l,xAxis);
    x.G[3] =  1;

    y.G[0] =  0;
    y.G[1] = -1;
    y.G[2] = -vec2.crossLength(l,yAxis);
    y.G[4] =  1;

    rot.G[0] =  -t[0];
    rot.G[1] =  -t[1];
    rot.G[3] =  t[0];
    rot.G[4] =  t[1];
    rot.G[5] =  vec2.crossLength(r,t);
};

},{"../equations/Equation":86,"../math/vec2":94,"./Constraint":78}],82:[function(require,module,exports){
var Constraint = require('./Constraint')
,   ContactEquation = require('../equations/ContactEquation')
,   Equation = require('../equations/Equation')
,   vec2 = require('../math/vec2')
,   RotationalLockEquation = require('../equations/RotationalLockEquation');

module.exports = PrismaticConstraint;

/**
 * Constraint that only allows bodies to move along a line, relative to each other. See <a href="http://www.iforce2d.net/b2dtut/joints-prismatic">this tutorial</a>. Also called "slider constraint".
 *
 * @class PrismaticConstraint
 * @constructor
 * @extends Constraint
 * @author schteppe
 * @param {Body}    bodyA
 * @param {Body}    bodyB
 * @param {Object}  [options]
 * @param {Number}  [options.maxForce]                Max force to be applied by the constraint
 * @param {Array}   [options.localAnchorA]            Body A's anchor point, defined in its own local frame.
 * @param {Array}   [options.localAnchorB]            Body B's anchor point, defined in its own local frame.
 * @param {Array}   [options.localAxisA]              An axis, defined in body A frame, that body B's anchor point may slide along.
 * @param {Boolean} [options.disableRotationalLock]   If set to true, bodyB will be free to rotate around its anchor point.
 * @param {Number}  [options.upperLimit]
 * @param {Number}  [options.lowerLimit]
 * @todo Ability to create using only a point and a worldAxis
 */
function PrismaticConstraint(bodyA, bodyB, options){
    options = options || {};
    Constraint.call(this,bodyA,bodyB,Constraint.PRISMATIC,options);

    // Get anchors
    var localAnchorA = vec2.fromValues(0,0),
        localAxisA = vec2.fromValues(1,0),
        localAnchorB = vec2.fromValues(0,0);
    if(options.localAnchorA){ vec2.copy(localAnchorA, options.localAnchorA); }
    if(options.localAxisA){ vec2.copy(localAxisA,   options.localAxisA); }
    if(options.localAnchorB){ vec2.copy(localAnchorB, options.localAnchorB); }

    /**
     * @property localAnchorA
     * @type {Array}
     */
    this.localAnchorA = localAnchorA;

    /**
     * @property localAnchorB
     * @type {Array}
     */
    this.localAnchorB = localAnchorB;

    /**
     * @property localAxisA
     * @type {Array}
     */
    this.localAxisA = localAxisA;

    /*

    The constraint violation for the common axis point is

        g = ( xj + rj - xi - ri ) * t   :=  gg*t

    where r are body-local anchor points, and t is a tangent to the constraint axis defined in body i frame.

        gdot =  ( vj + wj x rj - vi - wi x ri ) * t + ( xj + rj - xi - ri ) * ( wi x t )

    Note the use of the chain rule. Now we identify the jacobian

        G*W = [ -t      -ri x t + t x gg     t    rj x t ] * [vi wi vj wj]

    The rotational part is just a rotation lock.

     */

    var maxForce = this.maxForce = typeof(options.maxForce)!=="undefined" ? options.maxForce : Number.MAX_VALUE;

    // Translational part
    var trans = new Equation(bodyA,bodyB,-maxForce,maxForce);
    var ri = new vec2.create(),
        rj = new vec2.create(),
        gg = new vec2.create(),
        t =  new vec2.create();
    trans.computeGq = function(){
        // g = ( xj + rj - xi - ri ) * t
        return vec2.dot(gg,t);
    };
    trans.updateJacobian = function(){
        var G = this.G,
            xi = bodyA.position,
            xj = bodyB.position;
        vec2.rotate(ri,localAnchorA,bodyA.angle);
        vec2.rotate(rj,localAnchorB,bodyB.angle);
        vec2.add(gg,xj,rj);
        vec2.sub(gg,gg,xi);
        vec2.sub(gg,gg,ri);
        vec2.rotate(t,localAxisA,bodyA.angle+Math.PI/2);

        G[0] = -t[0];
        G[1] = -t[1];
        G[2] = -vec2.crossLength(ri,t) + vec2.crossLength(t,gg);
        G[3] = t[0];
        G[4] = t[1];
        G[5] = vec2.crossLength(rj,t);
    };
    this.equations.push(trans);

    // Rotational part
    if(!options.disableRotationalLock){
        var rot = new RotationalLockEquation(bodyA,bodyB,-maxForce,maxForce);
        this.equations.push(rot);
    }

    /**
     * The position of anchor A relative to anchor B, along the constraint axis.
     * @property position
     * @type {Number}
     */
    this.position = 0;

    // Is this one used at all?
    this.velocity = 0;

    /**
     * Set to true to enable lower limit.
     * @property lowerLimitEnabled
     * @type {Boolean}
     */
    this.lowerLimitEnabled = typeof(options.lowerLimit)!=="undefined" ? true : false;

    /**
     * Set to true to enable upper limit.
     * @property upperLimitEnabled
     * @type {Boolean}
     */
    this.upperLimitEnabled = typeof(options.upperLimit)!=="undefined" ? true : false;

    /**
     * Lower constraint limit. The constraint position is forced to be larger than this value.
     * @property lowerLimit
     * @type {Number}
     */
    this.lowerLimit = typeof(options.lowerLimit)!=="undefined" ? options.lowerLimit : 0;

    /**
     * Upper constraint limit. The constraint position is forced to be smaller than this value.
     * @property upperLimit
     * @type {Number}
     */
    this.upperLimit = typeof(options.upperLimit)!=="undefined" ? options.upperLimit : 1;

    // Equations used for limits
    this.upperLimitEquation = new ContactEquation(bodyA,bodyB);
    this.lowerLimitEquation = new ContactEquation(bodyA,bodyB);

    // Set max/min forces
    this.upperLimitEquation.minForce = this.lowerLimitEquation.minForce = 0;
    this.upperLimitEquation.maxForce = this.lowerLimitEquation.maxForce = maxForce;

    /**
     * Equation used for the motor.
     * @property motorEquation
     * @type {Equation}
     */
    this.motorEquation = new Equation(bodyA,bodyB);

    /**
     * The current motor state. Enable or disable the motor using .enableMotor
     * @property motorEnabled
     * @type {Boolean}
     */
    this.motorEnabled = false;

    /**
     * Set the target speed for the motor.
     * @property motorSpeed
     * @type {Number}
     */
    this.motorSpeed = 0;

    var that = this;
    var motorEquation = this.motorEquation;
    var old = motorEquation.computeGW;
    motorEquation.computeGq = function(){ return 0; };
    motorEquation.computeGW = function(){
        var G = this.G,
            bi = this.bodyA,
            bj = this.bodyB,
            vi = bi.velocity,
            vj = bj.velocity,
            wi = bi.angularVelocity,
            wj = bj.angularVelocity;
        return this.gmult(G,vi,wi,vj,wj) + that.motorSpeed;
    };
}

PrismaticConstraint.prototype = new Constraint();
PrismaticConstraint.prototype.constructor = PrismaticConstraint;

var worldAxisA = vec2.create(),
    worldAnchorA = vec2.create(),
    worldAnchorB = vec2.create(),
    orientedAnchorA = vec2.create(),
    orientedAnchorB = vec2.create(),
    tmp = vec2.create();

/**
 * Update the constraint equations. Should be done if any of the bodies changed position, before solving.
 * @method update
 */
PrismaticConstraint.prototype.update = function(){
    var eqs = this.equations,
        trans = eqs[0],
        upperLimit = this.upperLimit,
        lowerLimit = this.lowerLimit,
        upperLimitEquation = this.upperLimitEquation,
        lowerLimitEquation = this.lowerLimitEquation,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        localAxisA = this.localAxisA,
        localAnchorA = this.localAnchorA,
        localAnchorB = this.localAnchorB;

    trans.updateJacobian();

    // Transform local things to world
    vec2.rotate(worldAxisA,      localAxisA,      bodyA.angle);
    vec2.rotate(orientedAnchorA, localAnchorA,    bodyA.angle);
    vec2.add(worldAnchorA,       orientedAnchorA, bodyA.position);
    vec2.rotate(orientedAnchorB, localAnchorB,    bodyB.angle);
    vec2.add(worldAnchorB,       orientedAnchorB, bodyB.position);

    var relPosition = this.position = vec2.dot(worldAnchorB,worldAxisA) - vec2.dot(worldAnchorA,worldAxisA);

    // Motor
    if(this.motorEnabled){
        // G = [ a     a x ri   -a   -a x rj ]
        var G = this.motorEquation.G;
        G[0] = worldAxisA[0];
        G[1] = worldAxisA[1];
        G[2] = vec2.crossLength(worldAxisA,orientedAnchorB);
        G[3] = -worldAxisA[0];
        G[4] = -worldAxisA[1];
        G[5] = -vec2.crossLength(worldAxisA,orientedAnchorA);
    }

    /*
        Limits strategy:
        Add contact equation, with normal along the constraint axis.
        min/maxForce is set so the constraint is repulsive in the correct direction.
        Some offset is added to either equation.contactPointA or .contactPointB to get the correct upper/lower limit.

                 ^
                 |
      upperLimit x
                 |    ------
         anchorB x<---|  B |
                 |    |    |
        ------   |    ------
        |    |   |
        |  A |-->x anchorA
        ------   |
                 x lowerLimit
                 |
                axis
     */


    if(this.upperLimitEnabled && relPosition > upperLimit){
        // Update contact constraint normal, etc
        vec2.scale(upperLimitEquation.normalA, worldAxisA, -1);
        vec2.sub(upperLimitEquation.contactPointA, worldAnchorA, bodyA.position);
        vec2.sub(upperLimitEquation.contactPointB, worldAnchorB, bodyB.position);
        vec2.scale(tmp,worldAxisA,upperLimit);
        vec2.add(upperLimitEquation.contactPointA,upperLimitEquation.contactPointA,tmp);
        if(eqs.indexOf(upperLimitEquation) === -1){
            eqs.push(upperLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(upperLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }

    if(this.lowerLimitEnabled && relPosition < lowerLimit){
        // Update contact constraint normal, etc
        vec2.scale(lowerLimitEquation.normalA, worldAxisA, 1);
        vec2.sub(lowerLimitEquation.contactPointA, worldAnchorA, bodyA.position);
        vec2.sub(lowerLimitEquation.contactPointB, worldAnchorB, bodyB.position);
        vec2.scale(tmp,worldAxisA,lowerLimit);
        vec2.sub(lowerLimitEquation.contactPointB,lowerLimitEquation.contactPointB,tmp);
        if(eqs.indexOf(lowerLimitEquation) === -1){
            eqs.push(lowerLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(lowerLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }
};

/**
 * Enable the motor
 * @method enableMotor
 */
PrismaticConstraint.prototype.enableMotor = function(){
    if(this.motorEnabled){
        return;
    }
    this.equations.push(this.motorEquation);
    this.motorEnabled = true;
};

/**
 * Disable the rotational motor
 * @method disableMotor
 */
PrismaticConstraint.prototype.disableMotor = function(){
    if(!this.motorEnabled){
        return;
    }
    var i = this.equations.indexOf(this.motorEquation);
    this.equations.splice(i,1);
    this.motorEnabled = false;
};

/**
 * Set the constraint limits.
 * @method setLimits
 * @param {number} lower Lower limit.
 * @param {number} upper Upper limit.
 */
PrismaticConstraint.prototype.setLimits = function (lower, upper) {
    if(typeof(lower) === 'number'){
        this.lowerLimit = lower;
        this.lowerLimitEnabled = true;
    } else {
        this.lowerLimit = lower;
        this.lowerLimitEnabled = false;
    }

    if(typeof(upper) === 'number'){
        this.upperLimit = upper;
        this.upperLimitEnabled = true;
    } else {
        this.upperLimit = upper;
        this.upperLimitEnabled = false;
    }
};


},{"../equations/ContactEquation":85,"../equations/Equation":86,"../equations/RotationalLockEquation":88,"../math/vec2":94,"./Constraint":78}],83:[function(require,module,exports){
var Constraint = require('./Constraint')
,   Equation = require('../equations/Equation')
,   RotationalVelocityEquation = require('../equations/RotationalVelocityEquation')
,   RotationalLockEquation = require('../equations/RotationalLockEquation')
,   vec2 = require('../math/vec2');

module.exports = RevoluteConstraint;

var worldPivotA = vec2.create(),
    worldPivotB = vec2.create(),
    xAxis = vec2.fromValues(1,0),
    yAxis = vec2.fromValues(0,1),
    g = vec2.create();

/**
 * Connects two bodies at given offset points, letting them rotate relative to each other around this point.
 * @class RevoluteConstraint
 * @constructor
 * @author schteppe
 * @param {Body}    bodyA
 * @param {Body}    bodyB
 * @param {Object}  [options]
 * @param {Array}   [options.worldPivot] A pivot point given in world coordinates. If specified, localPivotA and localPivotB are automatically computed from this value.
 * @param {Array}   [options.localPivotA] The point relative to the center of mass of bodyA which bodyA is constrained to.
 * @param {Array}   [options.localPivotB] See localPivotA.
 * @param {Number}  [options.maxForce] The maximum force that should be applied to constrain the bodies.
 * @extends Constraint
 *
 * @example
 *     // This will create a revolute constraint between two bodies with pivot point in between them.
 *     var bodyA = new Body({ mass: 1, position: [-1, 0] });
 *     var bodyB = new Body({ mass: 1, position: [1, 0] });
 *     var constraint = new RevoluteConstraint(bodyA, bodyB, {
 *         worldPivot: [0, 0]
 *     });
 *     world.addConstraint(constraint);
 *
 *     // Using body-local pivot points, the constraint could have been constructed like this:
 *     var constraint = new RevoluteConstraint(bodyA, bodyB, {
 *         localPivotA: [1, 0],
 *         localPivotB: [-1, 0]
 *     });
 */
function RevoluteConstraint(bodyA, bodyB, options){
    options = options || {};
    Constraint.call(this,bodyA,bodyB,Constraint.REVOLUTE,options);

    var maxForce = this.maxForce = typeof(options.maxForce) !== "undefined" ? options.maxForce : Number.MAX_VALUE;

    /**
     * @property {Array} pivotA
     */
    this.pivotA = vec2.create();

    /**
     * @property {Array} pivotB
     */
    this.pivotB = vec2.create();

    if(options.worldPivot){
        // Compute pivotA and pivotB
        vec2.sub(this.pivotA, options.worldPivot, bodyA.position);
        vec2.sub(this.pivotB, options.worldPivot, bodyB.position);
        // Rotate to local coordinate system
        vec2.rotate(this.pivotA, this.pivotA, -bodyA.angle);
        vec2.rotate(this.pivotB, this.pivotB, -bodyB.angle);
    } else {
        // Get pivotA and pivotB
        vec2.copy(this.pivotA, options.localPivotA);
        vec2.copy(this.pivotB, options.localPivotB);
    }

    // Equations to be fed to the solver
    var eqs = this.equations = [
        new Equation(bodyA,bodyB,-maxForce,maxForce),
        new Equation(bodyA,bodyB,-maxForce,maxForce),
    ];

    var x = eqs[0];
    var y = eqs[1];
    var that = this;

    x.computeGq = function(){
        vec2.rotate(worldPivotA, that.pivotA, bodyA.angle);
        vec2.rotate(worldPivotB, that.pivotB, bodyB.angle);
        vec2.add(g, bodyB.position, worldPivotB);
        vec2.sub(g, g, bodyA.position);
        vec2.sub(g, g, worldPivotA);
        return vec2.dot(g,xAxis);
    };

    y.computeGq = function(){
        vec2.rotate(worldPivotA, that.pivotA, bodyA.angle);
        vec2.rotate(worldPivotB, that.pivotB, bodyB.angle);
        vec2.add(g, bodyB.position, worldPivotB);
        vec2.sub(g, g, bodyA.position);
        vec2.sub(g, g, worldPivotA);
        return vec2.dot(g,yAxis);
    };

    y.minForce = x.minForce = -maxForce;
    y.maxForce = x.maxForce =  maxForce;

    this.motorEquation = new RotationalVelocityEquation(bodyA,bodyB);

    /**
     * Indicates whether the motor is enabled. Use .enableMotor() to enable the constraint motor.
     * @property {Boolean} motorEnabled
     * @readOnly
     */
    this.motorEnabled = false;

    /**
     * The constraint position.
     * @property angle
     * @type {Number}
     * @readOnly
     */
    this.angle = 0;

    /**
     * Set to true to enable lower limit
     * @property lowerLimitEnabled
     * @type {Boolean}
     */
    this.lowerLimitEnabled = false;

    /**
     * Set to true to enable upper limit
     * @property upperLimitEnabled
     * @type {Boolean}
     */
    this.upperLimitEnabled = false;

    /**
     * The lower limit on the constraint angle.
     * @property lowerLimit
     * @type {Boolean}
     */
    this.lowerLimit = 0;

    /**
     * The upper limit on the constraint angle.
     * @property upperLimit
     * @type {Boolean}
     */
    this.upperLimit = 0;

    this.upperLimitEquation = new RotationalLockEquation(bodyA,bodyB);
    this.lowerLimitEquation = new RotationalLockEquation(bodyA,bodyB);
    this.upperLimitEquation.minForce = 0;
    this.lowerLimitEquation.maxForce = 0;
}
RevoluteConstraint.prototype = new Constraint();
RevoluteConstraint.prototype.constructor = RevoluteConstraint;

/**
 * Set the constraint angle limits.
 * @method setLimits
 * @param {number} lower Lower angle limit.
 * @param {number} upper Upper angle limit.
 */
RevoluteConstraint.prototype.setLimits = function (lower, upper) {
    if(typeof(lower) === 'number'){
        this.lowerLimit = lower;
        this.lowerLimitEnabled = true;
    } else {
        this.lowerLimit = lower;
        this.lowerLimitEnabled = false;
    }

    if(typeof(upper) === 'number'){
        this.upperLimit = upper;
        this.upperLimitEnabled = true;
    } else {
        this.upperLimit = upper;
        this.upperLimitEnabled = false;
    }
};

RevoluteConstraint.prototype.update = function(){
    var bodyA =  this.bodyA,
        bodyB =  this.bodyB,
        pivotA = this.pivotA,
        pivotB = this.pivotB,
        eqs =    this.equations,
        normal = eqs[0],
        tangent= eqs[1],
        x = eqs[0],
        y = eqs[1],
        upperLimit = this.upperLimit,
        lowerLimit = this.lowerLimit,
        upperLimitEquation = this.upperLimitEquation,
        lowerLimitEquation = this.lowerLimitEquation;

    var relAngle = this.angle = bodyB.angle - bodyA.angle;

    if(this.upperLimitEnabled && relAngle > upperLimit){
        upperLimitEquation.angle = upperLimit;
        if(eqs.indexOf(upperLimitEquation) === -1){
            eqs.push(upperLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(upperLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }

    if(this.lowerLimitEnabled && relAngle < lowerLimit){
        lowerLimitEquation.angle = lowerLimit;
        if(eqs.indexOf(lowerLimitEquation) === -1){
            eqs.push(lowerLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(lowerLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }

    /*

    The constraint violation is

        g = xj + rj - xi - ri

    ...where xi and xj are the body positions and ri and rj world-oriented offset vectors. Differentiate:

        gdot = vj + wj x rj - vi - wi x ri

    We split this into x and y directions. (let x and y be unit vectors along the respective axes)

        gdot * x = ( vj + wj x rj - vi - wi x ri ) * x
                 = ( vj*x + (wj x rj)*x -vi*x -(wi x ri)*x
                 = ( vj*x + (rj x x)*wj -vi*x -(ri x x)*wi
                 = [ -x   -(ri x x)   x   (rj x x)] * [vi wi vj wj]
                 = G*W

    ...and similar for y. We have then identified the jacobian entries for x and y directions:

        Gx = [ x   (rj x x)   -x   -(ri x x)]
        Gy = [ y   (rj x y)   -y   -(ri x y)]

     */

    vec2.rotate(worldPivotA, pivotA, bodyA.angle);
    vec2.rotate(worldPivotB, pivotB, bodyB.angle);

    // todo: these are a bit sparse. We could save some computations on making custom eq.computeGW functions, etc

    x.G[0] = -1;
    x.G[1] =  0;
    x.G[2] = -vec2.crossLength(worldPivotA,xAxis);
    x.G[3] =  1;
    x.G[4] =  0;
    x.G[5] =  vec2.crossLength(worldPivotB,xAxis);

    y.G[0] =  0;
    y.G[1] = -1;
    y.G[2] = -vec2.crossLength(worldPivotA,yAxis);
    y.G[3] =  0;
    y.G[4] =  1;
    y.G[5] =  vec2.crossLength(worldPivotB,yAxis);
};

/**
 * Enable the rotational motor
 * @method enableMotor
 */
RevoluteConstraint.prototype.enableMotor = function(){
    if(this.motorEnabled){
        return;
    }
    this.equations.push(this.motorEquation);
    this.motorEnabled = true;
};

/**
 * Disable the rotational motor
 * @method disableMotor
 */
RevoluteConstraint.prototype.disableMotor = function(){
    if(!this.motorEnabled){
        return;
    }
    var i = this.equations.indexOf(this.motorEquation);
    this.equations.splice(i,1);
    this.motorEnabled = false;
};

/**
 * Check if the motor is enabled.
 * @method motorIsEnabled
 * @deprecated use property motorEnabled instead.
 * @return {Boolean}
 */
RevoluteConstraint.prototype.motorIsEnabled = function(){
    return !!this.motorEnabled;
};

/**
 * Set the speed of the rotational constraint motor
 * @method setMotorSpeed
 * @param  {Number} speed
 */
RevoluteConstraint.prototype.setMotorSpeed = function(speed){
    if(!this.motorEnabled){
        return;
    }
    var i = this.equations.indexOf(this.motorEquation);
    this.equations[i].relativeVelocity = speed;
};

/**
 * Get the speed of the rotational constraint motor
 * @method getMotorSpeed
 * @return {Number} The current speed, or false if the motor is not enabled.
 */
RevoluteConstraint.prototype.getMotorSpeed = function(){
    if(!this.motorEnabled){
        return false;
    }
    return this.motorEquation.relativeVelocity;
};

},{"../equations/Equation":86,"../equations/RotationalLockEquation":88,"../equations/RotationalVelocityEquation":89,"../math/vec2":94,"./Constraint":78}],84:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = AngleLockEquation;

/**
 * Locks the relative angle between two bodies. The constraint tries to keep the dot product between two vectors, local in each body, to zero. The local angle in body i is a parameter.
 *
 * @class AngleLockEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {Number} [options.angle] Angle to add to the local vector in body A.
 * @param {Number} [options.ratio] Gear ratio
 */
function AngleLockEquation(bodyA, bodyB, options){
    options = options || {};
    Equation.call(this,bodyA,bodyB,-Number.MAX_VALUE,Number.MAX_VALUE);
    this.angle = options.angle || 0;

    /**
     * The gear ratio.
     * @property {Number} ratio
     * @private
     * @see setRatio
     */
    this.ratio = typeof(options.ratio)==="number" ? options.ratio : 1;

    this.setRatio(this.ratio);
}
AngleLockEquation.prototype = new Equation();
AngleLockEquation.prototype.constructor = AngleLockEquation;

AngleLockEquation.prototype.computeGq = function(){
    return this.ratio * this.bodyA.angle - this.bodyB.angle + this.angle;
};

/**
 * Set the gear ratio for this equation
 * @method setRatio
 * @param {Number} ratio
 */
AngleLockEquation.prototype.setRatio = function(ratio){
    var G = this.G;
    G[2] =  ratio;
    G[5] = -1;
    this.ratio = ratio;
};

/**
 * Set the max force for the equation.
 * @method setMaxTorque
 * @param {Number} torque
 */
AngleLockEquation.prototype.setMaxTorque = function(torque){
    this.maxForce =  torque;
    this.minForce = -torque;
};

},{"../math/vec2":94,"./Equation":86}],85:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = ContactEquation;

/**
 * Non-penetration constraint equation. Tries to make the contactPointA and contactPointB vectors coincide, while keeping the applied force repulsive.
 *
 * @class ContactEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
function ContactEquation(bodyA, bodyB){
    Equation.call(this, bodyA, bodyB, 0, Number.MAX_VALUE);

    /**
     * Vector from body i center of mass to the contact point.
     * @property contactPointA
     * @type {Array}
     */
    this.contactPointA = vec2.create();
    this.penetrationVec = vec2.create();

    /**
     * World-oriented vector from body A center of mass to the contact point.
     * @property contactPointB
     * @type {Array}
     */
    this.contactPointB = vec2.create();

    /**
     * The normal vector, pointing out of body i
     * @property normalA
     * @type {Array}
     */
    this.normalA = vec2.create();

    /**
     * The restitution to use (0=no bounciness, 1=max bounciness).
     * @property restitution
     * @type {Number}
     */
    this.restitution = 0;

    /**
     * This property is set to true if this is the first impact between the bodies (not persistant contact).
     * @property firstImpact
     * @type {Boolean}
     * @readOnly
     */
    this.firstImpact = false;

    /**
     * The shape in body i that triggered this contact.
     * @property shapeA
     * @type {Shape}
     */
    this.shapeA = null;

    /**
     * The shape in body j that triggered this contact.
     * @property shapeB
     * @type {Shape}
     */
    this.shapeB = null;
}
ContactEquation.prototype = new Equation();
ContactEquation.prototype.constructor = ContactEquation;
ContactEquation.prototype.computeB = function(a,b,h){
    var bi = this.bodyA,
        bj = this.bodyB,
        ri = this.contactPointA,
        rj = this.contactPointB,
        xi = bi.position,
        xj = bj.position;

    var penetrationVec = this.penetrationVec,
        n = this.normalA,
        G = this.G;

    // Caluclate cross products
    var rixn = vec2.crossLength(ri,n),
        rjxn = vec2.crossLength(rj,n);

    // G = [-n -rixn n rjxn]
    G[0] = -n[0];
    G[1] = -n[1];
    G[2] = -rixn;
    G[3] = n[0];
    G[4] = n[1];
    G[5] = rjxn;

    // Calculate q = xj+rj -(xi+ri) i.e. the penetration vector
    vec2.add(penetrationVec,xj,rj);
    vec2.sub(penetrationVec,penetrationVec,xi);
    vec2.sub(penetrationVec,penetrationVec,ri);

    // Compute iteration
    var GW, Gq;
    if(this.firstImpact && this.restitution !== 0){
        Gq = 0;
        GW = (1/b)*(1+this.restitution) * this.computeGW();
    } else {
        Gq = vec2.dot(n,penetrationVec) + this.offset;
        GW = this.computeGW();
    }

    var GiMf = this.computeGiMf();
    var B = - Gq * a - GW * b - h*GiMf;

    return B;
};

var vi = vec2.create();
var vj = vec2.create();
var relVel = vec2.create();

/**
 * Get the relative velocity along the normal vector.
 * @return {number}
 */
ContactEquation.prototype.getVelocityAlongNormal = function(){

    this.bodyA.getVelocityAtPoint(vi, this.contactPointA);
    this.bodyB.getVelocityAtPoint(vj, this.contactPointB);

    vec2.subtract(relVel, vi, vj);

    return vec2.dot(this.normalA, relVel);
};
},{"../math/vec2":94,"./Equation":86}],86:[function(require,module,exports){
module.exports = Equation;

var vec2 = require('../math/vec2'),
    Utils = require('../utils/Utils'),
    Body = require('../objects/Body');

/**
 * Base class for constraint equations.
 * @class Equation
 * @constructor
 * @param {Body} bodyA First body participating in the equation
 * @param {Body} bodyB Second body participating in the equation
 * @param {number} minForce Minimum force to apply. Default: -Number.MAX_VALUE
 * @param {number} maxForce Maximum force to apply. Default: Number.MAX_VALUE
 */
function Equation(bodyA, bodyB, minForce, maxForce){

    /**
     * Minimum force to apply when solving.
     * @property minForce
     * @type {Number}
     */
    this.minForce = typeof(minForce)==="undefined" ? -Number.MAX_VALUE : minForce;

    /**
     * Max force to apply when solving.
     * @property maxForce
     * @type {Number}
     */
    this.maxForce = typeof(maxForce)==="undefined" ? Number.MAX_VALUE : maxForce;

    /**
     * First body participating in the constraint
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second body participating in the constraint
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;

    /**
     * The stiffness of this equation. Typically chosen to a large number (~1e7), but can be chosen somewhat freely to get a stable simulation.
     * @property stiffness
     * @type {Number}
     */
    this.stiffness = Equation.DEFAULT_STIFFNESS;

    /**
     * The number of time steps needed to stabilize the constraint equation. Typically between 3 and 5 time steps.
     * @property relaxation
     * @type {Number}
     */
    this.relaxation = Equation.DEFAULT_RELAXATION;

    /**
     * The Jacobian entry of this equation. 6 numbers, 3 per body (x,y,angle).
     * @property G
     * @type {Array}
     */
    this.G = new Utils.ARRAY_TYPE(6);
    for(var i=0; i<6; i++){
        this.G[i]=0;
    }

    this.offset = 0;

    this.a = 0;
    this.b = 0;
    this.epsilon = 0;
    this.timeStep = 1/60;

    /**
     * Indicates if stiffness or relaxation was changed.
     * @property {Boolean} needsUpdate
     */
    this.needsUpdate = true;

    /**
     * The resulting constraint multiplier from the last solve. This is mostly equivalent to the force produced by the constraint.
     * @property multiplier
     * @type {Number}
     */
    this.multiplier = 0;

    /**
     * Relative velocity.
     * @property {Number} relativeVelocity
     */
    this.relativeVelocity = 0;

    /**
     * Whether this equation is enabled or not. If true, it will be added to the solver.
     * @property {Boolean} enabled
     */
    this.enabled = true;
}
Equation.prototype.constructor = Equation;

/**
 * The default stiffness when creating a new Equation.
 * @static
 * @property {Number} DEFAULT_STIFFNESS
 * @default 1e6
 */
Equation.DEFAULT_STIFFNESS = 1e6;

/**
 * The default relaxation when creating a new Equation.
 * @static
 * @property {Number} DEFAULT_RELAXATION
 * @default 4
 */
Equation.DEFAULT_RELAXATION = 4;

/**
 * Compute SPOOK parameters .a, .b and .epsilon according to the current parameters. See equations 9, 10 and 11 in the <a href="http://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf">SPOOK notes</a>.
 * @method update
 */
Equation.prototype.update = function(){
    var k = this.stiffness,
        d = this.relaxation,
        h = this.timeStep;

    this.a = 4.0 / (h * (1 + 4 * d));
    this.b = (4.0 * d) / (1 + 4 * d);
    this.epsilon = 4.0 / (h * h * k * (1 + 4 * d));

    this.needsUpdate = false;
};

/**
 * Multiply a jacobian entry with corresponding positions or velocities
 * @method gmult
 * @return {Number}
 */
Equation.prototype.gmult = function(G,vi,wi,vj,wj){
    return  G[0] * vi[0] +
            G[1] * vi[1] +
            G[2] * wi +
            G[3] * vj[0] +
            G[4] * vj[1] +
            G[5] * wj;
};

/**
 * Computes the RHS of the SPOOK equation
 * @method computeB
 * @return {Number}
 */
Equation.prototype.computeB = function(a,b,h){
    var GW = this.computeGW();
    var Gq = this.computeGq();
    var GiMf = this.computeGiMf();
    return - Gq * a - GW * b - GiMf*h;
};

/**
 * Computes G\*q, where q are the generalized body coordinates
 * @method computeGq
 * @return {Number}
 */
var qi = vec2.create(),
    qj = vec2.create();
Equation.prototype.computeGq = function(){
    var G = this.G,
        bi = this.bodyA,
        bj = this.bodyB,
        xi = bi.position,
        xj = bj.position,
        ai = bi.angle,
        aj = bj.angle;

    return this.gmult(G, qi, ai, qj, aj) + this.offset;
};

/**
 * Computes G\*W, where W are the body velocities
 * @method computeGW
 * @return {Number}
 */
Equation.prototype.computeGW = function(){
    var G = this.G,
        bi = this.bodyA,
        bj = this.bodyB,
        vi = bi.velocity,
        vj = bj.velocity,
        wi = bi.angularVelocity,
        wj = bj.angularVelocity;
    return this.gmult(G,vi,wi,vj,wj) + this.relativeVelocity;
};

/**
 * Computes G\*Wlambda, where W are the body velocities
 * @method computeGWlambda
 * @return {Number}
 */
Equation.prototype.computeGWlambda = function(){
    var G = this.G,
        bi = this.bodyA,
        bj = this.bodyB,
        vi = bi.vlambda,
        vj = bj.vlambda,
        wi = bi.wlambda,
        wj = bj.wlambda;
    return this.gmult(G,vi,wi,vj,wj);
};

/**
 * Computes G\*inv(M)\*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
 * @method computeGiMf
 * @return {Number}
 */
var iMfi = vec2.create(),
    iMfj = vec2.create();
Equation.prototype.computeGiMf = function(){
    var bi = this.bodyA,
        bj = this.bodyB,
        fi = bi.force,
        ti = bi.angularForce,
        fj = bj.force,
        tj = bj.angularForce,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaSolve,
        invIj = bj.invInertiaSolve,
        G = this.G;

    vec2.scale(iMfi, fi, invMassi);
    vec2.multiply(iMfi, bi.massMultiplier, iMfi);
    vec2.scale(iMfj, fj,invMassj);
    vec2.multiply(iMfj, bj.massMultiplier, iMfj);

    return this.gmult(G,iMfi,ti*invIi,iMfj,tj*invIj);
};

/**
 * Computes G\*inv(M)\*G'
 * @method computeGiMGt
 * @return {Number}
 */
Equation.prototype.computeGiMGt = function(){
    var bi = this.bodyA,
        bj = this.bodyB,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaSolve,
        invIj = bj.invInertiaSolve,
        G = this.G;

    return  G[0] * G[0] * invMassi * bi.massMultiplier[0] +
            G[1] * G[1] * invMassi * bi.massMultiplier[1] +
            G[2] * G[2] *    invIi +
            G[3] * G[3] * invMassj * bj.massMultiplier[0] +
            G[4] * G[4] * invMassj * bj.massMultiplier[1] +
            G[5] * G[5] *    invIj;
};

var addToWlambda_temp = vec2.create(),
    addToWlambda_Gi = vec2.create(),
    addToWlambda_Gj = vec2.create(),
    addToWlambda_ri = vec2.create(),
    addToWlambda_rj = vec2.create(),
    addToWlambda_Mdiag = vec2.create();

/**
 * Add constraint velocity to the bodies.
 * @method addToWlambda
 * @param {Number} deltalambda
 */
Equation.prototype.addToWlambda = function(deltalambda){
    var bi = this.bodyA,
        bj = this.bodyB,
        temp = addToWlambda_temp,
        Gi = addToWlambda_Gi,
        Gj = addToWlambda_Gj,
        ri = addToWlambda_ri,
        rj = addToWlambda_rj,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaSolve,
        invIj = bj.invInertiaSolve,
        Mdiag = addToWlambda_Mdiag,
        G = this.G;

    Gi[0] = G[0];
    Gi[1] = G[1];
    Gj[0] = G[3];
    Gj[1] = G[4];

    // Add to linear velocity
    // v_lambda += inv(M) * delta_lamba * G
    vec2.scale(temp, Gi, invMassi*deltalambda);
    vec2.multiply(temp, temp, bi.massMultiplier);
    vec2.add( bi.vlambda, bi.vlambda, temp);
    // This impulse is in the offset frame
    // Also add contribution to angular
    //bi.wlambda -= vec2.crossLength(temp,ri);
    bi.wlambda += invIi * G[2] * deltalambda;


    vec2.scale(temp, Gj, invMassj*deltalambda);
    vec2.multiply(temp, temp, bj.massMultiplier);
    vec2.add( bj.vlambda, bj.vlambda, temp);
    //bj.wlambda -= vec2.crossLength(temp,rj);
    bj.wlambda += invIj * G[5] * deltalambda;
};

/**
 * Compute the denominator part of the SPOOK equation: C = G\*inv(M)\*G' + eps
 * @method computeInvC
 * @param  {Number} eps
 * @return {Number}
 */
Equation.prototype.computeInvC = function(eps){
    return 1.0 / (this.computeGiMGt() + eps);
};

},{"../math/vec2":94,"../objects/Body":95,"../utils/Utils":121}],87:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Equation = require('./Equation')
,   Utils = require('../utils/Utils');

module.exports = FrictionEquation;

/**
 * Constrains the slipping in a contact along a tangent
 *
 * @class FrictionEquation
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} slipForce
 * @extends Equation
 */
function FrictionEquation(bodyA, bodyB, slipForce){
    Equation.call(this, bodyA, bodyB, -slipForce, slipForce);

    /**
     * Relative vector from center of body A to the contact point, world oriented.
     * @property contactPointA
     * @type {Array}
     */
    this.contactPointA = vec2.create();

    /**
     * Relative vector from center of body B to the contact point, world oriented.
     * @property contactPointB
     * @type {Array}
     */
    this.contactPointB = vec2.create();

    /**
     * Tangent vector that the friction force will act along. World oriented.
     * @property t
     * @type {Array}
     */
    this.t = vec2.create();

    /**
     * ContactEquations connected to this friction equation. The contact equations can be used to rescale the max force for the friction. If more than one contact equation is given, then the max force can be set to the average.
     * @property contactEquations
     * @type {ContactEquation}
     */
    this.contactEquations = [];

    /**
     * The shape in body i that triggered this friction.
     * @property shapeA
     * @type {Shape}
     * @todo Needed? The shape can be looked up via contactEquation.shapeA...
     */
    this.shapeA = null;

    /**
     * The shape in body j that triggered this friction.
     * @property shapeB
     * @type {Shape}
     * @todo Needed? The shape can be looked up via contactEquation.shapeB...
     */
    this.shapeB = null;

    /**
     * The friction coefficient to use.
     * @property frictionCoefficient
     * @type {Number}
     */
    this.frictionCoefficient = 0.3;
}
FrictionEquation.prototype = new Equation();
FrictionEquation.prototype.constructor = FrictionEquation;

/**
 * Set the slipping condition for the constraint. The friction force cannot be
 * larger than this value.
 * @method setSlipForce
 * @param  {Number} slipForce
 */
FrictionEquation.prototype.setSlipForce = function(slipForce){
    this.maxForce = slipForce;
    this.minForce = -slipForce;
};

/**
 * Get the max force for the constraint.
 * @method getSlipForce
 * @return {Number}
 */
FrictionEquation.prototype.getSlipForce = function(){
    return this.maxForce;
};

FrictionEquation.prototype.computeB = function(a,b,h){
    var bi = this.bodyA,
        bj = this.bodyB,
        ri = this.contactPointA,
        rj = this.contactPointB,
        t = this.t,
        G = this.G;

    // G = [-t -rixt t rjxt]
    // And remember, this is a pure velocity constraint, g is always zero!
    G[0] = -t[0];
    G[1] = -t[1];
    G[2] = -vec2.crossLength(ri,t);
    G[3] = t[0];
    G[4] = t[1];
    G[5] = vec2.crossLength(rj,t);

    var GW = this.computeGW(),
        GiMf = this.computeGiMf();

    var B = /* - g * a  */ - GW * b - h*GiMf;

    return B;
};

},{"../math/vec2":94,"../utils/Utils":121,"./Equation":86}],88:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = RotationalLockEquation;

/**
 * Locks the relative angle between two bodies. The constraint tries to keep the dot product between two vectors, local in each body, to zero. The local angle in body i is a parameter.
 *
 * @class RotationalLockEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {Number} [options.angle] Angle to add to the local vector in bodyA.
 */
function RotationalLockEquation(bodyA, bodyB, options){
    options = options || {};
    Equation.call(this, bodyA, bodyB, -Number.MAX_VALUE, Number.MAX_VALUE);

    /**
     * @property {number} angle
     */
    this.angle = options.angle || 0;

    var G = this.G;
    G[2] =  1;
    G[5] = -1;
}
RotationalLockEquation.prototype = new Equation();
RotationalLockEquation.prototype.constructor = RotationalLockEquation;

var worldVectorA = vec2.create(),
    worldVectorB = vec2.create(),
    xAxis = vec2.fromValues(1,0),
    yAxis = vec2.fromValues(0,1);
RotationalLockEquation.prototype.computeGq = function(){
    vec2.rotate(worldVectorA,xAxis,this.bodyA.angle+this.angle);
    vec2.rotate(worldVectorB,yAxis,this.bodyB.angle);
    return vec2.dot(worldVectorA,worldVectorB);
};

},{"../math/vec2":94,"./Equation":86}],89:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = RotationalVelocityEquation;

/**
 * Syncs rotational velocity of two bodies, or sets a relative velocity (motor).
 *
 * @class RotationalVelocityEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
function RotationalVelocityEquation(bodyA, bodyB){
    Equation.call(this, bodyA, bodyB, -Number.MAX_VALUE, Number.MAX_VALUE);
    this.relativeVelocity = 1;
    this.ratio = 1;
}
RotationalVelocityEquation.prototype = new Equation();
RotationalVelocityEquation.prototype.constructor = RotationalVelocityEquation;
RotationalVelocityEquation.prototype.computeB = function(a,b,h){
    var G = this.G;
    G[2] = -1;
    G[5] = this.ratio;

    var GiMf = this.computeGiMf();
    var GW = this.computeGW();
    var B = - GW * b - h*GiMf;

    return B;
};

},{"../math/vec2":94,"./Equation":86}],90:[function(require,module,exports){
/**
 * Base class for objects that dispatches events.
 * @class EventEmitter
 * @constructor
 */
var EventEmitter = function () {};

module.exports = EventEmitter;

EventEmitter.prototype = {
    constructor: EventEmitter,

    /**
     * Add an event listener
     * @method on
     * @param  {String} type
     * @param  {Function} listener
     * @return {EventEmitter} The self object, for chainability.
     */
    on: function ( type, listener, context ) {
        listener.context = context || this;
        if ( this._listeners === undefined ){
            this._listeners = {};
        }
        var listeners = this._listeners;
        if ( listeners[ type ] === undefined ) {
            listeners[ type ] = [];
        }
        if ( listeners[ type ].indexOf( listener ) === - 1 ) {
            listeners[ type ].push( listener );
        }
        return this;
    },

    /**
     * Check if an event listener is added
     * @method has
     * @param  {String} type
     * @param  {Function} listener
     * @return {Boolean}
     */
    has: function ( type, listener ) {
        if ( this._listeners === undefined ){
            return false;
        }
        var listeners = this._listeners;
        if(listener){
            if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {
                return true;
            }
        } else {
            if ( listeners[ type ] !== undefined ) {
                return true;
            }
        }

        return false;
    },

    /**
     * Remove an event listener
     * @method off
     * @param  {String} type
     * @param  {Function} listener
     * @return {EventEmitter} The self object, for chainability.
     */
    off: function ( type, listener ) {
        if ( this._listeners === undefined ){
            return this;
        }
        var listeners = this._listeners;
        var index = listeners[ type ].indexOf( listener );
        if ( index !== - 1 ) {
            listeners[ type ].splice( index, 1 );
        }
        return this;
    },

    /**
     * Emit an event.
     * @method emit
     * @param  {Object} event
     * @param  {String} event.type
     * @return {EventEmitter} The self object, for chainability.
     */
    emit: function ( event ) {
        if ( this._listeners === undefined ){
            return this;
        }
        var listeners = this._listeners;
        var listenerArray = listeners[ event.type ];
        if ( listenerArray !== undefined ) {
            event.target = this;
            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {
                var listener = listenerArray[ i ];
                listener.call( listener.context, event );
            }
        }
        return this;
    }
};

},{}],91:[function(require,module,exports){
var Material = require('./Material');
var Equation = require('../equations/Equation');

module.exports = ContactMaterial;

/**
 * Defines what happens when two materials meet, such as what friction coefficient to use. You can also set other things such as restitution, surface velocity and constraint parameters.
 * @class ContactMaterial
 * @constructor
 * @param {Material} materialA
 * @param {Material} materialB
 * @param {Object}   [options]
 * @param {Number}   [options.friction=0.3]       Friction coefficient.
 * @param {Number}   [options.restitution=0]      Restitution coefficient aka "bounciness".
 * @param {Number}   [options.stiffness]          ContactEquation stiffness.
 * @param {Number}   [options.relaxation]         ContactEquation relaxation.
 * @param {Number}   [options.frictionStiffness]  FrictionEquation stiffness.
 * @param {Number}   [options.frictionRelaxation] FrictionEquation relaxation.
 * @param {Number}   [options.surfaceVelocity=0]  Surface velocity.
 * @author schteppe
 */
function ContactMaterial(materialA, materialB, options){
    options = options || {};

    if(!(materialA instanceof Material) || !(materialB instanceof Material)){
        throw new Error("First two arguments must be Material instances.");
    }

    /**
     * The contact material identifier
     * @property id
     * @type {Number}
     */
    this.id = ContactMaterial.idCounter++;

    /**
     * First material participating in the contact material
     * @property materialA
     * @type {Material}
     */
    this.materialA = materialA;

    /**
     * Second material participating in the contact material
     * @property materialB
     * @type {Material}
     */
    this.materialB = materialB;

    /**
     * Friction coefficient to use in the contact of these two materials. Friction = 0 will make the involved objects super slippery, and friction = 1 will make it much less slippery. A friction coefficient larger than 1 will allow for very large friction forces, which can be convenient for preventing car tires not slip on the ground.
     * @property friction
     * @type {Number}
     * @default 0.3
     */
    this.friction = typeof(options.friction) !== "undefined" ? Number(options.friction) : 0.3;

    /**
     * Restitution, or "bounciness" to use in the contact of these two materials. A restitution of 0 will make no bounce, while restitution=1 will approximately bounce back with the same velocity the object came with.
     * @property restitution
     * @type {Number}
     * @default 0
     */
    this.restitution = typeof(options.restitution) !== "undefined" ? Number(options.restitution) : 0;

    /**
     * Hardness of the contact. Less stiffness will make the objects penetrate more, and will make the contact act more like a spring than a contact force. Default value is {{#crossLink "Equation/DEFAULT_STIFFNESS:property"}}Equation.DEFAULT_STIFFNESS{{/crossLink}}.
     * @property stiffness
     * @type {Number}
     */
    this.stiffness = typeof(options.stiffness) !== "undefined" ? Number(options.stiffness) : Equation.DEFAULT_STIFFNESS;

    /**
     * Relaxation of the resulting ContactEquation that this ContactMaterial generate. Default value is {{#crossLink "Equation/DEFAULT_RELAXATION:property"}}Equation.DEFAULT_RELAXATION{{/crossLink}}.
     * @property relaxation
     * @type {Number}
     */
    this.relaxation = typeof(options.relaxation) !== "undefined" ? Number(options.relaxation) : Equation.DEFAULT_RELAXATION;

    /**
     * Stiffness of the resulting friction force. For most cases, the value of this property should be a large number. I cannot think of any case where you would want less frictionStiffness. Default value is {{#crossLink "Equation/DEFAULT_STIFFNESS:property"}}Equation.DEFAULT_STIFFNESS{{/crossLink}}.
     * @property frictionStiffness
     * @type {Number}
     */
    this.frictionStiffness = typeof(options.frictionStiffness) !== "undefined" ? Number(options.frictionStiffness) : Equation.DEFAULT_STIFFNESS;

    /**
     * Relaxation of the resulting friction force. The default value should be good for most simulations. Default value is {{#crossLink "Equation/DEFAULT_RELAXATION:property"}}Equation.DEFAULT_RELAXATION{{/crossLink}}.
     * @property frictionRelaxation
     * @type {Number}
     */
    this.frictionRelaxation = typeof(options.frictionRelaxation) !== "undefined" ? Number(options.frictionRelaxation)  : Equation.DEFAULT_RELAXATION;

    /**
     * Will add surface velocity to this material. If bodyA rests on top if bodyB, and the surface velocity is positive, bodyA will slide to the right.
     * @property {Number} surfaceVelocity
     * @default 0
     */
    this.surfaceVelocity = typeof(options.surfaceVelocity) !== "undefined" ? Number(options.surfaceVelocity) : 0;

    /**
     * Offset to be set on ContactEquations. A positive value will make the bodies penetrate more into each other. Can be useful in scenes where contacts need to be more persistent, for example when stacking. Aka "cure for nervous contacts".
     * @property contactSkinSize
     * @type {Number}
     */
    this.contactSkinSize = 0.005;
}

ContactMaterial.idCounter = 0;

},{"../equations/Equation":86,"./Material":92}],92:[function(require,module,exports){
module.exports = Material;

/**
 * Defines a physics material.
 * @class Material
 * @constructor
 * @param {number} id Material identifier
 * @author schteppe
 */
function Material(id){
    /**
     * The material identifier
     * @property id
     * @type {Number}
     */
    this.id = id || Material.idCounter++;
}

Material.idCounter = 0;

},{}],93:[function(require,module,exports){

    /*
        PolyK library
        url: http://polyk.ivank.net
        Released under MIT licence.

        Copyright (c) 2012 Ivan Kuckir

        Permission is hereby granted, free of charge, to any person
        obtaining a copy of this software and associated documentation
        files (the "Software"), to deal in the Software without
        restriction, including without limitation the rights to use,
        copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the
        Software is furnished to do so, subject to the following
        conditions:

        The above copyright notice and this permission notice shall be
        included in all copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
        OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
        HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
        WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        OTHER DEALINGS IN THE SOFTWARE.
    */

    var PolyK = {};

    /*
        Is Polygon self-intersecting?

        O(n^2)
    */
    /*
    PolyK.IsSimple = function(p)
    {
        var n = p.length>>1;
        if(n<4) return true;
        var a1 = new PolyK._P(), a2 = new PolyK._P();
        var b1 = new PolyK._P(), b2 = new PolyK._P();
        var c = new PolyK._P();

        for(var i=0; i<n; i++)
        {
            a1.x = p[2*i  ];
            a1.y = p[2*i+1];
            if(i==n-1)  { a2.x = p[0    ];  a2.y = p[1    ]; }
            else        { a2.x = p[2*i+2];  a2.y = p[2*i+3]; }

            for(var j=0; j<n; j++)
            {
                if(Math.abs(i-j) < 2) continue;
                if(j==n-1 && i==0) continue;
                if(i==n-1 && j==0) continue;

                b1.x = p[2*j  ];
                b1.y = p[2*j+1];
                if(j==n-1)  { b2.x = p[0    ];  b2.y = p[1    ]; }
                else        { b2.x = p[2*j+2];  b2.y = p[2*j+3]; }

                if(PolyK._GetLineIntersection(a1,a2,b1,b2,c) != null) return false;
            }
        }
        return true;
    }

    PolyK.IsConvex = function(p)
    {
        if(p.length<6) return true;
        var l = p.length - 4;
        for(var i=0; i<l; i+=2)
            if(!PolyK._convex(p[i], p[i+1], p[i+2], p[i+3], p[i+4], p[i+5])) return false;
        if(!PolyK._convex(p[l  ], p[l+1], p[l+2], p[l+3], p[0], p[1])) return false;
        if(!PolyK._convex(p[l+2], p[l+3], p[0  ], p[1  ], p[2], p[3])) return false;
        return true;
    }
    */
    PolyK.GetArea = function(p)
    {
        if(p.length <6) return 0;
        var l = p.length - 2;
        var sum = 0;
        for(var i=0; i<l; i+=2)
            sum += (p[i+2]-p[i]) * (p[i+1]+p[i+3]);
        sum += (p[0]-p[l]) * (p[l+1]+p[1]);
        return - sum * 0.5;
    }
    /*
    PolyK.GetAABB = function(p)
    {
        var minx = Infinity;
        var miny = Infinity;
        var maxx = -minx;
        var maxy = -miny;
        for(var i=0; i<p.length; i+=2)
        {
            minx = Math.min(minx, p[i  ]);
            maxx = Math.max(maxx, p[i  ]);
            miny = Math.min(miny, p[i+1]);
            maxy = Math.max(maxy, p[i+1]);
        }
        return {x:minx, y:miny, width:maxx-minx, height:maxy-miny};
    }
    */

    PolyK.Triangulate = function(p)
    {
        var n = p.length>>1;
        if(n<3) return [];
        var tgs = [];
        var avl = [];
        for(var i=0; i<n; i++) avl.push(i);

        var i = 0;
        var al = n;
        while(al > 3)
        {
            var i0 = avl[(i+0)%al];
            var i1 = avl[(i+1)%al];
            var i2 = avl[(i+2)%al];

            var ax = p[2*i0],  ay = p[2*i0+1];
            var bx = p[2*i1],  by = p[2*i1+1];
            var cx = p[2*i2],  cy = p[2*i2+1];

            var earFound = false;
            if(PolyK._convex(ax, ay, bx, by, cx, cy))
            {
                earFound = true;
                for(var j=0; j<al; j++)
                {
                    var vi = avl[j];
                    if(vi==i0 || vi==i1 || vi==i2) continue;
                    if(PolyK._PointInTriangle(p[2*vi], p[2*vi+1], ax, ay, bx, by, cx, cy)) {earFound = false; break;}
                }
            }
            if(earFound)
            {
                tgs.push(i0, i1, i2);
                avl.splice((i+1)%al, 1);
                al--;
                i= 0;
            }
            else if(i++ > 3*al) break;      // no convex angles :(
        }
        tgs.push(avl[0], avl[1], avl[2]);
        return tgs;
    }
    /*
    PolyK.ContainsPoint = function(p, px, py)
    {
        var n = p.length>>1;
        var ax, ay, bx = p[2*n-2]-px, by = p[2*n-1]-py;
        var depth = 0;
        for(var i=0; i<n; i++)
        {
            ax = bx;  ay = by;
            bx = p[2*i  ] - px;
            by = p[2*i+1] - py;
            if(ay< 0 && by< 0) continue;    // both "up" or both "donw"
            if(ay>=0 && by>=0) continue;    // both "up" or both "donw"
            if(ax< 0 && bx< 0) continue;

            var lx = ax + (bx-ax)*(-ay)/(by-ay);
            if(lx>0) depth++;
        }
        return (depth & 1) == 1;
    }

    PolyK.Slice = function(p, ax, ay, bx, by)
    {
        if(PolyK.ContainsPoint(p, ax, ay) || PolyK.ContainsPoint(p, bx, by)) return [p.slice(0)];

        var a = new PolyK._P(ax, ay);
        var b = new PolyK._P(bx, by);
        var iscs = [];  // intersections
        var ps = [];    // points
        for(var i=0; i<p.length; i+=2) ps.push(new PolyK._P(p[i], p[i+1]));

        for(var i=0; i<ps.length; i++)
        {
            var isc = new PolyK._P(0,0);
            isc = PolyK._GetLineIntersection(a, b, ps[i], ps[(i+1)%ps.length], isc);

            if(isc)
            {
                isc.flag = true;
                iscs.push(isc);
                ps.splice(i+1,0,isc);
                i++;
            }
        }
        if(iscs.length == 0) return [p.slice(0)];
        var comp = function(u,v) {return PolyK._P.dist(a,u) - PolyK._P.dist(a,v); }
        iscs.sort(comp);

        var pgs = [];
        var dir = 0;
        while(iscs.length > 0)
        {
            var n = ps.length;
            var i0 = iscs[0];
            var i1 = iscs[1];
            var ind0 = ps.indexOf(i0);
            var ind1 = ps.indexOf(i1);
            var solved = false;

            if(PolyK._firstWithFlag(ps, ind0) == ind1) solved = true;
            else
            {
                i0 = iscs[1];
                i1 = iscs[0];
                ind0 = ps.indexOf(i0);
                ind1 = ps.indexOf(i1);
                if(PolyK._firstWithFlag(ps, ind0) == ind1) solved = true;
            }
            if(solved)
            {
                dir--;
                var pgn = PolyK._getPoints(ps, ind0, ind1);
                pgs.push(pgn);
                ps = PolyK._getPoints(ps, ind1, ind0);
                i0.flag = i1.flag = false;
                iscs.splice(0,2);
                if(iscs.length == 0) pgs.push(ps);
            }
            else { dir++; iscs.reverse(); }
            if(dir>1) break;
        }
        var result = [];
        for(var i=0; i<pgs.length; i++)
        {
            var pg = pgs[i];
            var npg = [];
            for(var j=0; j<pg.length; j++) npg.push(pg[j].x, pg[j].y);
            result.push(npg);
        }
        return result;
    }

    PolyK.Raycast = function(p, x, y, dx, dy, isc)
    {
        var l = p.length - 2;
        var tp = PolyK._tp;
        var a1 = tp[0], a2 = tp[1],
        b1 = tp[2], b2 = tp[3], c = tp[4];
        a1.x = x; a1.y = y;
        a2.x = x+dx; a2.y = y+dy;

        if(isc==null) isc = {dist:0, edge:0, norm:{x:0, y:0}, refl:{x:0, y:0}};
        isc.dist = Infinity;

        for(var i=0; i<l; i+=2)
        {
            b1.x = p[i  ];  b1.y = p[i+1];
            b2.x = p[i+2];  b2.y = p[i+3];
            var nisc = PolyK._RayLineIntersection(a1, a2, b1, b2, c);
            if(nisc) PolyK._updateISC(dx, dy, a1, b1, b2, c, i/2, isc);
        }
        b1.x = b2.x;  b1.y = b2.y;
        b2.x = p[0];  b2.y = p[1];
        var nisc = PolyK._RayLineIntersection(a1, a2, b1, b2, c);
        if(nisc) PolyK._updateISC(dx, dy, a1, b1, b2, c, p.length/2, isc);

        return (isc.dist != Infinity) ? isc : null;
    }

    PolyK.ClosestEdge = function(p, x, y, isc)
    {
        var l = p.length - 2;
        var tp = PolyK._tp;
        var a1 = tp[0],
        b1 = tp[2], b2 = tp[3], c = tp[4];
        a1.x = x; a1.y = y;

        if(isc==null) isc = {dist:0, edge:0, point:{x:0, y:0}, norm:{x:0, y:0}};
        isc.dist = Infinity;

        for(var i=0; i<l; i+=2)
        {
            b1.x = p[i  ];  b1.y = p[i+1];
            b2.x = p[i+2];  b2.y = p[i+3];
            PolyK._pointLineDist(a1, b1, b2, i>>1, isc);
        }
        b1.x = b2.x;  b1.y = b2.y;
        b2.x = p[0];  b2.y = p[1];
        PolyK._pointLineDist(a1, b1, b2, l>>1, isc);

        var idst = 1/isc.dist;
        isc.norm.x = (x-isc.point.x)*idst;
        isc.norm.y = (y-isc.point.y)*idst;
        return isc;
    }

    PolyK._pointLineDist = function(p, a, b, edge, isc)
    {
        var x = p.x, y = p.y, x1 = a.x, y1 = a.y, x2 = b.x, y2 = b.y;

        var A = x - x1;
        var B = y - y1;
        var C = x2 - x1;
        var D = y2 - y1;

        var dot = A * C + B * D;
        var len_sq = C * C + D * D;
        var param = dot / len_sq;

        var xx, yy;

        if (param < 0 || (x1 == x2 && y1 == y2)) {
            xx = x1;
            yy = y1;
        }
        else if (param > 1) {
            xx = x2;
            yy = y2;
        }
        else {
            xx = x1 + param * C;
            yy = y1 + param * D;
        }

        var dx = x - xx;
        var dy = y - yy;
        var dst = Math.sqrt(dx * dx + dy * dy);
        if(dst<isc.dist)
        {
            isc.dist = dst;
            isc.edge = edge;
            isc.point.x = xx;
            isc.point.y = yy;
        }
    }

    PolyK._updateISC = function(dx, dy, a1, b1, b2, c, edge, isc)
    {
        var nrl = PolyK._P.dist(a1, c);
        if(nrl<isc.dist)
        {
            var ibl = 1/PolyK._P.dist(b1, b2);
            var nx = -(b2.y-b1.y)*ibl;
            var ny =  (b2.x-b1.x)*ibl;
            var ddot = 2*(dx*nx+dy*ny);
            isc.dist = nrl;
            isc.norm.x = nx;
            isc.norm.y = ny;
            isc.refl.x = -ddot*nx+dx;
            isc.refl.y = -ddot*ny+dy;
            isc.edge = edge;
        }
    }

    PolyK._getPoints = function(ps, ind0, ind1)
    {
        var n = ps.length;
        var nps = [];
        if(ind1<ind0) ind1 += n;
        for(var i=ind0; i<= ind1; i++) nps.push(ps[i%n]);
        return nps;
    }

    PolyK._firstWithFlag = function(ps, ind)
    {
        var n = ps.length;
        while(true)
        {
            ind = (ind+1)%n;
            if(ps[ind].flag) return ind;
        }
    }
    */
    PolyK._PointInTriangle = function(px, py, ax, ay, bx, by, cx, cy)
    {
        var v0x = cx-ax;
        var v0y = cy-ay;
        var v1x = bx-ax;
        var v1y = by-ay;
        var v2x = px-ax;
        var v2y = py-ay;

        var dot00 = v0x*v0x+v0y*v0y;
        var dot01 = v0x*v1x+v0y*v1y;
        var dot02 = v0x*v2x+v0y*v2y;
        var dot11 = v1x*v1x+v1y*v1y;
        var dot12 = v1x*v2x+v1y*v2y;

        var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        var v = (dot00 * dot12 - dot01 * dot02) * invDenom;

        // Check if point is in triangle
        return (u >= 0) && (v >= 0) && (u + v < 1);
    }
    /*
    PolyK._RayLineIntersection = function(a1, a2, b1, b2, c)
    {
        var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);
        var day = (a1.y-a2.y), dby = (b1.y-b2.y);

        var Den = dax*dby - day*dbx;
        if (Den == 0) return null;  // parallel

        var A = (a1.x * a2.y - a1.y * a2.x);
        var B = (b1.x * b2.y - b1.y * b2.x);

        var I = c;
        var iDen = 1/Den;
        I.x = ( A*dbx - dax*B ) * iDen;
        I.y = ( A*dby - day*B ) * iDen;

        if(!PolyK._InRect(I, b1, b2)) return null;
        if((day>0 && I.y>a1.y) || (day<0 && I.y<a1.y)) return null;
        if((dax>0 && I.x>a1.x) || (dax<0 && I.x<a1.x)) return null;
        return I;
    }

    PolyK._GetLineIntersection = function(a1, a2, b1, b2, c)
    {
        var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);
        var day = (a1.y-a2.y), dby = (b1.y-b2.y);

        var Den = dax*dby - day*dbx;
        if (Den == 0) return null;  // parallel

        var A = (a1.x * a2.y - a1.y * a2.x);
        var B = (b1.x * b2.y - b1.y * b2.x);

        var I = c;
        I.x = ( A*dbx - dax*B ) / Den;
        I.y = ( A*dby - day*B ) / Den;

        if(PolyK._InRect(I, a1, a2) && PolyK._InRect(I, b1, b2)) return I;
        return null;
    }

    PolyK._InRect = function(a, b, c)
    {
        if  (b.x == c.x) return (a.y>=Math.min(b.y, c.y) && a.y<=Math.max(b.y, c.y));
        if  (b.y == c.y) return (a.x>=Math.min(b.x, c.x) && a.x<=Math.max(b.x, c.x));

        if(a.x >= Math.min(b.x, c.x) && a.x <= Math.max(b.x, c.x)
        && a.y >= Math.min(b.y, c.y) && a.y <= Math.max(b.y, c.y))
        return true;
        return false;
    }
    */
    PolyK._convex = function(ax, ay, bx, by, cx, cy)
    {
        return (ay-by)*(cx-bx) + (bx-ax)*(cy-by) >= 0;
    }
    /*
    PolyK._P = function(x,y)
    {
        this.x = x;
        this.y = y;
        this.flag = false;
    }
    PolyK._P.prototype.toString = function()
    {
        return "Point ["+this.x+", "+this.y+"]";
    }
    PolyK._P.dist = function(a,b)
    {
        var dx = b.x-a.x;
        var dy = b.y-a.y;
        return Math.sqrt(dx*dx + dy*dy);
    }

    PolyK._tp = [];
    for(var i=0; i<10; i++) PolyK._tp.push(new PolyK._P(0,0));
        */

module.exports = PolyK;

},{}],94:[function(require,module,exports){
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * The vec2 object from glMatrix, with some extensions and some removed methods. See http://glmatrix.net.
 * @class vec2
 */

var vec2 = module.exports = {};

var Utils = require('../utils/Utils');

/**
 * Make a cross product and only return the z component
 * @method crossLength
 * @static
 * @param  {Array} a
 * @param  {Array} b
 * @return {Number}
 */
vec2.crossLength = function(a,b){
    return a[0] * b[1] - a[1] * b[0];
};

/**
 * Cross product between a vector and the Z component of a vector
 * @method crossVZ
 * @static
 * @param  {Array} out
 * @param  {Array} vec
 * @param  {Number} zcomp
 * @return {Number}
 */
vec2.crossVZ = function(out, vec, zcomp){
    vec2.rotate(out,vec,-Math.PI/2);// Rotate according to the right hand rule
    vec2.scale(out,out,zcomp);      // Scale with z
    return out;
};

/**
 * Cross product between a vector and the Z component of a vector
 * @method crossZV
 * @static
 * @param  {Array} out
 * @param  {Number} zcomp
 * @param  {Array} vec
 * @return {Number}
 */
vec2.crossZV = function(out, zcomp, vec){
    vec2.rotate(out,vec,Math.PI/2); // Rotate according to the right hand rule
    vec2.scale(out,out,zcomp);      // Scale with z
    return out;
};

/**
 * Rotate a vector by an angle
 * @method rotate
 * @static
 * @param  {Array} out
 * @param  {Array} a
 * @param  {Number} angle
 */
vec2.rotate = function(out,a,angle){
    if(angle !== 0){
        var c = Math.cos(angle),
            s = Math.sin(angle),
            x = a[0],
            y = a[1];
        out[0] = c*x -s*y;
        out[1] = s*x +c*y;
    } else {
        out[0] = a[0];
        out[1] = a[1];
    }
};

/**
 * Rotate a vector 90 degrees clockwise
 * @method rotate90cw
 * @static
 * @param  {Array} out
 * @param  {Array} a
 * @param  {Number} angle
 */
vec2.rotate90cw = function(out, a) {
    var x = a[0];
    var y = a[1];
    out[0] = y;
    out[1] = -x;
};

/**
 * Transform a point position to local frame.
 * @method toLocalFrame
 * @param  {Array} out
 * @param  {Array} worldPoint
 * @param  {Array} framePosition
 * @param  {Number} frameAngle
 */
vec2.toLocalFrame = function(out, worldPoint, framePosition, frameAngle){
    vec2.copy(out, worldPoint);
    vec2.sub(out, out, framePosition);
    vec2.rotate(out, out, -frameAngle);
};

/**
 * Transform a point position to global frame.
 * @method toGlobalFrame
 * @param  {Array} out
 * @param  {Array} localPoint
 * @param  {Array} framePosition
 * @param  {Number} frameAngle
 */
vec2.toGlobalFrame = function(out, localPoint, framePosition, frameAngle){
    vec2.copy(out, localPoint);
    vec2.rotate(out, out, frameAngle);
    vec2.add(out, out, framePosition);
};

/**
 * Transform a vector to local frame.
 * @method vectorToLocalFrame
 * @param  {Array} out
 * @param  {Array} worldVector
 * @param  {Number} frameAngle
 */
vec2.vectorToLocalFrame = function(out, worldVector, frameAngle){
    vec2.rotate(out, worldVector, -frameAngle);
};

/**
 * Transform a point position to global frame.
 * @method toGlobalFrame
 * @param  {Array} out
 * @param  {Array} localVector
 * @param  {Number} frameAngle
 */
vec2.vectorToGlobalFrame = function(out, localVector, frameAngle){
    vec2.rotate(out, localVector, frameAngle);
};

/**
 * Compute centroid of a triangle spanned by vectors a,b,c. See http://easycalculation.com/analytical/learn-centroid.php
 * @method centroid
 * @static
 * @param  {Array} out
 * @param  {Array} a
 * @param  {Array} b
 * @param  {Array} c
 * @return  {Array} The out object
 */
vec2.centroid = function(out, a, b, c){
    vec2.add(out, a, b);
    vec2.add(out, out, c);
    vec2.scale(out, out, 1/3);
    return out;
};

/**
 * Creates a new, empty vec2
 * @static
 * @method create
 * @return {Array} a new 2D vector
 */
vec2.create = function() {
    var out = new Utils.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 * @static
 * @method clone
 * @param {Array} a vector to clone
 * @return {Array} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new Utils.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 * @static
 * @method fromValues
 * @param {Number} x X component
 * @param {Number} y Y component
 * @return {Array} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new Utils.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 * @static
 * @method copy
 * @param {Array} out the receiving vector
 * @param {Array} a the source vector
 * @return {Array} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 * @static
 * @method set
 * @param {Array} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @return {Array} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 * @static
 * @method add
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts two vec2's
 * @static
 * @method subtract
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for vec2.subtract
 * @static
 * @method sub
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 * @static
 * @method multiply
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for vec2.multiply
 * @static
 * @method mul
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 * @static
 * @method divide
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for vec2.divide
 * @static
 * @method div
 */
vec2.div = vec2.divide;

/**
 * Scales a vec2 by a scalar number
 * @static
 * @method scale
 * @param {Array} out the receiving vector
 * @param {Array} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @return {Array} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 * @static
 * @method distance
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for vec2.distance
 * @static
 * @method dist
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 * @static
 * @method squaredDistance
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for vec2.squaredDistance
 * @static
 * @method sqrDist
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 * @static
 * @method length
 * @param {Array} a vector to calculate length of
 * @return {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for vec2.length
 * @method len
 * @static
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 * @static
 * @method squaredLength
 * @param {Array} a vector to calculate squared length of
 * @return {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for vec2.squaredLength
 * @static
 * @method sqrLen
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 * @static
 * @method negate
 * @param {Array} out the receiving vector
 * @param {Array} a vector to negate
 * @return {Array} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Normalize a vec2
 * @static
 * @method normalize
 * @param {Array} out the receiving vector
 * @param {Array} a vector to normalize
 * @return {Array} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 * @static
 * @method dot
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Returns a string representation of a vector
 * @static
 * @method str
 * @param {Array} vec vector to represent as a string
 * @return {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

/**
 * Linearly interpolate/mix two vectors.
 * @static
 * @method lerp
 * @param {Array} out
 * @param {Array} a First vector
 * @param {Array} b Second vector
 * @param {number} t Lerp factor
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Reflect a vector along a normal.
 * @static
 * @method reflect
 * @param {Array} out
 * @param {Array} vector
 * @param {Array} normal
 */
vec2.reflect = function(out, vector, normal){
    var dot = vector[0] * normal[0] + vector[1] * normal[1];
    out[0] = vector[0] - 2 * normal[0] * dot;
    out[1] = vector[1] - 2 * normal[1] * dot;
};

/**
 * Get the intersection point between two line segments.
 * @static
 * @method getLineSegmentsIntersection
 * @param  {Array} out
 * @param  {Array} p0
 * @param  {Array} p1
 * @param  {Array} p2
 * @param  {Array} p3
 * @return {boolean} True if there was an intersection, otherwise false.
 */
vec2.getLineSegmentsIntersection = function(out, p0, p1, p2, p3) {
    var t = vec2.getLineSegmentsIntersectionFraction(p0, p1, p2, p3);
    if(t < 0){
        return false;
    } else {
        out[0] = p0[0] + (t * (p1[0] - p0[0]));
        out[1] = p0[1] + (t * (p1[1] - p0[1]));
        return true;
    }
};

/**
 * Get the intersection fraction between two line segments. If successful, the intersection is at p0 + t * (p1 - p0)
 * @static
 * @method getLineSegmentsIntersectionFraction
 * @param  {Array} p0
 * @param  {Array} p1
 * @param  {Array} p2
 * @param  {Array} p3
 * @return {number} A number between 0 and 1 if there was an intersection, otherwise -1.
 */
vec2.getLineSegmentsIntersectionFraction = function(p0, p1, p2, p3) {
    var s1_x = p1[0] - p0[0];
    var s1_y = p1[1] - p0[1];
    var s2_x = p3[0] - p2[0];
    var s2_y = p3[1] - p2[1];

    var s, t;
    s = (-s1_y * (p0[0] - p2[0]) + s1_x * (p0[1] - p2[1])) / (-s2_x * s1_y + s1_x * s2_y);
    t = ( s2_x * (p0[1] - p2[1]) - s2_y * (p0[0] - p2[0])) / (-s2_x * s1_y + s1_x * s2_y);
    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) { // Collision detected
        return t;
    }
    return -1; // No collision
};

},{"../utils/Utils":121}],95:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   decomp = require('poly-decomp')
,   Convex = require('../shapes/Convex')
,   RaycastResult = require('../collision/RaycastResult')
,   Ray = require('../collision/Ray')
,   AABB = require('../collision/AABB')
,   EventEmitter = require('../events/EventEmitter');

module.exports = Body;

/**
 * A rigid body. Has got a center of mass, position, velocity and a number of
 * shapes that are used for collisions.
 *
 * @class Body
 * @constructor
 * @extends EventEmitter
 * @param {Object} [options]
 * @param {Array} [options.force]
 * @param {Array} [options.position]
 * @param {Array} [options.velocity]
 * @param {Boolean} [options.allowSleep]
 * @param {Boolean} [options.collisionResponse]
 * @param {Number} [options.angle=0]
 * @param {Number} [options.angularForce=0]
 * @param {Number} [options.angularVelocity=0]
 * @param {Number} [options.ccdIterations=10]
 * @param {Number} [options.ccdSpeedThreshold=-1]
 * @param {Number} [options.fixedRotation=false]
 * @param {Number} [options.gravityScale]
 * @param {Number} [options.id]
 * @param {Number} [options.mass=0] A number >= 0. If zero, the .type will be set to Body.STATIC.
 * @param {Number} [options.sleepSpeedLimit]
 * @param {Number} [options.sleepTimeLimit]
 *
 * @example
 *
 *     // Create a typical dynamic body
 *     var body = new Body({
 *         mass: 1,
 *         position: [0, 0],
 *         angle: 0,
 *         velocity: [0, 0],
 *         angularVelocity: 0
 *     });
 *
 *     // Add a circular shape to the body
 *     body.addShape(new Circle({ radius: 1 }));
 *
 *     // Add the body to the world
 *     world.addBody(body);
 */
function Body(options){
    options = options || {};

    EventEmitter.call(this);

    /**
     * The body identifyer
     * @property id
     * @type {Number}
     */
    this.id = options.id || ++Body._idCounter;

    /**
     * The world that this body is added to. This property is set to NULL if the body is not added to any world.
     * @property world
     * @type {World}
     */
    this.world = null;

    /**
     * The shapes of the body.
     *
     * @property shapes
     * @type {Array}
     */
    this.shapes = [];

    /**
     * The mass of the body.
     * @property mass
     * @type {number}
     */
    this.mass = options.mass || 0;

    /**
     * The inverse mass of the body.
     * @property invMass
     * @type {number}
     */
    this.invMass = 0;

    /**
     * The inertia of the body around the Z axis.
     * @property inertia
     * @type {number}
     */
    this.inertia = 0;

    /**
     * The inverse inertia of the body.
     * @property invInertia
     * @type {number}
     */
    this.invInertia = 0;

    this.invMassSolve = 0;
    this.invInertiaSolve = 0;

    /**
     * Set to true if you want to fix the rotation of the body.
     * @property fixedRotation
     * @type {Boolean}
     */
    this.fixedRotation = !!options.fixedRotation;

    /**
     * Set to true if you want to fix the body movement along the X axis. The body will still be able to move along Y.
     * @property {Boolean} fixedX
     */
    this.fixedX = !!options.fixedX;

    /**
     * Set to true if you want to fix the body movement along the Y axis. The body will still be able to move along X.
     * @property {Boolean} fixedY
     */
    this.fixedY = !!options.fixedY;

    /**
     * @private
     * @property {array} massMultiplier
     */
    this.massMultiplier = vec2.create();

    /**
     * The position of the body
     * @property position
     * @type {Array}
     */
    this.position = vec2.fromValues(0,0);
    if(options.position){
        vec2.copy(this.position, options.position);
    }

    /**
     * The interpolated position of the body. Use this for rendering.
     * @property interpolatedPosition
     * @type {Array}
     */
    this.interpolatedPosition = vec2.fromValues(0,0);

    /**
     * The interpolated angle of the body. Use this for rendering.
     * @property interpolatedAngle
     * @type {Number}
     */
    this.interpolatedAngle = 0;

    /**
     * The previous position of the body.
     * @property previousPosition
     * @type {Array}
     */
    this.previousPosition = vec2.fromValues(0,0);

    /**
     * The previous angle of the body.
     * @property previousAngle
     * @type {Number}
     */
    this.previousAngle = 0;

    /**
     * The current velocity of the body.
     * @property velocity
     * @type {Array}
     */
    this.velocity = vec2.fromValues(0,0);
    if(options.velocity){
        vec2.copy(this.velocity, options.velocity);
    }

    /**
     * Constraint velocity that was added to the body during the last step.
     * @property vlambda
     * @type {Array}
     */
    this.vlambda = vec2.fromValues(0,0);

    /**
     * Angular constraint velocity that was added to the body during last step.
     * @property wlambda
     * @type {Array}
     */
    this.wlambda = 0;

    /**
     * The angle of the body, in radians.
     * @property angle
     * @type {number}
     * @example
     *     // The angle property is not normalized to the interval 0 to 2*pi, it can be any value.
     *     // If you need a value between 0 and 2*pi, use the following function to normalize it.
     *     function normalizeAngle(angle){
     *         angle = angle % (2*Math.PI);
     *         if(angle < 0){
     *             angle += (2*Math.PI);
     *         }
     *         return angle;
     *     }
     */
    this.angle = options.angle || 0;

    /**
     * The angular velocity of the body, in radians per second.
     * @property angularVelocity
     * @type {number}
     */
    this.angularVelocity = options.angularVelocity || 0;

    /**
     * The force acting on the body. Since the body force (and {{#crossLink "Body/angularForce:property"}}{{/crossLink}}) will be zeroed after each step, so you need to set the force before each step.
     * @property force
     * @type {Array}
     *
     * @example
     *     // This produces a forcefield of 1 Newton in the positive x direction.
     *     for(var i=0; i<numSteps; i++){
     *         body.force[0] = 1;
     *         world.step(1/60);
     *     }
     *
     * @example
     *     // This will apply a rotational force on the body
     *     for(var i=0; i<numSteps; i++){
     *         body.angularForce = -3;
     *         world.step(1/60);
     *     }
     */
    this.force = vec2.create();
    if(options.force){
        vec2.copy(this.force, options.force);
    }

    /**
     * The angular force acting on the body. See {{#crossLink "Body/force:property"}}{{/crossLink}}.
     * @property angularForce
     * @type {number}
     */
    this.angularForce = options.angularForce || 0;

    /**
     * The linear damping acting on the body in the velocity direction. Should be a value between 0 and 1.
     * @property damping
     * @type {Number}
     * @default 0.1
     */
    this.damping = typeof(options.damping) === "number" ? options.damping : 0.1;

    /**
     * The angular force acting on the body. Should be a value between 0 and 1.
     * @property angularDamping
     * @type {Number}
     * @default 0.1
     */
    this.angularDamping = typeof(options.angularDamping) === "number" ? options.angularDamping : 0.1;

    /**
     * The type of motion this body has. Should be one of: {{#crossLink "Body/STATIC:property"}}Body.STATIC{{/crossLink}}, {{#crossLink "Body/DYNAMIC:property"}}Body.DYNAMIC{{/crossLink}} and {{#crossLink "Body/KINEMATIC:property"}}Body.KINEMATIC{{/crossLink}}.
     *
     * * Static bodies do not move, and they do not respond to forces or collision.
     * * Dynamic bodies body can move and respond to collisions and forces.
     * * Kinematic bodies only moves according to its .velocity, and does not respond to collisions or force.
     *
     * @property type
     * @type {number}
     *
     * @example
     *     // Bodies are static by default. Static bodies will never move.
     *     var body = new Body();
     *     console.log(body.type == Body.STATIC); // true
     *
     * @example
     *     // By setting the mass of a body to a nonzero number, the body
     *     // will become dynamic and will move and interact with other bodies.
     *     var dynamicBody = new Body({
     *         mass : 1
     *     });
     *     console.log(dynamicBody.type == Body.DYNAMIC); // true
     *
     * @example
     *     // Kinematic bodies will only move if you change their velocity.
     *     var kinematicBody = new Body({
     *         type: Body.KINEMATIC // Type can be set via the options object.
     *     });
     */
    this.type = Body.STATIC;

    if(typeof(options.type) !== 'undefined'){
        this.type = options.type;
    } else if(!options.mass){
        this.type = Body.STATIC;
    } else {
        this.type = Body.DYNAMIC;
    }

    /**
     * Bounding circle radius.
     * @property boundingRadius
     * @type {Number}
     */
    this.boundingRadius = 0;

    /**
     * Bounding box of this body.
     * @property aabb
     * @type {AABB}
     */
    this.aabb = new AABB();

    /**
     * Indicates if the AABB needs update. Update it with {{#crossLink "Body/updateAABB:method"}}.updateAABB(){{/crossLink}}.
     * @property aabbNeedsUpdate
     * @type {Boolean}
     * @see updateAABB
     *
     * @example
     *     // Force update the AABB
     *     body.aabbNeedsUpdate = true;
     *     body.updateAABB();
     *     console.log(body.aabbNeedsUpdate); // false
     */
    this.aabbNeedsUpdate = true;

    /**
     * If true, the body will automatically fall to sleep. Note that you need to enable sleeping in the {{#crossLink "World"}}{{/crossLink}} before anything will happen.
     * @property allowSleep
     * @type {Boolean}
     * @default true
     */
    this.allowSleep = options.allowSleep !== undefined ? options.allowSleep : true;

    this.wantsToSleep = false;

    /**
     * One of {{#crossLink "Body/AWAKE:property"}}Body.AWAKE{{/crossLink}}, {{#crossLink "Body/SLEEPY:property"}}Body.SLEEPY{{/crossLink}} and {{#crossLink "Body/SLEEPING:property"}}Body.SLEEPING{{/crossLink}}.
     *
     * The body is initially Body.AWAKE. If its velocity norm is below .sleepSpeedLimit, the sleepState will become Body.SLEEPY. If the body continues to be Body.SLEEPY for .sleepTimeLimit seconds, it will fall asleep (Body.SLEEPY).
     *
     * @property sleepState
     * @type {Number}
     * @default Body.AWAKE
     */
    this.sleepState = Body.AWAKE;

    /**
     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.
     * @property sleepSpeedLimit
     * @type {Number}
     * @default 0.2
     */
    this.sleepSpeedLimit = options.sleepSpeedLimit !== undefined ? options.sleepSpeedLimit : 0.2;

    /**
     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.
     * @property sleepTimeLimit
     * @type {Number}
     * @default 1
     */
    this.sleepTimeLimit = options.sleepTimeLimit !== undefined ? options.sleepTimeLimit : 1;

    /**
     * Gravity scaling factor. If you want the body to ignore gravity, set this to zero. If you want to reverse gravity, set it to -1.
     * @property {Number} gravityScale
     * @default 1
     */
    this.gravityScale = options.gravityScale !== undefined ? options.gravityScale : 1;

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled. That means that this body will move through other bodies, but it will still trigger contact events, etc.
     * @property {Boolean} collisionResponse
     */
    this.collisionResponse = options.collisionResponse !== undefined ? options.collisionResponse : true;

    /**
     * How long the body has been sleeping.
     * @property {Number} idleTime
     */
    this.idleTime = 0;

    /**
     * The last time when the body went to SLEEPY state.
     * @property {Number} timeLastSleepy
     * @private
     */
    this.timeLastSleepy = 0;

    /**
     * If the body speed exceeds this threshold, CCD (continuous collision detection) will be enabled. Set it to a negative number to disable CCD completely for this body.
     * @property {number} ccdSpeedThreshold
     * @default -1
     */
    this.ccdSpeedThreshold = options.ccdSpeedThreshold !== undefined ? options.ccdSpeedThreshold : -1;

    /**
     * The number of iterations that should be used when searching for the time of impact during CCD. A larger number will assure that there's a small penetration on CCD collision, but a small number will give more performance.
     * @property {number} ccdIterations
     * @default 10
     */
    this.ccdIterations = options.ccdIterations !== undefined ? options.ccdIterations : 10;

    this.concavePath = null;

    this._wakeUpAfterNarrowphase = false;

    this.updateMassProperties();
}
Body.prototype = new EventEmitter();
Body.prototype.constructor = Body;

Body._idCounter = 0;

/**
 * @private
 * @method updateSolveMassProperties
 */
Body.prototype.updateSolveMassProperties = function(){
    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){
        this.invMassSolve = 0;
        this.invInertiaSolve = 0;
    } else {
        this.invMassSolve = this.invMass;
        this.invInertiaSolve = this.invInertia;
    }
};

/**
 * Set the total density of the body
 * @method setDensity
 * @param {number} density
 */
Body.prototype.setDensity = function(density) {
    var totalArea = this.getArea();
    this.mass = totalArea * density;
    this.updateMassProperties();
};

/**
 * Get the total area of all shapes in the body
 * @method getArea
 * @return {Number}
 */
Body.prototype.getArea = function() {
    var totalArea = 0;
    for(var i=0; i<this.shapes.length; i++){
        totalArea += this.shapes[i].area;
    }
    return totalArea;
};

/**
 * Get the AABB from the body. The AABB is updated if necessary.
 * @method getAABB
 * @return {AABB} The AABB instance (this.aabb)
 */
Body.prototype.getAABB = function(){
    if(this.aabbNeedsUpdate){
        this.updateAABB();
    }
    return this.aabb;
};

var shapeAABB = new AABB(),
    tmp = vec2.create();

/**
 * Updates the AABB of the Body, and set .aabbNeedsUpdate = false.
 * @method updateAABB
 */
Body.prototype.updateAABB = function() {
    var shapes = this.shapes,
        N = shapes.length,
        offset = tmp,
        bodyAngle = this.angle;

    for(var i=0; i!==N; i++){
        var shape = shapes[i],
            angle = shape.angle + bodyAngle;

        // Get shape world offset
        vec2.rotate(offset, shape.position, bodyAngle);
        vec2.add(offset, offset, this.position);

        // Get shape AABB
        shape.computeAABB(shapeAABB, offset, angle);

        if(i===0){
            this.aabb.copy(shapeAABB);
        } else {
            this.aabb.extend(shapeAABB);
        }
    }

    this.aabbNeedsUpdate = false;
};

/**
 * Update the bounding radius of the body (this.boundingRadius). Should be done if any of the shape dimensions or positions are changed.
 * @method updateBoundingRadius
 */
Body.prototype.updateBoundingRadius = function(){
    var shapes = this.shapes,
        N = shapes.length,
        radius = 0;

    for(var i=0; i!==N; i++){
        var shape = shapes[i],
            offset = vec2.length(shape.position),
            r = shape.boundingRadius;
        if(offset + r > radius){
            radius = offset + r;
        }
    }

    this.boundingRadius = radius;
};

/**
 * Add a shape to the body. You can pass a local transform when adding a shape,
 * so that the shape gets an offset and angle relative to the body center of mass.
 * Will automatically update the mass properties and bounding radius.
 *
 * @method addShape
 * @param  {Shape}              shape
 * @param  {Array} [offset] Local body offset of the shape.
 * @param  {Number}             [angle]  Local body angle.
 *
 * @example
 *     var body = new Body(),
 *         shape = new Circle({ radius: 1 });
 *
 *     // Add the shape to the body, positioned in the center
 *     body.addShape(shape);
 *
 *     // Add another shape to the body, positioned 1 unit length from the body center of mass along the local x-axis.
 *     body.addShape(shape,[1,0]);
 *
 *     // Add another shape to the body, positioned 1 unit length from the body center of mass along the local y-axis, and rotated 90 degrees CCW.
 *     body.addShape(shape,[0,1],Math.PI/2);
 */
Body.prototype.addShape = function(shape, offset, angle){
    if(shape.body){
        throw new Error('A shape can only be added to one body.');
    }
    shape.body = this;

    // Copy the offset vector
    if(offset){
        vec2.copy(shape.position, offset);
    } else {
        vec2.set(shape.position, 0, 0);
    }

    shape.angle = angle || 0;

    this.shapes.push(shape);
    this.updateMassProperties();
    this.updateBoundingRadius();

    this.aabbNeedsUpdate = true;
};

/**
 * Remove a shape
 * @method removeShape
 * @param  {Shape} shape
 * @return {Boolean} True if the shape was found and removed, else false.
 */
Body.prototype.removeShape = function(shape){
    var idx = this.shapes.indexOf(shape);

    if(idx !== -1){
        this.shapes.splice(idx,1);
        this.aabbNeedsUpdate = true;
        shape.body = null;
        return true;
    } else {
        return false;
    }
};

/**
 * Updates .inertia, .invMass, .invInertia for this Body. Should be called when
 * changing the structure or mass of the Body.
 *
 * @method updateMassProperties
 *
 * @example
 *     body.mass += 1;
 *     body.updateMassProperties();
 */
Body.prototype.updateMassProperties = function(){
    if(this.type === Body.STATIC || this.type === Body.KINEMATIC){

        this.mass = Number.MAX_VALUE;
        this.invMass = 0;
        this.inertia = Number.MAX_VALUE;
        this.invInertia = 0;

    } else {

        var shapes = this.shapes,
            N = shapes.length,
            m = this.mass / N,
            I = 0;

        if(!this.fixedRotation){
            for(var i=0; i<N; i++){
                var shape = shapes[i],
                    r2 = vec2.squaredLength(shape.position),
                    Icm = shape.computeMomentOfInertia(m);
                I += Icm + m*r2;
            }
            this.inertia = I;
            this.invInertia = I>0 ? 1/I : 0;

        } else {
            this.inertia = Number.MAX_VALUE;
            this.invInertia = 0;
        }

        // Inverse mass properties are easy
        this.invMass = 1 / this.mass;

        vec2.set(
            this.massMultiplier,
            this.fixedX ? 0 : 1,
            this.fixedY ? 0 : 1
        );
    }
};

var Body_applyForce_r = vec2.create();

/**
 * Apply force to a point relative to the center of mass of the body. This could for example be a point on the RigidBody surface. Applying force this way will add to Body.force and Body.angularForce. If relativePoint is zero, the force will be applied directly on the center of mass, and the torque produced will be zero.
 * @method applyForce
 * @param {Array} force The force to add.
 * @param {Array} [relativePoint] A world point to apply the force on.
 */
Body.prototype.applyForce = function(force, relativePoint){

    // Add linear force
    vec2.add(this.force, this.force, force);

    if(relativePoint){

        // Compute produced rotational force
        var rotForce = vec2.crossLength(relativePoint,force);

        // Add rotational force
        this.angularForce += rotForce;
    }
};

/**
 * Apply force to a body-local point.
 * @method applyForceLocal
 * @param  {Array} localForce The force vector to add, oriented in local body space.
 * @param  {Array} [localPoint] A point relative to the body in world space. If not given, it is set to zero and all of the impulse will be excerted on the center of mass.
 */
var Body_applyForce_forceWorld = vec2.create();
var Body_applyForce_pointWorld = vec2.create();
var Body_applyForce_pointLocal = vec2.create();
Body.prototype.applyForceLocal = function(localForce, localPoint){
    localPoint = localPoint || Body_applyForce_pointLocal;
    var worldForce = Body_applyForce_forceWorld;
    var worldPoint = Body_applyForce_pointWorld;
    this.vectorToWorldFrame(worldForce, localForce);
    this.vectorToWorldFrame(worldPoint, localPoint);
    this.applyForce(worldForce, worldPoint);
};

/**
 * Apply impulse to a point relative to the body. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
 * @method applyImpulse
 * @param  {Array} impulse The impulse vector to add, oriented in world space.
 * @param  {Array} [relativePoint] A point relative to the body in world space. If not given, it is set to zero and all of the impulse will be excerted on the center of mass.
 */
var Body_applyImpulse_velo = vec2.create();
Body.prototype.applyImpulse = function(impulseVector, relativePoint){
    if(this.type !== Body.DYNAMIC){
        return;
    }

    // Compute produced central impulse velocity
    var velo = Body_applyImpulse_velo;
    vec2.scale(velo, impulseVector, this.invMass);
    vec2.multiply(velo, this.massMultiplier, velo);

    // Add linear impulse
    vec2.add(this.velocity, velo, this.velocity);

    if(relativePoint){
        // Compute produced rotational impulse velocity
        var rotVelo = vec2.crossLength(relativePoint, impulseVector);
        rotVelo *= this.invInertia;

        // Add rotational Impulse
        this.angularVelocity += rotVelo;
    }
};

/**
 * Apply impulse to a point relative to the body. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
 * @method applyImpulseLocal
 * @param  {Array} impulse The impulse vector to add, oriented in world space.
 * @param  {Array} [relativePoint] A point relative to the body in world space. If not given, it is set to zero and all of the impulse will be excerted on the center of mass.
 */
var Body_applyImpulse_impulseWorld = vec2.create();
var Body_applyImpulse_pointWorld = vec2.create();
var Body_applyImpulse_pointLocal = vec2.create();
Body.prototype.applyImpulseLocal = function(localImpulse, localPoint){
    localPoint = localPoint || Body_applyImpulse_pointLocal;
    var worldImpulse = Body_applyImpulse_impulseWorld;
    var worldPoint = Body_applyImpulse_pointWorld;
    this.vectorToWorldFrame(worldImpulse, localImpulse);
    this.vectorToWorldFrame(worldPoint, localPoint);
    this.applyImpulse(worldImpulse, worldPoint);
};

/**
 * Transform a world point to local body frame.
 * @method toLocalFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} worldPoint   The input world point
 */
Body.prototype.toLocalFrame = function(out, worldPoint){
    vec2.toLocalFrame(out, worldPoint, this.position, this.angle);
};

/**
 * Transform a local point to world frame.
 * @method toWorldFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} localPoint   The input local point
 */
Body.prototype.toWorldFrame = function(out, localPoint){
    vec2.toGlobalFrame(out, localPoint, this.position, this.angle);
};

/**
 * Transform a world point to local body frame.
 * @method vectorToLocalFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} worldVector  The input world vector
 */
Body.prototype.vectorToLocalFrame = function(out, worldVector){
    vec2.vectorToLocalFrame(out, worldVector, this.angle);
};

/**
 * Transform a local point to world frame.
 * @method vectorToWorldFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} localVector  The input local vector
 */
Body.prototype.vectorToWorldFrame = function(out, localVector){
    vec2.vectorToGlobalFrame(out, localVector, this.angle);
};

/**
 * Reads a polygon shape path, and assembles convex shapes from that and puts them at proper offset points.
 * @method fromPolygon
 * @param {Array} path An array of 2d vectors, e.g. [[0,0],[0,1],...] that resembles a concave or convex polygon. The shape must be simple and without holes.
 * @param {Object} [options]
 * @param {Boolean} [options.optimalDecomp=false]   Set to true if you need optimal decomposition. Warning: very slow for polygons with more than 10 vertices.
 * @param {Boolean} [options.skipSimpleCheck=false] Set to true if you already know that the path is not intersecting itself.
 * @param {Boolean|Number} [options.removeCollinearPoints=false] Set to a number (angle threshold value) to remove collinear points, or false to keep all points.
 * @return {Boolean} True on success, else false.
 */
Body.prototype.fromPolygon = function(path,options){
    options = options || {};

    // Remove all shapes
    for(var i=this.shapes.length; i>=0; --i){
        this.removeShape(this.shapes[i]);
    }

    var p = new decomp.Polygon();
    p.vertices = path;

    // Make it counter-clockwise
    p.makeCCW();

    if(typeof(options.removeCollinearPoints) === "number"){
        p.removeCollinearPoints(options.removeCollinearPoints);
    }

    // Check if any line segment intersects the path itself
    if(typeof(options.skipSimpleCheck) === "undefined"){
        if(!p.isSimple()){
            return false;
        }
    }

    // Save this path for later
    this.concavePath = p.vertices.slice(0);
    for(var i=0; i<this.concavePath.length; i++){
        var v = [0,0];
        vec2.copy(v,this.concavePath[i]);
        this.concavePath[i] = v;
    }

    // Slow or fast decomp?
    var convexes;
    if(options.optimalDecomp){
        convexes = p.decomp();
    } else {
        convexes = p.quickDecomp();
    }

    var cm = vec2.create();

    // Add convexes
    for(var i=0; i!==convexes.length; i++){
        // Create convex
        var c = new Convex({ vertices: convexes[i].vertices });

        // Move all vertices so its center of mass is in the local center of the convex
        for(var j=0; j!==c.vertices.length; j++){
            var v = c.vertices[j];
            vec2.sub(v,v,c.centerOfMass);
        }

        vec2.scale(cm,c.centerOfMass,1);
        c.updateTriangles();
        c.updateCenterOfMass();
        c.updateBoundingRadius();

        // Add the shape
        this.addShape(c,cm);
    }

    this.adjustCenterOfMass();

    this.aabbNeedsUpdate = true;

    return true;
};

var adjustCenterOfMass_tmp1 = vec2.fromValues(0,0),
    adjustCenterOfMass_tmp2 = vec2.fromValues(0,0),
    adjustCenterOfMass_tmp3 = vec2.fromValues(0,0),
    adjustCenterOfMass_tmp4 = vec2.fromValues(0,0);

/**
 * Moves the shape offsets so their center of mass becomes the body center of mass.
 * @method adjustCenterOfMass
 */
Body.prototype.adjustCenterOfMass = function(){
    var offset_times_area = adjustCenterOfMass_tmp2,
        sum =               adjustCenterOfMass_tmp3,
        cm =                adjustCenterOfMass_tmp4,
        totalArea =         0;
    vec2.set(sum,0,0);

    for(var i=0; i!==this.shapes.length; i++){
        var s = this.shapes[i];
        vec2.scale(offset_times_area, s.position, s.area);
        vec2.add(sum, sum, offset_times_area);
        totalArea += s.area;
    }

    vec2.scale(cm,sum,1/totalArea);

    // Now move all shapes
    for(var i=0; i!==this.shapes.length; i++){
        var s = this.shapes[i];
        vec2.sub(s.position, s.position, cm);
    }

    // Move the body position too
    vec2.add(this.position,this.position,cm);

    // And concave path
    for(var i=0; this.concavePath && i<this.concavePath.length; i++){
        vec2.sub(this.concavePath[i], this.concavePath[i], cm);
    }

    this.updateMassProperties();
    this.updateBoundingRadius();
};

/**
 * Sets the force on the body to zero.
 * @method setZeroForce
 */
Body.prototype.setZeroForce = function(){
    vec2.set(this.force,0.0,0.0);
    this.angularForce = 0.0;
};

Body.prototype.resetConstraintVelocity = function(){
    var b = this,
        vlambda = b.vlambda;
    vec2.set(vlambda,0,0);
    b.wlambda = 0;
};

Body.prototype.addConstraintVelocity = function(){
    var b = this,
        v = b.velocity;
    vec2.add( v, v, b.vlambda);
    b.angularVelocity += b.wlambda;
};

/**
 * Apply damping, see <a href="http://code.google.com/p/bullet/issues/detail?id=74">this</a> for details.
 * @method applyDamping
 * @param  {number} dt Current time step
 */
Body.prototype.applyDamping = function(dt){
    if(this.type === Body.DYNAMIC){ // Only for dynamic bodies
        var v = this.velocity;
        vec2.scale(v, v, Math.pow(1.0 - this.damping,dt));
        this.angularVelocity *= Math.pow(1.0 - this.angularDamping,dt);
    }
};

/**
 * Wake the body up. Normally you should not need this, as the body is automatically awoken at events such as collisions.
 * Sets the sleepState to {{#crossLink "Body/AWAKE:property"}}Body.AWAKE{{/crossLink}} and emits the wakeUp event if the body wasn't awake before.
 * @method wakeUp
 */
Body.prototype.wakeUp = function(){
    var s = this.sleepState;
    this.sleepState = Body.AWAKE;
    this.idleTime = 0;
    if(s !== Body.AWAKE){
        this.emit(Body.wakeUpEvent);
    }
};

/**
 * Force body sleep
 * @method sleep
 */
Body.prototype.sleep = function(){
    this.sleepState = Body.SLEEPING;
    this.angularVelocity = 0;
    this.angularForce = 0;
    vec2.set(this.velocity,0,0);
    vec2.set(this.force,0,0);
    this.emit(Body.sleepEvent);
};

/**
 * Called every timestep to update internal sleep timer and change sleep state if needed.
 * @method sleepTick
 * @param {number} time The world time in seconds
 * @param {boolean} dontSleep
 * @param {number} dt
 */
Body.prototype.sleepTick = function(time, dontSleep, dt){
    if(!this.allowSleep || this.type === Body.SLEEPING){
        return;
    }

    this.wantsToSleep = false;

    var sleepState = this.sleepState,
        speedSquared = vec2.squaredLength(this.velocity) + Math.pow(this.angularVelocity,2),
        speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);

    // Add to idle time
    if(speedSquared >= speedLimitSquared){
        this.idleTime = 0;
        this.sleepState = Body.AWAKE;
    } else {
        this.idleTime += dt;
        this.sleepState = Body.SLEEPY;
    }
    if(this.idleTime > this.sleepTimeLimit){
        if(!dontSleep){
            this.sleep();
        } else {
            this.wantsToSleep = true;
        }
    }
};

/**
 * Check if the body is overlapping another body. Note that this method only works if the body was added to a World and if at least one step was taken.
 * @method overlaps
 * @param  {Body} body
 * @return {boolean}
 */
Body.prototype.overlaps = function(body){
    return this.world.overlapKeeper.bodiesAreOverlapping(this, body);
};

var integrate_fhMinv = vec2.create();
var integrate_velodt = vec2.create();

/**
 * Move the body forward in time given its current velocity.
 * @method integrate
 * @param  {Number} dt
 */
Body.prototype.integrate = function(dt){
    var minv = this.invMass,
        f = this.force,
        pos = this.position,
        velo = this.velocity;

    // Save old position
    vec2.copy(this.previousPosition, this.position);
    this.previousAngle = this.angle;

    // Velocity update
    if(!this.fixedRotation){
        this.angularVelocity += this.angularForce * this.invInertia * dt;
    }
    vec2.scale(integrate_fhMinv, f, dt * minv);
    vec2.multiply(integrate_fhMinv, this.massMultiplier, integrate_fhMinv);
    vec2.add(velo, integrate_fhMinv, velo);

    // CCD
    if(!this.integrateToTimeOfImpact(dt)){

        // Regular position update
        vec2.scale(integrate_velodt, velo, dt);
        vec2.add(pos, pos, integrate_velodt);
        if(!this.fixedRotation){
            this.angle += this.angularVelocity * dt;
        }
    }

    this.aabbNeedsUpdate = true;
};

var result = new RaycastResult();
var ray = new Ray({
    mode: Ray.ALL
});
var direction = vec2.create();
var end = vec2.create();
var startToEnd = vec2.create();
var rememberPosition = vec2.create();
Body.prototype.integrateToTimeOfImpact = function(dt){

    if(this.ccdSpeedThreshold < 0 || vec2.squaredLength(this.velocity) < Math.pow(this.ccdSpeedThreshold, 2)){
        return false;
    }

    vec2.normalize(direction, this.velocity);

    vec2.scale(end, this.velocity, dt);
    vec2.add(end, end, this.position);

    vec2.sub(startToEnd, end, this.position);
    var startToEndAngle = this.angularVelocity * dt;
    var len = vec2.length(startToEnd);

    var timeOfImpact = 1;

    var hit;
    var that = this;
    result.reset();
    ray.callback = function (result) {
        if(result.body === that){
            return;
        }
        hit = result.body;
        result.getHitPoint(end, ray);
        vec2.sub(startToEnd, end, that.position);
        timeOfImpact = vec2.length(startToEnd) / len;
        result.stop();
    };
    vec2.copy(ray.from, this.position);
    vec2.copy(ray.to, end);
    ray.update();
    this.world.raycast(result, ray);

    if(!hit){
        return false;
    }

    var rememberAngle = this.angle;
    vec2.copy(rememberPosition, this.position);

    // Got a start and end point. Approximate time of impact using binary search
    var iter = 0;
    var tmin = 0;
    var tmid = 0;
    var tmax = timeOfImpact;
    while (tmax >= tmin && iter < this.ccdIterations) {
        iter++;

        // calculate the midpoint
        tmid = (tmax - tmin) / 2;

        // Move the body to that point
        vec2.scale(integrate_velodt, startToEnd, timeOfImpact);
        vec2.add(this.position, rememberPosition, integrate_velodt);
        this.angle = rememberAngle + startToEndAngle * timeOfImpact;
        this.updateAABB();

        // check overlap
        var overlaps = this.aabb.overlaps(hit.aabb) && this.world.narrowphase.bodiesOverlap(this, hit);

        if (overlaps) {
            // change min to search upper interval
            tmin = tmid;
        } else {
            // change max to search lower interval
            tmax = tmid;
        }
    }

    timeOfImpact = tmid;

    vec2.copy(this.position, rememberPosition);
    this.angle = rememberAngle;

    // move to TOI
    vec2.scale(integrate_velodt, startToEnd, timeOfImpact);
    vec2.add(this.position, this.position, integrate_velodt);
    if(!this.fixedRotation){
        this.angle += startToEndAngle * timeOfImpact;
    }

    return true;
};

/**
 * Get velocity of a point in the body.
 * @method getVelocityAtPoint
 * @param  {Array} result A vector to store the result in
 * @param  {Array} relativePoint A world oriented vector, indicating the position of the point to get the velocity from
 * @return {Array} The result vector
 */
Body.prototype.getVelocityAtPoint = function(result, relativePoint){
    vec2.crossVZ(result, relativePoint, this.angularVelocity);
    vec2.subtract(result, this.velocity, result);
    return result;
};

/**
 * @event sleepy
 */
Body.sleepyEvent = {
    type: "sleepy"
};

/**
 * @event sleep
 */
Body.sleepEvent = {
    type: "sleep"
};

/**
 * @event wakeup
 */
Body.wakeUpEvent = {
    type: "wakeup"
};

/**
 * Dynamic body.
 * @property DYNAMIC
 * @type {Number}
 * @static
 */
Body.DYNAMIC = 1;

/**
 * Static body.
 * @property STATIC
 * @type {Number}
 * @static
 */
Body.STATIC = 2;

/**
 * Kinematic body.
 * @property KINEMATIC
 * @type {Number}
 * @static
 */
Body.KINEMATIC = 4;

/**
 * @property AWAKE
 * @type {Number}
 * @static
 */
Body.AWAKE = 0;

/**
 * @property SLEEPY
 * @type {Number}
 * @static
 */
Body.SLEEPY = 1;

/**
 * @property SLEEPING
 * @type {Number}
 * @static
 */
Body.SLEEPING = 2;


},{"../collision/AABB":71,"../collision/Ray":75,"../collision/RaycastResult":76,"../events/EventEmitter":90,"../math/vec2":94,"../shapes/Convex":104,"poly-decomp":69}],96:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Spring = require('./Spring');
var Utils = require('../utils/Utils');

module.exports = LinearSpring;

/**
 * A spring, connecting two bodies.
 *
 * The Spring explicitly adds force and angularForce to the bodies.
 *
 * @class LinearSpring
 * @extends Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.restLength]   A number > 0. Default is the current distance between the world anchor points.
 * @param {number} [options.stiffness=100]  Spring constant (see Hookes Law). A number >= 0.
 * @param {number} [options.damping=1]      A number >= 0. Default: 1
 * @param {Array}  [options.worldAnchorA]   Where to hook the spring to body A, in world coordinates. Overrides the option "localAnchorA" if given.
 * @param {Array}  [options.worldAnchorB]
 * @param {Array}  [options.localAnchorA]   Where to hook the spring to body A, in local body coordinates. Defaults to the body center.
 * @param {Array}  [options.localAnchorB]
 */
function LinearSpring(bodyA,bodyB,options){
    options = options || {};

    Spring.call(this, bodyA, bodyB, options);

    /**
     * Anchor for bodyA in local bodyA coordinates.
     * @property localAnchorA
     * @type {Array}
     */
    this.localAnchorA = vec2.fromValues(0,0);

    /**
     * Anchor for bodyB in local bodyB coordinates.
     * @property localAnchorB
     * @type {Array}
     */
    this.localAnchorB = vec2.fromValues(0,0);

    if(options.localAnchorA){ vec2.copy(this.localAnchorA, options.localAnchorA); }
    if(options.localAnchorB){ vec2.copy(this.localAnchorB, options.localAnchorB); }
    if(options.worldAnchorA){ this.setWorldAnchorA(options.worldAnchorA); }
    if(options.worldAnchorB){ this.setWorldAnchorB(options.worldAnchorB); }

    var worldAnchorA = vec2.create();
    var worldAnchorB = vec2.create();
    this.getWorldAnchorA(worldAnchorA);
    this.getWorldAnchorB(worldAnchorB);
    var worldDistance = vec2.distance(worldAnchorA, worldAnchorB);

    /**
     * Rest length of the spring.
     * @property restLength
     * @type {number}
     */
    this.restLength = typeof(options.restLength) === "number" ? options.restLength : worldDistance;
}
LinearSpring.prototype = new Spring();
LinearSpring.prototype.constructor = LinearSpring;

/**
 * Set the anchor point on body A, using world coordinates.
 * @method setWorldAnchorA
 * @param {Array} worldAnchorA
 */
LinearSpring.prototype.setWorldAnchorA = function(worldAnchorA){
    this.bodyA.toLocalFrame(this.localAnchorA, worldAnchorA);
};

/**
 * Set the anchor point on body B, using world coordinates.
 * @method setWorldAnchorB
 * @param {Array} worldAnchorB
 */
LinearSpring.prototype.setWorldAnchorB = function(worldAnchorB){
    this.bodyB.toLocalFrame(this.localAnchorB, worldAnchorB);
};

/**
 * Get the anchor point on body A, in world coordinates.
 * @method getWorldAnchorA
 * @param {Array} result The vector to store the result in.
 */
LinearSpring.prototype.getWorldAnchorA = function(result){
    this.bodyA.toWorldFrame(result, this.localAnchorA);
};

/**
 * Get the anchor point on body B, in world coordinates.
 * @method getWorldAnchorB
 * @param {Array} result The vector to store the result in.
 */
LinearSpring.prototype.getWorldAnchorB = function(result){
    this.bodyB.toWorldFrame(result, this.localAnchorB);
};

var applyForce_r =              vec2.create(),
    applyForce_r_unit =         vec2.create(),
    applyForce_u =              vec2.create(),
    applyForce_f =              vec2.create(),
    applyForce_worldAnchorA =   vec2.create(),
    applyForce_worldAnchorB =   vec2.create(),
    applyForce_ri =             vec2.create(),
    applyForce_rj =             vec2.create(),
    applyForce_tmp =            vec2.create();

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
LinearSpring.prototype.applyForce = function(){
    var k = this.stiffness,
        d = this.damping,
        l = this.restLength,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        r = applyForce_r,
        r_unit = applyForce_r_unit,
        u = applyForce_u,
        f = applyForce_f,
        tmp = applyForce_tmp;

    var worldAnchorA = applyForce_worldAnchorA,
        worldAnchorB = applyForce_worldAnchorB,
        ri = applyForce_ri,
        rj = applyForce_rj;

    // Get world anchors
    this.getWorldAnchorA(worldAnchorA);
    this.getWorldAnchorB(worldAnchorB);

    // Get offset points
    vec2.sub(ri, worldAnchorA, bodyA.position);
    vec2.sub(rj, worldAnchorB, bodyB.position);

    // Compute distance vector between world anchor points
    vec2.sub(r, worldAnchorB, worldAnchorA);
    var rlen = vec2.len(r);
    vec2.normalize(r_unit,r);

    //console.log(rlen)
    //console.log("A",vec2.str(worldAnchorA),"B",vec2.str(worldAnchorB))

    // Compute relative velocity of the anchor points, u
    vec2.sub(u, bodyB.velocity, bodyA.velocity);
    vec2.crossZV(tmp, bodyB.angularVelocity, rj);
    vec2.add(u, u, tmp);
    vec2.crossZV(tmp, bodyA.angularVelocity, ri);
    vec2.sub(u, u, tmp);

    // F = - k * ( x - L ) - D * ( u )
    vec2.scale(f, r_unit, -k*(rlen-l) - d*vec2.dot(u,r_unit));

    // Add forces to bodies
    vec2.sub( bodyA.force, bodyA.force, f);
    vec2.add( bodyB.force, bodyB.force, f);

    // Angular force
    var ri_x_f = vec2.crossLength(ri, f);
    var rj_x_f = vec2.crossLength(rj, f);
    bodyA.angularForce -= ri_x_f;
    bodyB.angularForce += rj_x_f;
};

},{"../math/vec2":94,"../utils/Utils":121,"./Spring":98}],97:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Spring = require('./Spring');

module.exports = RotationalSpring;

/**
 * A rotational spring, connecting two bodies rotation. This spring explicitly adds angularForce (torque) to the bodies.
 *
 * The spring can be combined with a {{#crossLink "RevoluteConstraint"}}{{/crossLink}} to make, for example, a mouse trap.
 *
 * @class RotationalSpring
 * @extends Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.restAngle] The relative angle of bodies at which the spring is at rest. If not given, it's set to the current relative angle between the bodies.
 * @param {number} [options.stiffness=100] Spring constant (see Hookes Law). A number >= 0.
 * @param {number} [options.damping=1] A number >= 0.
 */
function RotationalSpring(bodyA, bodyB, options){
    options = options || {};

    Spring.call(this, bodyA, bodyB, options);

    /**
     * Rest angle of the spring.
     * @property restAngle
     * @type {number}
     */
    this.restAngle = typeof(options.restAngle) === "number" ? options.restAngle : bodyB.angle - bodyA.angle;
}
RotationalSpring.prototype = new Spring();
RotationalSpring.prototype.constructor = RotationalSpring;

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
RotationalSpring.prototype.applyForce = function(){
    var k = this.stiffness,
        d = this.damping,
        l = this.restAngle,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        x = bodyB.angle - bodyA.angle,
        u = bodyB.angularVelocity - bodyA.angularVelocity;

    var torque = - k * (x - l) - d * u * 0;

    bodyA.angularForce -= torque;
    bodyB.angularForce += torque;
};

},{"../math/vec2":94,"./Spring":98}],98:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Utils = require('../utils/Utils');

module.exports = Spring;

/**
 * A spring, connecting two bodies. The Spring explicitly adds force and angularForce to the bodies and does therefore not put load on the constraint solver.
 *
 * @class Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.stiffness=100]  Spring constant (see Hookes Law). A number >= 0.
 * @param {number} [options.damping=1]      A number >= 0. Default: 1
 * @param {Array}  [options.localAnchorA]   Where to hook the spring to body A, in local body coordinates. Defaults to the body center.
 * @param {Array}  [options.localAnchorB]
 * @param {Array}  [options.worldAnchorA]   Where to hook the spring to body A, in world coordinates. Overrides the option "localAnchorA" if given.
 * @param {Array}  [options.worldAnchorB]
 */
function Spring(bodyA, bodyB, options){
    options = Utils.defaults(options,{
        stiffness: 100,
        damping: 1,
    });

    /**
     * Stiffness of the spring.
     * @property stiffness
     * @type {number}
     */
    this.stiffness = options.stiffness;

    /**
     * Damping of the spring.
     * @property damping
     * @type {number}
     */
    this.damping = options.damping;

    /**
     * First connected body.
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second connected body.
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;
}

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
Spring.prototype.applyForce = function(){
    // To be implemented by subclasses
};

},{"../math/vec2":94,"../utils/Utils":121}],99:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Utils = require('../utils/Utils');
var Constraint = require('../constraints/Constraint');
var FrictionEquation = require('../equations/FrictionEquation');
var Body = require('../objects/Body');

module.exports = TopDownVehicle;

/**
 * @class TopDownVehicle
 * @constructor
 * @param {Body} chassisBody A dynamic body, already added to the world.
 * @param {Object} [options]
 *
 * @example
 *
 *     // Create a dynamic body for the chassis
 *     var chassisBody = new Body({
 *         mass: 1
 *     });
 *     var boxShape = new Box({ width: 0.5, height: 1 });
 *     chassisBody.addShape(boxShape);
 *     world.addBody(chassisBody);
 *
 *     // Create the vehicle
 *     var vehicle = new TopDownVehicle(chassisBody);
 *
 *     // Add one front wheel and one back wheel - we don't actually need four :)
 *     var frontWheel = vehicle.addWheel({
 *         localPosition: [0, 0.5] // front
 *     });
 *     frontWheel.setSideFriction(4);
 *
 *     // Back wheel
 *     var backWheel = vehicle.addWheel({
 *         localPosition: [0, -0.5] // back
 *     });
 *     backWheel.setSideFriction(3); // Less side friction on back wheel makes it easier to drift
 *     vehicle.addToWorld(world);
 *
 *     // Steer value zero means straight forward. Positive is left and negative right.
 *     frontWheel.steerValue = Math.PI / 16;
 *
 *     // Engine force forward
 *     backWheel.engineForce = 10;
 *     backWheel.setBrakeForce(0);
 */
function TopDownVehicle(chassisBody, options){
    options = options || {};

    /**
     * @property {Body} chassisBody
     */
    this.chassisBody = chassisBody;

    /**
     * @property {Array} wheels
     */
    this.wheels = [];

    // A dummy body to constrain the chassis to
    this.groundBody = new Body({ mass: 0 });

    this.world = null;

    var that = this;
    this.preStepCallback = function(){
        that.update();
    };
}

/**
 * @method addToWorld
 * @param {World} world
 */
TopDownVehicle.prototype.addToWorld = function(world){
    this.world = world;
    world.addBody(this.groundBody);
    world.on('preStep', this.preStepCallback);
    for (var i = 0; i < this.wheels.length; i++) {
        var wheel = this.wheels[i];
        world.addConstraint(wheel);
    }
};

/**
 * @method removeFromWorld
 * @param {World} world
 */
TopDownVehicle.prototype.removeFromWorld = function(){
    var world = this.world;
    world.removeBody(this.groundBody);
    world.off('preStep', this.preStepCallback);
    for (var i = 0; i < this.wheels.length; i++) {
        var wheel = this.wheels[i];
        world.removeConstraint(wheel);
    }
    this.world = null;
};

/**
 * @method addWheel
 * @param {object} [wheelOptions]
 * @return {WheelConstraint}
 */
TopDownVehicle.prototype.addWheel = function(wheelOptions){
    var wheel = new WheelConstraint(this,wheelOptions);
    this.wheels.push(wheel);
    return wheel;
};

/**
 * @method update
 */
TopDownVehicle.prototype.update = function(){
    for (var i = 0; i < this.wheels.length; i++) {
        this.wheels[i].update();
    }
};

/**
 * @class WheelConstraint
 * @constructor
 * @extends {Constraint}
 * @param {Vehicle} vehicle
 * @param {object} [options]
 * @param {Array} [options.localForwardVector]The local wheel forward vector in local body space. Default is zero.
 * @param {Array} [options.localPosition] The local position of the wheen in the chassis body. Default is zero - the center of the body.
 * @param {Array} [options.sideFriction=5] The max friction force in the sideways direction.
 */
function WheelConstraint(vehicle, options){
    options = options || {};

    this.vehicle = vehicle;

    this.forwardEquation = new FrictionEquation(vehicle.chassisBody, vehicle.groundBody);

    this.sideEquation = new FrictionEquation(vehicle.chassisBody, vehicle.groundBody);

    /**
     * @property {number} steerValue
     */
    this.steerValue = 0;

    /**
     * @property {number} engineForce
     */
    this.engineForce = 0;

    this.setSideFriction(options.sideFriction !== undefined ? options.sideFriction : 5);

    /**
     * @property {Array} localForwardVector
     */
    this.localForwardVector = vec2.fromValues(0, 1);
    if(options.localForwardVector){
        vec2.copy(this.localForwardVector, options.localForwardVector);
    }

    /**
     * @property {Array} localPosition
     */
    this.localPosition = vec2.fromValues(0, 0);
    if(options.localPosition){
        vec2.copy(this.localPosition, options.localPosition);
    }

    Constraint.apply(this, vehicle.chassisBody, vehicle.groundBody);

    this.equations.push(
        this.forwardEquation,
        this.sideEquation
    );

    this.setBrakeForce(0);
}
WheelConstraint.prototype = new Constraint();

/**
 * @method setForwardFriction
 */
WheelConstraint.prototype.setBrakeForce = function(force){
    this.forwardEquation.setSlipForce(force);
};

/**
 * @method setSideFriction
 */
WheelConstraint.prototype.setSideFriction = function(force){
    this.sideEquation.setSlipForce(force);
};

var worldVelocity = vec2.create();
var relativePoint = vec2.create();

/**
 * @method getSpeed
 */
WheelConstraint.prototype.getSpeed = function(){
    this.vehicle.chassisBody.vectorToWorldFrame(relativePoint, this.localForwardVector);
    this.vehicle.chassisBody.getVelocityAtPoint(worldVelocity, relativePoint);
    return vec2.dot(worldVelocity, relativePoint);
};

var tmpVec = vec2.create();

/**
 * @method update
 */
WheelConstraint.prototype.update = function(){

    // Directional
    this.vehicle.chassisBody.vectorToWorldFrame(this.forwardEquation.t, this.localForwardVector);
    vec2.rotate(this.sideEquation.t, this.localForwardVector, Math.PI / 2);
    this.vehicle.chassisBody.vectorToWorldFrame(this.sideEquation.t, this.sideEquation.t);

    vec2.rotate(this.forwardEquation.t, this.forwardEquation.t, this.steerValue);
    vec2.rotate(this.sideEquation.t, this.sideEquation.t, this.steerValue);

    // Attachment point
    this.vehicle.chassisBody.toWorldFrame(this.forwardEquation.contactPointB, this.localPosition);
    vec2.copy(this.sideEquation.contactPointB, this.forwardEquation.contactPointB);

    this.vehicle.chassisBody.vectorToWorldFrame(this.forwardEquation.contactPointA, this.localPosition);
    vec2.copy(this.sideEquation.contactPointA, this.forwardEquation.contactPointA);

    // Add engine force
    vec2.normalize(tmpVec, this.forwardEquation.t);
    vec2.scale(tmpVec, tmpVec, this.engineForce);

    this.vehicle.chassisBody.applyForce(tmpVec, this.forwardEquation.contactPointA);
};
},{"../constraints/Constraint":78,"../equations/FrictionEquation":87,"../math/vec2":94,"../objects/Body":95,"../utils/Utils":121}],100:[function(require,module,exports){
// Export p2 classes
var p2 = module.exports = {
    AABB :                          require('./collision/AABB'),
    AngleLockEquation :             require('./equations/AngleLockEquation'),
    Body :                          require('./objects/Body'),
    Broadphase :                    require('./collision/Broadphase'),
    Capsule :                       require('./shapes/Capsule'),
    Circle :                        require('./shapes/Circle'),
    Constraint :                    require('./constraints/Constraint'),
    ContactEquation :               require('./equations/ContactEquation'),
    ContactEquationPool :           require('./utils/ContactEquationPool'),
    ContactMaterial :               require('./material/ContactMaterial'),
    Convex :                        require('./shapes/Convex'),
    DistanceConstraint :            require('./constraints/DistanceConstraint'),
    Equation :                      require('./equations/Equation'),
    EventEmitter :                  require('./events/EventEmitter'),
    FrictionEquation :              require('./equations/FrictionEquation'),
    FrictionEquationPool :          require('./utils/FrictionEquationPool'),
    GearConstraint :                require('./constraints/GearConstraint'),
    GSSolver :                      require('./solver/GSSolver'),
    Heightfield :                   require('./shapes/Heightfield'),
    Line :                          require('./shapes/Line'),
    LockConstraint :                require('./constraints/LockConstraint'),
    Material :                      require('./material/Material'),
    Narrowphase :                   require('./collision/Narrowphase'),
    NaiveBroadphase :               require('./collision/NaiveBroadphase'),
    Particle :                      require('./shapes/Particle'),
    Plane :                         require('./shapes/Plane'),
    Pool :                          require('./utils/Pool'),
    RevoluteConstraint :            require('./constraints/RevoluteConstraint'),
    PrismaticConstraint :           require('./constraints/PrismaticConstraint'),
    Ray :                           require('./collision/Ray'),
    RaycastResult :                 require('./collision/RaycastResult'),
    Box :                           require('./shapes/Box'),
    RotationalVelocityEquation :    require('./equations/RotationalVelocityEquation'),
    SAPBroadphase :                 require('./collision/SAPBroadphase'),
    Shape :                         require('./shapes/Shape'),
    Solver :                        require('./solver/Solver'),
    Spring :                        require('./objects/Spring'),
    TopDownVehicle :                require('./objects/TopDownVehicle'),
    LinearSpring :                  require('./objects/LinearSpring'),
    RotationalSpring :              require('./objects/RotationalSpring'),
    Utils :                         require('./utils/Utils'),
    World :                         require('./world/World'),
    vec2 :                          require('./math/vec2'),
    version :                       require('../package.json').version,
};

Object.defineProperty(p2, 'Rectangle', {
    get: function() {
        console.warn('The Rectangle class has been renamed to Box.');
        return this.Box;
    }
});
},{"../package.json":70,"./collision/AABB":71,"./collision/Broadphase":72,"./collision/NaiveBroadphase":73,"./collision/Narrowphase":74,"./collision/Ray":75,"./collision/RaycastResult":76,"./collision/SAPBroadphase":77,"./constraints/Constraint":78,"./constraints/DistanceConstraint":79,"./constraints/GearConstraint":80,"./constraints/LockConstraint":81,"./constraints/PrismaticConstraint":82,"./constraints/RevoluteConstraint":83,"./equations/AngleLockEquation":84,"./equations/ContactEquation":85,"./equations/Equation":86,"./equations/FrictionEquation":87,"./equations/RotationalVelocityEquation":89,"./events/EventEmitter":90,"./material/ContactMaterial":91,"./material/Material":92,"./math/vec2":94,"./objects/Body":95,"./objects/LinearSpring":96,"./objects/RotationalSpring":97,"./objects/Spring":98,"./objects/TopDownVehicle":99,"./shapes/Box":101,"./shapes/Capsule":102,"./shapes/Circle":103,"./shapes/Convex":104,"./shapes/Heightfield":105,"./shapes/Line":106,"./shapes/Particle":107,"./shapes/Plane":108,"./shapes/Shape":109,"./solver/GSSolver":110,"./solver/Solver":111,"./utils/ContactEquationPool":112,"./utils/FrictionEquationPool":113,"./utils/Pool":119,"./utils/Utils":121,"./world/World":125}],101:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Shape = require('./Shape')
,   Convex = require('./Convex');

module.exports = Box;

/**
 * Box shape class.
 * @class Box
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Number} [options.width=1] Total width of the box
 * @param {Number} [options.height=1] Total height of the box
 * @extends Convex
 */
function Box(options){
    if(typeof(arguments[0]) === 'number' && typeof(arguments[1]) === 'number'){
        options = {
            width: arguments[0],
            height: arguments[1]
        };
        console.warn('The Rectangle has been renamed to Box and its constructor signature has changed. Please use the following format: new Box({ width: 1, height: 1, ... })');
    }
    options = options || {};

    /**
     * Total width of the box
     * @property width
     * @type {Number}
     */
    var width = this.width = options.width || 1;

    /**
     * Total height of the box
     * @property height
     * @type {Number}
     */
    var height = this.height = options.height || 1;

    var verts = [
        vec2.fromValues(-width/2, -height/2),
        vec2.fromValues( width/2, -height/2),
        vec2.fromValues( width/2,  height/2),
        vec2.fromValues(-width/2,  height/2)
    ];
    var axes = [
        vec2.fromValues(1, 0),
        vec2.fromValues(0, 1)
    ];

    options.vertices = verts;
    options.axes = axes;
    options.type = Shape.BOX;
    Convex.call(this, options);
}
Box.prototype = new Convex();
Box.prototype.constructor = Box;

/**
 * Compute moment of inertia
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 */
Box.prototype.computeMomentOfInertia = function(mass){
    var w = this.width,
        h = this.height;
    return mass * (h*h + w*w) / 12;
};

/**
 * Update the bounding radius
 * @method updateBoundingRadius
 */
Box.prototype.updateBoundingRadius = function(){
    var w = this.width,
        h = this.height;
    this.boundingRadius = Math.sqrt(w*w + h*h) / 2;
};

var corner1 = vec2.create(),
    corner2 = vec2.create(),
    corner3 = vec2.create(),
    corner4 = vec2.create();

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Box.prototype.computeAABB = function(out, position, angle){
    out.setFromPoints(this.vertices,position,angle,0);
};

Box.prototype.updateArea = function(){
    this.area = this.width * this.height;
};


},{"../math/vec2":94,"./Convex":104,"./Shape":109}],102:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2');

module.exports = Capsule;

/**
 * Capsule shape class.
 * @class Capsule
 * @constructor
 * @extends Shape
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Number} [options.length=1] The distance between the end points
 * @param {Number} [options.radius=1] Radius of the capsule
 * @example
 *     var capsuleShape = new Capsule({
 *         length: 1,
 *         radius: 2
 *     });
 *     body.addShape(capsuleShape);
 */
function Capsule(options){
    if(typeof(arguments[0]) === 'number' && typeof(arguments[1]) === 'number'){
        options = {
            length: arguments[0],
            radius: arguments[1]
        };
        console.warn('The Capsule constructor signature has changed. Please use the following format: new Capsule({ radius: 1, length: 1 })');
    }
    options = options || {};

    /**
     * The distance between the end points.
     * @property {Number} length
     */
    this.length = options.length || 1;

    /**
     * The radius of the capsule.
     * @property {Number} radius
     */
    this.radius = options.radius || 1;

    options.type = Shape.CAPSULE;
    Shape.call(this, options);
}
Capsule.prototype = new Shape();
Capsule.prototype.constructor = Capsule;

/**
 * Compute the mass moment of inertia of the Capsule.
 * @method conputeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 * @todo
 */
Capsule.prototype.computeMomentOfInertia = function(mass){
    // Approximate with rectangle
    var r = this.radius,
        w = this.length + r, // 2*r is too much, 0 is too little
        h = r*2;
    return mass * (h*h + w*w) / 12;
};

/**
 * @method updateBoundingRadius
 */
Capsule.prototype.updateBoundingRadius = function(){
    this.boundingRadius = this.radius + this.length/2;
};

/**
 * @method updateArea
 */
Capsule.prototype.updateArea = function(){
    this.area = Math.PI * this.radius * this.radius + this.radius * 2 * this.length;
};

var r = vec2.create();

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Capsule.prototype.computeAABB = function(out, position, angle){
    var radius = this.radius;

    // Compute center position of one of the the circles, world oriented, but with local offset
    vec2.set(r,this.length / 2,0);
    if(angle !== 0){
        vec2.rotate(r,r,angle);
    }

    // Get bounds
    vec2.set(out.upperBound,  Math.max(r[0]+radius, -r[0]+radius),
                              Math.max(r[1]+radius, -r[1]+radius));
    vec2.set(out.lowerBound,  Math.min(r[0]-radius, -r[0]-radius),
                              Math.min(r[1]-radius, -r[1]-radius));

    // Add offset
    vec2.add(out.lowerBound, out.lowerBound, position);
    vec2.add(out.upperBound, out.upperBound, position);
};

var intersectCapsule_hitPointWorld = vec2.create();
var intersectCapsule_normal = vec2.create();
var intersectCapsule_l0 = vec2.create();
var intersectCapsule_l1 = vec2.create();
var intersectCapsule_unit_y = vec2.fromValues(0,1);

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Capsule.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;
    var direction = ray.direction;

    var hitPointWorld = intersectCapsule_hitPointWorld;
    var normal = intersectCapsule_normal;
    var l0 = intersectCapsule_l0;
    var l1 = intersectCapsule_l1;

    // The sides
    var halfLen = this.length / 2;
    for(var i=0; i<2; i++){

        // get start and end of the line
        var y = this.radius * (i*2-1);
        vec2.set(l0, -halfLen, y);
        vec2.set(l1, halfLen, y);
        vec2.toGlobalFrame(l0, l0, position, angle);
        vec2.toGlobalFrame(l1, l1, position, angle);

        var delta = vec2.getLineSegmentsIntersectionFraction(from, to, l0, l1);
        if(delta >= 0){
            vec2.rotate(normal, intersectCapsule_unit_y, angle);
            vec2.scale(normal, normal, (i*2-1));
            ray.reportIntersection(result, delta, normal, -1);
            if(result.shouldStop(ray)){
                return;
            }
        }
    }

    // Circles
    var diagonalLengthSquared = Math.pow(this.radius, 2) + Math.pow(halfLen, 2);
    for(var i=0; i<2; i++){
        vec2.set(l0, halfLen * (i*2-1), 0);
        vec2.toGlobalFrame(l0, l0, position, angle);

        var a = Math.pow(to[0] - from[0], 2) + Math.pow(to[1] - from[1], 2);
        var b = 2 * ((to[0] - from[0]) * (from[0] - l0[0]) + (to[1] - from[1]) * (from[1] - l0[1]));
        var c = Math.pow(from[0] - l0[0], 2) + Math.pow(from[1] - l0[1], 2) - Math.pow(this.radius, 2);
        var delta = Math.pow(b, 2) - 4 * a * c;

        if(delta < 0){
            // No intersection
            continue;

        } else if(delta === 0){
            // single intersection point
            vec2.lerp(hitPointWorld, from, to, delta);

            if(vec2.squaredDistance(hitPointWorld, position) > diagonalLengthSquared){
                vec2.sub(normal, hitPointWorld, l0);
                vec2.normalize(normal,normal);
                ray.reportIntersection(result, delta, normal, -1);
                if(result.shouldStop(ray)){
                    return;
                }
            }

        } else {
            var sqrtDelta = Math.sqrt(delta);
            var inv2a = 1 / (2 * a);
            var d1 = (- b - sqrtDelta) * inv2a;
            var d2 = (- b + sqrtDelta) * inv2a;

            if(d1 >= 0 && d1 <= 1){
                vec2.lerp(hitPointWorld, from, to, d1);
                if(vec2.squaredDistance(hitPointWorld, position) > diagonalLengthSquared){
                    vec2.sub(normal, hitPointWorld, l0);
                    vec2.normalize(normal,normal);
                    ray.reportIntersection(result, d1, normal, -1);
                    if(result.shouldStop(ray)){
                        return;
                    }
                }
            }

            if(d2 >= 0 && d2 <= 1){
                vec2.lerp(hitPointWorld, from, to, d2);
                if(vec2.squaredDistance(hitPointWorld, position) > diagonalLengthSquared){
                    vec2.sub(normal, hitPointWorld, l0);
                    vec2.normalize(normal,normal);
                    ray.reportIntersection(result, d2, normal, -1);
                    if(result.shouldStop(ray)){
                        return;
                    }
                }
            }
        }
    }
};
},{"../math/vec2":94,"./Shape":109}],103:[function(require,module,exports){
var Shape = require('./Shape')
,    vec2 = require('../math/vec2');

module.exports = Circle;

/**
 * Circle shape class.
 * @class Circle
 * @extends Shape
 * @constructor
 * @param {options} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {number} [options.radius=1] The radius of this circle
 *
 * @example
 *     var circleShape = new Circle({ radius: 1 });
 *     body.addShape(circleShape);
 */
function Circle(options){
    if(typeof(arguments[0]) === 'number'){
        options = {
            radius: arguments[0]
        };
        console.warn('The Circle constructor signature has changed. Please use the following format: new Circle({ radius: 1 })');
    }
    options = options || {};

    /**
     * The radius of the circle.
     * @property radius
     * @type {number}
     */
    this.radius = options.radius || 1;

    options.type = Shape.CIRCLE;
    Shape.call(this, options);
}
Circle.prototype = new Shape();
Circle.prototype.constructor = Circle;

/**
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 */
Circle.prototype.computeMomentOfInertia = function(mass){
    var r = this.radius;
    return mass * r * r / 2;
};

/**
 * @method updateBoundingRadius
 * @return {Number}
 */
Circle.prototype.updateBoundingRadius = function(){
    this.boundingRadius = this.radius;
};

/**
 * @method updateArea
 * @return {Number}
 */
Circle.prototype.updateArea = function(){
    this.area = Math.PI * this.radius * this.radius;
};

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Circle.prototype.computeAABB = function(out, position, angle){
    var r = this.radius;
    vec2.set(out.upperBound,  r,  r);
    vec2.set(out.lowerBound, -r, -r);
    if(position){
        vec2.add(out.lowerBound, out.lowerBound, position);
        vec2.add(out.upperBound, out.upperBound, position);
    }
};

var Ray_intersectSphere_intersectionPoint = vec2.create();
var Ray_intersectSphere_normal = vec2.create();

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Circle.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from,
        to = ray.to,
        r = this.radius;

    var a = Math.pow(to[0] - from[0], 2) + Math.pow(to[1] - from[1], 2);
    var b = 2 * ((to[0] - from[0]) * (from[0] - position[0]) + (to[1] - from[1]) * (from[1] - position[1]));
    var c = Math.pow(from[0] - position[0], 2) + Math.pow(from[1] - position[1], 2) - Math.pow(r, 2);
    var delta = Math.pow(b, 2) - 4 * a * c;

    var intersectionPoint = Ray_intersectSphere_intersectionPoint;
    var normal = Ray_intersectSphere_normal;

    if(delta < 0){
        // No intersection
        return;

    } else if(delta === 0){
        // single intersection point
        vec2.lerp(intersectionPoint, from, to, delta);

        vec2.sub(normal, intersectionPoint, position);
        vec2.normalize(normal,normal);

        ray.reportIntersection(result, delta, normal, -1);

    } else {
        var sqrtDelta = Math.sqrt(delta);
        var inv2a = 1 / (2 * a);
        var d1 = (- b - sqrtDelta) * inv2a;
        var d2 = (- b + sqrtDelta) * inv2a;

        if(d1 >= 0 && d1 <= 1){
            vec2.lerp(intersectionPoint, from, to, d1);

            vec2.sub(normal, intersectionPoint, position);
            vec2.normalize(normal,normal);

            ray.reportIntersection(result, d1, normal, -1);

            if(result.shouldStop(ray)){
                return;
            }
        }

        if(d2 >= 0 && d2 <= 1){
            vec2.lerp(intersectionPoint, from, to, d2);

            vec2.sub(normal, intersectionPoint, position);
            vec2.normalize(normal,normal);

            ray.reportIntersection(result, d2, normal, -1);
        }
    }
};
},{"../math/vec2":94,"./Shape":109}],104:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2')
,   polyk = require('../math/polyk')
,   decomp = require('poly-decomp');

module.exports = Convex;

/**
 * Convex shape class.
 * @class Convex
 * @constructor
 * @extends Shape
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Array} [options.vertices] An array of vertices that span this shape. Vertices are given in counter-clockwise (CCW) direction.
 * @param {Array} [options.axes] An array of unit length vectors, representing the symmetry axes in the convex.
 * @example
 *     // Create a box
 *     var vertices = [[-1,-1], [1,-1], [1,1], [-1,1]];
 *     var convexShape = new Convex({ vertices: vertices });
 *     body.addShape(convexShape);
 */
function Convex(options){
    if(Array.isArray(arguments[0])){
        options = {
            vertices: arguments[0],
            axes: arguments[1]
        };
        console.warn('The Convex constructor signature has changed. Please use the following format: new Convex({ vertices: [...], ... })');
    }
    options = options || {};

    /**
     * Vertices defined in the local frame.
     * @property vertices
     * @type {Array}
     */
    this.vertices = [];

    // Copy the verts
    var vertices = options.vertices !== undefined ? options.vertices : [];
    for(var i=0; i < vertices.length; i++){
        var v = vec2.create();
        vec2.copy(v, vertices[i]);
        this.vertices.push(v);
    }

    /**
     * Axes defined in the local frame.
     * @property axes
     * @type {Array}
     */
    this.axes = [];

    if(options.axes){

        // Copy the axes
        for(var i=0; i < options.axes.length; i++){
            var axis = vec2.create();
            vec2.copy(axis, options.axes[i]);
            this.axes.push(axis);
        }

    } else {

        // Construct axes from the vertex data
        for(var i = 0; i < this.vertices.length; i++){
            // Get the world edge
            var worldPoint0 = this.vertices[i];
            var worldPoint1 = this.vertices[(i+1) % this.vertices.length];

            var normal = vec2.create();
            vec2.sub(normal, worldPoint1, worldPoint0);

            // Get normal - just rotate 90 degrees since vertices are given in CCW
            vec2.rotate90cw(normal, normal);
            vec2.normalize(normal, normal);

            this.axes.push(normal);
        }

    }

    /**
     * The center of mass of the Convex
     * @property centerOfMass
     * @type {Array}
     */
    this.centerOfMass = vec2.fromValues(0,0);

    /**
     * Triangulated version of this convex. The structure is Array of 3-Arrays, and each subarray contains 3 integers, referencing the vertices.
     * @property triangles
     * @type {Array}
     */
    this.triangles = [];

    if(this.vertices.length){
        this.updateTriangles();
        this.updateCenterOfMass();
    }

    /**
     * The bounding radius of the convex
     * @property boundingRadius
     * @type {Number}
     */
    this.boundingRadius = 0;

    options.type = Shape.CONVEX;
    Shape.call(this, options);

    this.updateBoundingRadius();
    this.updateArea();
    if(this.area < 0){
        throw new Error("Convex vertices must be given in conter-clockwise winding.");
    }
}
Convex.prototype = new Shape();
Convex.prototype.constructor = Convex;

var tmpVec1 = vec2.create();
var tmpVec2 = vec2.create();

/**
 * Project a Convex onto a world-oriented axis
 * @method projectOntoAxis
 * @static
 * @param  {Array} offset
 * @param  {Array} localAxis
 * @param  {Array} result
 */
Convex.prototype.projectOntoLocalAxis = function(localAxis, result){
    var max=null,
        min=null,
        v,
        value,
        localAxis = tmpVec1;

    // Get projected position of all vertices
    for(var i=0; i<this.vertices.length; i++){
        v = this.vertices[i];
        value = vec2.dot(v, localAxis);
        if(max === null || value > max){
            max = value;
        }
        if(min === null || value < min){
            min = value;
        }
    }

    if(min > max){
        var t = min;
        min = max;
        max = t;
    }

    vec2.set(result, min, max);
};

Convex.prototype.projectOntoWorldAxis = function(localAxis, shapeOffset, shapeAngle, result){
    var worldAxis = tmpVec2;

    this.projectOntoLocalAxis(localAxis, result);

    // Project the position of the body onto the axis - need to add this to the result
    if(shapeAngle !== 0){
        vec2.rotate(worldAxis, localAxis, shapeAngle);
    } else {
        worldAxis = localAxis;
    }
    var offset = vec2.dot(shapeOffset, worldAxis);

    vec2.set(result, result[0] + offset, result[1] + offset);
};


/**
 * Update the .triangles property
 * @method updateTriangles
 */
Convex.prototype.updateTriangles = function(){

    this.triangles.length = 0;

    // Rewrite on polyk notation, array of numbers
    var polykVerts = [];
    for(var i=0; i<this.vertices.length; i++){
        var v = this.vertices[i];
        polykVerts.push(v[0],v[1]);
    }

    // Triangulate
    var triangles = polyk.Triangulate(polykVerts);

    // Loop over all triangles, add their inertia contributions to I
    for(var i=0; i<triangles.length; i+=3){
        var id1 = triangles[i],
            id2 = triangles[i+1],
            id3 = triangles[i+2];

        // Add to triangles
        this.triangles.push([id1,id2,id3]);
    }
};

var updateCenterOfMass_centroid = vec2.create(),
    updateCenterOfMass_centroid_times_mass = vec2.create(),
    updateCenterOfMass_a = vec2.create(),
    updateCenterOfMass_b = vec2.create(),
    updateCenterOfMass_c = vec2.create(),
    updateCenterOfMass_ac = vec2.create(),
    updateCenterOfMass_ca = vec2.create(),
    updateCenterOfMass_cb = vec2.create(),
    updateCenterOfMass_n = vec2.create();

/**
 * Update the .centerOfMass property.
 * @method updateCenterOfMass
 */
Convex.prototype.updateCenterOfMass = function(){
    var triangles = this.triangles,
        verts = this.vertices,
        cm = this.centerOfMass,
        centroid = updateCenterOfMass_centroid,
        n = updateCenterOfMass_n,
        a = updateCenterOfMass_a,
        b = updateCenterOfMass_b,
        c = updateCenterOfMass_c,
        ac = updateCenterOfMass_ac,
        ca = updateCenterOfMass_ca,
        cb = updateCenterOfMass_cb,
        centroid_times_mass = updateCenterOfMass_centroid_times_mass;

    vec2.set(cm,0,0);
    var totalArea = 0;

    for(var i=0; i!==triangles.length; i++){
        var t = triangles[i],
            a = verts[t[0]],
            b = verts[t[1]],
            c = verts[t[2]];

        vec2.centroid(centroid,a,b,c);

        // Get mass for the triangle (density=1 in this case)
        // http://math.stackexchange.com/questions/80198/area-of-triangle-via-vectors
        var m = Convex.triangleArea(a,b,c);
        totalArea += m;

        // Add to center of mass
        vec2.scale(centroid_times_mass, centroid, m);
        vec2.add(cm, cm, centroid_times_mass);
    }

    vec2.scale(cm,cm,1/totalArea);
};

/**
 * Compute the mass moment of inertia of the Convex.
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 * @see http://www.gamedev.net/topic/342822-moment-of-inertia-of-a-polygon-2d/
 */
Convex.prototype.computeMomentOfInertia = function(mass){
    var denom = 0.0,
        numer = 0.0,
        N = this.vertices.length;
    for(var j = N-1, i = 0; i < N; j = i, i ++){
        var p0 = this.vertices[j];
        var p1 = this.vertices[i];
        var a = Math.abs(vec2.crossLength(p0,p1));
        var b = vec2.dot(p1,p1) + vec2.dot(p1,p0) + vec2.dot(p0,p0);
        denom += a * b;
        numer += a;
    }
    return (mass / 6.0) * (denom / numer);
};

/**
 * Updates the .boundingRadius property
 * @method updateBoundingRadius
 */
Convex.prototype.updateBoundingRadius = function(){
    var verts = this.vertices,
        r2 = 0;

    for(var i=0; i!==verts.length; i++){
        var l2 = vec2.squaredLength(verts[i]);
        if(l2 > r2){
            r2 = l2;
        }
    }

    this.boundingRadius = Math.sqrt(r2);
};

/**
 * Get the area of the triangle spanned by the three points a, b, c. The area is positive if the points are given in counter-clockwise order, otherwise negative.
 * @static
 * @method triangleArea
 * @param {Array} a
 * @param {Array} b
 * @param {Array} c
 * @return {Number}
 */
Convex.triangleArea = function(a,b,c){
    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1]))) * 0.5;
};

/**
 * Update the .area
 * @method updateArea
 */
Convex.prototype.updateArea = function(){
    this.updateTriangles();
    this.area = 0;

    var triangles = this.triangles,
        verts = this.vertices;
    for(var i=0; i!==triangles.length; i++){
        var t = triangles[i],
            a = verts[t[0]],
            b = verts[t[1]],
            c = verts[t[2]];

        // Get mass for the triangle (density=1 in this case)
        var m = Convex.triangleArea(a,b,c);
        this.area += m;
    }
};

/**
 * @method computeAABB
 * @param  {AABB}   out
 * @param  {Array}  position
 * @param  {Number} angle
 */
Convex.prototype.computeAABB = function(out, position, angle){
    out.setFromPoints(this.vertices, position, angle, 0);
};

var intersectConvex_rayStart = vec2.create();
var intersectConvex_rayEnd = vec2.create();
var intersectConvex_normal = vec2.create();

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Convex.prototype.raycast = function(result, ray, position, angle){
    var rayStart = intersectConvex_rayStart;
    var rayEnd = intersectConvex_rayEnd;
    var normal = intersectConvex_normal;
    var vertices = this.vertices;

    // Transform to local shape space
    vec2.toLocalFrame(rayStart, ray.from, position, angle);
    vec2.toLocalFrame(rayEnd, ray.to, position, angle);

    var n = vertices.length;

    for (var i = 0; i < n && !result.shouldStop(ray); i++) {
        var q1 = vertices[i];
        var q2 = vertices[(i+1) % n];
        var delta = vec2.getLineSegmentsIntersectionFraction(rayStart, rayEnd, q1, q2);

        if(delta >= 0){
            vec2.sub(normal, q2, q1);
            vec2.rotate(normal, normal, -Math.PI / 2 + angle);
            vec2.normalize(normal, normal);
            ray.reportIntersection(result, delta, normal, i);
        }
    }
};

},{"../math/polyk":93,"../math/vec2":94,"./Shape":109,"poly-decomp":69}],105:[function(require,module,exports){
var Shape = require('./Shape')
,    vec2 = require('../math/vec2')
,    Utils = require('../utils/Utils');

module.exports = Heightfield;

/**
 * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a distance "elementWidth".
 * @class Heightfield
 * @extends Shape
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {array} [options.heights] An array of Y values that will be used to construct the terrain.
 * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.
 * @param {Number} [options.maxValue] Maximum value.
 * @param {Number} [options.elementWidth=0.1] World spacing between the data points in X direction.
 *
 * @example
 *     // Generate some height data (y-values).
 *     var heights = [];
 *     for(var i = 0; i < 1000; i++){
 *         var y = 0.5 * Math.cos(0.2 * i);
 *         heights.push(y);
 *     }
 *
 *     // Create the heightfield shape
 *     var heightfieldShape = new Heightfield({
 *         heights: heights,
 *         elementWidth: 1 // Distance between the data points in X direction
 *     });
 *     var heightfieldBody = new Body();
 *     heightfieldBody.addShape(heightfieldShape);
 *     world.addBody(heightfieldBody);
 *
 * @todo Should use a scale property with X and Y direction instead of just elementWidth
 */
function Heightfield(options){
    if(Array.isArray(arguments[0])){
        options = {
            heights: arguments[0]
        };

        if(typeof(arguments[1]) === 'object'){
            for(var key in arguments[1]){
                options[key] = arguments[1][key];
            }
        }

        console.warn('The Heightfield constructor signature has changed. Please use the following format: new Heightfield({ heights: [...], ... })');
    }
    options = options || {};

    /**
     * An array of numbers, or height values, that are spread out along the x axis.
     * @property {array} heights
     */
    this.heights = options.heights ? options.heights.slice(0) : [];

    /**
     * Max value of the heights
     * @property {number} maxValue
     */
    this.maxValue = options.maxValue || null;

    /**
     * Max value of the heights
     * @property {number} minValue
     */
    this.minValue = options.minValue || null;

    /**
     * The width of each element
     * @property {number} elementWidth
     */
    this.elementWidth = options.elementWidth || 0.1;

    if(options.maxValue === undefined || options.minValue === undefined){
        this.updateMaxMinValues();
    }

    options.type = Shape.HEIGHTFIELD;
    Shape.call(this, options);
}
Heightfield.prototype = new Shape();
Heightfield.prototype.constructor = Heightfield;

/**
 * Update the .minValue and the .maxValue
 * @method updateMaxMinValues
 */
Heightfield.prototype.updateMaxMinValues = function(){
    var data = this.heights;
    var maxValue = data[0];
    var minValue = data[0];
    for(var i=0; i !== data.length; i++){
        var v = data[i];
        if(v > maxValue){
            maxValue = v;
        }
        if(v < minValue){
            minValue = v;
        }
    }
    this.maxValue = maxValue;
    this.minValue = minValue;
};

/**
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 */
Heightfield.prototype.computeMomentOfInertia = function(mass){
    return Number.MAX_VALUE;
};

Heightfield.prototype.updateBoundingRadius = function(){
    this.boundingRadius = Number.MAX_VALUE;
};

Heightfield.prototype.updateArea = function(){
    var data = this.heights,
        area = 0;
    for(var i=0; i<data.length-1; i++){
        area += (data[i]+data[i+1]) / 2 * this.elementWidth;
    }
    this.area = area;
};

var points = [
    vec2.create(),
    vec2.create(),
    vec2.create(),
    vec2.create()
];

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Heightfield.prototype.computeAABB = function(out, position, angle){
    vec2.set(points[0], 0, this.maxValue);
    vec2.set(points[1], this.elementWidth * this.heights.length, this.maxValue);
    vec2.set(points[2], this.elementWidth * this.heights.length, this.minValue);
    vec2.set(points[3], 0, this.minValue);
    out.setFromPoints(points, position, angle);
};

/**
 * Get a line segment in the heightfield
 * @method getLineSegment
 * @param  {array} start Where to store the resulting start point
 * @param  {array} end Where to store the resulting end point
 * @param  {number} i
 */
Heightfield.prototype.getLineSegment = function(start, end, i){
    var data = this.heights;
    var width = this.elementWidth;
    vec2.set(start, i * width, data[i]);
    vec2.set(end, (i + 1) * width, data[i + 1]);
};

Heightfield.prototype.getSegmentIndex = function(position){
    return Math.floor(position[0] / this.elementWidth);
};

Heightfield.prototype.getClampedSegmentIndex = function(position){
    var i = this.getSegmentIndex(position);
    i = Math.min(this.heights.length, Math.max(i, 0)); // clamp
    return i;
};

var intersectHeightfield_hitPointWorld = vec2.create();
var intersectHeightfield_worldNormal = vec2.create();
var intersectHeightfield_l0 = vec2.create();
var intersectHeightfield_l1 = vec2.create();
var intersectHeightfield_localFrom = vec2.create();
var intersectHeightfield_localTo = vec2.create();
var intersectHeightfield_unit_y = vec2.fromValues(0,1);

// Returns 1 if the lines intersect, otherwise 0.
function getLineSegmentsIntersection (out, p0, p1, p2, p3) {

    var s1_x, s1_y, s2_x, s2_y;
    s1_x = p1[0] - p0[0];
    s1_y = p1[1] - p0[1];
    s2_x = p3[0] - p2[0];
    s2_y = p3[1] - p2[1];

    var s, t;
    s = (-s1_y * (p0[0] - p2[0]) + s1_x * (p0[1] - p2[1])) / (-s2_x * s1_y + s1_x * s2_y);
    t = ( s2_x * (p0[1] - p2[1]) - s2_y * (p0[0] - p2[0])) / (-s2_x * s1_y + s1_x * s2_y);
    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) { // Collision detected
        var intX = p0[0] + (t * s1_x);
        var intY = p0[1] + (t * s1_y);
        out[0] = intX;
        out[1] = intY;
        return t;
    }
    return -1; // No collision
}

/**
 * @method raycast
 * @param  {RayResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Heightfield.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;
    var direction = ray.direction;

    var hitPointWorld = intersectHeightfield_hitPointWorld;
    var worldNormal = intersectHeightfield_worldNormal;
    var l0 = intersectHeightfield_l0;
    var l1 = intersectHeightfield_l1;
    var localFrom = intersectHeightfield_localFrom;
    var localTo = intersectHeightfield_localTo;

    // get local ray start and end
    vec2.toLocalFrame(localFrom, from, position, angle);
    vec2.toLocalFrame(localTo, to, position, angle);

    // Get the segment range
    var i0 = this.getClampedSegmentIndex(localFrom);
    var i1 = this.getClampedSegmentIndex(localTo);
    if(i0 > i1){
        var tmp = i0;
        i0 = i1;
        i1 = tmp;
    }

    // The segments
    for(var i=0; i<this.heights.length - 1; i++){
        this.getLineSegment(l0, l1, i);
        var t = vec2.getLineSegmentsIntersectionFraction(localFrom, localTo, l0, l1);
        if(t >= 0){
            vec2.sub(worldNormal, l1, l0);
            vec2.rotate(worldNormal, worldNormal, angle + Math.PI / 2);
            vec2.normalize(worldNormal, worldNormal);
            ray.reportIntersection(result, t, worldNormal, -1);
            if(result.shouldStop(ray)){
                return;
            }
        }
    }
};
},{"../math/vec2":94,"../utils/Utils":121,"./Shape":109}],106:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2');

module.exports = Line;

/**
 * Line shape class. The line shape is along the x direction, and stretches from [-length/2, 0] to [length/2,0].
 * @class Line
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Number} [options.length=1] The total length of the line
 * @extends Shape
 * @constructor
 */
function Line(options){
    if(typeof(arguments[0]) === 'number'){
        options = {
            length: arguments[0]
        };
        console.warn('The Line constructor signature has changed. Please use the following format: new Line({ length: 1, ... })');
    }
    options = options || {};

    /**
     * Length of this line
     * @property {Number} length
     * @default 1
     */
    this.length = options.length || 1;

    options.type = Shape.LINE;
    Shape.call(this, options);
}
Line.prototype = new Shape();
Line.prototype.constructor = Line;

Line.prototype.computeMomentOfInertia = function(mass){
    return mass * Math.pow(this.length,2) / 12;
};

Line.prototype.updateBoundingRadius = function(){
    this.boundingRadius = this.length/2;
};

var points = [vec2.create(),vec2.create()];

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Line.prototype.computeAABB = function(out, position, angle){
    var l2 = this.length / 2;
    vec2.set(points[0], -l2,  0);
    vec2.set(points[1],  l2,  0);
    out.setFromPoints(points,position,angle,0);
};

var raycast_hitPoint = vec2.create();
var raycast_normal = vec2.create();
var raycast_l0 = vec2.create();
var raycast_l1 = vec2.create();
var raycast_unit_y = vec2.fromValues(0,1);

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {number} angle
 * @param  {array} position
 */
Line.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;

    var l0 = raycast_l0;
    var l1 = raycast_l1;

    // get start and end of the line
    var halfLen = this.length / 2;
    vec2.set(l0, -halfLen, 0);
    vec2.set(l1, halfLen, 0);
    vec2.toGlobalFrame(l0, l0, position, angle);
    vec2.toGlobalFrame(l1, l1, position, angle);

    var fraction = vec2.getLineSegmentsIntersectionFraction(l0, l1, from, to);
    if(fraction >= 0){
        var normal = raycast_normal;
        vec2.rotate(normal, raycast_unit_y, angle); // todo: this should depend on which side the ray comes from
        ray.reportIntersection(result, fraction, normal, -1);
    }
};
},{"../math/vec2":94,"./Shape":109}],107:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2');

module.exports = Particle;

/**
 * Particle shape class.
 * @class Particle
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @extends Shape
 */
function Particle(options){
    options = options || {};
	options.type = Shape.PARTICLE;
    Shape.call(this, options);
}
Particle.prototype = new Shape();
Particle.prototype.constructor = Particle;

Particle.prototype.computeMomentOfInertia = function(mass){
    return 0; // Can't rotate a particle
};

Particle.prototype.updateBoundingRadius = function(){
    this.boundingRadius = 0;
};

/**
 * @method computeAABB
 * @param  {AABB}   out
 * @param  {Array}  position
 * @param  {Number} angle
 */
Particle.prototype.computeAABB = function(out, position, angle){
    vec2.copy(out.lowerBound, position);
    vec2.copy(out.upperBound, position);
};

},{"../math/vec2":94,"./Shape":109}],108:[function(require,module,exports){
var Shape =  require('./Shape')
,    vec2 =  require('../math/vec2')
,    Utils = require('../utils/Utils');

module.exports = Plane;

/**
 * Plane shape class. The plane is facing in the Y direction.
 * @class Plane
 * @extends Shape
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 */
function Plane(options){
    options = options || {};
    options.type = Shape.PLANE;
    Shape.call(this, options);
}
Plane.prototype = new Shape();
Plane.prototype.constructor = Plane;

/**
 * Compute moment of inertia
 * @method computeMomentOfInertia
 */
Plane.prototype.computeMomentOfInertia = function(mass){
    return 0; // Plane is infinite. The inertia should therefore be infinty but by convention we set 0 here
};

/**
 * Update the bounding radius
 * @method updateBoundingRadius
 */
Plane.prototype.updateBoundingRadius = function(){
    this.boundingRadius = Number.MAX_VALUE;
};

/**
 * @method computeAABB
 * @param  {AABB}   out
 * @param  {Array}  position
 * @param  {Number} angle
 */
Plane.prototype.computeAABB = function(out, position, angle){
    var a = angle % (2 * Math.PI);
    var set = vec2.set;
    var max = 1e7;
    var lowerBound = out.lowerBound;
    var upperBound = out.upperBound;

    // Set max bounds
    set(lowerBound, -max, -max);
    set(upperBound,  max,  max);

    if(a === 0){
        // y goes from -inf to 0
        upperBound[1] = 0;
        // set(lowerBound, -max, -max);
        // set(upperBound,  max,  0);

    } else if(a === Math.PI / 2){

        // x goes from 0 to inf
        lowerBound[0] = 0;
        // set(lowerBound, 0, -max);
        // set(upperBound,      max,  max);

    } else if(a === Math.PI){

        // y goes from 0 to inf
        lowerBound[1] = 0;
        // set(lowerBound, -max, 0);
        // set(upperBound,  max, max);

    } else if(a === 3*Math.PI/2){

        // x goes from -inf to 0
        upperBound[0] = 0;
        // set(lowerBound, -max,     -max);
        // set(upperBound,  0,  max);

    }
};

Plane.prototype.updateArea = function(){
    this.area = Number.MAX_VALUE;
};

var intersectPlane_planePointToFrom = vec2.create();
var intersectPlane_dir_scaled_with_t = vec2.create();
var intersectPlane_hitPoint = vec2.create();
var intersectPlane_normal = vec2.create();
var intersectPlane_len = vec2.create();

/**
 * @method raycast
 * @param  {RayResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Plane.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;
    var direction = ray.direction;
    var planePointToFrom = intersectPlane_planePointToFrom;
    var dir_scaled_with_t = intersectPlane_dir_scaled_with_t;
    var hitPoint = intersectPlane_hitPoint;
    var normal = intersectPlane_normal;
    var len = intersectPlane_len;

    // Get plane normal
    vec2.set(normal, 0, 1);
    vec2.rotate(normal, normal, angle);

    vec2.sub(len, from, position);
    var planeToFrom = vec2.dot(len, normal);
    vec2.sub(len, to, position);
    var planeToTo = vec2.dot(len, normal);

    if(planeToFrom * planeToTo > 0){
        // "from" and "to" are on the same side of the plane... bail out
        return;
    }

    if(vec2.squaredDistance(from, to) < planeToFrom * planeToFrom){
        return;
    }

    var n_dot_dir = vec2.dot(normal, direction);

    vec2.sub(planePointToFrom, from, position);
    var t = -vec2.dot(normal, planePointToFrom) / n_dot_dir / ray.length;

    ray.reportIntersection(result, t, normal, -1);
};
},{"../math/vec2":94,"../utils/Utils":121,"./Shape":109}],109:[function(require,module,exports){
module.exports = Shape;

var vec2 = require('../math/vec2');

/**
 * Base class for shapes.
 * @class Shape
 * @constructor
 * @param {object} [options]
 * @param {array} [options.position]
 * @param {number} [options.angle=0]
 * @param {number} [options.collisionGroup=1]
 * @param {number} [options.collisionMask=1]
 * @param {boolean} [options.sensor=false]
 * @param {boolean} [options.collisionResponse=true]
 * @param {object} [options.type=0]
 */
function Shape(options){
    options = options || {};

    /**
     * The body this shape is attached to. A shape can only be attached to a single body.
     * @property {Body} body
     */
    this.body = null;

    /**
     * Body-local position of the shape.
     * @property {Array} position
     */
    this.position = vec2.fromValues(0,0);
    if(options.position){
        vec2.copy(this.position, options.position);
    }

    /**
     * Body-local angle of the shape.
     * @property {number} angle
     */
    this.angle = options.angle || 0;

    /**
     * The type of the shape. One of:
     *
     * * {{#crossLink "Shape/CIRCLE:property"}}Shape.CIRCLE{{/crossLink}}
     * * {{#crossLink "Shape/PARTICLE:property"}}Shape.PARTICLE{{/crossLink}}
     * * {{#crossLink "Shape/PLANE:property"}}Shape.PLANE{{/crossLink}}
     * * {{#crossLink "Shape/CONVEX:property"}}Shape.CONVEX{{/crossLink}}
     * * {{#crossLink "Shape/LINE:property"}}Shape.LINE{{/crossLink}}
     * * {{#crossLink "Shape/BOX:property"}}Shape.BOX{{/crossLink}}
     * * {{#crossLink "Shape/CAPSULE:property"}}Shape.CAPSULE{{/crossLink}}
     * * {{#crossLink "Shape/HEIGHTFIELD:property"}}Shape.HEIGHTFIELD{{/crossLink}}
     *
     * @property {number} type
     */
    this.type = options.type || 0;

    /**
     * Shape object identifier.
     * @type {Number}
     * @property id
     */
    this.id = Shape.idCounter++;

    /**
     * Bounding circle radius of this shape
     * @property boundingRadius
     * @type {Number}
     */
    this.boundingRadius = 0;

    /**
     * Collision group that this shape belongs to (bit mask). See <a href="http://www.aurelienribon.com/blog/2011/07/box2d-tutorial-collision-filtering/">this tutorial</a>.
     * @property collisionGroup
     * @type {Number}
     * @example
     *     // Setup bits for each available group
     *     var PLAYER = Math.pow(2,0),
     *         ENEMY =  Math.pow(2,1),
     *         GROUND = Math.pow(2,2)
     *
     *     // Put shapes into their groups
     *     player1Shape.collisionGroup = PLAYER;
     *     player2Shape.collisionGroup = PLAYER;
     *     enemyShape  .collisionGroup = ENEMY;
     *     groundShape .collisionGroup = GROUND;
     *
     *     // Assign groups that each shape collide with.
     *     // Note that the players can collide with ground and enemies, but not with other players.
     *     player1Shape.collisionMask = ENEMY | GROUND;
     *     player2Shape.collisionMask = ENEMY | GROUND;
     *     enemyShape  .collisionMask = PLAYER | GROUND;
     *     groundShape .collisionMask = PLAYER | ENEMY;
     *
     * @example
     *     // How collision check is done
     *     if(shapeA.collisionGroup & shapeB.collisionMask)!=0 && (shapeB.collisionGroup & shapeA.collisionMask)!=0){
     *         // The shapes will collide
     *     }
     */
    this.collisionGroup = options.collisionGroup !== undefined ? options.collisionGroup : 1;

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled. That means that this shape will move through other body shapes, but it will still trigger contact events, etc.
     * @property {Boolean} collisionResponse
     */
    this.collisionResponse = options.collisionResponse !== undefined ? options.collisionResponse : true;

    /**
     * Collision mask of this shape. See .collisionGroup.
     * @property collisionMask
     * @type {Number}
     */
    this.collisionMask = options.collisionMask !== undefined ? options.collisionMask : 1;

    /**
     * Material to use in collisions for this Shape. If this is set to null, the world will use default material properties instead.
     * @property material
     * @type {Material}
     */
    this.material = options.material || null;

    /**
     * Area of this shape.
     * @property area
     * @type {Number}
     */
    this.area = 0;

    /**
     * Set to true if you want this shape to be a sensor. A sensor does not generate contacts, but it still reports contact events. This is good if you want to know if a shape is overlapping another shape, without them generating contacts.
     * @property {Boolean} sensor
     */
    this.sensor = options.sensor !== undefined ? options.sensor : false;

    if(this.type){
        this.updateBoundingRadius();
    }

    this.updateArea();
}

Shape.idCounter = 0;

/**
 * @static
 * @property {Number} CIRCLE
 */
Shape.CIRCLE =      1;

/**
 * @static
 * @property {Number} PARTICLE
 */
Shape.PARTICLE =    2;

/**
 * @static
 * @property {Number} PLANE
 */
Shape.PLANE =       4;

/**
 * @static
 * @property {Number} CONVEX
 */
Shape.CONVEX =      8;

/**
 * @static
 * @property {Number} LINE
 */
Shape.LINE =        16;

/**
 * @static
 * @property {Number} BOX
 */
Shape.BOX =   32;

Object.defineProperty(Shape, 'RECTANGLE', {
    get: function() {
        console.warn('Shape.RECTANGLE is deprecated, use Shape.BOX instead.');
        return Shape.BOX;
    }
});

/**
 * @static
 * @property {Number} CAPSULE
 */
Shape.CAPSULE =     64;

/**
 * @static
 * @property {Number} HEIGHTFIELD
 */
Shape.HEIGHTFIELD = 128;

/**
 * Should return the moment of inertia around the Z axis of the body given the total mass. See <a href="http://en.wikipedia.org/wiki/List_of_moments_of_inertia">Wikipedia's list of moments of inertia</a>.
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number} If the inertia is infinity or if the object simply isn't possible to rotate, return 0.
 */
Shape.prototype.computeMomentOfInertia = function(mass){};

/**
 * Returns the bounding circle radius of this shape.
 * @method updateBoundingRadius
 * @return {Number}
 */
Shape.prototype.updateBoundingRadius = function(){};

/**
 * Update the .area property of the shape.
 * @method updateArea
 */
Shape.prototype.updateArea = function(){
    // To be implemented in all subclasses
};

/**
 * Compute the world axis-aligned bounding box (AABB) of this shape.
 * @method computeAABB
 * @param  {AABB} out The resulting AABB.
 * @param  {Array} position World position of the shape.
 * @param  {Number} angle World angle of the shape.
 */
Shape.prototype.computeAABB = function(out, position, angle){
    // To be implemented in each subclass
};

/**
 * Perform raycasting on this shape.
 * @method raycast
 * @param  {RayResult} result Where to store the resulting data.
 * @param  {Ray} ray The Ray that you want to use for raycasting.
 * @param  {array} position World position of the shape (the .position property will be ignored).
 * @param  {number} angle World angle of the shape (the .angle property will be ignored).
 */
Shape.prototype.raycast = function(result, ray, position, angle){
    // To be implemented in each subclass
};
},{"../math/vec2":94}],110:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Solver = require('./Solver')
,   Utils = require('../utils/Utils')
,   FrictionEquation = require('../equations/FrictionEquation');

module.exports = GSSolver;

/**
 * Iterative Gauss-Seidel constraint equation solver.
 *
 * @class GSSolver
 * @constructor
 * @extends Solver
 * @param {Object} [options]
 * @param {Number} [options.iterations=10]
 * @param {Number} [options.tolerance=0]
 */
function GSSolver(options){
    Solver.call(this,options,Solver.GS);
    options = options || {};

    /**
     * The max number of iterations to do when solving. More gives better results, but is more expensive.
     * @property iterations
     * @type {Number}
     */
    this.iterations = options.iterations || 10;

    /**
     * The error tolerance, per constraint. If the total error is below this limit, the solver will stop iterating. Set to zero for as good solution as possible, but to something larger than zero to make computations faster.
     * @property tolerance
     * @type {Number}
     * @default 1e-7
     */
    this.tolerance = options.tolerance || 1e-7;

    this.arrayStep = 30;
    this.lambda = new Utils.ARRAY_TYPE(this.arrayStep);
    this.Bs =     new Utils.ARRAY_TYPE(this.arrayStep);
    this.invCs =  new Utils.ARRAY_TYPE(this.arrayStep);

    /**
     * Set to true to set all right hand side terms to zero when solving. Can be handy for a few applications.
     * @property useZeroRHS
     * @type {Boolean}
     * @todo Remove, not used
     */
    this.useZeroRHS = false;

    /**
     * Number of solver iterations that are used to approximate normal forces used for friction (F_friction = mu * F_normal). These friction forces will override any other friction forces that are set. If you set frictionIterations = 0, then this feature will be disabled.
     *
     * Use only frictionIterations > 0 if the approximated normal force (F_normal = mass * gravity) is not good enough. Examples of where it can happen is in space games where gravity is zero, or in tall stacks where the normal force is large at bottom but small at top.
     *
     * @property frictionIterations
     * @type {Number}
     * @default 0
     */
    this.frictionIterations = options.frictionIterations !== undefined ? 0 : options.frictionIterations;

    /**
     * The number of iterations that were made during the last solve. If .tolerance is zero, this value will always be equal to .iterations, but if .tolerance is larger than zero, and the solver can quit early, then this number will be somewhere between 1 and .iterations.
     * @property {Number} usedIterations
     */
    this.usedIterations = 0;
}
GSSolver.prototype = new Solver();
GSSolver.prototype.constructor = GSSolver;

function setArrayZero(array){
    var l = array.length;
    while(l--){
        array[l] = +0.0;
    }
}

/**
 * Solve the system of equations
 * @method solve
 * @param  {Number}  h       Time step
 * @param  {World}   world    World to solve
 */
GSSolver.prototype.solve = function(h, world){

    this.sortEquations();

    var iter = 0,
        maxIter = this.iterations,
        maxFrictionIter = this.frictionIterations,
        equations = this.equations,
        Neq = equations.length,
        tolSquared = Math.pow(this.tolerance*Neq, 2),
        bodies = world.bodies,
        Nbodies = world.bodies.length,
        add = vec2.add,
        set = vec2.set,
        useZeroRHS = this.useZeroRHS,
        lambda = this.lambda;

    this.usedIterations = 0;

    if(Neq){
        for(var i=0; i!==Nbodies; i++){
            var b = bodies[i];

            // Update solve mass
            b.updateSolveMassProperties();
        }
    }

    // Things that does not change during iteration can be computed once
    if(lambda.length < Neq){
        lambda = this.lambda =  new Utils.ARRAY_TYPE(Neq + this.arrayStep);
        this.Bs =               new Utils.ARRAY_TYPE(Neq + this.arrayStep);
        this.invCs =            new Utils.ARRAY_TYPE(Neq + this.arrayStep);
    }
    setArrayZero(lambda);
    var invCs = this.invCs,
        Bs = this.Bs,
        lambda = this.lambda;

    for(var i=0; i!==equations.length; i++){
        var c = equations[i];
        if(c.timeStep !== h || c.needsUpdate){
            c.timeStep = h;
            c.update();
        }
        Bs[i] =     c.computeB(c.a,c.b,h);
        invCs[i] =  c.computeInvC(c.epsilon);
    }

    var q, B, c, deltalambdaTot,i,j;

    if(Neq !== 0){

        for(i=0; i!==Nbodies; i++){
            var b = bodies[i];

            // Reset vlambda
            b.resetConstraintVelocity();
        }

        if(maxFrictionIter){
            // Iterate over contact equations to get normal forces
            for(iter=0; iter!==maxFrictionIter; iter++){

                // Accumulate the total error for each iteration.
                deltalambdaTot = 0.0;

                for(j=0; j!==Neq; j++){
                    c = equations[j];

                    var deltalambda = GSSolver.iterateEquation(j,c,c.epsilon,Bs,invCs,lambda,useZeroRHS,h,iter);
                    deltalambdaTot += Math.abs(deltalambda);
                }

                this.usedIterations++;

                // If the total error is small enough - stop iterate
                if(deltalambdaTot*deltalambdaTot <= tolSquared){
                    break;
                }
            }

            GSSolver.updateMultipliers(equations, lambda, 1/h);

            // Set computed friction force
            for(j=0; j!==Neq; j++){
                var eq = equations[j];
                if(eq instanceof FrictionEquation){
                    var f = 0.0;
                    for(var k=0; k!==eq.contactEquations.length; k++){
                        f += eq.contactEquations[k].multiplier;
                    }
                    f *= eq.frictionCoefficient / eq.contactEquations.length;
                    eq.maxForce =  f;
                    eq.minForce = -f;
                }
            }
        }

        // Iterate over all equations
        for(iter=0; iter!==maxIter; iter++){

            // Accumulate the total error for each iteration.
            deltalambdaTot = 0.0;

            for(j=0; j!==Neq; j++){
                c = equations[j];

                var deltalambda = GSSolver.iterateEquation(j,c,c.epsilon,Bs,invCs,lambda,useZeroRHS,h,iter);
                deltalambdaTot += Math.abs(deltalambda);
            }

            this.usedIterations++;

            // If the total error is small enough - stop iterate
            if(deltalambdaTot*deltalambdaTot <= tolSquared){
                break;
            }
        }

        // Add result to velocity
        for(i=0; i!==Nbodies; i++){
            bodies[i].addConstraintVelocity();
        }

        GSSolver.updateMultipliers(equations, lambda, 1/h);
    }
};

// Sets the .multiplier property of each equation
GSSolver.updateMultipliers = function(equations, lambda, invDt){
    // Set the .multiplier property of each equation
    var l = equations.length;
    while(l--){
        equations[l].multiplier = lambda[l] * invDt;
    }
};

GSSolver.iterateEquation = function(j,eq,eps,Bs,invCs,lambda,useZeroRHS,dt,iter){
    // Compute iteration
    var B = Bs[j],
        invC = invCs[j],
        lambdaj = lambda[j],
        GWlambda = eq.computeGWlambda();

    var maxForce = eq.maxForce,
        minForce = eq.minForce;

    if(useZeroRHS){
        B = 0;
    }

    var deltalambda = invC * ( B - GWlambda - eps * lambdaj );

    // Clamp if we are not within the min/max interval
    var lambdaj_plus_deltalambda = lambdaj + deltalambda;
    if(lambdaj_plus_deltalambda < minForce*dt){
        deltalambda = minForce*dt - lambdaj;
    } else if(lambdaj_plus_deltalambda > maxForce*dt){
        deltalambda = maxForce*dt - lambdaj;
    }
    lambda[j] += deltalambda;
    eq.addToWlambda(deltalambda);

    return deltalambda;
};

},{"../equations/FrictionEquation":87,"../math/vec2":94,"../utils/Utils":121,"./Solver":111}],111:[function(require,module,exports){
var Utils = require('../utils/Utils')
,   EventEmitter = require('../events/EventEmitter');

module.exports = Solver;

/**
 * Base class for constraint solvers.
 * @class Solver
 * @constructor
 * @extends EventEmitter
 */
function Solver(options,type){
    options = options || {};

    EventEmitter.call(this);

    this.type = type;

    /**
     * Current equations in the solver.
     *
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * Function that is used to sort all equations before each solve.
     * @property equationSortFunction
     * @type {function|boolean}
     */
    this.equationSortFunction = options.equationSortFunction || false;
}
Solver.prototype = new EventEmitter();
Solver.prototype.constructor = Solver;

/**
 * Method to be implemented in each subclass
 * @method solve
 * @param  {Number} dt
 * @param  {World} world
 */
Solver.prototype.solve = function(dt,world){
    throw new Error("Solver.solve should be implemented by subclasses!");
};

var mockWorld = {bodies:[]};

/**
 * Solves all constraints in an island.
 * @method solveIsland
 * @param  {Number} dt
 * @param  {Island} island
 */
Solver.prototype.solveIsland = function(dt,island){

    this.removeAllEquations();

    if(island.equations.length){
        // Add equations to solver
        this.addEquations(island.equations);
        mockWorld.bodies.length = 0;
        island.getBodies(mockWorld.bodies);

        // Solve
        if(mockWorld.bodies.length){
            this.solve(dt,mockWorld);
        }
    }
};

/**
 * Sort all equations using the .equationSortFunction. Should be called by subclasses before solving.
 * @method sortEquations
 */
Solver.prototype.sortEquations = function(){
    if(this.equationSortFunction){
        this.equations.sort(this.equationSortFunction);
    }
};

/**
 * Add an equation to be solved.
 *
 * @method addEquation
 * @param {Equation} eq
 */
Solver.prototype.addEquation = function(eq){
    if(eq.enabled){
        this.equations.push(eq);
    }
};

/**
 * Add equations. Same as .addEquation, but this time the argument is an array of Equations
 *
 * @method addEquations
 * @param {Array} eqs
 */
Solver.prototype.addEquations = function(eqs){
    //Utils.appendArray(this.equations,eqs);
    for(var i=0, N=eqs.length; i!==N; i++){
        var eq = eqs[i];
        if(eq.enabled){
            this.equations.push(eq);
        }
    }
};

/**
 * Remove an equation.
 *
 * @method removeEquation
 * @param {Equation} eq
 */
Solver.prototype.removeEquation = function(eq){
    var i = this.equations.indexOf(eq);
    if(i !== -1){
        this.equations.splice(i,1);
    }
};

/**
 * Remove all currently added equations.
 *
 * @method removeAllEquations
 */
Solver.prototype.removeAllEquations = function(){
    this.equations.length=0;
};

Solver.GS = 1;
Solver.ISLAND = 2;

},{"../events/EventEmitter":90,"../utils/Utils":121}],112:[function(require,module,exports){
var ContactEquation = require('../equations/ContactEquation');
var Pool = require('./Pool');

module.exports = ContactEquationPool;

/**
 * @class
 */
function ContactEquationPool() {
	Pool.apply(this, arguments);
}
ContactEquationPool.prototype = new Pool();
ContactEquationPool.prototype.constructor = ContactEquationPool;

/**
 * @method create
 * @return {ContactEquation}
 */
ContactEquationPool.prototype.create = function () {
	return new ContactEquation();
};

/**
 * @method destroy
 * @param {ContactEquation} equation
 * @return {ContactEquationPool}
 */
ContactEquationPool.prototype.destroy = function (equation) {
	equation.bodyA = equation.bodyB = null;
	return this;
};

},{"../equations/ContactEquation":85,"./Pool":119}],113:[function(require,module,exports){
var FrictionEquation = require('../equations/FrictionEquation');
var Pool = require('./Pool');

module.exports = FrictionEquationPool;

/**
 * @class
 */
function FrictionEquationPool() {
	Pool.apply(this, arguments);
}
FrictionEquationPool.prototype = new Pool();
FrictionEquationPool.prototype.constructor = FrictionEquationPool;

/**
 * @method create
 * @return {FrictionEquation}
 */
FrictionEquationPool.prototype.create = function () {
	return new FrictionEquation();
};

/**
 * @method destroy
 * @param {FrictionEquation} equation
 * @return {FrictionEquationPool}
 */
FrictionEquationPool.prototype.destroy = function (equation) {
	equation.bodyA = equation.bodyB = null;
	return this;
};

},{"../equations/FrictionEquation":87,"./Pool":119}],114:[function(require,module,exports){
var IslandNode = require('../world/IslandNode');
var Pool = require('./Pool');

module.exports = IslandNodePool;

/**
 * @class
 */
function IslandNodePool() {
	Pool.apply(this, arguments);
}
IslandNodePool.prototype = new Pool();
IslandNodePool.prototype.constructor = IslandNodePool;

/**
 * @method create
 * @return {IslandNode}
 */
IslandNodePool.prototype.create = function () {
	return new IslandNode();
};

/**
 * @method destroy
 * @param {IslandNode} node
 * @return {IslandNodePool}
 */
IslandNodePool.prototype.destroy = function (node) {
	node.reset();
	return this;
};

},{"../world/IslandNode":124,"./Pool":119}],115:[function(require,module,exports){
var Island = require('../world/Island');
var Pool = require('./Pool');

module.exports = IslandPool;

/**
 * @class
 */
function IslandPool() {
	Pool.apply(this, arguments);
}
IslandPool.prototype = new Pool();
IslandPool.prototype.constructor = IslandPool;

/**
 * @method create
 * @return {Island}
 */
IslandPool.prototype.create = function () {
	return new Island();
};

/**
 * @method destroy
 * @param {Island} island
 * @return {IslandPool}
 */
IslandPool.prototype.destroy = function (island) {
	island.reset();
	return this;
};

},{"../world/Island":122,"./Pool":119}],116:[function(require,module,exports){
var TupleDictionary = require('./TupleDictionary');
var OverlapKeeperRecord = require('./OverlapKeeperRecord');
var OverlapKeeperRecordPool = require('./OverlapKeeperRecordPool');
var Utils = require('./Utils');

module.exports = OverlapKeeper;

/**
 * Keeps track of overlaps in the current state and the last step state.
 * @class OverlapKeeper
 * @constructor
 */
function OverlapKeeper() {
    this.overlappingShapesLastState = new TupleDictionary();
    this.overlappingShapesCurrentState = new TupleDictionary();
    this.recordPool = new OverlapKeeperRecordPool({ size: 16 });
    this.tmpDict = new TupleDictionary();
    this.tmpArray1 = [];
}

/**
 * Ticks one step forward in time. This will move the current overlap state to the "old" overlap state, and create a new one as current.
 * @method tick
 */
OverlapKeeper.prototype.tick = function() {
    var last = this.overlappingShapesLastState;
    var current = this.overlappingShapesCurrentState;

    // Save old objects into pool
    var l = last.keys.length;
    while(l--){
        var key = last.keys[l];
        var lastObject = last.getByKey(key);
        var currentObject = current.getByKey(key);
        if(lastObject){
            // The record is only used in the "last" dict, and will be removed. We might as well pool it.
            this.recordPool.release(lastObject);
        }
    }

    // Clear last object
    last.reset();

    // Transfer from new object to old
    last.copy(current);

    // Clear current object
    current.reset();
};

/**
 * @method setOverlapping
 * @param {Body} bodyA
 * @param {Body} shapeA
 * @param {Body} bodyB
 * @param {Body} shapeB
 */
OverlapKeeper.prototype.setOverlapping = function(bodyA, shapeA, bodyB, shapeB) {
    var last = this.overlappingShapesLastState;
    var current = this.overlappingShapesCurrentState;

    // Store current contact state
    if(!current.get(shapeA.id, shapeB.id)){
        var data = this.recordPool.get();
        data.set(bodyA, shapeA, bodyB, shapeB);
        current.set(shapeA.id, shapeB.id, data);
    }
};

OverlapKeeper.prototype.getNewOverlaps = function(result){
    return this.getDiff(this.overlappingShapesLastState, this.overlappingShapesCurrentState, result);
};

OverlapKeeper.prototype.getEndOverlaps = function(result){
    return this.getDiff(this.overlappingShapesCurrentState, this.overlappingShapesLastState, result);
};

/**
 * Checks if two bodies are currently overlapping.
 * @method bodiesAreOverlapping
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {boolean}
 */
OverlapKeeper.prototype.bodiesAreOverlapping = function(bodyA, bodyB){
    var current = this.overlappingShapesCurrentState;
    var l = current.keys.length;
    while(l--){
        var key = current.keys[l];
        var data = current.data[key];
        if((data.bodyA === bodyA && data.bodyB === bodyB) || data.bodyA === bodyB && data.bodyB === bodyA){
            return true;
        }
    }
    return false;
};

OverlapKeeper.prototype.getDiff = function(dictA, dictB, result){
    var result = result || [];
    var last = dictA;
    var current = dictB;

    result.length = 0;

    var l = current.keys.length;
    while(l--){
        var key = current.keys[l];
        var data = current.data[key];

        if(!data){
            throw new Error('Key '+key+' had no data!');
        }

        var lastData = last.data[key];
        if(!lastData){
            // Not overlapping in last state, but in current.
            result.push(data);
        }
    }

    return result;
};

OverlapKeeper.prototype.isNewOverlap = function(shapeA, shapeB){
    var idA = shapeA.id|0,
        idB = shapeB.id|0;
    var last = this.overlappingShapesLastState;
    var current = this.overlappingShapesCurrentState;
    // Not in last but in new
    return !!!last.get(idA, idB) && !!current.get(idA, idB);
};

OverlapKeeper.prototype.getNewBodyOverlaps = function(result){
    this.tmpArray1.length = 0;
    var overlaps = this.getNewOverlaps(this.tmpArray1);
    return this.getBodyDiff(overlaps, result);
};

OverlapKeeper.prototype.getEndBodyOverlaps = function(result){
    this.tmpArray1.length = 0;
    var overlaps = this.getEndOverlaps(this.tmpArray1);
    return this.getBodyDiff(overlaps, result);
};

OverlapKeeper.prototype.getBodyDiff = function(overlaps, result){
    result = result || [];
    var accumulator = this.tmpDict;

    var l = overlaps.length;

    while(l--){
        var data = overlaps[l];

        // Since we use body id's for the accumulator, these will be a subset of the original one
        accumulator.set(data.bodyA.id|0, data.bodyB.id|0, data);
    }

    l = accumulator.keys.length;
    while(l--){
        var data = accumulator.getByKey(accumulator.keys[l]);
        if(data){
            result.push(data.bodyA, data.bodyB);
        }
    }

    accumulator.reset();

    return result;
};

},{"./OverlapKeeperRecord":117,"./OverlapKeeperRecordPool":118,"./TupleDictionary":120,"./Utils":121}],117:[function(require,module,exports){
module.exports = OverlapKeeperRecord;

/**
 * Overlap data container for the OverlapKeeper
 * @class OverlapKeeperRecord
 * @constructor
 * @param {Body} bodyA
 * @param {Shape} shapeA
 * @param {Body} bodyB
 * @param {Shape} shapeB
 */
function OverlapKeeperRecord(bodyA, shapeA, bodyB, shapeB){
    /**
     * @property {Shape} shapeA
     */
    this.shapeA = shapeA;
    /**
     * @property {Shape} shapeB
     */
    this.shapeB = shapeB;
    /**
     * @property {Body} bodyA
     */
    this.bodyA = bodyA;
    /**
     * @property {Body} bodyB
     */
    this.bodyB = bodyB;
}

/**
 * Set the data for the record
 * @method set
 * @param {Body} bodyA
 * @param {Shape} shapeA
 * @param {Body} bodyB
 * @param {Shape} shapeB
 */
OverlapKeeperRecord.prototype.set = function(bodyA, shapeA, bodyB, shapeB){
    OverlapKeeperRecord.call(this, bodyA, shapeA, bodyB, shapeB);
};

},{}],118:[function(require,module,exports){
var OverlapKeeperRecord = require('./OverlapKeeperRecord');
var Pool = require('./Pool');

module.exports = OverlapKeeperRecordPool;

/**
 * @class
 */
function OverlapKeeperRecordPool() {
	Pool.apply(this, arguments);
}
OverlapKeeperRecordPool.prototype = new Pool();
OverlapKeeperRecordPool.prototype.constructor = OverlapKeeperRecordPool;

/**
 * @method create
 * @return {OverlapKeeperRecord}
 */
OverlapKeeperRecordPool.prototype.create = function () {
	return new OverlapKeeperRecord();
};

/**
 * @method destroy
 * @param {OverlapKeeperRecord} record
 * @return {OverlapKeeperRecordPool}
 */
OverlapKeeperRecordPool.prototype.destroy = function (record) {
	record.bodyA = record.bodyB = record.shapeA = record.shapeB = null;
	return this;
};

},{"./OverlapKeeperRecord":117,"./Pool":119}],119:[function(require,module,exports){
module.exports = Pool;

/**
 * @class Object pooling utility.
 */
function Pool(options) {
	options = options || {};

	/**
	 * @property {Array} objects
	 * @type {Array}
	 */
	this.objects = [];

	if(options.size !== undefined){
		this.resize(options.size);
	}
}

/**
 * @method resize
 * @param {number} size
 * @return {Pool} Self, for chaining
 */
Pool.prototype.resize = function (size) {
	var objects = this.objects;

	while (objects.length > size) {
		objects.pop();
	}

	while (objects.length < size) {
		objects.push(this.create());
	}

	return this;
};

/**
 * Get an object from the pool or create a new instance.
 * @method get
 * @return {Object}
 */
Pool.prototype.get = function () {
	var objects = this.objects;
	return objects.length ? objects.pop() : this.create();
};

/**
 * Clean up and put the object back into the pool for later use.
 * @method release
 * @param {Object} object
 * @return {Pool} Self for chaining
 */
Pool.prototype.release = function (object) {
	this.destroy(object);
	this.objects.push(object);
	return this;
};

},{}],120:[function(require,module,exports){
var Utils = require('./Utils');

module.exports = TupleDictionary;

/**
 * @class TupleDictionary
 * @constructor
 */
function TupleDictionary() {

    /**
     * The data storage
     * @property data
     * @type {Object}
     */
    this.data = {};

    /**
     * Keys that are currently used.
     * @property {Array} keys
     */
    this.keys = [];
}

/**
 * Generate a key given two integers
 * @method getKey
 * @param  {number} i
 * @param  {number} j
 * @return {string}
 */
TupleDictionary.prototype.getKey = function(id1, id2) {
    id1 = id1|0;
    id2 = id2|0;

    if ( (id1|0) === (id2|0) ){
        return -1;
    }

    // valid for values < 2^16
    return ((id1|0) > (id2|0) ?
        (id1 << 16) | (id2 & 0xFFFF) :
        (id2 << 16) | (id1 & 0xFFFF))|0
        ;
};

/**
 * @method getByKey
 * @param  {Number} key
 * @return {Object}
 */
TupleDictionary.prototype.getByKey = function(key) {
    key = key|0;
    return this.data[key];
};

/**
 * @method get
 * @param  {Number} i
 * @param  {Number} j
 * @return {Number}
 */
TupleDictionary.prototype.get = function(i, j) {
    return this.data[this.getKey(i, j)];
};

/**
 * Set a value.
 * @method set
 * @param  {Number} i
 * @param  {Number} j
 * @param {Number} value
 */
TupleDictionary.prototype.set = function(i, j, value) {
    if(!value){
        throw new Error("No data!");
    }

    var key = this.getKey(i, j);

    // Check if key already exists
    if(!this.data[key]){
        this.keys.push(key);
    }

    this.data[key] = value;

    return key;
};

/**
 * Remove all data.
 * @method reset
 */
TupleDictionary.prototype.reset = function() {
    var data = this.data,
        keys = this.keys;

    var l = keys.length;
    while(l--) {
        delete data[keys[l]];
    }

    keys.length = 0;
};

/**
 * Copy another TupleDictionary. Note that all data in this dictionary will be removed.
 * @method copy
 * @param {TupleDictionary} dict The TupleDictionary to copy into this one.
 */
TupleDictionary.prototype.copy = function(dict) {
    this.reset();
    Utils.appendArray(this.keys, dict.keys);
    var l = dict.keys.length;
    while(l--){
        var key = dict.keys[l];
        this.data[key] = dict.data[key];
    }
};

},{"./Utils":121}],121:[function(require,module,exports){
/* global P2_ARRAY_TYPE */

module.exports = Utils;

/**
 * Misc utility functions
 * @class Utils
 * @constructor
 */
function Utils(){}

/**
 * Append the values in array b to the array a. See <a href="http://stackoverflow.com/questions/1374126/how-to-append-an-array-to-an-existing-javascript-array/1374131#1374131">this</a> for an explanation.
 * @method appendArray
 * @static
 * @param  {Array} a
 * @param  {Array} b
 */
Utils.appendArray = function(a,b){
    if (b.length < 150000) {
        a.push.apply(a, b);
    } else {
        for (var i = 0, len = b.length; i !== len; ++i) {
            a.push(b[i]);
        }
    }
};

/**
 * Garbage free Array.splice(). Does not allocate a new array.
 * @method splice
 * @static
 * @param  {Array} array
 * @param  {Number} index
 * @param  {Number} howmany
 */
Utils.splice = function(array,index,howmany){
    howmany = howmany || 1;
    for (var i=index, len=array.length-howmany; i < len; i++){
        array[i] = array[i + howmany];
    }
    array.length = len;
};

/**
 * The array type to use for internal numeric computations throughout the library. Float32Array is used if it is available, but falls back on Array. If you want to set array type manually, inject it via the global variable P2_ARRAY_TYPE. See example below.
 * @static
 * @property {function} ARRAY_TYPE
 * @example
 *     <script>
 *         <!-- Inject your preferred array type before loading p2.js -->
 *         P2_ARRAY_TYPE = Array;
 *     </script>
 *     <script src="p2.js"></script>
 */
if(typeof P2_ARRAY_TYPE !== 'undefined') {
    Utils.ARRAY_TYPE = P2_ARRAY_TYPE;
} else if (typeof Float32Array !== 'undefined'){
    Utils.ARRAY_TYPE = Float32Array;
} else {
    Utils.ARRAY_TYPE = Array;
}

/**
 * Extend an object with the properties of another
 * @static
 * @method extend
 * @param  {object} a
 * @param  {object} b
 */
Utils.extend = function(a,b){
    for(var key in b){
        a[key] = b[key];
    }
};

/**
 * Extend an options object with default values.
 * @static
 * @method defaults
 * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.
 * @param  {object} defaults An object containing default values.
 * @return {object} The modified options object.
 */
Utils.defaults = function(options, defaults){
    options = options || {};
    for(var key in defaults){
        if(!(key in options)){
            options[key] = defaults[key];
        }
    }
    return options;
};

},{}],122:[function(require,module,exports){
var Body = require('../objects/Body');

module.exports = Island;

/**
 * An island of bodies connected with equations.
 * @class Island
 * @constructor
 */
function Island(){

    /**
     * Current equations in this island.
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * Current bodies in this island.
     * @property bodies
     * @type {Array}
     */
    this.bodies = [];
}

/**
 * Clean this island from bodies and equations.
 * @method reset
 */
Island.prototype.reset = function(){
    this.equations.length = this.bodies.length = 0;
};

var bodyIds = [];

/**
 * Get all unique bodies in this island.
 * @method getBodies
 * @return {Array} An array of Body
 */
Island.prototype.getBodies = function(result){
    var bodies = result || [],
        eqs = this.equations;
    bodyIds.length = 0;
    for(var i=0; i!==eqs.length; i++){
        var eq = eqs[i];
        if(bodyIds.indexOf(eq.bodyA.id)===-1){
            bodies.push(eq.bodyA);
            bodyIds.push(eq.bodyA.id);
        }
        if(bodyIds.indexOf(eq.bodyB.id)===-1){
            bodies.push(eq.bodyB);
            bodyIds.push(eq.bodyB.id);
        }
    }
    return bodies;
};

/**
 * Check if the entire island wants to sleep.
 * @method wantsToSleep
 * @return {Boolean}
 */
Island.prototype.wantsToSleep = function(){
    for(var i=0; i<this.bodies.length; i++){
        var b = this.bodies[i];
        if(b.type === Body.DYNAMIC && !b.wantsToSleep){
            return false;
        }
    }
    return true;
};

/**
 * Make all bodies in the island sleep.
 * @method sleep
 */
Island.prototype.sleep = function(){
    for(var i=0; i<this.bodies.length; i++){
        var b = this.bodies[i];
        b.sleep();
    }
    return true;
};

},{"../objects/Body":95}],123:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Island = require('./Island')
,   IslandNode = require('./IslandNode')
,   IslandNodePool = require('./../utils/IslandNodePool')
,   IslandPool = require('./../utils/IslandPool')
,   Body = require('../objects/Body');

module.exports = IslandManager;

/**
 * Splits the system of bodies and equations into independent islands
 *
 * @class IslandManager
 * @constructor
 * @param {Object} [options]
 * @extends Solver
 */
function IslandManager(options){

    /**
     * @property nodePool
     * @type {IslandNodePool}
     */
    this.nodePool = new IslandNodePool({ size: 16 });

    /**
     * @property islandPool
     * @type {IslandPool}
     */
    this.islandPool = new IslandPool({ size: 8 });

    /**
     * The equations to split. Manually fill this array before running .split().
     * @property {Array} equations
     */
    this.equations = [];

    /**
     * The resulting {{#crossLink "Island"}}{{/crossLink}}s.
     * @property {Array} islands
     */
    this.islands = [];

    /**
     * The resulting graph nodes.
     * @property {Array} nodes
     */
    this.nodes = [];

    /**
     * The node queue, used when traversing the graph of nodes.
     * @private
     * @property {Array} queue
     */
    this.queue = [];
}

/**
 * Get an unvisited node from a list of nodes.
 * @static
 * @method getUnvisitedNode
 * @param  {Array} nodes
 * @return {IslandNode|boolean} The node if found, else false.
 */
IslandManager.getUnvisitedNode = function(nodes){
    var Nnodes = nodes.length;
    for(var i=0; i!==Nnodes; i++){
        var node = nodes[i];
        if(!node.visited && node.body.type === Body.DYNAMIC){
            return node;
        }
    }
    return false;
};

/**
 * Visit a node.
 * @method visit
 * @param  {IslandNode} node
 * @param  {Array} bds
 * @param  {Array} eqs
 */
IslandManager.prototype.visit = function (node,bds,eqs){
    bds.push(node.body);
    var Neqs = node.equations.length;
    for(var i=0; i!==Neqs; i++){
        var eq = node.equations[i];
        if(eqs.indexOf(eq) === -1){ // Already added?
            eqs.push(eq);
        }
    }
};

/**
 * Runs the search algorithm, starting at a root node. The resulting bodies and equations will be stored in the provided arrays.
 * @method bfs
 * @param  {IslandNode} root The node to start from
 * @param  {Array} bds  An array to append resulting Bodies to.
 * @param  {Array} eqs  An array to append resulting Equations to.
 */
IslandManager.prototype.bfs = function(root,bds,eqs){

    // Reset the visit queue
    var queue = this.queue;
    queue.length = 0;

    // Add root node to queue
    queue.push(root);
    root.visited = true;
    this.visit(root,bds,eqs);

    // Process all queued nodes
    while(queue.length) {

        // Get next node in the queue
        var node = queue.pop();

        // Visit unvisited neighboring nodes
        var child;
        while((child = IslandManager.getUnvisitedNode(node.neighbors))) {
            child.visited = true;
            this.visit(child,bds,eqs);

            // Only visit the children of this node if it's dynamic
            if(child.body.type === Body.DYNAMIC){
                queue.push(child);
            }
        }
    }
};

/**
 * Split the world into independent islands. The result is stored in .islands.
 * @method split
 * @param  {World} world
 * @return {Array} The generated islands
 */
IslandManager.prototype.split = function(world){
    var bodies = world.bodies,
        nodes = this.nodes,
        equations = this.equations;

    // Move old nodes to the node pool
    while(nodes.length){
        this.nodePool.release(nodes.pop());
    }

    // Create needed nodes, reuse if possible
    for(var i=0; i!==bodies.length; i++){
        var node = this.nodePool.get();
        node.body = bodies[i];
        nodes.push(node);
        // if(this.nodePool.length){
        //     var node = this.nodePool.pop();
        //     node.reset();
        //     node.body = bodies[i];
        //     nodes.push(node);
        // } else {
        //     nodes.push(new IslandNode(bodies[i]));
        // }
    }

    // Add connectivity data. Each equation connects 2 bodies.
    for(var k=0; k!==equations.length; k++){
        var eq=equations[k],
            i=bodies.indexOf(eq.bodyA),
            j=bodies.indexOf(eq.bodyB),
            ni=nodes[i],
            nj=nodes[j];
        ni.neighbors.push(nj);
        nj.neighbors.push(ni);
        ni.equations.push(eq);
        nj.equations.push(eq);
    }

    // Move old islands to the island pool
    var islands = this.islands;
    for(var i=0; i<islands.length; i++){
        this.islandPool.release(islands[i]);
    }
    islands.length = 0;

    // Get islands
    var child;
    while((child = IslandManager.getUnvisitedNode(nodes))){

        // Create new island
        var island = this.islandPool.get();

        // Get all equations and bodies in this island
        this.bfs(child, island.bodies, island.equations);

        islands.push(island);
    }

    return islands;
};

},{"../math/vec2":94,"../objects/Body":95,"./../utils/IslandNodePool":114,"./../utils/IslandPool":115,"./Island":122,"./IslandNode":124}],124:[function(require,module,exports){
module.exports = IslandNode;

/**
 * Holds a body and keeps track of some additional properties needed for graph traversal.
 * @class IslandNode
 * @constructor
 * @param {Body} body
 */
function IslandNode(body){

	/**
	 * The body that is contained in this node.
	 * @property {Body} body
	 */
    this.body = body;

    /**
     * Neighboring IslandNodes
     * @property {Array} neighbors
     */
    this.neighbors = [];

    /**
     * Equations connected to this node.
     * @property {Array} equations
     */
    this.equations = [];

    /**
     * If this node was visiting during the graph traversal.
     * @property visited
     * @type {Boolean}
     */
    this.visited = false;
}

/**
 * Clean this node from bodies and equations.
 * @method reset
 */
IslandNode.prototype.reset = function(){
    this.equations.length = 0;
    this.neighbors.length = 0;
    this.visited = false;
    this.body = null;
};

},{}],125:[function(require,module,exports){
var  GSSolver = require('../solver/GSSolver')
,    Solver = require('../solver/Solver')
,    Ray = require('../collision/Ray')
,    vec2 = require('../math/vec2')
,    Circle = require('../shapes/Circle')
,    Convex = require('../shapes/Convex')
,    Line = require('../shapes/Line')
,    Plane = require('../shapes/Plane')
,    Capsule = require('../shapes/Capsule')
,    Particle = require('../shapes/Particle')
,    EventEmitter = require('../events/EventEmitter')
,    Body = require('../objects/Body')
,    Shape = require('../shapes/Shape')
,    LinearSpring = require('../objects/LinearSpring')
,    Material = require('../material/Material')
,    ContactMaterial = require('../material/ContactMaterial')
,    DistanceConstraint = require('../constraints/DistanceConstraint')
,    Constraint = require('../constraints/Constraint')
,    LockConstraint = require('../constraints/LockConstraint')
,    RevoluteConstraint = require('../constraints/RevoluteConstraint')
,    PrismaticConstraint = require('../constraints/PrismaticConstraint')
,    GearConstraint = require('../constraints/GearConstraint')
,    pkg = require('../../package.json')
,    Broadphase = require('../collision/Broadphase')
,    AABB = require('../collision/AABB')
,    SAPBroadphase = require('../collision/SAPBroadphase')
,    Narrowphase = require('../collision/Narrowphase')
,    Utils = require('../utils/Utils')
,    OverlapKeeper = require('../utils/OverlapKeeper')
,    IslandManager = require('./IslandManager')
,    RotationalSpring = require('../objects/RotationalSpring');

module.exports = World;

/**
 * The dynamics world, where all bodies and constraints live.
 *
 * @class World
 * @constructor
 * @param {Object} [options]
 * @param {Solver} [options.solver] Defaults to GSSolver.
 * @param {Array} [options.gravity] Defaults to y=-9.78.
 * @param {Broadphase} [options.broadphase] Defaults to SAPBroadphase
 * @param {Boolean} [options.islandSplit=true]
 * @extends EventEmitter
 *
 * @example
 *     var world = new World({
 *         gravity: [0, -10],
 *         broadphase: new SAPBroadphase()
 *     });
 *     world.addBody(new Body());
 */
function World(options){
    EventEmitter.apply(this);

    options = options || {};

    /**
     * All springs in the world. To add a spring to the world, use {{#crossLink "World/addSpring:method"}}{{/crossLink}}.
     *
     * @property springs
     * @type {Array}
     */
    this.springs = [];

    /**
     * All bodies in the world. To add a body to the world, use {{#crossLink "World/addBody:method"}}{{/crossLink}}.
     * @property {Array} bodies
     */
    this.bodies = [];

    /**
     * Disabled body collision pairs. See {{#crossLink "World/disableBodyCollision:method"}}.
     * @private
     * @property {Array} disabledBodyCollisionPairs
     */
    this.disabledBodyCollisionPairs = [];

    /**
     * The solver used to satisfy constraints and contacts. Default is {{#crossLink "GSSolver"}}{{/crossLink}}.
     * @property {Solver} solver
     */
    this.solver = options.solver || new GSSolver();

    /**
     * The narrowphase to use to generate contacts.
     *
     * @property narrowphase
     * @type {Narrowphase}
     */
    this.narrowphase = new Narrowphase(this);

    /**
     * The island manager of this world.
     * @property {IslandManager} islandManager
     */
    this.islandManager = new IslandManager();

    /**
     * Gravity in the world. This is applied on all bodies in the beginning of each step().
     *
     * @property gravity
     * @type {Array}
     */
    this.gravity = vec2.fromValues(0, -9.78);
    if(options.gravity){
        vec2.copy(this.gravity, options.gravity);
    }

    /**
     * Gravity to use when approximating the friction max force (mu*mass*gravity).
     * @property {Number} frictionGravity
     */
    this.frictionGravity = vec2.length(this.gravity) || 10;

    /**
     * Set to true if you want .frictionGravity to be automatically set to the length of .gravity.
     * @property {Boolean} useWorldGravityAsFrictionGravity
     * @default true
     */
    this.useWorldGravityAsFrictionGravity = true;

    /**
     * If the length of .gravity is zero, and .useWorldGravityAsFrictionGravity=true, then switch to using .frictionGravity for friction instead. This fallback is useful for gravityless games.
     * @property {Boolean} useFrictionGravityOnZeroGravity
     * @default true
     */
    this.useFrictionGravityOnZeroGravity = true;

    /**
     * The broadphase algorithm to use.
     *
     * @property broadphase
     * @type {Broadphase}
     */
    this.broadphase = options.broadphase || new SAPBroadphase();
    this.broadphase.setWorld(this);

    /**
     * User-added constraints.
     *
     * @property constraints
     * @type {Array}
     */
    this.constraints = [];

    /**
     * Dummy default material in the world, used in .defaultContactMaterial
     * @property {Material} defaultMaterial
     */
    this.defaultMaterial = new Material();

    /**
     * The default contact material to use, if no contact material was set for the colliding materials.
     * @property {ContactMaterial} defaultContactMaterial
     */
    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial,this.defaultMaterial);

    /**
     * For keeping track of what time step size we used last step
     * @property lastTimeStep
     * @type {Number}
     */
    this.lastTimeStep = 1/60;

    /**
     * Enable to automatically apply spring forces each step.
     * @property applySpringForces
     * @type {Boolean}
     * @default true
     */
    this.applySpringForces = true;

    /**
     * Enable to automatically apply body damping each step.
     * @property applyDamping
     * @type {Boolean}
     * @default true
     */
    this.applyDamping = true;

    /**
     * Enable to automatically apply gravity each step.
     * @property applyGravity
     * @type {Boolean}
     * @default true
     */
    this.applyGravity = true;

    /**
     * Enable/disable constraint solving in each step.
     * @property solveConstraints
     * @type {Boolean}
     * @default true
     */
    this.solveConstraints = true;

    /**
     * The ContactMaterials added to the World.
     * @property contactMaterials
     * @type {Array}
     */
    this.contactMaterials = [];

    /**
     * World time.
     * @property time
     * @type {Number}
     */
    this.time = 0.0;
    this.accumulator = 0;

    /**
     * Is true during step().
     * @property {Boolean} stepping
     */
    this.stepping = false;

    /**
     * Bodies that are scheduled to be removed at the end of the step.
     * @property {Array} bodiesToBeRemoved
     * @private
     */
    this.bodiesToBeRemoved = [];

    /**
     * Whether to enable island splitting. Island splitting can be an advantage for both precision and performance. See {{#crossLink "IslandManager"}}{{/crossLink}}.
     * @property {Boolean} islandSplit
     * @default true
     */
    this.islandSplit = typeof(options.islandSplit)!=="undefined" ? !!options.islandSplit : true;

    /**
     * Set to true if you want to the world to emit the "impact" event. Turning this off could improve performance.
     * @property emitImpactEvent
     * @type {Boolean}
     * @default true
     */
    this.emitImpactEvent = true;

    // Id counters
    this._constraintIdCounter = 0;
    this._bodyIdCounter = 0;

    /**
     * Fired after the step().
     * @event postStep
     */
    this.postStepEvent = {
        type : "postStep"
    };

    /**
     * Fired when a body is added to the world.
     * @event addBody
     * @param {Body} body
     */
    this.addBodyEvent = {
        type : "addBody",
        body : null
    };

    /**
     * Fired when a body is removed from the world.
     * @event removeBody
     * @param {Body} body
     */
    this.removeBodyEvent = {
        type : "removeBody",
        body : null
    };

    /**
     * Fired when a spring is added to the world.
     * @event addSpring
     * @param {Spring} spring
     */
    this.addSpringEvent = {
        type : "addSpring",
        spring : null
    };

    /**
     * Fired when a first contact is created between two bodies. This event is fired after the step has been done.
     * @event impact
     * @param {Body} bodyA
     * @param {Body} bodyB
     */
    this.impactEvent = {
        type: "impact",
        bodyA : null,
        bodyB : null,
        shapeA : null,
        shapeB : null,
        contactEquation : null
    };

    /**
     * Fired after the Broadphase has collected collision pairs in the world.
     * Inside the event handler, you can modify the pairs array as you like, to
     * prevent collisions between objects that you don't want.
     * @event postBroadphase
     * @param {Array} pairs An array of collision pairs. If this array is [body1,body2,body3,body4], then the body pairs 1,2 and 3,4 would advance to narrowphase.
     */
    this.postBroadphaseEvent = {
        type: "postBroadphase",
        pairs: null
    };

    /**
     * How to deactivate bodies during simulation. Possible modes are: {{#crossLink "World/NO_SLEEPING:property"}}World.NO_SLEEPING{{/crossLink}}, {{#crossLink "World/BODY_SLEEPING:property"}}World.BODY_SLEEPING{{/crossLink}} and {{#crossLink "World/ISLAND_SLEEPING:property"}}World.ISLAND_SLEEPING{{/crossLink}}.
     * If sleeping is enabled, you might need to {{#crossLink "Body/wakeUp:method"}}wake up{{/crossLink}} the bodies if they fall asleep when they shouldn't. If you want to enable sleeping in the world, but want to disable it for a particular body, see {{#crossLink "Body/allowSleep:property"}}Body.allowSleep{{/crossLink}}.
     * @property sleepMode
     * @type {number}
     * @default World.NO_SLEEPING
     */
    this.sleepMode = World.NO_SLEEPING;

    /**
     * Fired when two shapes starts start to overlap. Fired in the narrowphase, during step.
     * @event beginContact
     * @param {Shape} shapeA
     * @param {Shape} shapeB
     * @param {Body}  bodyA
     * @param {Body}  bodyB
     * @param {Array} contactEquations
     */
    this.beginContactEvent = {
        type: "beginContact",
        shapeA: null,
        shapeB: null,
        bodyA: null,
        bodyB: null,
        contactEquations: []
    };

    /**
     * Fired when two shapes stop overlapping, after the narrowphase (during step).
     * @event endContact
     * @param {Shape} shapeA
     * @param {Shape} shapeB
     * @param {Body}  bodyA
     * @param {Body}  bodyB
     */
    this.endContactEvent = {
        type: "endContact",
        shapeA: null,
        shapeB: null,
        bodyA: null,
        bodyB: null
    };

    /**
     * Fired just before equations are added to the solver to be solved. Can be used to control what equations goes into the solver.
     * @event preSolve
     * @param {Array} contactEquations  An array of contacts to be solved.
     * @param {Array} frictionEquations An array of friction equations to be solved.
     */
    this.preSolveEvent = {
        type: "preSolve",
        contactEquations: null,
        frictionEquations: null
    };

    // For keeping track of overlapping shapes
    this.overlappingShapesLastState = { keys:[] };
    this.overlappingShapesCurrentState = { keys:[] };

    /**
     * @property {OverlapKeeper} overlapKeeper
     */
    this.overlapKeeper = new OverlapKeeper();
}
World.prototype = new Object(EventEmitter.prototype);
World.prototype.constructor = World;

/**
 * Never deactivate bodies.
 * @static
 * @property {number} NO_SLEEPING
 */
World.NO_SLEEPING = 1;

/**
 * Deactivate individual bodies if they are sleepy.
 * @static
 * @property {number} BODY_SLEEPING
 */
World.BODY_SLEEPING = 2;

/**
 * Deactivates bodies that are in contact, if all of them are sleepy. Note that you must enable {{#crossLink "World/islandSplit:property"}}.islandSplit{{/crossLink}} for this to work.
 * @static
 * @property {number} ISLAND_SLEEPING
 */
World.ISLAND_SLEEPING = 4;

/**
 * Add a constraint to the simulation.
 *
 * @method addConstraint
 * @param {Constraint} constraint
 * @example
 *     var constraint = new LockConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 */
World.prototype.addConstraint = function(constraint){
    this.constraints.push(constraint);
};

/**
 * Add a ContactMaterial to the simulation.
 * @method addContactMaterial
 * @param {ContactMaterial} contactMaterial
 */
World.prototype.addContactMaterial = function(contactMaterial){
    this.contactMaterials.push(contactMaterial);
};

/**
 * Removes a contact material
 *
 * @method removeContactMaterial
 * @param {ContactMaterial} cm
 */
World.prototype.removeContactMaterial = function(cm){
    var idx = this.contactMaterials.indexOf(cm);
    if(idx!==-1){
        Utils.splice(this.contactMaterials,idx,1);
    }
};

/**
 * Get a contact material given two materials
 * @method getContactMaterial
 * @param {Material} materialA
 * @param {Material} materialB
 * @return {ContactMaterial} The matching ContactMaterial, or false on fail.
 * @todo Use faster hash map to lookup from material id's
 */
World.prototype.getContactMaterial = function(materialA,materialB){
    var cmats = this.contactMaterials;
    for(var i=0, N=cmats.length; i!==N; i++){
        var cm = cmats[i];
        if( (cm.materialA.id === materialA.id) && (cm.materialB.id === materialB.id) ||
            (cm.materialA.id === materialB.id) && (cm.materialB.id === materialA.id) ){
            return cm;
        }
    }
    return false;
};

/**
 * Removes a constraint
 *
 * @method removeConstraint
 * @param {Constraint} constraint
 */
World.prototype.removeConstraint = function(constraint){
    var idx = this.constraints.indexOf(constraint);
    if(idx!==-1){
        Utils.splice(this.constraints,idx,1);
    }
};

var step_r = vec2.create(),
    step_runit = vec2.create(),
    step_u = vec2.create(),
    step_f = vec2.create(),
    step_fhMinv = vec2.create(),
    step_velodt = vec2.create(),
    step_mg = vec2.create(),
    xiw = vec2.fromValues(0,0),
    xjw = vec2.fromValues(0,0),
    zero = vec2.fromValues(0,0),
    interpvelo = vec2.fromValues(0,0);

/**
 * Step the physics world forward in time.
 *
 * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
 *
 * @method step
 * @param {Number} dt                       The fixed time step size to use.
 * @param {Number} [timeSinceLastCalled=0]  The time elapsed since the function was last called.
 * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.
 *
 * @example
 *     // Simple fixed timestepping without interpolation
 *     var fixedTimeStep = 1 / 60;
 *     var world = new World();
 *     var body = new Body({ mass: 1 });
 *     world.addBody(body);
 *
 *     function animate(){
 *         requestAnimationFrame(animate);
 *         world.step(fixedTimeStep);
 *         renderBody(body.position, body.angle);
 *     }
 *
 *     // Start animation loop
 *     requestAnimationFrame(animate);
 *
 * @example
 *     // Fixed timestepping with interpolation
 *     var maxSubSteps = 10;
 *     var lastTimeSeconds;
 *
 *     function animate(t){
 *         requestAnimationFrame(animate);
 *         timeSeconds = t / 1000;
 *         lastTimeSeconds = lastTimeSeconds || timeSeconds;
 *
 *         deltaTime = timeSeconds - lastTimeSeconds;
 *         world.step(fixedTimeStep, deltaTime, maxSubSteps);
 *
 *         renderBody(body.interpolatedPosition, body.interpolatedAngle);
 *     }
 *
 *     // Start animation loop
 *     requestAnimationFrame(animate);
 *
 * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World
 */
World.prototype.step = function(dt,timeSinceLastCalled,maxSubSteps){
    maxSubSteps = maxSubSteps || 10;
    timeSinceLastCalled = timeSinceLastCalled || 0;

    if(timeSinceLastCalled === 0){ // Fixed, simple stepping

        this.internalStep(dt);

        // Increment time
        this.time += dt;

    } else {

        this.accumulator += timeSinceLastCalled;
        var substeps = 0;
        while (this.accumulator >= dt && substeps < maxSubSteps) {
            // Do fixed steps to catch up
            this.internalStep(dt);
            this.time += dt;
            this.accumulator -= dt;
            substeps++;
        }

        var t = (this.accumulator % dt) / dt;
        for(var j=0; j!==this.bodies.length; j++){
            var b = this.bodies[j];
            vec2.lerp(b.interpolatedPosition, b.previousPosition, b.position, t);
            b.interpolatedAngle = b.previousAngle + t * (b.angle - b.previousAngle);
        }
    }
};

var endOverlaps = [];

/**
 * Make a fixed step.
 * @method internalStep
 * @param  {number} dt
 * @private
 */
World.prototype.internalStep = function(dt){
    this.stepping = true;

    var that = this,
        Nsprings = this.springs.length,
        springs = this.springs,
        bodies = this.bodies,
        g = this.gravity,
        solver = this.solver,
        Nbodies = this.bodies.length,
        broadphase = this.broadphase,
        np = this.narrowphase,
        constraints = this.constraints,
        t0, t1,
        fhMinv = step_fhMinv,
        velodt = step_velodt,
        mg = step_mg,
        scale = vec2.scale,
        add = vec2.add,
        rotate = vec2.rotate,
        islandManager = this.islandManager;

    this.overlapKeeper.tick();

    this.lastTimeStep = dt;

    // Update approximate friction gravity.
    if(this.useWorldGravityAsFrictionGravity){
        var gravityLen = vec2.length(this.gravity);
        if(!(gravityLen === 0 && this.useFrictionGravityOnZeroGravity)){
            // Nonzero gravity. Use it.
            this.frictionGravity = gravityLen;
        }
    }

    // Add gravity to bodies
    if(this.applyGravity){
        for(var i=0; i!==Nbodies; i++){
            var b = bodies[i],
                fi = b.force;
            if(b.type !== Body.DYNAMIC || b.sleepState === Body.SLEEPING){
                continue;
            }
            vec2.scale(mg,g,b.mass*b.gravityScale); // F=m*g
            add(fi,fi,mg);
        }
    }

    // Add spring forces
    if(this.applySpringForces){
        for(var i=0; i!==Nsprings; i++){
            var s = springs[i];
            s.applyForce();
        }
    }

    if(this.applyDamping){
        for(var i=0; i!==Nbodies; i++){
            var b = bodies[i];
            if(b.type === Body.DYNAMIC){
                b.applyDamping(dt);
            }
        }
    }

    // Broadphase
    var result = broadphase.getCollisionPairs(this);

    // Remove ignored collision pairs
    var ignoredPairs = this.disabledBodyCollisionPairs;
    for(var i=ignoredPairs.length-2; i>=0; i-=2){
        for(var j=result.length-2; j>=0; j-=2){
            if( (ignoredPairs[i]   === result[j] && ignoredPairs[i+1] === result[j+1]) ||
                (ignoredPairs[i+1] === result[j] && ignoredPairs[i]   === result[j+1])){
                result.splice(j,2);
            }
        }
    }

    // Remove constrained pairs with collideConnected == false
    var Nconstraints = constraints.length;
    for(i=0; i!==Nconstraints; i++){
        var c = constraints[i];
        if(!c.collideConnected){
            for(var j=result.length-2; j>=0; j-=2){
                if( (c.bodyA === result[j] && c.bodyB === result[j+1]) ||
                    (c.bodyB === result[j] && c.bodyA === result[j+1])){
                    result.splice(j,2);
                }
            }
        }
    }

    // postBroadphase event
    this.postBroadphaseEvent.pairs = result;
    this.emit(this.postBroadphaseEvent);
    this.postBroadphaseEvent.pairs = null;

    // Narrowphase
    np.reset(this);
    for(var i=0, Nresults=result.length; i!==Nresults; i+=2){
        var bi = result[i],
            bj = result[i+1];

        // Loop over all shapes of body i
        for(var k=0, Nshapesi=bi.shapes.length; k!==Nshapesi; k++){
            var si = bi.shapes[k],
                xi = si.position,
                ai = si.angle;

            // All shapes of body j
            for(var l=0, Nshapesj=bj.shapes.length; l!==Nshapesj; l++){
                var sj = bj.shapes[l],
                    xj = sj.position,
                    aj = sj.angle;

                var cm = this.defaultContactMaterial;
                if(si.material && sj.material){
                    var tmp = this.getContactMaterial(si.material,sj.material);
                    if(tmp){
                        cm = tmp;
                    }
                }

                this.runNarrowphase(np,bi,si,xi,ai,bj,sj,xj,aj,cm,this.frictionGravity);
            }
        }
    }

    // Wake up bodies
    for(var i=0; i!==Nbodies; i++){
        var body = bodies[i];
        if(body._wakeUpAfterNarrowphase){
            body.wakeUp();
            body._wakeUpAfterNarrowphase = false;
        }
    }

    // Emit end overlap events
    if(this.has('endContact')){
        this.overlapKeeper.getEndOverlaps(endOverlaps);
        var e = this.endContactEvent;
        var l = endOverlaps.length;
        while(l--){
            var data = endOverlaps[l];
            e.shapeA = data.shapeA;
            e.shapeB = data.shapeB;
            e.bodyA = data.bodyA;
            e.bodyB = data.bodyB;
            this.emit(e);
        }
        endOverlaps.length = 0;
    }

    var preSolveEvent = this.preSolveEvent;
    preSolveEvent.contactEquations = np.contactEquations;
    preSolveEvent.frictionEquations = np.frictionEquations;
    this.emit(preSolveEvent);
    preSolveEvent.contactEquations = preSolveEvent.frictionEquations = null;

    // update constraint equations
    var Nconstraints = constraints.length;
    for(i=0; i!==Nconstraints; i++){
        constraints[i].update();
    }

    if(np.contactEquations.length || np.frictionEquations.length || Nconstraints){
        if(this.islandSplit){
            // Split into islands
            islandManager.equations.length = 0;
            Utils.appendArray(islandManager.equations, np.contactEquations);
            Utils.appendArray(islandManager.equations, np.frictionEquations);
            for(i=0; i!==Nconstraints; i++){
                Utils.appendArray(islandManager.equations, constraints[i].equations);
            }
            islandManager.split(this);

            for(var i=0; i!==islandManager.islands.length; i++){
                var island = islandManager.islands[i];
                if(island.equations.length){
                    solver.solveIsland(dt,island);
                }
            }

        } else {

            // Add contact equations to solver
            solver.addEquations(np.contactEquations);
            solver.addEquations(np.frictionEquations);

            // Add user-defined constraint equations
            for(i=0; i!==Nconstraints; i++){
                solver.addEquations(constraints[i].equations);
            }

            if(this.solveConstraints){
                solver.solve(dt,this);
            }

            solver.removeAllEquations();
        }
    }

    // Step forward
    for(var i=0; i!==Nbodies; i++){
        var body = bodies[i];

        // if(body.sleepState !== Body.SLEEPING && body.type !== Body.STATIC){
        body.integrate(dt);
        // }
    }

    // Reset force
    for(var i=0; i!==Nbodies; i++){
        bodies[i].setZeroForce();
    }

    // Emit impact event
    if(this.emitImpactEvent && this.has('impact')){
        var ev = this.impactEvent;
        for(var i=0; i!==np.contactEquations.length; i++){
            var eq = np.contactEquations[i];
            if(eq.firstImpact){
                ev.bodyA = eq.bodyA;
                ev.bodyB = eq.bodyB;
                ev.shapeA = eq.shapeA;
                ev.shapeB = eq.shapeB;
                ev.contactEquation = eq;
                this.emit(ev);
            }
        }
    }

    // Sleeping update
    if(this.sleepMode === World.BODY_SLEEPING){
        for(i=0; i!==Nbodies; i++){
            bodies[i].sleepTick(this.time, false, dt);
        }
    } else if(this.sleepMode === World.ISLAND_SLEEPING && this.islandSplit){

        // Tell all bodies to sleep tick but dont sleep yet
        for(i=0; i!==Nbodies; i++){
            bodies[i].sleepTick(this.time, true, dt);
        }

        // Sleep islands
        for(var i=0; i<this.islandManager.islands.length; i++){
            var island = this.islandManager.islands[i];
            if(island.wantsToSleep()){
                island.sleep();
            }
        }
    }

    this.stepping = false;

    // Remove bodies that are scheduled for removal
    var bodiesToBeRemoved = this.bodiesToBeRemoved;
    for(var i=0; i!==bodiesToBeRemoved.length; i++){
        this.removeBody(bodiesToBeRemoved[i]);
    }
    bodiesToBeRemoved.length = 0;

    this.emit(this.postStepEvent);
};

/**
 * Runs narrowphase for the shape pair i and j.
 * @method runNarrowphase
 * @param  {Narrowphase} np
 * @param  {Body} bi
 * @param  {Shape} si
 * @param  {Array} xi
 * @param  {Number} ai
 * @param  {Body} bj
 * @param  {Shape} sj
 * @param  {Array} xj
 * @param  {Number} aj
 * @param  {Number} mu
 */
World.prototype.runNarrowphase = function(np,bi,si,xi,ai,bj,sj,xj,aj,cm,glen){

    // Check collision groups and masks
    if(!((si.collisionGroup & sj.collisionMask) !== 0 && (sj.collisionGroup & si.collisionMask) !== 0)){
        return;
    }

    // Get world position and angle of each shape
    vec2.rotate(xiw, xi, bi.angle);
    vec2.rotate(xjw, xj, bj.angle);
    vec2.add(xiw, xiw, bi.position);
    vec2.add(xjw, xjw, bj.position);
    var aiw = ai + bi.angle;
    var ajw = aj + bj.angle;

    np.enableFriction = cm.friction > 0;
    np.frictionCoefficient = cm.friction;
    var reducedMass;
    if(bi.type === Body.STATIC || bi.type === Body.KINEMATIC){
        reducedMass = bj.mass;
    } else if(bj.type === Body.STATIC || bj.type === Body.KINEMATIC){
        reducedMass = bi.mass;
    } else {
        reducedMass = (bi.mass*bj.mass)/(bi.mass+bj.mass);
    }
    np.slipForce = cm.friction*glen*reducedMass;
    np.restitution = cm.restitution;
    np.surfaceVelocity = cm.surfaceVelocity;
    np.frictionStiffness = cm.frictionStiffness;
    np.frictionRelaxation = cm.frictionRelaxation;
    np.stiffness = cm.stiffness;
    np.relaxation = cm.relaxation;
    np.contactSkinSize = cm.contactSkinSize;
    np.enabledEquations = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;

    var resolver = np[si.type | sj.type],
        numContacts = 0;
    if (resolver) {
        var sensor = si.sensor || sj.sensor;
        var numFrictionBefore = np.frictionEquations.length;
        if (si.type < sj.type) {
            numContacts = resolver.call(np, bi,si,xiw,aiw, bj,sj,xjw,ajw, sensor);
        } else {
            numContacts = resolver.call(np, bj,sj,xjw,ajw, bi,si,xiw,aiw, sensor);
        }
        var numFrictionEquations = np.frictionEquations.length - numFrictionBefore;

        if(numContacts){

            if( bi.allowSleep &&
                bi.type === Body.DYNAMIC &&
                bi.sleepState  === Body.SLEEPING &&
                bj.sleepState  === Body.AWAKE &&
                bj.type !== Body.STATIC
            ){
                var speedSquaredB = vec2.squaredLength(bj.velocity) + Math.pow(bj.angularVelocity,2);
                var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);
                if(speedSquaredB >= speedLimitSquaredB*2){
                    bi._wakeUpAfterNarrowphase = true;
                }
            }

            if( bj.allowSleep &&
                bj.type === Body.DYNAMIC &&
                bj.sleepState  === Body.SLEEPING &&
                bi.sleepState  === Body.AWAKE &&
                bi.type !== Body.STATIC
            ){
                var speedSquaredA = vec2.squaredLength(bi.velocity) + Math.pow(bi.angularVelocity,2);
                var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);
                if(speedSquaredA >= speedLimitSquaredA*2){
                    bj._wakeUpAfterNarrowphase = true;
                }
            }

            this.overlapKeeper.setOverlapping(bi, si, bj, sj);
            if(this.has('beginContact') && this.overlapKeeper.isNewOverlap(si, sj)){

                // Report new shape overlap
                var e = this.beginContactEvent;
                e.shapeA = si;
                e.shapeB = sj;
                e.bodyA = bi;
                e.bodyB = bj;

                // Reset contact equations
                e.contactEquations.length = 0;

                if(typeof(numContacts)==="number"){
                    for(var i=np.contactEquations.length-numContacts; i<np.contactEquations.length; i++){
                        e.contactEquations.push(np.contactEquations[i]);
                    }
                }

                this.emit(e);
            }

            // divide the max friction force by the number of contacts
            if(typeof(numContacts)==="number" && numFrictionEquations > 1){ // Why divide by 1?
                for(var i=np.frictionEquations.length-numFrictionEquations; i<np.frictionEquations.length; i++){
                    var f = np.frictionEquations[i];
                    f.setSlipForce(f.getSlipForce() / numFrictionEquations);
                }
            }
        }
    }

};

/**
 * Add a spring to the simulation
 *
 * @method addSpring
 * @param {Spring} spring
 */
World.prototype.addSpring = function(spring){
    this.springs.push(spring);
    var evt = this.addSpringEvent;
    evt.spring = spring;
    this.emit(evt);
    evt.spring = null;
};

/**
 * Remove a spring
 *
 * @method removeSpring
 * @param {Spring} spring
 */
World.prototype.removeSpring = function(spring){
    var idx = this.springs.indexOf(spring);
    if(idx !== -1){
        Utils.splice(this.springs,idx,1);
    }
};

/**
 * Add a body to the simulation
 *
 * @method addBody
 * @param {Body} body
 *
 * @example
 *     var world = new World(),
 *         body = new Body();
 *     world.addBody(body);
 * @todo What if this is done during step?
 */
World.prototype.addBody = function(body){
    if(this.bodies.indexOf(body) === -1){
        this.bodies.push(body);
        body.world = this;
        var evt = this.addBodyEvent;
        evt.body = body;
        this.emit(evt);
        evt.body = null;
    }
};

/**
 * Remove a body from the simulation. If this method is called during step(), the body removal is scheduled to after the step.
 *
 * @method removeBody
 * @param {Body} body
 */
World.prototype.removeBody = function(body){
    if(this.stepping){
        this.bodiesToBeRemoved.push(body);
    } else {
        body.world = null;
        var idx = this.bodies.indexOf(body);
        if(idx!==-1){
            Utils.splice(this.bodies,idx,1);
            this.removeBodyEvent.body = body;
            body.resetConstraintVelocity();
            this.emit(this.removeBodyEvent);
            this.removeBodyEvent.body = null;
        }
    }
};

/**
 * Get a body by its id.
 * @method getBodyById
 * @param {number} id
 * @return {Body} The body, or false if it was not found.
 */
World.prototype.getBodyById = function(id){
    var bodies = this.bodies;
    for(var i=0; i<bodies.length; i++){
        var b = bodies[i];
        if(b.id === id){
            return b;
        }
    }
    return false;
};

/**
 * Disable collision between two bodies
 * @method disableBodyCollision
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
World.prototype.disableBodyCollision = function(bodyA,bodyB){
    this.disabledBodyCollisionPairs.push(bodyA,bodyB);
};

/**
 * Enable collisions between the given two bodies
 * @method enableBodyCollision
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
World.prototype.enableBodyCollision = function(bodyA,bodyB){
    var pairs = this.disabledBodyCollisionPairs;
    for(var i=0; i<pairs.length; i+=2){
        if((pairs[i] === bodyA && pairs[i+1] === bodyB) || (pairs[i+1] === bodyA && pairs[i] === bodyB)){
            pairs.splice(i,2);
            return;
        }
    }
};

/**
 * Resets the World, removes all bodies, constraints and springs.
 *
 * @method clear
 */
World.prototype.clear = function(){

    this.time = 0;

    // Remove all solver equations
    if(this.solver && this.solver.equations.length){
        this.solver.removeAllEquations();
    }

    // Remove all constraints
    var cs = this.constraints;
    for(var i=cs.length-1; i>=0; i--){
        this.removeConstraint(cs[i]);
    }

    // Remove all bodies
    var bodies = this.bodies;
    for(var i=bodies.length-1; i>=0; i--){
        this.removeBody(bodies[i]);
    }

    // Remove all springs
    var springs = this.springs;
    for(var i=springs.length-1; i>=0; i--){
        this.removeSpring(springs[i]);
    }

    // Remove all contact materials
    var cms = this.contactMaterials;
    for(var i=cms.length-1; i>=0; i--){
        this.removeContactMaterial(cms[i]);
    }

    World.apply(this);
};

var hitTest_tmp1 = vec2.create(),
    hitTest_zero = vec2.fromValues(0,0),
    hitTest_tmp2 = vec2.fromValues(0,0);

/**
 * Test if a world point overlaps bodies
 * @method hitTest
 * @param  {Array}  worldPoint  Point to use for intersection tests
 * @param  {Array}  bodies      A list of objects to check for intersection
 * @param  {Number} precision   Used for matching against particles and lines. Adds some margin to these infinitesimal objects.
 * @return {Array}              Array of bodies that overlap the point
 * @todo Should use an api similar to the raycast function
 * @todo Should probably implement a .containsPoint method for all shapes. Would be more efficient
 * @todo Should use the broadphase
 */
World.prototype.hitTest = function(worldPoint,bodies,precision){
    precision = precision || 0;

    // Create a dummy particle body with a particle shape to test against the bodies
    var pb = new Body({ position:worldPoint }),
        ps = new Particle(),
        px = worldPoint,
        pa = 0,
        x = hitTest_tmp1,
        zero = hitTest_zero,
        tmp = hitTest_tmp2;
    pb.addShape(ps);

    var n = this.narrowphase,
        result = [];

    // Check bodies
    for(var i=0, N=bodies.length; i!==N; i++){
        var b = bodies[i];

        for(var j=0, NS=b.shapes.length; j!==NS; j++){
            var s = b.shapes[j];

            // Get shape world position + angle
            vec2.rotate(x, s.position, b.angle);
            vec2.add(x, x, b.position);
            var a = s.angle + b.angle;

            if( (s instanceof Circle    && n.circleParticle  (b,s,x,a,     pb,ps,px,pa, true)) ||
                (s instanceof Convex    && n.particleConvex  (pb,ps,px,pa, b,s,x,a,     true)) ||
                (s instanceof Plane     && n.particlePlane   (pb,ps,px,pa, b,s,x,a,     true)) ||
                (s instanceof Capsule   && n.particleCapsule (pb,ps,px,pa, b,s,x,a,     true)) ||
                (s instanceof Particle  && vec2.squaredLength(vec2.sub(tmp,x,worldPoint)) < precision*precision)
                ){
                result.push(b);
            }
        }
    }

    return result;
};

/**
 * Set the stiffness for all equations and contact materials.
 * @method setGlobalStiffness
 * @param {Number} stiffness
 */
World.prototype.setGlobalStiffness = function(stiffness){

    // Set for all constraints
    var constraints = this.constraints;
    for(var i=0; i !== constraints.length; i++){
        var c = constraints[i];
        for(var j=0; j !== c.equations.length; j++){
            var eq = c.equations[j];
            eq.stiffness = stiffness;
            eq.needsUpdate = true;
        }
    }

    // Set for all contact materials
    var contactMaterials = this.contactMaterials;
    for(var i=0; i !== contactMaterials.length; i++){
        var c = contactMaterials[i];
        c.stiffness = c.frictionStiffness = stiffness;
    }

    // Set for default contact material
    var c = this.defaultContactMaterial;
    c.stiffness = c.frictionStiffness = stiffness;
};

/**
 * Set the relaxation for all equations and contact materials.
 * @method setGlobalRelaxation
 * @param {Number} relaxation
 */
World.prototype.setGlobalRelaxation = function(relaxation){

    // Set for all constraints
    for(var i=0; i !== this.constraints.length; i++){
        var c = this.constraints[i];
        for(var j=0; j !== c.equations.length; j++){
            var eq = c.equations[j];
            eq.relaxation = relaxation;
            eq.needsUpdate = true;
        }
    }

    // Set for all contact materials
    for(var i=0; i !== this.contactMaterials.length; i++){
        var c = this.contactMaterials[i];
        c.relaxation = c.frictionRelaxation = relaxation;
    }

    // Set for default contact material
    var c = this.defaultContactMaterial;
    c.relaxation = c.frictionRelaxation = relaxation;
};

var tmpAABB = new AABB();
var tmpArray = [];

/**
 * Ray cast against all bodies in the world.
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @return {boolean} True if any body was hit.
 *
 * @example
 *     var ray = new Ray({
 *         mode: Ray.CLOSEST, // or ANY
 *         from: [0, 0],
 *         to: [10, 0],
 *     });
 *     var result = new RaycastResult();
 *     world.raycast(result, ray);
 *
 *     // Get the hit point
 *     var hitPoint = vec2.create();
 *     result.getHitPoint(hitPoint, ray);
 *     console.log('Hit point: ', hitPoint[0], hitPoint[1], ' at distance ' + result.getHitDistance(ray));
 *
 * @example
 *     var ray = new Ray({
 *         mode: Ray.ALL,
 *         from: [0, 0],
 *         to: [10, 0],
 *         callback: function(result){
 *
 *             // Print some info about the hit
 *             console.log('Hit body and shape: ', result.body, result.shape);
 *
 *             // Get the hit point
 *             var hitPoint = vec2.create();
 *             result.getHitPoint(hitPoint, ray);
 *             console.log('Hit point: ', hitPoint[0], hitPoint[1], ' at distance ' + result.getHitDistance(ray));
 *
 *             // If you are happy with the hits you got this far, you can stop the traversal here:
 *             result.stop();
 *         }
 *     });
 *     var result = new RaycastResult();
 *     world.raycast(result, ray);
 */
World.prototype.raycast = function(result, ray){

    // Get all bodies within the ray AABB
    ray.getAABB(tmpAABB);
    this.broadphase.aabbQuery(this, tmpAABB, tmpArray);
    ray.intersectBodies(result, tmpArray);
    tmpArray.length = 0;

    return result.hasHit();
};

},{"../../package.json":70,"../collision/AABB":71,"../collision/Broadphase":72,"../collision/Narrowphase":74,"../collision/Ray":75,"../collision/SAPBroadphase":77,"../constraints/Constraint":78,"../constraints/DistanceConstraint":79,"../constraints/GearConstraint":80,"../constraints/LockConstraint":81,"../constraints/PrismaticConstraint":82,"../constraints/RevoluteConstraint":83,"../events/EventEmitter":90,"../material/ContactMaterial":91,"../material/Material":92,"../math/vec2":94,"../objects/Body":95,"../objects/LinearSpring":96,"../objects/RotationalSpring":97,"../shapes/Capsule":102,"../shapes/Circle":103,"../shapes/Convex":104,"../shapes/Line":106,"../shapes/Particle":107,"../shapes/Plane":108,"../shapes/Shape":109,"../solver/GSSolver":110,"../solver/Solver":111,"../utils/OverlapKeeper":116,"../utils/Utils":121,"./IslandManager":123}],126:[function(require,module,exports){

module.exports = parse

/**
 * expected argument lengths
 * @type {Object}
 */

var length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}

/**
 * segment pattern
 * @type {RegExp}
 */

var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig

/**
 * parse an svg path data string. Generates an Array
 * of commands where each command is an Array of the
 * form `[command, arg1, arg2, ...]`
 *
 * @param {String} path
 * @return {Array}
 */

function parse(path) {
	var data = []
	path.replace(segment, function(_, command, args){
		var type = command.toLowerCase()
		args = parseValues(args)

		// overloaded moveTo
		if (type == 'm' && args.length > 2) {
			data.push([command].concat(args.splice(0, 2)))
			type = 'l'
			command = command == 'm' ? 'l' : 'L'
		}

		while (true) {
			if (args.length == length[type]) {
				args.unshift(command)
				return data.push(args)
			}
			if (args.length < length[type]) throw new Error('malformed path data')
			data.push([command].concat(args.splice(0, length[type])))
		}
	})
	return data
}

var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig

function parseValues(args) {
	var numbers = args.match(number)
	return numbers ? numbers.map(Number) : []
}

},{}],127:[function(require,module,exports){
"use strict";
var window = require("global/window")
var isFunction = require("is-function")
var parseHeaders = require("parse-headers")
var xtend = require("xtend")

module.exports = createXHR
createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
        options = initParams(uri, options, callback)
        options.method = method.toUpperCase()
        return _createXHR(options)
    }
})

function forEachArray(array, iterator) {
    for (var i = 0; i < array.length; i++) {
        iterator(array[i])
    }
}

function isEmpty(obj){
    for(var i in obj){
        if(obj.hasOwnProperty(i)) return false
    }
    return true
}

function initParams(uri, options, callback) {
    var params = uri

    if (isFunction(options)) {
        callback = options
        if (typeof uri === "string") {
            params = {uri:uri}
        }
    } else {
        params = xtend(options, {uri: uri})
    }

    params.callback = callback
    return params
}

function createXHR(uri, options, callback) {
    options = initParams(uri, options, callback)
    return _createXHR(options)
}

function _createXHR(options) {
    if(typeof options.callback === "undefined"){
        throw new Error("callback argument missing")
    }

    var called = false
    var callback = function cbOnce(err, response, body){
        if(!called){
            called = true
            options.callback(err, response, body)
        }
    }

    function readystatechange() {
        if (xhr.readyState === 4) {
            setTimeout(loadFunc, 0)
        }
    }

    function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = undefined

        if (xhr.response) {
            body = xhr.response
        } else {
            body = xhr.responseText || getXml(xhr)
        }

        if (isJson) {
            try {
                body = JSON.parse(body)
            } catch (e) {}
        }

        return body
    }

    function errorFunc(evt) {
        clearTimeout(timeoutTimer)
        if(!(evt instanceof Error)){
            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
        }
        evt.statusCode = 0
        return callback(evt, failureResponse)
    }

    // will load the data & process the response in a special response object
    function loadFunc() {
        if (aborted) return
        var status
        clearTimeout(timeoutTimer)
        if(options.useXDR && xhr.status===undefined) {
            //IE8 CORS GET successful response doesn't have a status field, but body is fine
            status = 200
        } else {
            status = (xhr.status === 1223 ? 204 : xhr.status)
        }
        var response = failureResponse
        var err = null

        if (status !== 0){
            response = {
                body: getBody(),
                statusCode: status,
                method: method,
                headers: {},
                url: uri,
                rawRequest: xhr
            }
            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                response.headers = parseHeaders(xhr.getAllResponseHeaders())
            }
        } else {
            err = new Error("Internal XMLHttpRequest Error")
        }
        return callback(err, response, response.body)
    }

    var xhr = options.xhr || null

    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new createXHR.XDomainRequest()
        }else{
            xhr = new createXHR.XMLHttpRequest()
        }
    }

    var key
    var aborted
    var uri = xhr.url = options.uri || options.url
    var method = xhr.method = options.method || "GET"
    var body = options.body || options.data
    var headers = xhr.headers = options.headers || {}
    var sync = !!options.sync
    var isJson = false
    var timeoutTimer
    var failureResponse = {
        body: undefined,
        headers: {},
        statusCode: 0,
        method: method,
        url: uri,
        rawRequest: xhr
    }

    if ("json" in options && options.json !== false) {
        isJson = true
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
        if (method !== "GET" && method !== "HEAD") {
            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
            body = JSON.stringify(options.json === true ? body : options.json)
        }
    }

    xhr.onreadystatechange = readystatechange
    xhr.onload = loadFunc
    xhr.onerror = errorFunc
    // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function () {
        // IE must die
    }
    xhr.onabort = function(){
        aborted = true;
    }
    xhr.ontimeout = errorFunc
    xhr.open(method, uri, !sync, options.username, options.password)
    //has to be after open
    if(!sync) {
        xhr.withCredentials = !!options.withCredentials
    }
    // Cannot set timeout with sync request
    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
    if (!sync && options.timeout > 0 ) {
        timeoutTimer = setTimeout(function(){
            if (aborted) return
            aborted = true//IE9 may still call readystatechange
            xhr.abort("timeout")
            var e = new Error("XMLHttpRequest timeout")
            e.code = "ETIMEDOUT"
            errorFunc(e)
        }, options.timeout )
    }

    if (xhr.setRequestHeader) {
        for(key in headers){
            if(headers.hasOwnProperty(key)){
                xhr.setRequestHeader(key, headers[key])
            }
        }
    } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object")
    }

    if ("responseType" in options) {
        xhr.responseType = options.responseType
    }

    if ("beforeSend" in options &&
        typeof options.beforeSend === "function"
    ) {
        options.beforeSend(xhr)
    }

    // Microsoft Edge browser sends "undefined" when send is called with undefined value.
    // XMLHttpRequest spec says to pass null as body to indicate no body
    // See https://github.com/naugtur/xhr/issues/100.
    xhr.send(body || null)

    return xhr


}

function getXml(xhr) {
    if (xhr.responseType === "document") {
        return xhr.responseXML
    }
    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
        return xhr.responseXML
    }

    return null
}

function noop() {}

},{"global/window":128,"is-function":129,"parse-headers":132,"xtend":133}],128:[function(require,module,exports){
(function (global){
if (typeof window !== "undefined") {
    module.exports = window;
} else if (typeof global !== "undefined") {
    module.exports = global;
} else if (typeof self !== "undefined"){
    module.exports = self;
} else {
    module.exports = {};
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],129:[function(require,module,exports){
module.exports = isFunction

var toString = Object.prototype.toString

function isFunction (fn) {
  var string = toString.call(fn)
  return string === '[object Function]' ||
    (typeof fn === 'function' && string !== '[object RegExp]') ||
    (typeof window !== 'undefined' &&
     // IE8 and below
     (fn === window.setTimeout ||
      fn === window.alert ||
      fn === window.confirm ||
      fn === window.prompt))
};

},{}],130:[function(require,module,exports){
var isFunction = require('is-function')

module.exports = forEach

var toString = Object.prototype.toString
var hasOwnProperty = Object.prototype.hasOwnProperty

function forEach(list, iterator, context) {
    if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
    }

    if (arguments.length < 3) {
        context = this
    }
    
    if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context)
    else if (typeof list === 'string')
        forEachString(list, iterator, context)
    else
        forEachObject(list, iterator, context)
}

function forEachArray(array, iterator, context) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            iterator.call(context, array[i], i, array)
        }
    }
}

function forEachString(string, iterator, context) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
    }
}

function forEachObject(object, iterator, context) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            iterator.call(context, object[k], k, object)
        }
    }
}

},{"is-function":129}],131:[function(require,module,exports){

exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};

},{}],132:[function(require,module,exports){
var trim = require('trim')
  , forEach = require('for-each')
  , isArray = function(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    }

module.exports = function (headers) {
  if (!headers)
    return {}

  var result = {}

  forEach(
      trim(headers).split('\n')
    , function (row) {
        var index = row.indexOf(':')
          , key = trim(row.slice(0, index)).toLowerCase()
          , value = trim(row.slice(index + 1))

        if (typeof(result[key]) === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [ result[key], value ]
        }
      }
  )

  return result
}
},{"for-each":130,"trim":131}],133:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],134:[function(require,module,exports){
function DOMParser(options){
	this.options = options ||{locator:{}};
	
}
DOMParser.prototype.parseFromString = function(source,mimeType){
	var options = this.options;
	var sax =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var entityMap = {'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"}
	if(locator){
		domBuilder.setDocumentLocator(locator)
	}
	
	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax.domBuilder = options.domBuilder || domBuilder;
	if(/\/x?html?$/.test(mimeType)){
		entityMap.nbsp = '\xa0';
		entityMap.copy = '\xa9';
		defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
	}
	defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
	if(source){
		sax.parse(source,defaultNSMap,entityMap);
	}else{
		sax.errorHandler.error("invalid doc source");
	}
	return domBuilder.doc;
}
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {}
	var isCallback = errorImpl instanceof Function;
	locator = locator||{}
	function build(key){
		var fn = errorImpl[key];
		if(!fn && isCallback){
			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
		}
		errorHandler[key] = fn && function(msg){
			fn('[xmldom '+key+']\t'+msg+_locator(locator));
		}||function(){};
	}
	build('warning');
	build('error');
	build('fatalError');
	return errorHandler;
}

//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler 
 * 
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ 
DOMHandler.prototype = {
	startDocument : function() {
    	this.doc = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.doc.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var doc = this.doc;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;
	    
		this.locator && position(this.locator,el)
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			this.locator &&position(attrs.getLocator(i),attr);
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr)
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement
		var tagName = current.tagName;
		this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.doc.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins)
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
		//console.log(chars)
		if(chars){
			if (this.cdata) {
				var charNode = this.doc.createCDATASection(chars);
			} else {
				var charNode = this.doc.createTextNode(chars);
			}
			if(this.currentElement){
				this.currentElement.appendChild(charNode);
			}else if(/^\s*$/.test(chars)){
				this.doc.appendChild(charNode);
				//process xml
			}
			this.locator && position(this.locator,charNode)
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.doc.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
	    var comm = this.doc.createComment(chars);
	    this.locator && position(this.locator,comm)
	    appendElement(this, comm);
	},
	
	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},
	
	startDTD:function(name, publicId, systemId) {
		var impl = this.doc.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt)
	        appendElement(this, dt);
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
	},
	error:function(error) {
		console.error('[xmldom error]\t'+error,_locator(this.locator));
	},
	fatalError:function(error) {
		console.error('[xmldom fatalError]\t'+error,_locator(this.locator));
	    throw error;
	}
}
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null}
})

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.doc.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

//if(typeof require == 'function'){
	var XMLReader = require('./sax').XMLReader;
	var DOMImplementation = exports.DOMImplementation = require('./dom').DOMImplementation;
	exports.XMLSerializer = require('./dom').XMLSerializer ;
	exports.DOMParser = DOMParser;
//}

},{"./dom":135,"./sax":136}],135:[function(require,module,exports){
/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

function copy(src,dest){
	for(var p in src){
		dest[p] = src[p];
	}
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(Object.create){
		var ppt = Object.create(Super.prototype)
		pt.__proto__ = ppt;
	}
	if(!(pt instanceof Super)){
		function t(){};
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknow Class:"+Class)
		}
		pt.constructor = Class
	}
}
var htmlns = 'http://www.w3.org/1999/xhtml' ;
// Node Types
var NodeType = {}
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {}
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);


function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if(message) this.message = this.message + ": " + message;
	return error;
};
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException)
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
};
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0, 
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */
	item: function(index) {
		return this[index] || null;
	},
	toString:function(isHTML,nodeFilter){
		for(var buf = [], i = 0;i<this.length;i++){
			serializeToString(this[i],buf,isHTML,nodeFilter);
		}
		return buf.join('');
	}
};
function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if(list._inc != inc){
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list,'length',ls.length);
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i];
}

_extends(LiveNodeList,NodeList);
/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */
function NamedNodeMap() {
};

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1
		while(i<lastIndex){
			list[i] = list[++i]
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		//console.log()
		var i = this.length;
		while(i--){
			var attr = this[i];
			//console.log(attr.nodeName,key)
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
		
		
	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
	
	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var i = this.length;
		while(i--){
			var node = this[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};
/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */
function DOMImplementation(/* Object */ features) {
	this._features = {};
	if (features) {
		for (var feature in features) {
			 this._features = features[feature];
		}
	}
};

DOMImplementation.prototype = {
	hasFeature: function(/* string */ feature, /* string */ version) {
		var versions = this._features[feature.toLowerCase()];
		if (versions && (!version || version in versions)) {
			return true;
		} else {
			return false;
		}
	},
	// Introduced in DOM Level 2:
	createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype;
		if(doctype){
			doc.appendChild(doctype);
		}
		if(qualifiedName){
			var root = doc.createElementNS(namespaceURI,qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	// Introduced in DOM Level 2:
	createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId;
		node.systemId = systemId;
		// Introduced in DOM Level 2:
		//readonly attribute DOMString        internalSubset;
		
		//TODO:..
		//  readonly attribute NamedNodeMap     entities;
		//  readonly attribute NamedNodeMap     notations;
		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
};

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises 
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises 
		this.insertBefore(newChild,oldChild);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
    				if(map[n] == namespaceURI){
    					return n;
    				}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(prefix in map){
    				return map[prefix] ;
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
}
function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
	}
}
function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:'']
	}
}
function _onUpdateChild(doc,el,newChild){
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if(newChild){
			cs[cs.length++] = newChild;
		}else{
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while(child){
				cs[i++] = child;
				child =child.nextSibling;
			}
			cs.length = i;
		}
	}
}

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode,child){
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if(previous){
		previous.nextSibling = next;
	}else{
		parentNode.firstChild = next
	}
	if(next){
		next.previousSibling = previous;
	}else{
		parentNode.lastChild = previous;
	}
	_onUpdateChild(parentNode.ownerDocument,parentNode);
	return child;
}
/**
 * preformance key(refChild == null)
 */
function _insertBefore(parentNode,newChild,nextChild){
	var cp = newChild.parentNode;
	if(cp){
		cp.removeChild(newChild);//remove and update
	}
	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = newChild.firstChild;
		if (newFirst == null) {
			return newChild;
		}
		var newLast = newChild.lastChild;
	}else{
		newFirst = newLast = newChild;
	}
	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = nextChild;
	
	
	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parentNode.firstChild = newFirst;
	}
	if(nextChild == null){
		parentNode.lastChild = newLast;
	}else{
		nextChild.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parentNode;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
	//console.log(parentNode.lastChild.nextSibling == null)
	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
		newChild.firstChild = newChild.lastChild = null;
	}
	return newChild;
}
function _appendSingleChild(parentNode,newChild){
	var cp = newChild.parentNode;
	if(cp){
		var pre = parentNode.lastChild;
		cp.removeChild(newChild);//remove and update
		var pre = parentNode.lastChild;
	}
	var pre = parentNode.lastChild;
	newChild.parentNode = parentNode;
	newChild.previousSibling = pre;
	newChild.nextSibling = null;
	if(pre){
		pre.nextSibling = newChild;
	}else{
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
	return newChild;
	//console.log("__aa",parentNode.lastChild.nextSibling == null)
}
Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	doctype :  null,
	documentElement :  null,
	_inc : 1,
	
	insertBefore :  function(newChild, refChild){//raises 
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
			this.documentElement = newChild;
		}
		
		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == ELEMENT_NODE){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		})
		return rtv;
	},
	
	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue= node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
};
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name)
		attr && this.removeAttributeNode(attr);
	},
	
	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},
	
	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},
	
	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;
			
		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
};
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
};
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);
	
	},
	appendChild:function(newChild){
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
}
_extends(CharacterData,Node);
function Text() {
};
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
}
_extends(Text,CharacterData);
function Comment() {
};
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
}
_extends(Comment,CharacterData);

function CDATASection() {
};
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
}
_extends(CDATASection,CharacterData);


function DocumentType() {
};
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
};
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
};
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
};
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
};
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer(){}
XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
	return nodeSerializeToString.call(node,isHtml,nodeFilter);
}
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml,nodeFilter){
	var buf = [];
	var refNode = this.nodeType == 9?this.documentElement:this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;
	
	if(uri && prefix == null){
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if(prefix == null){
			//isHTML = true;
			var visibleNamespaces=[
			{namespace:uri,prefix:null}
			//{namespace:uri,prefix:''}
			]
		}
	}
	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}
function needNamespaceDefine(node,isHTML, visibleNamespaces) {
	var prefix = node.prefix||'';
	var uri = node.namespaceURI;
	if (!prefix && !uri){
		return false;
	}
	if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" 
		|| uri == 'http://www.w3.org/2000/xmlns/'){
		return false;
	}
	
	var i = visibleNamespaces.length 
	//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
		if (ns.prefix == prefix){
			return ns.namespace != uri;
		}
	}
	//console.log(isHTML,uri,prefix=='')
	//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
	//	return false;
	//}
	//node.flag = '11111'
	//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
	return true;
}
function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
	if(nodeFilter){
		node = nodeFilter(node);
		if(node){
			if(typeof node == 'string'){
				buf.push(node);
				return;
			}
		}else{
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}
	switch(node.nodeType){
	case ELEMENT_NODE:
		if (!visibleNamespaces) visibleNamespaces = [];
		var startVisibleNamespaces = visibleNamespaces.length;
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;
		
		isHTML =  (htmlns === node.namespaceURI) ||isHTML 
		buf.push('<',nodeName);
		
		
		
		for(var i=0;i<len;i++){
			// add namespaces for attributes
			var attr = attrs.item(i);
			if (attr.prefix == 'xmlns') {
				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
			}else if(attr.nodeName == 'xmlns'){
				visibleNamespaces.push({ prefix: '', namespace: attr.value });
			}
		}
		for(var i=0;i<len;i++){
			var attr = attrs.item(i);
			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
				var prefix = attr.prefix||'';
				var uri = attr.namespaceURI;
				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
				buf.push(ns, '="' , uri , '"');
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
		}
		// add namespace for current node		
		if (needNamespaceDefine(node,isHTML, visibleNamespaces)) {
			var prefix = node.prefix||'';
			var uri = node.namespaceURI;
			var ns = prefix ? ' xmlns:' + prefix : " xmlns";
			buf.push(ns, '="' , uri , '"');
			visibleNamespaces.push({ prefix: prefix, namespace:uri });
		}
		
		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				while(child){
					if(child.data){
						buf.push(child.data);
					}else{
						serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					}
					child = child.nextSibling;
				}
			}else
			{
				while(child){
					serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					child = child.nextSibling;
				}
			}
			buf.push('</',nodeName,'>');
		}else{
			buf.push('/>');
		}
		// remove added visible namespaces
		//visibleNamespaces.length = startVisibleNamespaces;
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		return buf.push(' ',node.name,'="',node.value.replace(/[<&"]/g,_xmlEncoder),'"');
	case TEXT_NODE:
		return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC "',pubid);
			if (sysid && sysid!='.') {
				buf.push( '" "',sysid);
			}
			buf.push('">');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM "',sysid,'">');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for(var n in node){
		var v = node[n];
		if(typeof v != 'object' ){
			if(v != node2[n]){
				node2[n] = v;
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});
		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},
			set:function(data){
				switch(this.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					while(this.firstChild){
						this.removeChild(this.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;
				default:
					//TODO:
					this.data = data;
					this.value = data;
					this.nodeValue = data;
				}
			}
		})
		
		function getTextContent(node){
			switch(node.nodeType){
			case ELEMENT_NODE:
			case DOCUMENT_FRAGMENT_NODE:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}
		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value
		}
	}
}catch(e){//ie8
}

//if(typeof require == 'function'){
	exports.DOMImplementation = DOMImplementation;
	exports.XMLSerializer = XMLSerializer;
//}

},{}],136:[function(require,module,exports){
//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring 
var S_ATTR_SPACE=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
var S_ATTR_END = 5;//attr value end and no space(quot end)
var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7;//closed el<el />

function XMLReader(){
	
}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {})
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
}
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if(k in entityMap){
			return entityMap[k]; 
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		if(end>start){
			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
			locator&&position(start);
			domBuilder.characters(xt,0,end-start);
			start = end
		}
	}
	function position(p,m){
		while(p>=lineEnd && (m = linePattern.exec(source))){
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p-lineStart+1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g
	var locator = domBuilder.locator;
	
	var parseStack = [{currentNSMap:defaultNSMapCopy}]
	var closeMap = {};
	var start = 0;
	while(true){
		try{
			var tagStart = source.indexOf('<',start);
			if(tagStart<0){
				if(!source.substr(start).match(/^\s*$/)){
					var doc = domBuilder.doc;
	    			var text = doc.createTextNode(source.substr(start));
	    			doc.appendChild(text);
	    			domBuilder.currentElement = text;
				}
				return;
			}
			if(tagStart>start){
				appendText(tagStart);
			}
			switch(source.charAt(tagStart+1)){
			case '/':
				var end = source.indexOf('>',tagStart+3);
				var tagName = source.substring(tagStart+2,end);
				var config = parseStack.pop();
				if(end<0){
					
	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
	        		//console.error('#@@@@@@'+tagName)
	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
	        		end = tagStart+1+tagName.length;
	        	}else if(tagName.match(/\s</)){
	        		tagName = tagName.replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
	        		end = tagStart+1+tagName.length;
				}
				//console.error(parseStack.length,parseStack)
				//console.error(config);
				var localNSMap = config.localNSMap;
				var endMatch = config.tagName == tagName;
				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()
		        if(endIgnoreCaseMach){
		        	domBuilder.endElement(config.uri,config.localName,tagName);
					if(localNSMap){
						for(var prefix in localNSMap){
							domBuilder.endPrefixMapping(prefix) ;
						}
					}
					if(!endMatch){
		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
					}
		        }else{
		        	parseStack.push(config)
		        }
				
				end++;
				break;
				// end elment
			case '?':// <?...?>
				locator&&position(tagStart);
				end = parseInstruction(source,tagStart,domBuilder);
				break;
			case '!':// <!doctype,<![CDATA,<!--
				locator&&position(tagStart);
				end = parseDCC(source,tagStart,domBuilder,errorHandler);
				break;
			default:
				locator&&position(tagStart);
				var el = new ElementAttributes();
				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
				//elStartEnd
				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
				var len = el.length;
				
				
				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				if(locator && len){
					var locator2 = copyLocator(locator,{});
					//try{//attribute position fixed
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.locator = copyLocator(locator,{});
					}
					//}catch(e){console.error('@@@@@'+e)}
					domBuilder.locator = locator2
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
					domBuilder.locator = locator;
				}else{
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
				}
				
				
				
				if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
				}else{
					end++;
				}
			}
		}catch(e){
			errorHandler.error('element parse error: '+e)
			//errorHandler.error('element parse error: '+e);
			end = -1;
			//throw e;
		}
		if(end>start){
			start = end;
		}else{
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart,start)+1);
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_SPACE){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName');
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				){//equal
				if(s === S_ATTR){
					errorHandler.warning('attribute value must after "="')
					attrName = source.slice(start,p)
				}
				start = p+1;
				p = source.indexOf(c,start)
				if(p>0){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					el.add(attrName,value,start-1);
					s = S_ATTR_END;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_ATTR_NOQUOT_VALUE){
				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
				//console.log(attrName,value,start,p)
				el.add(attrName,value,start);
				//console.dir(el)
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_ATTR_END
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="');
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				s =S_TAG_CLOSE;
				el.closed = true;
			case S_ATTR_NOQUOT_VALUE:
			case S_ATTR:
			case S_ATTR_SPACE:
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')")
			}
			break;
		case ''://end document
			//throw new Error('unexpected end of input')
			errorHandler.error('unexpected end of input');
			if(s == S_TAG){
				el.setTagName(source.slice(start,p));
			}
			return p;
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				break;//normal
			case S_ATTR_NOQUOT_VALUE://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1)
				}
			case S_ATTR_SPACE:
				if(s === S_ATTR_SPACE){
					value = attrName;
				}
				if(s == S_ATTR_NOQUOT_VALUE){
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start)
				}else{
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
					}
					el.add(value,value,start)
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_TAG_SPACE;
					break;
				case S_ATTR:
					attrName = source.slice(start,p)
					s = S_ATTR_SPACE;
					break;
				case S_ATTR_NOQUOT_VALUE:
					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value,start)
				case S_ATTR_END:
					s = S_TAG_SPACE;
					break;
				//case S_TAG_SPACE:
				//case S_EQ:
				//case S_ATTR_SPACE:
				//	void();break;
				//case S_TAG_CLOSE:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_ATTR_NOQUOT_VALUE:void();break;
				case S_ATTR_SPACE:
					var tagName =  el.tagName;
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!')
					}
					el.add(attrName,attrName,start);
					start = p;
					s = S_ATTR;
					break;
				case S_ATTR_END:
					errorHandler.warning('attribute space is required"'+attrName+'"!!')
				case S_TAG_SPACE:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_ATTR_NOQUOT_VALUE;
					start = p;
					break;
				case S_TAG_CLOSE:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}//end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el,domBuilder,currentNSMap){
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName
		}else{
			localName = qName;
			prefix = null
			nsPrefix = qName === 'xmlns' && ''
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute 
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {}
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={})
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = 'http://www.w3.org/2000/xmlns/'
			domBuilder.startPrefixMapping(nsPrefix, value) 
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = 'http://www.w3.org/XML/1998/namespace';
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix || '']
				
				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for(prefix in localNSMap){
				domBuilder.endPrefixMapping(prefix) 
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}
			
		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos =  source.lastIndexOf('</'+tagName+'>')
		if(pos<elStartEnd){//忘记闭合
			pos = source.lastIndexOf('</'+tagName)
		}
		closeMap[tagName] =pos
	}
	return pos<elStartEnd;
	//} 
}
function _copy(source,target){
	for(var n in source){target[n] = source[n]}
}
function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2)
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA() 
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
			var sysid = len>4 && matchs[4][0];
			var lastMatch = matchs[len-1]
			domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
					sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
			domBuilder.endDTD();
			
			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

/**
 * @param source
 */
function ElementAttributes(source){
	
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName
	},
	add:function(qName,value,offset){
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this[this.length++] = {qName:qName,value:value,offset:offset}
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getLocator:function(i){return this[i].locator},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//			
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
}




function _set_proto_(thiz,parent){
	thiz.__proto__ = parent;
	return thiz;
}
if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
	_set_proto_ = function(thiz,parent){
		function p(){};
		p.prototype = parent;
		p = new p();
		for(parent in thiz){
			p[parent] = thiz[parent];
		}
		return p;
	}
}

function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1])return buf;
	}
}

exports.XMLReader = XMLReader;


},{}],137:[function(require,module,exports){
module.exports = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="1207.561px" height="858.898px" viewBox="0 0 1207.561 858.898" enable-background="new 0 0 1207.561 858.898"
	 xml:space="preserve">
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M0,137.572c7.053,0.271,13.971-1.077,13.971-1.077
	c8.491-1.573,14.689-4.089,14.689-4.089c-2.785,10.871,2.831,32.84,2.831,32.84c2.516,16.173,8.266,29.919,8.266,29.919
	c3.145,9.523,4.402,18.867,4.402,18.867c1.259,6.92-0.539,13.299-0.539,13.299c-1.977,6.737-4.941,21.473-4.941,21.473
	c-2.516,14.466-3.324,27.404-3.324,27.404c-0.629,11.949,2.426,38.813,2.426,38.813c0.181,5.571-1.617,7.457-1.617,7.457
	c-0.538,2.157-10.062,17.071-10.062,17.071c-4.403,8.626-11.95,23.181-11.95,23.181c-2.965,5.571-1.797,9.344-1.797,9.344
	c0.719,5.841,8.805,6.29,8.805,6.29c4.224,0.449,7.278-2.605,7.278-2.605c1.617,2.695,7.457,3.863,7.457,3.863
	c4.043,0.359,4.942-1.977,4.942-1.977c1.258,4.133,7.637,3.863,7.637,3.863c5.031-0.09,6.199-2.066,6.199-2.066
	c0.898,2.516,6.469,3.234,6.469,3.234c4.312,0,6.379-2.965,6.379-2.965c0.989,1.977,5.301,1.797,5.301,1.797
	c6.11-0.629,9.345-9.254,9.345-9.254c2.875-7.817,1.798-25.696,1.798-25.696c0-4.403-2.067-18.419-2.067-18.419
	c-0.809-9.883,3.414-21.564,3.414-21.564c2.605-7.456,13.208-37.825,13.208-37.825c7.816-24.797,14.105-54.357,14.105-54.357
	c1.349-11.411,1.527-16.892,1.527-16.892c0.629-21.294-1.258-47.889-1.258-47.889c-1.257-20.035-11.949-70.082-11.949-70.082
	c-4.223-18.777-10.423-66.127-10.423-66.127c-2.336-23.361-0.808-49.417-0.808-49.417c0.179-20.934,2.246-35.849,2.246-35.849
	c0.987,5.75,7.727,13.567,7.727,13.567c4.852,5.84,12.489,11.411,12.489,11.411c2.875,2.516,9.793,9.883,9.793,9.883
	c0.18,4.852,2.605,17.071,2.605,17.071c1.617,6.829,7.698,20.076,7.698,20.076c5.633,13.157,17.369,33.024,17.369,33.024
	c1.438,1.977,1.078,6.109,1.078,6.109c-0.09,7.728-5.48,16.442-5.48,16.442c-5.032,6.649-7.188,15.723-7.188,15.723
	c-0.629,2.875,0,8.626,0,8.626c1.168,11.591-0.09,21.743-0.09,21.743c-0.81,5.66,1.707,6.918,1.707,6.918
	c2.516,0.898,6.648-0.27,6.648-0.27c5.301-1.527,6.289-10.513,6.289-10.513c0.27-3.684,0.629-10.961,0.629-10.961
	c0.18-5.211,5.66-5.211,5.66-5.211c4.493-0.27,6.739,3.595,6.739,3.595c2.965,5.569,3.323,13.926,3.323,13.926
	c0.181,10.782-2.694,18.509-2.694,18.509c-3.774,10.152-3.414,12.578-3.414,12.578c0.449,7.817,9.164,7.008,9.164,7.008
	c7.188,0,9.539-6.904,9.539-6.904c1.309,4.364,7.964,4.396,7.964,4.396c6.981-0.218,8.728-6.546,8.728-6.546
	c4.146,1.2,7.418-2.072,7.418-2.072c4.582-4.255,4.909-13.746,4.909-13.746c1.528,0.109,3.819-1.527,3.819-1.527
	c3.817-3.273,4.363-13.092,4.363-13.092c1.419-7.091,0-19.637,0-19.637c-0.546-4.909-8.183-23.128-8.183-23.128
	c-3.817-9.055-8.945-24.546-8.945-24.546c-1.637-7.201-4.255-18.438-4.255-18.438c-4.909-22.146-13.854-51.71-13.854-51.71
	c-5.346-16.365-18.328-42.984-18.328-42.984c-10.255-17.891-24.874-33.055-24.874-33.055
	c-26.073-25.856-46.038-32.074-46.038-32.074c-15.382-6.218-33.164-11.237-33.164-11.237c-6.655-2.727-6.873-8.073-6.873-8.073
	l0.109-6c-0.218-2.618,0.108-4.255,0.108-4.255c6.327-6.436,14.946-18.873,14.946-18.873c5.454-10.364,8.509-21.164,8.509-21.164
	c3.056,1.091,6.765,0.545,6.765,0.545c4.69-0.327,7.527-6.655,7.527-6.655c1.854-5.127,4.179-17.932,4.179-17.932
	c1.913-6.885,3.442-16.448,3.442-16.448c1.106-7.403-2.678-12.624-2.678-12.624c-3.089-5.798-8.798-5.738-8.798-5.738
	c4.208-17.979,0-34.046,0-34.046c-3.826-21.804-21.179-41.696-21.179-41.696C42.549-384,0-382.669,0-382.669
	s-42.549-1.33-67.17,30.803c0,0-17.353,19.892-21.179,41.696c0,0-4.208,16.067,0,34.046c0,0-5.709-0.06-8.798,5.738
	c0,0-3.784,5.221-2.678,12.624c0,0,1.53,9.563,3.443,16.448c0,0,2.324,12.805,4.178,17.932c0,0,2.837,6.328,7.528,6.655
	c0,0,3.709,0.546,6.764-0.545c0,0,3.054,10.8,8.509,21.164c0,0,8.619,12.437,14.946,18.873c0,0,0.327,1.637,0.109,4.255l0.109,6
	c0,0-0.218,5.346-6.873,8.073c0,0-17.782,5.019-33.164,11.237c0,0-19.965,6.218-46.038,32.074c0,0-14.619,15.164-24.874,33.055
	c0,0-12.982,26.619-18.328,42.984c0,0-8.946,29.564-13.855,51.71c0,0-2.618,11.236-4.254,18.438c0,0-5.128,15.491-8.946,24.546
	c0,0-7.637,18.219-8.182,23.128c0,0-1.419,12.546,0,19.637c0,0,0.545,9.818,4.363,13.092c0,0,2.291,1.637,3.819,1.527
	c0,0,0.327,9.491,4.909,13.746c0,0,3.273,3.272,7.418,2.072c0,0,1.746,6.328,8.728,6.546c0,0,6.655-0.032,7.964-4.396
	c0,0,2.351,6.904,9.539,6.904c0,0,8.715,0.81,9.164-7.008c0,0,0.36-2.426-3.414-12.578c0,0-2.875-7.727-2.695-18.509
	c0,0,0.359-8.356,3.324-13.926c0,0,2.246-3.864,6.739-3.595c0,0,5.48,0,5.66,5.211c0,0,0.359,7.277,0.629,10.961
	c0,0,0.988,8.985,6.289,10.513c0,0,4.133,1.168,6.649,0.27c0,0,2.516-1.258,1.707-6.918c0,0-1.258-10.152-0.09-21.743
	c0,0,0.629-5.751,0-8.626c0,0-2.156-9.073-7.188-15.723c0,0-5.39-8.715-5.48-16.442c0,0-0.36-4.133,1.078-6.109
	c0,0,11.736-19.867,17.369-33.024c0,0,6.081-13.247,7.698-20.076c0,0,2.426-12.219,2.606-17.071c0,0,6.918-7.367,9.793-9.883
	c0,0,7.637-5.571,12.489-11.411c0,0,6.739-7.817,7.727-13.567c0,0,2.067,14.915,2.246,35.849c0,0,1.528,26.056-0.808,49.417
	c0,0-6.2,47.35-10.423,66.127c0,0-10.692,50.047-11.949,70.082c0,0-1.887,26.595-1.258,47.889c0,0,0.179,5.48,1.527,16.892
	c0,0,6.289,29.561,14.106,54.357c0,0,10.602,30.369,13.208,37.825c0,0,4.223,11.682,3.414,21.564c0,0-2.067,14.016-2.067,18.419
	c0,0-1.078,17.879,1.797,25.696c0,0,3.235,8.625,9.345,9.254c0,0,4.312,0.18,5.301-1.797c0,0,2.066,2.965,6.379,2.965
	c0,0,5.57-0.719,6.469-3.234c0,0,1.168,1.977,6.199,2.066c0,0,6.379,0.27,7.637-3.863c0,0,0.899,2.336,4.942,1.977
	c0,0,5.84-1.168,7.457-3.863c0,0,3.055,3.055,7.278,2.605c0,0,8.086-0.449,8.805-6.29c0,0,1.168-3.772-1.797-9.344
	c0,0-7.547-14.555-11.95-23.181c0,0-9.524-14.914-10.063-17.071c0,0-1.797-1.886-1.617-7.457c0,0,3.055-26.864,2.426-38.813
	c0,0-0.809-12.938-3.324-27.404c0,0-2.965-14.735-4.942-21.473c0,0-1.797-6.379-0.539-13.299c0,0,1.258-9.344,4.402-18.867
	c0,0,5.751-13.746,8.266-29.919c0,0,5.616-21.969,2.831-32.84c0,0,6.199,2.516,14.69,4.089C-13.971,136.495-7.053,137.843,0,137.572
	z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-86.245-305.93c0,0-4.088,15.844,0,33.309
	c0,0-5.546,0.017-8.547,5.649c0,0-3.676,5.162-2.601,12.353c0,0,1.486,9.405,3.344,16.094c0,0,2.258,12.565,4.059,17.546
	c0,0,2.756,6.218,7.313,6.536c0,0,3.603,0.576,6.57-0.484c0,0,2.968,10.649,8.267,20.717c0,0,8.372,12.247,14.519,18.5
	c0,0,0.318,1.618,0.106,4.161l0.105,5.869c0,0-0.211,5.269-6.676,7.919c0,0-17.274,5.116-32.217,11.157
	c0,0-19.394,6.431-44.723,31.548c0,0-14.201,15.017-24.163,32.398c0,0-12.611,26.181-17.804,42.078c0,0-8.69,29.09-13.459,50.603
	c0,0-2.544,11.046-4.133,18.04c0,0-4.981,15.229-8.69,24.025c0,0-7.419,17.867-7.949,22.637c0,0-1.377,12.323,0,19.212
	c0,0,0.53,9.635,4.239,12.813c0,0,2.226,1.617,3.71,1.511c0,0,0.317,9.322,4.769,13.456c0,0,3.179,3.234,7.206,2.068
	c0,0,1.696,6.226,8.478,6.438c0,0,6.465,0.034,7.737-4.204c0,0,2.284,6.793,9.266,6.793c0,0,8.466,0.875,8.903-6.719
	c0,0,0.349-2.267-3.317-12.13c0,0-2.793-7.376-2.618-17.85c0,0,0.349-8.018,3.229-13.429c0,0,2.182-3.699,6.546-3.438
	c0,0,5.324,0.06,5.499,5.121c0,0,0.349,7.146,0.611,10.723c0,0,0.96,8.817,6.109,10.302c0,0,4.015,1.181,6.459,0.308
	c0,0,2.444-1.171,1.658-6.67c0,0-1.222-9.712-0.087-20.971c0,0,0.611-5.527,0-8.32c0,0-2.095-8.695-6.982-15.154
	c0,0-5.237-8.345-5.325-15.851c0,0-0.349-3.972,1.048-5.894c0,0,11.401-19.04,16.872-31.82c0,0,5.908-12.72,7.479-19.354
	c0,0,2.357-11.751,2.531-16.464c0,0,6.721-7.061,9.514-9.505c0,0,7.419-5.294,12.132-10.967c0,0,6.546-7.485,7.506-13.071
	c0,0,2.007,14.739,2.182,35.076c0,0,1.484,25.656-0.786,48.349c0,0-6.022,46.465-10.124,64.707c0,0-10.387,49.111-11.608,68.575
	c0,0-1.833,26.171-1.222,46.857c0,0,0.174,5.441,1.483,16.525c0,0,6.11,29.108,13.703,53.197c0,0,10.3,29.781,12.831,37.025
	c0,0,4.102,11.5,3.316,21.101c0,0-2.007,13.746-2.007,18.023c0,0-1.047,17.549,1.745,25.143c0,0,3.158,8.378,9.093,8.989
	c0,0,4.195,0.175,5.155-1.745c0,0,2.015,2.88,6.204,2.88c0,0,5.419-0.698,6.292-3.142c0,0,1.141,1.92,6.029,2.007
	c0,0,6.206,0.262,7.428-3.753c0,0,0.878,2.27,4.806,1.921c0,0,5.682-1.136,7.253-3.754c0,0,2.976,2.968,7.078,2.531
	c0,0,7.868-0.437,8.566-6.109c0,0,1.145-3.666-1.735-9.077c0,0-7.302-14.14-11.579-22.52c0,0-9.229-14.487-9.753-16.582
	c0,0-1.738-1.834-1.563-7.244c0,0,3.013-26.098,2.402-37.705c0,0-0.754-12.569-3.198-26.621c0,0-2.855-14.314-4.775-20.86
	c0,0-1.731-6.197-0.509-12.917c0,0,1.244-9.078,4.299-18.329c0,0,5.623-13.354,8.067-29.064c0,0,5.493-21.34,2.787-31.901
	c0,0,6.04,2.444,14.288,3.971c0,0,6.737,1.311,13.589,1.049c6.852,0.262,13.587-1.049,13.587-1.049
	c8.248-1.526,14.288-3.971,14.288-3.971c-2.706,10.562,2.789,31.901,2.789,31.901c2.444,15.711,8.067,29.064,8.067,29.064
	c3.055,9.251,4.299,18.329,4.299,18.329c1.222,6.72-0.507,12.917-0.507,12.917c-1.921,6.546-4.774,20.86-4.774,20.86
	c-2.443,14.052-3.196,26.621-3.196,26.621c-0.611,11.607,2.403,37.705,2.403,37.705c0.175,5.41-1.562,7.244-1.562,7.244
	c-0.524,2.095-9.751,16.582-9.751,16.582c-4.277,8.38-11.576,22.52-11.576,22.52c-2.881,5.411-1.735,9.077-1.735,9.077
	c0.699,5.673,8.568,6.109,8.568,6.109c4.102,0.437,7.079-2.531,7.079-2.531c1.571,2.618,7.255,3.754,7.255,3.754
	c3.928,0.349,4.807-1.921,4.807-1.921c1.223,4.015,7.431,3.753,7.431,3.753c4.888-0.087,6.029-2.007,6.029-2.007
	c0.873,2.443,6.294,3.142,6.294,3.142c4.19,0,6.207-2.88,6.207-2.88c0.96,1.92,5.157,1.745,5.157,1.745
	c5.936-0.611,9.094-8.989,9.094-8.989c2.793-7.594,1.746-25.141,1.746-25.141c0-4.276-2.008-18.02-2.008-18.02
	c-0.785-9.601,3.317-21.099,3.317-21.099c2.53-7.244,12.83-37.021,12.83-37.021c7.594-24.09,13.703-53.191,13.703-53.191
	c1.309-11.085,1.483-16.525,1.483-16.525c0.611-20.686-1.222-46.852-1.222-46.852c-1.223-19.464-11.608-68.57-11.608-68.57
	C94.378,61.58,88.355,15.121,88.355,15.121C86.086-7.572,87.57-33.225,87.57-33.225c0.175-20.337,2.183-35.073,2.183-35.073
	c0.96,5.585,7.506,13.071,7.506,13.071c4.713,5.673,12.132,10.968,12.132,10.968c2.793,2.444,9.513,9.506,9.513,9.506
	c0.176,4.713,2.532,16.464,2.532,16.464c1.571,6.634,7.479,19.354,7.479,19.354c5.472,12.782,16.873,31.822,16.873,31.822
	c1.396,1.921,1.047,5.894,1.047,5.894c-0.087,7.506-5.324,15.852-5.324,15.852c-4.888,6.459-6.982,15.155-6.982,15.155
	c-0.61,2.792,0,8.32,0,8.32c1.135,11.259-0.088,20.972-0.088,20.972c-0.785,5.498,1.659,6.67,1.659,6.67
	c2.443,0.872,6.458-0.308,6.458-0.308c5.15-1.484,6.11-10.3,6.11-10.3c0.262-3.579,0.61-10.724,0.61-10.724
	c0.175-5.062,5.499-5.121,5.499-5.121c4.364-0.262,6.546,3.438,6.546,3.438c2.88,5.411,3.229,13.429,3.229,13.429
	c0.175,10.474-2.618,17.851-2.618,17.851c-3.666,9.862-3.317,12.13-3.317,12.13c0.437,7.593,8.903,6.718,8.903,6.718
	c6.982,0,9.267-6.793,9.267-6.793c1.271,4.239,7.735,4.204,7.735,4.204c6.783-0.212,8.479-6.439,8.479-6.439
	c4.026,1.166,7.206-2.068,7.206-2.068c4.45-4.134,4.769-13.456,4.769-13.456c1.484,0.105,3.709-1.512,3.709-1.512
	c3.709-3.179,4.239-12.814,4.239-12.814c1.378-6.889,0-19.212,0-19.212c-0.53-4.77-7.948-22.639-7.948-22.639
	c-3.709-8.796-8.689-24.026-8.689-24.026c-1.591-6.994-4.134-18.041-4.134-18.041c-4.769-21.513-13.459-50.606-13.459-50.606
	c-5.192-15.897-17.805-42.082-17.805-42.082c-9.962-17.38-24.163-32.4-24.163-32.4c-25.328-25.117-44.722-31.553-44.722-31.553
	c-14.943-6.041-32.217-11.16-32.217-11.16c-6.466-2.65-6.678-7.92-6.678-7.92l0.106-5.87c-0.212-2.543,0.105-4.162,0.105-4.162
	c6.147-6.253,14.52-18.502,14.52-18.502c5.299-10.068,8.266-20.72,8.266-20.72c2.968,1.06,6.571,0.483,6.571,0.483
	c4.557-0.318,7.312-6.537,7.312-6.537c1.803-4.981,4.06-17.549,4.06-17.549c1.857-6.689,3.345-16.097,3.345-16.097
	c1.075-7.191-2.602-12.355-2.602-12.355c-3-5.632-8.546-5.651-8.546-5.651c4.087-17.466,0-33.314,0-33.314
	c-3.717-21.181-20.735-40.505-20.735-40.505C41.593-377.65,0-376.358,0-376.358s-41.594-1.292-65.511,29.923
	C-65.511-346.435-82.529-327.111-86.245-305.93z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-84.141-301.689c0,0-3.967,15.621,0,32.573
	c0,0-5.383,0.093-8.296,5.56c0,0-3.567,5.102-2.524,12.082c0,0,1.442,9.247,3.246,15.739c0,0,2.191,12.325,3.939,17.16
	c0,0,2.675,6.108,7.098,6.417c0,0,3.497,0.607,6.377-0.422c0,0,2.88,10.497,8.023,20.269c0,0,8.126,12.058,14.092,18.127
	c0,0,0.309,1.599,0.103,4.068l0.103,5.738c0,0-0.206,5.192-6.48,7.763c0,0-16.767,5.215-31.27,11.078
	c0,0-18.823,6.645-43.407,31.023c0,0-13.783,14.87-23.452,31.739c0,0-12.241,25.744-17.281,41.173c0,0-8.434,28.615-13.063,49.496
	c0,0-2.469,10.854-4.012,17.643c0,0-4.834,14.967-8.434,23.505c0,0-7.201,17.517-7.715,22.146c0,0-1.337,12.101,0,18.787
	c0,0,0.514,9.449,4.115,12.536c0,0,2.16,1.598,3.6,1.494c0,0,0.308,9.153,4.628,13.165c0,0,3.086,3.195,6.995,2.064
	c0,0,1.646,6.125,8.229,6.331c0,0,6.274,0.102,7.509-4.013c0,0,2.216,6.682,8.993,6.682c0,0,8.218,0.941,8.641-6.428
	c0,0,0.339-2.108-3.219-11.682c0,0-2.711-7.025-2.541-17.191c0,0,0.339-7.681,3.134-12.933c0,0,2.118-3.532,6.354-3.278
	c0,0,5.167,0.116,5.337,5.029c0,0,0.338,7.014,0.593,10.486c0,0,0.931,8.649,5.929,10.089c0,0,3.897,1.193,6.269,0.346
	c0,0,2.372-1.084,1.61-6.421c0,0-1.186-9.271-0.085-20.198c0,0,0.593-5.304,0-8.015c0,0-2.033-8.315-6.777-14.585
	c0,0-5.083-7.976-5.168-15.261c0,0-0.338-3.812,1.017-5.675c0,0,11.066-18.214,16.376-30.619c0,0,5.734-12.192,7.259-18.63
	c0,0,2.287-11.282,2.457-15.857c0,0,6.523-6.754,9.234-9.126c0,0,7.2-5.018,11.775-10.524c0,0,6.353-7.153,7.285-12.574
	c0,0,1.948,14.563,2.118,34.302c0,0,1.44,25.256-0.763,47.282c0,0-5.845,45.581-9.826,63.286c0,0-10.081,48.177-11.267,67.067
	c0,0-1.779,25.748-1.186,45.825c0,0,0.169,5.404,1.44,16.163c0,0,5.93,28.654,13.3,52.035c0,0,9.996,29.192,12.453,36.224
	c0,0,3.981,11.32,3.219,20.639c0,0-1.948,13.476-1.948,17.627c0,0-1.017,17.22,1.694,24.59c0,0,3.08,8.132,8.84,8.725
	c0,0,4.077,0.17,5.009-1.693c0,0,1.963,2.795,6.029,2.795c0,0,5.268-0.678,6.115-3.05c0,0,1.115,1.863,5.859,1.948
	c0,0,6.033,0.254,7.219-3.643c0,0,0.858,2.203,4.67,1.863c0,0,5.524-1.101,7.049-3.643c0,0,2.896,2.881,6.878,2.457
	c0,0,7.65-0.423,8.327-5.93c0,0,1.122-3.559-1.673-8.811c0,0-7.057-13.724-11.208-21.855c0,0-8.935-14.063-9.443-16.097
	c0,0-1.678-1.778-1.509-7.03c0,0,2.971-25.329,2.378-36.597c0,0-0.699-12.198-3.071-25.838c0,0-2.745-13.893-4.608-20.246
	c0,0-1.666-6.015-0.48-12.538c0,0,1.231-8.81,4.196-17.79c0,0,5.495-12.961,7.867-28.209c0,0,5.372-20.713,2.746-30.963
	c0,0,5.88,2.372,13.886,3.854c0,0,6.555,1.271,13.205,1.017c6.649,0.254,13.204-1.017,13.204-1.017
	c8.005-1.482,13.885-3.854,13.885-3.854c-2.626,10.25,2.748,30.963,2.748,30.963c2.372,15.248,7.868,28.209,7.868,28.209
	c2.965,8.98,4.196,17.79,4.196,17.79c1.186,6.523-0.478,12.538-0.478,12.538c-1.863,6.354-4.606,20.246-4.606,20.246
	c-2.371,13.64-3.067,25.838-3.067,25.838c-0.593,11.268,2.382,36.597,2.382,36.597c0.17,5.252-1.507,7.03-1.507,7.03
	c-0.509,2.033-9.44,16.097-9.44,16.097c-4.15,8.132-11.201,21.855-11.201,21.855c-2.797,5.252-1.673,8.811-1.673,8.811
	c0.679,5.507,8.331,5.93,8.331,5.93c3.981,0.424,6.88-2.457,6.88-2.457c1.525,2.542,7.054,3.643,7.054,3.643
	c3.812,0.34,4.672-1.863,4.672-1.863c1.186,3.896,7.223,3.643,7.223,3.643c4.744-0.085,5.861-1.948,5.861-1.948
	c0.847,2.372,6.119,3.05,6.119,3.05c4.065,0,6.033-2.795,6.033-2.795c0.933,1.863,5.014,1.693,5.014,1.693
	c5.761-0.593,8.844-8.725,8.844-8.725c2.711-7.37,1.694-24.584,1.694-24.584c0-4.151-1.948-17.621-1.948-17.621
	c-0.763-9.319,3.219-20.633,3.219-20.633c2.457-7.032,12.453-36.218,12.453-36.218c7.37-23.381,13.3-52.026,13.3-52.026
	c1.271-10.758,1.44-16.158,1.44-16.158c0.593-20.077-1.187-45.814-1.187-45.814c-1.186-18.892-11.267-67.06-11.267-67.06
	c-3.981-17.705-9.827-63.275-9.827-63.275c-2.202-22.024-0.762-47.275-0.762-47.275c0.169-19.738,2.118-34.297,2.118-34.297
	c0.932,5.422,7.285,12.576,7.285,12.576c4.574,5.506,11.774,10.526,11.774,10.526c2.711,2.372,9.234,9.128,9.234,9.128
	c0.169,4.575,2.457,15.858,2.457,15.858c1.524,6.438,7.259,18.632,7.259,18.632c5.31,12.406,16.376,30.622,16.376,30.622
	c1.354,1.863,1.016,5.675,1.016,5.675c-0.084,7.285-5.167,15.262-5.167,15.262c-4.744,6.27-6.776,14.586-6.776,14.586
	c-0.594,2.711,0,8.016,0,8.016c1.101,10.928-0.085,20.201-0.085,20.201c-0.763,5.337,1.609,6.422,1.609,6.422
	c2.372,0.847,6.269-0.347,6.269-0.347c4.998-1.439,5.93-10.088,5.93-10.088c0.254-3.474,0.593-10.484,0.593-10.484
	c0.17-4.914,5.337-5.03,5.337-5.03c4.236-0.254,6.354,3.279,6.354,3.279c2.795,5.252,3.134,12.933,3.134,12.933
	c0.17,10.165-2.541,17.191-2.541,17.191c-3.558,9.572-3.219,11.681-3.219,11.681c0.423,7.37,8.64,6.428,8.64,6.428
	c6.778,0,8.994-6.682,8.994-6.682c1.235,4.115,7.509,4.012,7.509,4.012c6.583-0.205,8.229-6.331,8.229-6.331
	c3.909,1.131,6.994-2.064,6.994-2.064c4.32-4.013,4.629-13.166,4.629-13.166c1.439,0.103,3.6-1.496,3.6-1.496
	c3.6-3.086,4.115-12.538,4.115-12.538c1.337-6.686,0-18.787,0-18.787c-0.516-4.629-7.715-22.148-7.715-22.148
	c-3.601-8.536-8.435-23.507-8.435-23.507c-1.543-6.789-4.012-17.645-4.012-17.645c-4.629-20.881-13.063-49.503-13.063-49.503
	c-5.039-15.429-17.28-41.179-17.28-41.179c-9.669-16.87-23.452-31.746-23.452-31.746C108.553-138.828,89.73-145.48,89.73-145.48
	c-14.504-5.863-31.27-11.084-31.27-11.084c-6.274-2.572-6.48-7.766-6.48-7.766l0.104-5.74c-0.206-2.468,0.103-4.07,0.103-4.07
	c5.965-6.068,14.092-18.131,14.092-18.131c5.144-9.772,8.023-20.275,8.023-20.275c2.88,1.029,6.377,0.421,6.377,0.421
	c4.423-0.309,7.097-6.421,7.097-6.421c1.749-4.834,3.94-17.165,3.94-17.165c1.803-6.493,3.246-15.745,3.246-15.745
	c1.043-6.979-2.525-12.087-2.525-12.087c-2.912-5.466-8.295-5.564-8.295-5.564c3.967-16.952,0-32.582,0-32.582
	c-3.607-20.558-20.29-39.314-20.29-39.314C40.637-371.3,0-370.047,0-370.047s-40.638-1.253-63.853,29.043
	C-63.852-341.004-80.534-322.248-84.141-301.689z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-82.037-297.45c0,0-3.847,15.399,0,31.837
	c0,0-5.22,0.17-8.044,5.47c0,0-3.46,5.044-2.448,11.812c0,0,1.399,9.089,3.147,15.384c0,0,2.125,12.086,3.821,16.774
	c0,0,2.593,5.999,6.882,6.298c0,0,3.391,0.638,6.184-0.36c0,0,2.793,10.346,7.78,19.821c0,0,7.88,11.869,13.665,17.754
	c0,0,0.299,1.581,0.1,3.975l0.099,5.607c0,0-0.199,5.114-6.283,7.608c0,0-16.259,5.313-30.323,10.999
	c0,0-18.253,6.857-42.091,30.497c0,0-13.366,14.723-22.742,31.081c0,0-11.869,25.307-16.757,40.268c0,0-8.179,28.14-12.667,48.388
	c0,0-2.394,10.663-3.89,17.247c0,0-4.688,14.703-8.179,22.982c0,0-6.982,17.165-7.481,21.654c0,0-1.297,11.878,0,18.361
	c0,0,0.499,9.267,3.99,12.259c0,0,2.094,1.579,3.491,1.479c0,0,0.299,8.983,4.488,12.873c0,0,2.992,3.157,6.783,2.061
	c0,0,1.596,6.023,7.979,6.223c0,0,6.085,0.169,7.282-3.82c0,0,2.149,6.57,8.721,6.57c0,0,7.968,1.009,8.379-6.138
	c0,0,0.328-1.949-3.122-11.232c0,0-2.629-6.676-2.464-16.533c0,0,0.328-7.342,3.039-12.435c0,0,2.054-3.369,6.161-3.123
	c0,0,5.011,0.176,5.175,4.941c0,0,0.329,6.88,0.575,10.247c0,0,0.904,8.481,5.751,9.878c0,0,3.778,1.205,6.078,0.384
	c0,0,2.301-0.997,1.561-6.172c0,0-1.15-8.83-0.082-19.428c0,0,0.575-5.08,0-7.709c0,0-1.971-7.937-6.572-14.016
	c0,0-4.928-7.605-5.011-14.67c0,0-0.328-3.65,0.986-5.457c0,0,10.731-17.387,15.88-29.417c0,0,5.56-11.663,7.039-17.906
	c0,0,2.218-10.815,2.382-15.251c0,0,6.326-6.447,8.954-8.747c0,0,6.983-4.742,11.419-10.081c0,0,6.161-6.821,7.064-12.078
	c0,0,1.89,14.388,2.054,33.529c0,0,1.396,24.856-0.739,46.214c0,0-5.669,44.698-9.529,61.866c0,0-9.776,47.243-10.926,65.562
	c0,0-1.725,25.324-1.15,44.793c0,0,0.164,5.365,1.397,15.799c0,0,5.75,28.201,12.897,50.874c0,0,9.693,28.604,12.075,35.423
	c0,0,3.861,11.139,3.122,20.176c0,0-1.89,13.205-1.89,17.23c0,0-0.986,16.89,1.643,24.036c0,0,3.002,7.887,8.588,8.462
	c0,0,3.96,0.163,4.864-1.644c0,0,1.911,2.711,5.854,2.711c0,0,5.116-0.658,5.938-2.958c0,0,1.088,1.809,5.688,1.891
	c0,0,5.86,0.245,7.01-3.533c0,0,0.838,2.136,4.535,1.808c0,0,5.365-1.068,6.844-3.533c0,0,2.817,2.793,6.678,2.384
	c0,0,7.431-0.411,8.089-5.752c0,0,1.098-3.449-1.612-8.543c0,0-6.811-13.308-10.836-21.193c0,0-8.642-13.637-9.134-15.607
	c0,0-1.619-1.726-1.455-6.818c0,0,2.929-24.562,2.354-35.487c0,0-0.645-11.829-2.945-25.055c0,0-2.634-13.473-4.441-19.633
	c0,0-1.599-5.833-0.449-12.157c0,0,1.217-8.543,4.092-17.251c0,0,5.367-12.568,7.667-27.355c0,0,5.25-20.084,2.704-30.024
	c0,0,5.721,2.301,13.483,3.738c0,0,6.374,1.232,12.823,0.985c6.448,0.247,12.82-0.985,12.82-0.985
	c7.763-1.438,13.483-3.738,13.483-3.738c-2.547,9.94,2.707,30.024,2.707,30.024c2.3,14.787,7.669,27.355,7.669,27.355
	c2.875,8.708,4.093,17.251,4.093,17.251c1.15,6.324-0.446,12.157-0.446,12.157c-1.807,6.16-4.438,19.633-4.438,19.633
	c-2.302,13.226-2.941,25.055-2.941,25.055c-0.575,10.926,2.361,35.487,2.361,35.487c0.164,5.093-1.453,6.818-1.453,6.818
	c-0.493,1.971-9.128,15.607-9.128,15.607c-4.025,7.886-10.828,21.193-10.828,21.193c-2.711,5.094-1.609,8.543-1.609,8.543
	c0.657,5.341,8.094,5.752,8.094,5.752c3.86,0.409,6.682-2.384,6.682-2.384c1.479,2.465,6.85,3.533,6.85,3.533
	c3.697,0.328,4.538-1.808,4.538-1.808c1.15,3.778,7.017,3.533,7.017,3.533c4.6-0.082,5.69-1.891,5.69-1.891
	c0.822,2.3,5.944,2.958,5.944,2.958c3.943,0,5.861-2.711,5.861-2.711c0.903,1.807,4.869,1.644,4.869,1.644
	c5.586-0.575,8.595-8.462,8.595-8.462c2.628-7.146,1.643-24.027,1.643-24.027c0-4.025-1.89-17.223-1.89-17.223
	c-0.739-9.035,3.122-20.168,3.122-20.168c2.382-6.817,12.075-35.413,12.075-35.413c7.146-22.672,12.896-50.859,12.896-50.859
	c1.233-10.434,1.397-15.792,1.397-15.792c0.574-19.469-1.15-44.777-1.15-44.777c-1.15-18.318-10.926-65.549-10.926-65.549
	c-3.86-17.169-9.529-61.848-9.529-61.848C81.888-2.802,83.284-27.65,83.284-27.65c0.164-19.14,2.055-33.521,2.055-33.521
	c0.902,5.257,7.063,12.08,7.063,12.08c4.437,5.339,11.419,10.084,11.419,10.084c2.628,2.3,8.954,8.75,8.954,8.75
	c0.164,4.436,2.382,15.252,2.382,15.252c1.479,6.243,7.039,17.91,7.039,17.91c5.149,12.03,15.88,29.42,15.88,29.42
	c1.314,1.807,0.985,5.458,0.985,5.458c-0.082,7.065-5.01,14.673-5.01,14.673c-4.602,6.078-6.572,14.018-6.572,14.018
	c-0.575,2.629,0,7.71,0,7.71c1.068,10.596-0.082,19.429-0.082,19.429c-0.74,5.175,1.56,6.174,1.56,6.174
	c2.302,0.821,6.079-0.384,6.079-0.384c4.848-1.396,5.751-9.877,5.751-9.877c0.246-3.368,0.575-10.246,0.575-10.246
	c0.164-4.764,5.175-4.939,5.175-4.939c4.107-0.245,6.161,3.122,6.161,3.122c2.711,5.094,3.039,12.436,3.039,12.436
	c0.164,9.857-2.464,16.533-2.464,16.533c-3.45,9.282-3.122,11.231-3.122,11.231c0.411,7.146,8.379,6.14,8.379,6.14
	c6.572,0,8.721-6.571,8.721-6.571c1.197,3.989,7.282,3.819,7.282,3.819c6.384-0.199,7.979-6.225,7.979-6.225
	c3.79,1.097,6.783-2.061,6.783-2.061c4.188-3.891,4.487-12.876,4.487-12.876c1.397,0.1,3.491-1.48,3.491-1.48
	c3.491-2.992,3.99-12.261,3.99-12.261c1.297-6.483,0-18.363,0-18.363c-0.499-4.488-7.481-21.657-7.481-21.657
	c-3.491-8.278-8.179-22.987-8.179-22.987c-1.496-6.583-3.89-17.249-3.89-17.249c-4.488-20.249-12.667-48.399-12.667-48.399
	c-4.889-14.961-16.758-40.277-16.758-40.277c-9.376-16.358-22.741-31.09-22.741-31.09c-23.839-23.64-42.092-30.511-42.092-30.511
	c-14.063-5.685-30.322-11.007-30.322-11.007c-6.084-2.494-6.283-7.613-6.283-7.613l0.099-5.609
	c-0.199-2.394,0.101-3.977,0.101-3.977c5.784-5.885,13.665-17.76,13.665-17.76c4.986-9.476,7.779-19.831,7.779-19.831
	c2.793,0.998,6.185,0.358,6.185,0.358c4.289-0.299,6.882-6.303,6.882-6.303c1.696-4.688,3.821-16.783,3.821-16.783
	c1.748-6.295,3.146-15.392,3.146-15.392c1.013-6.768-2.448-11.818-2.448-11.818c-2.823-5.301-8.044-5.477-8.044-5.477
	c3.848-16.439,0-31.851,0-31.851c-3.498-19.935-19.846-38.122-19.846-38.122C39.681-364.951,0-363.735,0-363.735
	s-39.683-1.216-62.192,28.163C-62.192-335.572-78.54-317.385-82.037-297.45z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-79.933-293.209c0,0-3.727,15.176,0,31.101
	c0,0-5.057,0.246-7.793,5.381c0,0-3.351,4.984-2.371,11.54c0,0,1.355,8.932,3.049,15.03c0,0,2.058,11.846,3.701,16.387
	c0,0,2.512,5.89,6.667,6.18c0,0,3.285,0.668,5.991-0.298c0,0,2.705,10.194,7.537,19.374c0,0,7.633,11.678,13.238,17.379
	c0,0,0.289,1.563,0.096,3.882l0.097,5.476c0,0-0.193,5.038-6.088,7.454c0,0-15.75,5.411-29.374,10.919
	c0,0-17.683,7.071-40.777,29.971c0,0-12.948,14.577-22.03,30.424c0,0-11.499,24.869-16.234,39.363c0,0-7.923,27.665-12.271,47.28
	c0,0-2.319,10.472-3.769,16.85c0,0-4.541,14.442-7.923,22.462c0,0-6.764,16.815-7.247,21.163c0,0-1.256,11.655,0,17.936
	c0,0,0.483,9.083,3.865,11.982c0,0,2.029,1.559,3.382,1.463c0,0,0.29,8.814,4.348,12.583c0,0,2.899,3.118,6.571,2.055
	c0,0,1.546,5.923,7.73,6.116c0,0,5.894,0.236,7.053-3.629c0,0,2.083,6.46,8.449,6.46c0,0,7.719,1.074,8.117-5.849
	c0,0,0.319-1.791-3.024-10.783c0,0-2.546-6.325-2.387-15.875c0,0,0.318-7.004,2.944-11.938c0,0,1.99-3.203,5.969-2.965
	c0,0,4.854,0.234,5.013,4.851c0,0,0.319,6.748,0.557,10.01c0,0,0.876,8.312,5.571,9.666c0,0,3.661,1.218,5.889,0.422
	c0,0,2.228-0.91,1.512-5.923c0,0-1.114-8.389-0.08-18.655c0,0,0.557-4.856,0-7.402c0,0-1.91-7.559-6.366-13.447
	c0,0-4.775-7.236-4.854-14.079c0,0-0.319-3.49,0.954-5.24c0,0,10.395-16.561,15.384-28.214c0,0,5.387-11.136,6.819-17.184
	c0,0,2.149-10.346,2.308-14.643c0,0,6.127-6.141,8.674-8.37c0,0,6.764-4.465,11.062-9.637c0,0,5.968-6.489,6.843-11.582
	c0,0,1.831,14.213,1.99,32.755c0,0,1.353,24.457-0.716,45.148c0,0-5.491,43.812-9.232,60.444c0,0-9.469,46.31-10.584,64.056
	c0,0-1.671,24.9-1.114,43.761c0,0,0.159,5.328,1.353,15.434c0,0,5.571,27.749,12.494,49.713c0,0,9.39,28.018,11.698,34.622
	c0,0,3.74,10.959,3.024,19.714c0,0-1.83,12.935-1.83,16.835c0,0-0.955,16.559,1.592,23.482c0,0,2.924,7.639,8.336,8.196
	c0,0,3.842,0.159,4.717-1.591c0,0,1.86,2.626,5.68,2.626c0,0,4.964-0.638,5.76-2.865c0,0,1.061,1.751,5.518,1.83
	c0,0,5.687,0.239,6.802-3.422c0,0,0.817,2.068,4.398,1.751c0,0,5.208-1.034,6.64-3.422c0,0,2.737,2.706,6.478,2.308
	c0,0,7.213-0.398,7.85-5.571c0,0,1.076-3.342-1.55-8.275c0,0-6.566-12.893-10.465-20.531c0,0-8.347-13.21-8.825-15.12
	c0,0-1.559-1.672-1.4-6.605c0,0,2.888-23.795,2.33-34.379c0,0-0.59-11.459-2.818-24.271c0,0-2.524-13.051-4.275-19.021
	c0,0-1.533-5.649-0.419-11.777c0,0,1.204-8.276,3.989-16.711c0,0,5.24-12.177,7.468-26.5c0,0,5.128-19.457,2.661-29.086
	c0,0,5.561,2.228,13.082,3.62c0,0,6.192,1.193,12.439,0.954c6.247,0.239,12.436-0.954,12.436-0.954
	c7.521-1.393,13.081-3.62,13.081-3.62c-2.467,9.629,2.665,29.086,2.665,29.086c2.229,14.323,7.472,26.5,7.472,26.5
	c2.784,8.435,3.989,16.711,3.989,16.711c1.114,6.128-0.415,11.777-0.415,11.777c-1.751,5.97-4.271,19.021-4.271,19.021
	c-2.229,12.812-2.812,24.271-2.812,24.271c-0.557,10.584,2.34,34.379,2.34,34.379c0.158,4.934-1.398,6.605-1.398,6.605
	c-0.479,1.91-8.816,15.12-8.816,15.12c-3.899,7.639-10.455,20.531-10.455,20.531c-2.626,4.934-1.546,8.275-1.546,8.275
	c0.637,5.173,7.856,5.571,7.856,5.571c3.74,0.398,6.482-2.308,6.482-2.308c1.434,2.388,6.648,3.422,6.648,3.422
	c3.581,0.317,4.403-1.751,4.403-1.751c1.114,3.661,6.808,3.422,6.808,3.422c4.457-0.079,5.523-1.83,5.523-1.83
	c0.796,2.228,5.768,2.865,5.768,2.865c3.82,0,5.689-2.626,5.689-2.626c0.876,1.75,4.726,1.591,4.726,1.591
	c5.412-0.558,8.344-8.196,8.344-8.196c2.546-6.924,1.591-23.472,1.591-23.472c0-3.899-1.829-16.823-1.829-16.823
	c-0.717-8.753,3.023-19.703,3.023-19.703c2.309-6.604,11.698-34.607,11.698-34.607c6.924-21.965,12.494-49.695,12.494-49.695
	c1.193-10.107,1.353-15.425,1.353-15.425c0.558-18.861-1.114-43.74-1.114-43.74c-1.113-17.746-10.584-64.038-10.584-64.038
	c-3.74-16.632-9.23-60.422-9.23-60.422c-2.07-20.69-0.717-45.136-0.717-45.136c0.159-18.542,1.99-32.744,1.99-32.744
	c0.875,5.093,6.844,11.583,6.844,11.583c4.297,5.173,11.061,9.643,11.061,9.643c2.547,2.228,8.674,8.372,8.674,8.372
	c0.159,4.298,2.309,14.645,2.309,14.645c1.433,6.049,6.818,17.189,6.818,17.189c4.989,11.654,15.385,28.218,15.385,28.218
	c1.272,1.751,0.955,5.241,0.955,5.241c-0.08,6.844-4.855,14.083-4.855,14.083c-4.456,5.89-6.366,13.449-6.366,13.449
	c-0.557,2.546,0,7.404,0,7.404c1.035,10.266-0.08,18.657-0.08,18.657c-0.716,5.015,1.513,5.927,1.513,5.927
	c2.229,0.795,5.889-0.422,5.889-0.422c4.695-1.354,5.571-9.665,5.571-9.665c0.238-3.263,0.557-10.009,0.557-10.009
	c0.159-4.614,5.013-4.848,5.013-4.848c3.979-0.239,5.97,2.964,5.97,2.964c2.626,4.935,2.943,11.939,2.943,11.939
	c0.159,9.549-2.387,15.875-2.387,15.875c-3.342,8.992-3.024,10.78-3.024,10.78c0.398,6.925,8.117,5.851,8.117,5.851
	c6.366,0,8.449-6.46,8.449-6.46c1.159,3.865,7.053,3.628,7.053,3.628c6.186-0.193,7.731-6.118,7.731-6.118
	c3.671,1.063,6.569-2.057,6.569-2.057c4.06-3.769,4.349-12.586,4.349-12.586c1.353,0.097,3.382-1.465,3.382-1.465
	c3.382-2.898,3.865-11.983,3.865-11.983c1.257-6.28,0-17.938,0-17.938c-0.483-4.349-7.247-21.167-7.247-21.167
	c-3.382-8.02-7.923-22.469-7.923-22.469c-1.449-6.377-3.769-16.853-3.769-16.853c-4.349-19.615-12.271-47.295-12.271-47.295
	c-4.735-14.494-16.233-39.375-16.233-39.375c-9.083-15.847-22.031-30.435-22.031-30.435c-23.094-22.9-40.776-29.989-40.776-29.989
	c-13.624-5.508-29.374-10.931-29.374-10.931c-5.895-2.416-6.088-7.46-6.088-7.46l0.097-5.478c-0.193-2.319,0.097-3.885,0.097-3.885
	c5.604-5.701,13.238-17.389,13.238-17.389c4.831-9.18,7.536-19.386,7.536-19.386c2.706,0.966,5.991,0.296,5.991,0.296
	c4.154-0.29,6.667-6.186,6.667-6.186c1.643-4.542,3.7-16.4,3.7-16.4c1.694-6.099,3.051-15.04,3.051-15.04
	c0.979-6.556-2.372-11.55-2.372-11.55c-2.736-5.135-7.793-5.39-7.793-5.39c3.727-15.925,0-31.119,0-31.119
	c-3.389-19.312-19.401-36.931-19.401-36.931C38.725-358.601,0-357.424,0-357.424s-38.726-1.177-60.533,27.283
	C-60.533-330.141-76.545-312.521-79.933-293.209z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-77.829-288.97c0,0-3.607,14.954,0,30.364
	c0,0-4.894,0.323-7.541,5.292c0,0-3.244,4.925-2.296,11.27c0,0,1.312,8.774,2.951,14.676c0,0,1.992,11.605,3.582,16
	c0,0,2.431,5.781,6.452,6.061c0,0,3.179,0.699,5.798-0.236c0,0,2.618,10.042,7.293,18.926c0,0,7.388,11.489,12.811,17.006
	c0,0,0.281,1.545,0.094,3.789l0.093,5.345c0,0-0.187,4.961-5.891,7.299c0,0-15.242,5.51-28.427,10.84
	c0,0-17.112,7.283-39.461,29.445c0,0-12.53,14.43-21.32,29.766c0,0-11.128,24.431-15.71,38.457c0,0-7.668,27.191-11.875,46.173
	c0,0-2.245,10.28-3.647,16.452c0,0-4.395,14.181-7.668,21.941c0,0-6.546,16.464-7.013,20.672c0,0-1.216,11.432,0,17.51
	c0,0,0.467,8.899,3.74,11.705c0,0,1.964,1.54,3.273,1.447c0,0,0.28,8.645,4.208,12.292c0,0,2.805,3.079,6.358,2.051
	c0,0,1.497,5.821,7.481,6.008c0,0,5.704,0.305,6.826-3.437c0,0,2.016,6.349,8.177,6.349c0,0,7.47,1.142,7.855-5.559
	c0,0,0.308-1.632-2.927-10.334c0,0-2.464-5.976-2.31-15.217c0,0,0.308-6.665,2.849-11.44c0,0,1.926-3.039,5.776-2.808
	c0,0,4.698,0.293,4.852,4.759c0,0,0.308,6.616,0.539,9.773c0,0,0.847,8.145,5.391,9.453c0,0,3.543,1.231,5.699,0.461
	c0,0,2.156-0.823,1.463-5.676c0,0-1.078-7.948-0.077-17.882c0,0,0.539-4.633,0-7.098c0,0-1.848-7.179-6.161-12.877
	c0,0-4.62-6.866-4.698-13.489c0,0-0.308-3.328,0.925-5.023c0,0,10.059-15.732,14.887-27.011c0,0,5.213-10.608,6.599-16.461
	c0,0,2.079-9.877,2.233-14.036c0,0,5.93-5.835,8.395-7.991c0,0,6.546-4.189,10.704-9.195c0,0,5.776-6.155,6.624-11.084
	c0,0,1.771,14.037,1.925,31.981c0,0,1.309,24.058-0.693,44.08c0,0-5.314,42.93-8.934,59.025c0,0-9.164,45.375-10.242,62.549
	c0,0-1.618,24.477-1.079,42.729c0,0,0.155,5.289,1.31,15.069c0,0,5.391,27.297,12.091,48.552c0,0,9.087,27.43,11.32,33.821
	c0,0,3.62,10.779,2.927,19.25c0,0-1.771,12.666-1.771,16.439c0,0-0.925,16.229,1.54,22.93c0,0,2.847,7.393,8.084,7.932
	c0,0,3.724,0.154,4.571-1.54c0,0,1.808,2.541,5.505,2.541c0,0,4.813-0.615,5.583-2.771c0,0,1.035,1.693,5.348,1.771
	c0,0,5.514,0.231,6.593-3.312c0,0,0.797,2.003,4.262,1.694c0,0,5.05-1.002,6.436-3.312c0,0,2.658,2.618,6.278,2.233
	c0,0,6.995-0.386,7.611-5.391c0,0,1.053-3.234-1.489-8.01c0,0-6.319-12.476-10.093-19.869c0,0-8.053-12.784-8.515-14.632
	c0,0-1.5-1.617-1.346-6.392c0,0,2.846-23.027,2.307-33.27c0,0-0.536-11.09-2.692-23.489c0,0-2.414-12.63-4.108-18.405
	c0,0-1.468-5.469-0.39-11.398c0,0,1.191-8.009,3.886-16.173c0,0,5.112-11.782,7.268-25.646c0,0,5.006-18.828,2.619-28.147
	c0,0,5.402,2.157,12.68,3.505c0,0,6.01,1.155,12.056,0.924c6.045,0.231,12.054-0.924,12.054-0.924
	c7.276-1.348,12.678-3.505,12.678-3.505c-2.388,9.319,2.624,28.147,2.624,28.147c2.157,13.863,7.271,25.646,7.271,25.646
	c2.695,8.164,3.887,16.173,3.887,16.173c1.079,5.93-0.383,11.398-0.383,11.398c-1.694,5.775-4.104,18.405-4.104,18.405
	c-2.157,12.399-2.684,23.489-2.684,23.489c-0.54,10.242,2.316,33.27,2.316,33.27c0.154,4.774-1.344,6.392-1.344,6.392
	c-0.462,1.848-8.504,14.632-8.504,14.632c-3.774,7.394-10.081,19.869-10.081,19.869c-2.541,4.775-1.484,8.01-1.484,8.01
	c0.617,5.005,7.619,5.391,7.619,5.391c3.62,0.385,6.285-2.233,6.285-2.233c1.387,2.31,6.445,3.312,6.445,3.312
	c3.465,0.309,4.269-1.694,4.269-1.694c1.078,3.543,6.602,3.312,6.602,3.312c4.312-0.077,5.353-1.771,5.353-1.771
	c0.771,2.156,5.594,2.771,5.594,2.771c3.696,0,5.517-2.541,5.517-2.541c0.847,1.694,4.582,1.54,4.582,1.54
	c5.236-0.539,8.093-7.932,8.093-7.932c2.465-6.7,1.541-22.915,1.541-22.915c0-3.774-1.772-16.424-1.772-16.424
	c-0.692-8.473,2.928-19.239,2.928-19.239c2.232-6.392,11.32-33.803,11.32-33.803c6.7-21.255,12.092-48.53,12.092-48.53
	c1.154-9.78,1.309-15.058,1.309-15.058c0.539-18.252-1.078-42.703-1.078-42.703c-1.079-17.174-10.243-62.527-10.243-62.527
	c-3.62-16.096-8.933-58.995-8.933-58.995c-2.003-20.022-0.693-44.066-0.693-44.066c0.154-17.944,1.925-31.969,1.925-31.969
	c0.848,4.929,6.623,11.088,6.623,11.088c4.158,5.006,10.705,9.2,10.705,9.2c2.464,2.157,8.395,7.995,8.395,7.995
	c0.153,4.159,2.232,14.039,2.232,14.039c1.387,5.853,6.6,16.467,6.6,16.467c4.828,11.278,14.888,27.018,14.888,27.018
	c1.232,1.693,0.924,5.023,0.924,5.023c-0.077,6.623-4.698,13.492-4.698,13.492c-4.312,5.699-6.16,12.881-6.16,12.881
	c-0.539,2.464,0,7.1,0,7.1c1.001,9.934-0.077,17.887-0.077,17.887c-0.693,4.851,1.463,5.677,1.463,5.677
	c2.157,0.771,5.699-0.46,5.699-0.46c4.544-1.309,5.391-9.453,5.391-9.453c0.231-3.156,0.539-9.769,0.539-9.769
	c0.154-4.467,4.852-4.758,4.852-4.758c3.852-0.231,5.776,2.807,5.776,2.807c2.541,4.774,2.849,11.441,2.849,11.441
	c0.154,9.241-2.31,15.217-2.31,15.217c-3.235,8.702-2.927,10.332-2.927,10.332c0.386,6.7,7.855,5.56,7.855,5.56
	c6.161,0,8.176-6.349,8.176-6.349c1.122,3.741,6.826,3.436,6.826,3.436c5.985-0.187,7.481-6.01,7.481-6.01
	c3.553,1.028,6.358-2.053,6.358-2.053c3.928-3.647,4.207-12.296,4.207-12.296c1.311,0.093,3.273-1.449,3.273-1.449
	c3.273-2.806,3.741-11.707,3.741-11.707c1.215-6.078,0-17.514,0-17.514c-0.468-4.208-7.015-20.678-7.015-20.678
	c-3.271-7.761-7.667-21.947-7.667-21.947c-1.402-6.173-3.646-16.457-3.646-16.457c-4.208-18.983-11.876-46.191-11.876-46.191
	c-4.582-14.027-15.71-38.474-15.71-38.474c-8.789-15.335-21.32-29.779-21.32-29.779c-22.349-22.162-39.461-29.468-39.461-29.468
	c-13.185-5.33-28.427-10.855-28.427-10.855c-5.704-2.338-5.892-7.306-5.892-7.306l0.095-5.348c-0.188-2.245,0.093-3.793,0.093-3.793
	c5.424-5.517,12.811-17.018,12.811-17.018c4.676-8.883,7.294-18.941,7.294-18.941c2.618,0.935,5.798,0.233,5.798,0.233
	c4.021-0.28,6.451-6.068,6.451-6.068c1.591-4.395,3.582-16.017,3.582-16.017c1.64-5.902,2.951-14.688,2.951-14.688
	c0.948-6.345-2.295-11.282-2.295-11.282c-2.647-4.969-7.542-5.303-7.542-5.303c3.607-15.411,0-30.387,0-30.387
	c-3.279-18.69-18.957-35.74-18.957-35.74C37.768-352.251,0-351.112,0-351.112s-37.77-1.139-58.874,26.403
	C-58.875-324.709-74.55-307.66-77.829-288.97z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-75.725-284.729c0,0-3.487,14.731,0,29.628
	c0,0-4.731,0.399-7.29,5.203c0,0-3.135,4.866-2.219,10.999c0,0,1.268,8.615,2.853,14.321c0,0,1.925,11.366,3.462,15.614
	c0,0,2.35,5.671,6.237,5.942c0,0,3.073,0.73,5.604-0.174c0,0,2.531,9.891,7.051,18.478c0,0,7.141,11.3,12.384,16.633
	c0,0,0.271,1.526,0.09,3.696l0.091,5.214c0,0-0.181,4.883-5.695,7.143c0,0-14.734,5.609-27.479,10.761
	c0,0-16.542,7.497-38.146,28.92c0,0-12.113,14.283-20.61,29.107c0,0-10.756,23.994-15.186,37.553c0,0-7.412,26.715-11.48,45.065
	c0,0-2.169,10.09-3.525,16.056c0,0-4.248,13.918-7.412,21.42c0,0-6.328,16.113-6.779,20.18c0,0-1.176,11.21,0,17.086
	c0,0,0.451,8.715,3.615,11.427c0,0,1.898,1.521,3.164,1.432c0,0,0.271,8.477,4.068,12.002c0,0,2.711,3.04,6.146,2.046
	c0,0,1.447,5.72,7.232,5.901c0,0,5.514,0.369,6.598-3.245c0,0,1.948,6.236,7.904,6.236c0,0,7.221,1.208,7.593-5.269
	c0,0,0.298-1.473-2.828-9.885c0,0-2.383-5.625-2.234-14.559c0,0,0.298-6.328,2.755-10.943c0,0,1.861-2.874,5.583-2.65
	c0,0,4.541,0.351,4.69,4.669c0,0,0.298,6.483,0.521,9.535c0,0,0.819,7.976,5.211,9.242c0,0,3.425,1.243,5.509,0.499
	c0,0,2.085-0.737,1.415-5.428c0,0-1.042-7.507-0.075-17.109c0,0,0.521-4.41,0-6.792c0,0-1.786-6.8-5.955-12.31
	c0,0-4.467-6.494-4.541-12.897c0,0-0.298-3.167,0.893-4.805c0,0,9.724-14.907,14.391-25.81c0,0,5.039-10.08,6.379-15.738
	c0,0,2.01-9.409,2.159-13.429c0,0,5.732-5.528,8.115-7.612c0,0,6.327-3.913,10.347-8.752c0,0,5.584-5.823,6.403-10.588
	c0,0,1.712,13.862,1.861,31.208c0,0,1.265,23.657-0.67,43.014c0,0-5.137,42.045-8.636,57.604c0,0-8.859,44.441-9.901,61.042
	c0,0-1.563,24.054-1.042,41.698c0,0,0.149,5.25,1.265,14.705c0,0,5.211,26.843,11.688,47.39c0,0,8.785,26.842,10.944,33.021
	c0,0,3.499,10.598,2.829,18.787c0,0-1.713,12.395-1.713,16.043c0,0-0.893,15.898,1.489,22.376c0,0,2.77,7.146,7.833,7.667
	c0,0,3.605,0.148,4.425-1.488c0,0,1.756,2.456,5.33,2.456c0,0,4.661-0.595,5.406-2.681c0,0,1.008,1.639,5.177,1.713
	c0,0,5.341,0.224,6.384-3.201c0,0,0.777,1.936,4.127,1.638c0,0,4.891-0.968,6.231-3.201c0,0,2.579,2.531,6.078,2.159
	c0,0,6.777-0.372,7.372-5.211c0,0,1.03-3.127-1.427-7.743c0,0-6.074-12.06-9.722-19.206c0,0-7.758-12.357-8.205-14.145
	c0,0-1.441-1.563-1.292-6.18c0,0,2.804-22.259,2.283-32.159c0,0-0.481-10.721-2.566-22.706c0,0-2.303-12.209-3.941-17.792
	c0,0-1.401-5.286-0.359-11.019c0,0,1.177-7.743,3.782-15.634c0,0,4.984-11.39,7.069-24.79c0,0,4.884-18.202,2.576-27.21
	c0,0,5.243,2.085,12.278,3.388c0,0,5.829,1.116,11.673,0.894c5.844,0.223,11.669-0.894,11.669-0.894
	c7.035-1.303,12.276-3.388,12.276-3.388c-2.309,9.008,2.583,27.21,2.583,27.21c2.084,13.4,7.072,24.79,7.072,24.79
	c2.605,7.891,3.783,15.634,3.783,15.634c1.042,5.732-0.352,11.019-0.352,11.019c-1.639,5.583-3.937,17.792-3.937,17.792
	c-2.084,11.985-2.556,22.706-2.556,22.706c-0.521,9.9,2.296,32.159,2.296,32.159c0.149,4.616-1.289,6.18-1.289,6.18
	c-0.447,1.787-8.192,14.145-8.192,14.145c-3.648,7.146-9.707,19.206-9.707,19.206c-2.456,4.616-1.422,7.743-1.422,7.743
	c0.597,4.839,7.383,5.211,7.383,5.211c3.499,0.372,6.086-2.159,6.086-2.159c1.34,2.233,6.242,3.201,6.242,3.201
	c3.35,0.298,4.135-1.638,4.135-1.638c1.042,3.425,6.394,3.201,6.394,3.201c4.169-0.074,5.185-1.713,5.185-1.713
	c0.743,2.086,5.418,2.681,5.418,2.681c3.573,0,5.344-2.456,5.344-2.456c0.819,1.637,4.438,1.488,4.438,1.488
	c5.063-0.521,7.844-7.667,7.844-7.667c2.383-6.478,1.488-22.359,1.488-22.359c0-3.648-1.712-16.025-1.712-16.025
	c-0.67-8.188,2.829-18.772,2.829-18.772c2.159-6.18,10.943-32.999,10.943-32.999c6.477-20.547,11.688-47.364,11.688-47.364
	c1.117-9.455,1.267-14.692,1.267-14.692c0.521-17.644-1.042-41.665-1.042-41.665c-1.043-16.602-9.902-61.017-9.902-61.017
	c-3.499-15.559-8.635-57.569-8.635-57.569c-1.937-19.354-0.67-42.995-0.67-42.995c0.148-17.346,1.86-31.193,1.86-31.193
	c0.819,4.765,6.402,10.592,6.402,10.592c4.021,4.839,10.348,8.758,10.348,8.758c2.383,2.085,8.115,7.618,8.115,7.618
	c0.148,4.02,2.158,13.432,2.158,13.432c1.34,5.658,6.379,15.745,6.379,15.745c4.667,10.902,14.392,25.815,14.392,25.815
	c1.191,1.638,0.894,4.807,0.894,4.807c-0.074,6.402-4.541,12.903-4.541,12.903c-4.169,5.509-5.956,12.311-5.956,12.311
	c-0.521,2.384,0,6.795,0,6.795c0.968,9.603-0.074,17.115-0.074,17.115c-0.67,4.69,1.414,5.43,1.414,5.43
	c2.085,0.743,5.509-0.498,5.509-0.498c4.393-1.266,5.211-9.241,5.211-9.241c0.225-3.052,0.521-9.531,0.521-9.531
	c0.149-4.317,4.69-4.667,4.69-4.667c3.723-0.224,5.584,2.649,5.584,2.649c2.456,4.616,2.754,10.944,2.754,10.944
	c0.148,8.934-2.233,14.559-2.233,14.559c-3.127,8.412-2.829,9.883-2.829,9.883c0.372,6.477,7.594,5.27,7.594,5.27
	c5.955,0,7.903-6.236,7.903-6.236c1.085,3.615,6.599,3.243,6.599,3.243c5.785-0.181,7.231-5.903,7.231-5.903
	c3.435,0.994,6.146-2.049,6.146-2.049c3.797-3.525,4.068-12.006,4.068-12.006c1.265,0.09,3.163-1.434,3.163-1.434
	c3.164-2.712,3.616-11.43,3.616-11.43c1.175-5.875,0-17.089,0-17.089c-0.452-4.068-6.779-20.188-6.779-20.188
	c-3.164-7.502-7.413-21.429-7.413-21.429c-1.354-5.966-3.524-16.061-3.524-16.061c-4.068-18.35-11.48-45.087-11.48-45.087
	c-4.429-13.559-15.186-37.571-15.186-37.571c-8.497-14.825-20.609-29.125-20.609-29.125c-21.604-21.423-38.146-28.947-38.146-28.947
	c-12.745-5.152-27.479-10.778-27.479-10.778c-5.514-2.26-5.695-7.153-5.695-7.153l0.09-5.218c-0.181-2.169,0.092-3.7,0.092-3.7
	c5.241-5.333,12.383-16.646,12.383-16.646c4.52-8.588,7.051-18.497,7.051-18.497c2.531,0.904,5.604,0.171,5.604,0.171
	c3.887-0.272,6.237-5.952,6.237-5.952c1.536-4.248,3.462-15.633,3.462-15.633c1.584-5.706,2.853-14.336,2.853-14.336
	c0.917-6.133-2.218-11.013-2.218-11.013c-2.561-4.804-7.29-5.217-7.29-5.217c3.485-14.897,0-29.655,0-29.655
	c-3.17-18.067-18.514-34.548-18.514-34.548C36.812-345.902,0-344.801,0-344.801s-36.814-1.102-57.214,25.523
	C-57.214-319.277-72.555-302.796-75.725-284.729z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-73.621-280.489c0,0-3.366,14.509,0,28.892
	c0,0-4.568,0.475-7.039,5.113c0,0-3.027,4.807-2.142,10.729c0,0,1.224,8.457,2.754,13.966c0,0,1.859,11.126,3.343,15.228
	c0,0,2.27,5.562,6.022,5.824c0,0,2.968,0.76,5.411-0.113c0,0,2.444,9.739,6.808,18.03c0,0,6.895,11.111,11.957,16.26
	c0,0,0.261,1.508,0.087,3.603l0.087,5.082c0,0-0.174,4.807-5.498,6.989c0,0-14.226,5.707-26.532,10.681
	c0,0-15.972,7.71-36.83,28.394c0,0-11.695,14.137-19.899,28.45c0,0-10.386,23.556-14.663,36.647c0,0-7.156,26.241-11.084,43.958
	c0,0-2.094,9.899-3.403,15.659c0,0-4.102,13.656-7.157,20.9c0,0-6.109,15.761-6.546,19.688c0,0-1.134,10.987,0,16.66
	c0,0,0.437,8.532,3.491,11.15c0,0,1.833,1.502,3.055,1.415c0,0,0.262,8.308,3.927,11.711c0,0,2.619,3.002,5.935,2.042
	c0,0,1.397,5.619,6.982,5.793c0,0,5.324,0.438,6.371-3.053c0,0,1.881,6.126,7.631,6.126c0,0,6.973,1.273,7.332-4.979
	c0,0,0.287-1.313-2.731-9.436c0,0-2.3-5.274-2.157-13.9c0,0,0.288-5.99,2.66-10.446c0,0,1.797-2.709,5.391-2.494
	c0,0,4.384,0.41,4.528,4.579c0,0,0.287,6.351,0.503,9.298c0,0,0.791,7.809,5.032,9.03c0,0,3.306,1.256,5.319,0.537
	c0,0,2.012-0.649,1.365-5.178c0,0-1.006-7.066-0.072-16.338c0,0,0.503-4.188,0-6.487c0,0-1.725-6.42-5.75-11.739
	c0,0-4.313-6.126-4.384-12.307c0,0-0.288-3.007,0.862-4.588c0,0,9.389-14.08,13.895-24.606c0,0,4.865-9.553,6.159-15.016
	c0,0,1.941-8.94,2.085-12.822c0,0,5.534-5.221,7.834-7.234c0,0,6.11-3.636,9.991-8.308c0,0,5.391-5.491,6.182-10.091
	c0,0,1.653,13.686,1.797,30.434c0,0,1.222,23.257-0.647,41.946c0,0-4.96,41.161-8.338,56.185c0,0-8.554,43.506-9.56,59.534
	c0,0-1.509,23.63-1.006,40.665c0,0,0.144,5.212,1.222,14.342c0,0,5.031,26.391,11.285,46.229c0,0,8.481,26.254,10.566,32.22
	c0,0,3.378,10.418,2.731,18.324c0,0-1.653,12.125-1.653,15.647c0,0-0.863,15.568,1.437,21.822c0,0,2.693,6.9,7.581,7.403
	c0,0,3.489,0.144,4.279-1.437c0,0,1.705,2.37,5.155,2.37c0,0,4.51-0.574,5.229-2.587c0,0,0.981,1.581,5.006,1.653
	c0,0,5.17,0.216,6.176-3.091c0,0,0.756,1.869,3.991,1.582c0,0,4.733-0.936,6.027-3.091c0,0,2.499,2.443,5.878,2.084
	c0,0,6.559-0.359,7.134-5.031c0,0,1.006-3.02-1.366-7.476c0,0-5.829-11.645-9.351-18.545c0,0-7.464-11.932-7.896-13.656
	c0,0-1.382-1.51-1.238-5.967c0,0,2.762-21.49,2.259-31.051c0,0-0.426-10.35-2.439-21.923c0,0-2.193-11.788-3.775-17.179
	c0,0-1.335-5.104-0.329-10.639c0,0,1.163-7.475,3.679-15.094c0,0,4.857-10.997,6.869-23.935c0,0,4.762-17.575,2.534-26.272
	c0,0,5.083,2.014,11.876,3.271c0,0,5.647,1.078,11.291,0.861c5.642,0.217,11.285-0.861,11.285-0.861
	c6.793-1.258,11.872-3.271,11.872-3.271c-2.228,8.697,2.544,26.272,2.544,26.272c2.012,12.938,6.873,23.935,6.873,23.935
	c2.517,7.619,3.681,15.094,3.681,15.094c1.006,5.535-0.321,10.639-0.321,10.639c-1.582,5.391-3.768,17.179-3.768,17.179
	c-2.014,11.573-2.429,21.923-2.429,21.923c-0.503,9.561,2.273,31.051,2.273,31.051c0.144,4.457-1.233,5.967-1.233,5.967
	c-0.432,1.725-7.881,13.656-7.881,13.656c-3.521,6.9-9.334,18.545-9.334,18.545c-2.372,4.456-1.357,7.476-1.357,7.476
	c0.574,4.672,7.144,5.031,7.144,5.031c3.378,0.359,5.888-2.084,5.888-2.084c1.294,2.155,6.04,3.091,6.04,3.091
	c3.234,0.287,4-1.582,4-1.582c1.006,3.307,6.188,3.091,6.188,3.091c4.024-0.072,5.014-1.653,5.014-1.653
	c0.719,2.013,5.243,2.587,5.243,2.587c3.451,0,5.172-2.37,5.172-2.37c0.79,1.58,4.294,1.437,4.294,1.437
	c4.888-0.503,7.593-7.403,7.593-7.403c2.301-6.254,1.438-21.802,1.438-21.802c0-3.521-1.653-15.627-1.653-15.627
	c-0.646-7.906,2.731-18.308,2.731-18.308c2.084-5.967,10.565-32.194,10.565-32.194c6.253-19.839,11.285-46.199,11.285-46.199
	c1.078-9.128,1.223-14.326,1.223-14.326c0.503-17.034-1.008-40.627-1.008-40.627c-1.006-16.028-9.559-59.506-9.559-59.506
	c-3.379-15.022-8.338-56.142-8.338-56.142C73.491,6.738,74.712-16.5,74.712-16.5c0.145-16.747,1.797-30.416,1.797-30.416
	c0.791,4.6,6.182,10.096,6.182,10.096c3.882,4.672,9.991,8.316,9.991,8.316c2.301,2.013,7.835,7.24,7.835,7.24
	c0.144,3.881,2.085,12.826,2.085,12.826c1.293,5.462,6.158,15.023,6.158,15.023c4.507,10.525,13.896,24.613,13.896,24.613
	c1.15,1.581,0.862,4.589,0.862,4.589c-0.072,6.183-4.385,12.313-4.385,12.313c-4.025,5.319-5.751,11.743-5.751,11.743
	c-0.503,2.3,0,6.489,0,6.489c0.936,9.271-0.071,16.344-0.071,16.344c-0.646,4.529,1.365,5.181,1.365,5.181
	c2.014,0.718,5.319-0.536,5.319-0.536c4.241-1.222,5.032-9.028,5.032-9.028c0.215-2.947,0.503-9.293,0.503-9.293
	c0.143-4.169,4.528-4.576,4.528-4.576c3.594-0.216,5.391,2.492,5.391,2.492c2.372,4.455,2.659,10.446,2.659,10.446
	c0.144,8.626-2.156,13.9-2.156,13.9c-3.019,8.122-2.731,9.434-2.731,9.434c0.359,6.254,7.331,4.98,7.331,4.98
	c5.75,0,7.632-6.126,7.632-6.126c1.048,3.491,6.371,3.052,6.371,3.052c5.586-0.175,6.982-5.797,6.982-5.797
	c3.316,0.961,5.934-2.044,5.934-2.044c3.666-3.404,3.929-11.717,3.929-11.717c1.222,0.087,3.054-1.417,3.054-1.417
	c3.055-2.619,3.491-11.153,3.491-11.153c1.135-5.673,0-16.665,0-16.665c-0.437-3.927-6.545-19.696-6.545-19.696
	c-3.056-7.244-7.157-20.91-7.157-20.91c-1.309-5.76-3.404-15.665-3.404-15.665c-3.927-17.717-11.084-43.983-11.084-43.983
	c-4.275-13.091-14.662-36.669-14.662-36.669c-8.203-14.313-19.898-28.47-19.898-28.47c-20.859-20.684-36.83-28.425-36.83-28.425
	c-12.306-4.975-26.532-10.702-26.532-10.702c-5.324-2.182-5.498-6.999-5.498-6.999l0.087-5.088
	c-0.175-2.094,0.087-3.607,0.087-3.607c5.062-5.15,11.957-16.276,11.957-16.276c4.364-8.291,6.808-18.052,6.808-18.052
	c2.443,0.873,5.412,0.108,5.412,0.108c3.752-0.262,6.021-5.834,6.021-5.834c1.483-4.102,3.342-15.251,3.342-15.251
	c1.53-5.508,2.754-13.983,2.754-13.983c0.887-5.922-2.142-10.745-2.142-10.745c-2.471-4.638-7.038-5.129-7.038-5.129
	c3.366-14.384,0-28.924,0-28.924c-3.061-17.444-18.069-33.357-18.069-33.357C35.856-339.552,0-338.489,0-338.489
	s-35.858-1.063-55.555,24.643C-55.555-313.847-70.561-297.934-73.621-280.489z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-71.518-276.25c0,0-3.246,14.286,0,28.156
	c0,0-4.404,0.552-6.787,5.024c0,0-2.919,4.747-2.066,10.458c0,0,1.18,8.299,2.656,13.611c0,0,1.793,10.887,3.223,14.842
	c0,0,2.188,5.452,5.807,5.705c0,0,2.862,0.791,5.218-0.051c0,0,2.357,9.588,6.564,17.583c0,0,6.649,10.921,11.53,15.886
	c0,0,0.253,1.489,0.084,3.509l0.084,4.952c0,0-0.168,4.73-5.302,6.834c0,0-13.717,5.805-25.584,10.602
	c0,0-15.401,7.922-35.515,27.868c0,0-11.277,13.99-19.188,27.792c0,0-10.015,23.118-14.139,35.742c0,0-6.901,25.766-10.688,42.85
	c0,0-2.02,9.708-3.282,15.262c0,0-3.955,13.394-6.901,20.379c0,0-5.891,15.41-6.312,19.196c0,0-1.094,10.766,0,16.235
	c0,0,0.421,8.348,3.367,10.872c0,0,1.767,1.483,2.945,1.399c0,0,0.253,8.139,3.787,11.421c0,0,2.525,2.962,5.723,2.036
	c0,0,1.347,5.519,6.733,5.687c0,0,5.133,0.505,6.143-2.862c0,0,1.814,6.016,7.359,6.016c0,0,6.723,1.341,7.07-4.689
	c0,0,0.277-1.155-2.634-8.987c0,0-2.218-4.924-2.08-13.24c0,0,0.278-5.652,2.565-9.95c0,0,1.733-2.544,5.198-2.336
	c0,0,4.228,0.469,4.367,4.489c0,0,0.277,6.217,0.485,9.059c0,0,0.762,7.641,4.852,8.819c0,0,3.188,1.269,5.129,0.574
	c0,0,1.941-0.562,1.317-4.929c0,0-0.971-6.625-0.07-15.565c0,0,0.486-3.964,0-6.182c0,0-1.663-6.041-5.544-11.17
	c0,0-4.159-5.756-4.228-11.717c0,0-0.278-2.845,0.831-4.37c0,0,9.054-13.254,13.399-23.404c0,0,4.691-9.025,5.939-14.292
	c0,0,1.871-8.473,2.01-12.215c0,0,5.337-4.915,7.555-6.856c0,0,5.891-3.359,9.634-7.865c0,0,5.199-5.159,5.961-9.595
	c0,0,1.594,13.511,1.733,29.661c0,0,1.178,22.858-0.624,40.877c0,0-4.782,40.278-8.04,54.765c0,0-8.248,42.572-9.219,58.028
	c0,0-1.455,23.206-0.97,39.634c0,0,0.139,5.174,1.178,13.976c0,0,4.852,25.938,10.882,45.068c0,0,8.179,25.666,10.189,31.419
	c0,0,3.258,10.237,2.634,17.862c0,0-1.594,11.854-1.594,15.25c0,0-0.832,15.239,1.386,21.27c0,0,2.615,6.654,7.328,7.139
	c0,0,3.371,0.139,4.134-1.386c0,0,1.653,2.287,4.98,2.287c0,0,4.358-0.555,5.051-2.495c0,0,0.955,1.524,4.836,1.594
	c0,0,4.997,0.208,5.967-2.98c0,0,0.736,1.802,3.855,1.524c0,0,4.575-0.9,5.823-2.979c0,0,2.42,2.355,5.678,2.01
	c0,0,6.34-0.347,6.895-4.852c0,0,0.983-2.911-1.304-7.208c0,0-5.583-11.229-8.979-17.882c0,0-7.171-11.507-7.586-13.171
	c0,0-1.322-1.454-1.184-5.752c0,0,2.72-20.724,2.235-29.942c0,0-0.372-9.981-2.312-21.141c0,0-2.083-11.366-3.608-16.564
	c0,0-1.27-4.921-0.299-10.258c0,0,1.149-7.208,3.575-14.556c0,0,4.729-10.604,6.67-23.081c0,0,4.64-16.945,2.491-25.333
	c0,0,4.924,1.941,11.474,3.154c0,0,5.466,1.039,10.907,0.831c5.441,0.208,10.902-0.831,10.902-0.831
	c6.55-1.213,11.47-3.154,11.47-3.154c-2.148,8.388,2.502,25.333,2.502,25.333c1.94,12.477,6.675,23.081,6.675,23.081
	c2.426,7.348,3.577,14.556,3.577,14.556c0.97,5.337-0.29,10.258-0.29,10.258c-1.525,5.198-3.601,16.564-3.601,16.564
	c-1.941,11.159-2.3,21.141-2.3,21.141c-0.485,9.219,2.252,29.942,2.252,29.942c0.139,4.298-1.18,5.752-1.18,5.752
	c-0.415,1.664-7.568,13.171-7.568,13.171c-3.396,6.652-8.96,17.882-8.96,17.882c-2.287,4.297-1.296,7.208-1.296,7.208
	c0.555,4.505,6.907,4.852,6.907,4.852c3.257,0.346,5.689-2.01,5.689-2.01c1.248,2.079,5.837,2.979,5.837,2.979
	c3.119,0.277,3.866-1.524,3.866-1.524c0.97,3.188,5.979,2.98,5.979,2.98c3.882-0.069,4.846-1.594,4.846-1.594
	c0.693,1.94,5.068,2.495,5.068,2.495c3.327,0,4.998-2.287,4.998-2.287c0.763,1.524,4.151,1.386,4.151,1.386
	c4.714-0.484,7.343-7.139,7.343-7.139c2.218-6.03,1.386-21.246,1.386-21.246c0-3.396-1.594-15.228-1.594-15.228
	c-0.624-7.624,2.634-17.844,2.634-17.844c2.01-5.752,10.189-31.39,10.189-31.39c6.029-19.129,10.881-45.032,10.881-45.032
	c1.04-8.803,1.179-13.96,1.179-13.96c0.485-16.426-0.971-39.59-0.971-39.59c-0.971-15.456-9.218-57.995-9.218-57.995
	c-3.259-14.485-8.04-54.716-8.04-54.716C71.391,9.122,72.57-13.711,72.57-13.711c0.139-16.15,1.732-29.64,1.732-29.64
	c0.763,4.435,5.961,9.6,5.961,9.6c3.742,4.505,9.634,7.874,9.634,7.874c2.219,1.94,7.556,6.862,7.556,6.862
	c0.138,3.743,2.01,12.219,2.01,12.219c1.247,5.268,5.939,14.302,5.939,14.302c4.345,10.149,13.398,23.412,13.398,23.412
	c1.109,1.524,0.831,4.372,0.831,4.372c-0.069,5.961-4.228,11.724-4.228,11.724c-3.882,5.129-5.545,11.174-5.545,11.174
	c-0.485,2.218,0,6.183,0,6.183c0.901,8.941-0.069,15.574-0.069,15.574c-0.624,4.366,1.316,4.933,1.316,4.933
	c1.941,0.692,5.13-0.574,5.13-0.574c4.089-1.178,4.852-8.817,4.852-8.817c0.208-2.842,0.485-9.055,0.485-9.055
	c0.139-4.021,4.367-4.485,4.367-4.485c3.465-0.208,5.197,2.334,5.197,2.334c2.287,4.297,2.564,9.951,2.564,9.951
	c0.139,8.317-2.079,13.241-2.079,13.241c-2.911,7.832-2.634,8.984-2.634,8.984c0.347,6.03,7.069,4.691,7.069,4.691
	c5.545,0,7.359-6.016,7.359-6.016c1.01,3.367,6.143,2.859,6.143,2.859c5.387-0.168,6.733-5.688,6.733-5.688
	c3.198,0.926,5.723-2.041,5.723-2.041c3.534-3.282,3.787-11.426,3.787-11.426c1.178,0.084,2.945-1.402,2.945-1.402
	c2.946-2.525,3.367-10.876,3.367-10.876c1.094-5.47,0-16.24,0-16.24c-0.421-3.788-6.312-19.206-6.312-19.206
	c-2.945-6.984-6.9-20.39-6.9-20.39c-1.264-5.555-3.282-15.27-3.282-15.27c-3.788-17.084-10.689-42.878-10.689-42.878
	c-4.123-12.624-14.138-35.768-14.138-35.768c-7.911-13.802-19.188-27.814-19.188-27.814c-20.114-19.946-35.516-27.905-35.516-27.905
	c-11.867-4.797-25.585-10.625-25.585-10.625c-5.133-2.104-5.302-6.846-5.302-6.846l0.085-4.957c-0.169-2.02,0.084-3.515,0.084-3.515
	c4.881-4.966,11.529-15.905,11.529-15.905c4.208-7.995,6.564-17.607,6.564-17.607c2.356,0.842,5.218,0.046,5.218,0.046
	c3.618-0.253,5.808-5.717,5.808-5.717c1.43-3.956,3.223-14.868,3.223-14.868c1.476-5.312,2.656-13.631,2.656-13.631
	c0.853-5.71-2.066-10.477-2.066-10.477c-2.383-4.472-6.787-5.042-6.787-5.042c3.246-13.869,0-28.192,0-28.192
	c-2.95-16.821-17.624-32.166-17.624-32.166C34.9-333.204,0-332.177,0-332.177s-34.903-1.026-53.897,23.762
	C-53.896-308.416-68.566-293.07-71.518-276.25z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-69.414-272.009c0,0-3.126,14.064,0,27.419
	c0,0-4.241,0.629-6.536,4.936c0,0-2.811,4.688-1.989,10.187c0,0,1.137,8.141,2.557,13.256c0,0,1.727,10.647,3.104,14.456
	c0,0,2.107,5.343,5.592,5.586c0,0,2.756,0.822,5.025,0.011c0,0,2.269,9.436,6.321,17.135c0,0,6.402,10.732,11.103,15.513
	c0,0,0.243,1.471,0.081,3.416l0.081,4.82c0,0-0.162,4.653-5.106,6.68c0,0-13.21,5.903-24.636,10.522c0,0-14.831,8.136-34.2,27.343
	c0,0-10.86,13.843-18.478,27.133c0,0-9.643,22.681-13.615,34.838c0,0-6.645,25.291-10.292,41.742c0,0-1.945,9.517-3.16,14.865
	c0,0-3.809,13.131-6.646,19.858c0,0-5.673,15.059-6.078,18.706c0,0-1.054,10.542,0,15.809c0,0,0.405,8.164,3.242,10.595
	c0,0,1.702,1.464,2.836,1.383c0,0,0.243,7.971,3.647,11.131c0,0,2.431,2.924,5.511,2.031c0,0,1.296,5.417,6.483,5.58
	c0,0,4.944,0.571,5.916-2.67c0,0,1.747,5.903,7.086,5.903c0,0,6.474,1.408,6.808-4.399c0,0,0.267-0.996-2.536-8.538
	c0,0-2.136-4.573-2.002-12.583c0,0,0.266-5.313,2.469-9.451c0,0,1.669-2.38,5.006-2.18c0,0,4.071,0.527,4.205,4.398
	c0,0,0.267,6.085,0.467,8.821c0,0,0.734,7.473,4.672,8.607c0,0,3.07,1.281,4.939,0.614c0,0,1.869-0.477,1.268-4.682
	c0,0-0.934-6.184-0.067-14.794c0,0,0.468-3.739,0-5.876c0,0-1.601-5.661-5.339-10.601c0,0-4.005-5.386-4.071-11.126
	c0,0-0.267-2.684,0.8-4.153c0,0,8.719-12.426,12.903-22.2c0,0,4.518-8.497,5.719-13.569c0,0,1.802-8.004,1.936-11.608
	c0,0,5.139-4.608,7.275-6.477c0,0,5.673-3.083,9.277-7.422c0,0,5.006-4.827,5.74-9.099c0,0,1.535,13.336,1.669,28.888
	c0,0,1.134,22.458-0.601,39.811c0,0-4.605,39.393-7.742,53.343c0,0-7.943,41.639-8.877,56.522c0,0-1.402,22.783-0.935,38.601
	c0,0,0.134,5.136,1.135,13.612c0,0,4.672,25.486,10.479,43.907c0,0,7.876,25.078,9.811,30.617c0,0,3.137,10.058,2.536,17.399
	c0,0-1.535,11.584-1.535,14.855c0,0-0.801,14.908,1.335,20.716c0,0,2.538,6.407,7.077,6.874c0,0,3.253,0.134,3.987-1.335
	c0,0,1.601,2.203,4.805,2.203c0,0,4.207-0.534,4.875-2.403c0,0,0.928,1.469,4.665,1.535c0,0,4.824,0.201,5.758-2.87
	c0,0,0.716,1.736,3.72,1.469c0,0,4.416-0.868,5.618-2.87c0,0,2.341,2.27,5.478,1.936c0,0,6.122-0.333,6.656-4.672
	c0,0,0.961-2.804-1.242-6.941c0,0-5.338-10.813-8.608-17.22c0,0-6.876-11.08-7.277-12.682c0,0-1.262-1.401-1.129-5.54
	c0,0,2.678-19.957,2.211-28.834c0,0-0.317-9.61-2.186-20.355c0,0-1.973-10.946-3.441-15.952c0,0-1.204-4.739-0.269-9.878
	c0,0,1.136-6.942,3.472-14.017c0,0,4.601-10.212,6.47-22.226c0,0,4.518-16.319,2.449-24.395c0,0,4.764,1.868,11.072,3.036
	c0,0,5.284,1.002,10.524,0.802c5.238,0.2,10.518-0.802,10.518-0.802c6.308-1.168,11.068-3.036,11.068-3.036
	c-2.069,8.075,2.46,24.395,2.46,24.395c1.869,12.014,6.477,22.226,6.477,22.226c2.336,7.074,3.474,14.017,3.474,14.017
	c0.935,5.139-0.259,9.878-0.259,9.878c-1.469,5.006-3.433,15.952-3.433,15.952c-1.869,10.745-2.172,20.355-2.172,20.355
	c-0.467,8.877,2.229,28.834,2.229,28.834c0.135,4.139-1.124,5.54-1.124,5.54c-0.399,1.602-7.258,12.682-7.258,12.682
	c-3.27,6.406-8.586,17.22-8.586,17.22c-2.202,4.138-1.232,6.941-1.232,6.941c0.533,4.339,6.67,4.672,6.67,4.672
	c3.137,0.334,5.491-1.936,5.491-1.936c1.201,2.002,5.635,2.87,5.635,2.87c3.003,0.268,3.729-1.469,3.729-1.469
	c0.936,3.071,5.773,2.87,5.773,2.87c3.737-0.066,4.676-1.535,4.676-1.535c0.668,1.869,4.893,2.403,4.893,2.403
	c3.204,0,4.826-2.203,4.826-2.203c0.734,1.469,4.007,1.335,4.007,1.335c4.539-0.467,7.094-6.874,7.094-6.874
	c2.136-5.808,1.335-20.69,1.335-20.69c0-3.27-1.535-14.828-1.535-14.828c-0.602-7.342,2.536-17.378,2.536-17.378
	c1.935-5.54,9.811-30.586,9.811-30.586c5.808-18.421,10.479-43.867,10.479-43.867c1.001-8.476,1.135-13.593,1.135-13.593
	c0.467-15.817-0.935-38.553-0.935-38.553c-0.935-14.884-8.878-56.484-8.878-56.484c-3.137-13.95-7.741-53.289-7.741-53.289
	c-1.735-17.354-0.602-39.786-0.602-39.786c0.134-15.551,1.669-28.864,1.669-28.864c0.734,4.272,5.74,9.105,5.74,9.105
	c3.604,4.338,9.277,7.432,9.277,7.432c2.136,1.868,7.274,6.484,7.274,6.484c0.135,3.604,1.937,11.613,1.937,11.613
	c1.201,5.073,5.719,13.58,5.719,13.58c4.184,9.773,12.903,22.21,12.903,22.21c1.066,1.469,0.8,4.156,0.8,4.156
	c-0.066,5.739-4.071,11.133-4.071,11.133c-3.738,4.938-5.339,10.605-5.339,10.605c-0.468,2.137,0,5.877,0,5.877
	c0.867,8.61-0.067,14.804-0.067,14.804c-0.601,4.205,1.269,4.684,1.269,4.684c1.869,0.667,4.938-0.612,4.938-0.612
	c3.938-1.134,4.672-8.604,4.672-8.604c0.2-2.737,0.468-8.816,0.468-8.816c0.134-3.872,4.205-4.395,4.205-4.395
	c3.337-0.201,5.006,2.177,5.006,2.177c2.202,4.138,2.469,9.454,2.469,9.454c0.134,8.009-2.002,12.582-2.002,12.582
	c-2.803,7.542-2.536,8.536-2.536,8.536c0.334,5.807,6.809,4.4,6.809,4.4c5.339,0,7.086-5.903,7.086-5.903
	c0.972,3.241,5.916,2.667,5.916,2.667c5.187-0.162,6.482-5.582,6.482-5.582c3.08,0.892,5.511-2.037,5.511-2.037
	c3.404-3.16,3.647-11.136,3.647-11.136c1.134,0.081,2.836-1.387,2.836-1.387c2.837-2.432,3.242-10.599,3.242-10.599
	c1.054-5.268,0-15.816,0-15.816c-0.405-3.646-6.078-18.715-6.078-18.715c-2.837-6.727-6.646-19.871-6.646-19.871
	c-1.215-5.349-3.159-14.873-3.159-14.873C146.754-23.087,140.11-48.41,140.11-48.41c-3.972-12.156-13.615-34.866-13.615-34.866
	c-7.618-13.29-18.479-27.159-18.479-27.159c-19.369-19.207-34.199-27.383-34.199-27.383c-11.427-4.619-24.637-10.549-24.637-10.549
	c-4.943-2.026-5.105-6.692-5.105-6.692l0.081-4.827c-0.162-1.945,0.081-3.423,0.081-3.423c4.7-4.781,11.103-15.533,11.103-15.533
	c4.052-7.699,6.321-17.163,6.321-17.163c2.269,0.811,5.024-0.017,5.024-0.017c3.485-0.243,5.593-5.599,5.593-5.599
	c1.377-3.809,3.104-14.485,3.104-14.485c1.42-5.115,2.557-13.278,2.557-13.278c0.822-5.5-1.988-10.209-1.988-10.209
	c-2.295-4.307-6.536-4.956-6.536-4.956c3.126-13.356,0-27.46,0-27.46c-2.842-16.198-17.18-30.974-17.18-30.974
	C33.944-326.854,0-325.866,0-325.866s-33.947-0.987-52.237,22.883C-52.237-302.983-66.572-288.208-69.414-272.009z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-67.31-267.77c0,0-3.006,13.841,0,26.683
	c0,0-4.078,0.705-6.284,4.846c0,0-2.703,4.629-1.913,9.917c0,0,1.093,7.983,2.459,12.901c0,0,1.66,10.408,2.985,14.07
	c0,0,2.026,5.233,5.376,5.467c0,0,2.65,0.852,4.832,0.073c0,0,2.182,9.284,6.078,16.687c0,0,6.156,10.542,10.675,15.14
	c0,0,0.234,1.453,0.078,3.323l0.078,4.689c0,0-0.156,4.576-4.909,6.524c0,0-12.702,6.002-23.689,10.444
	c0,0-14.26,8.348-32.884,26.817c0,0-10.442,13.696-17.767,26.475c0,0-9.273,22.244-13.091,33.932c0,0-6.39,24.816-9.897,40.635
	c0,0-1.87,9.326-3.039,14.469c0,0-3.662,12.868-6.39,19.336c0,0-5.455,14.708-5.844,18.216c0,0-1.013,10.318,0,15.384
	c0,0,0.389,7.979,3.117,10.317c0,0,1.636,1.444,2.727,1.366c0,0,0.234,7.801,3.507,10.84c0,0,2.338,2.886,5.299,2.027
	c0,0,1.246,5.316,6.234,5.472c0,0,4.753,0.64,5.688-2.478c0,0,1.68,5.793,6.814,5.793c0,0,6.225,1.473,6.546-4.11
	c0,0,0.256-0.837-2.439-8.089c0,0-2.054-4.223-1.925-11.924c0,0,0.256-4.977,2.374-8.955c0,0,1.605-2.215,4.813-2.021
	c0,0,3.915,0.585,4.044,4.308c0,0,0.256,5.952,0.449,8.583c0,0,0.706,7.305,4.492,8.396c0,0,2.952,1.295,4.749,0.652
	c0,0,1.797-0.389,1.22-4.432c0,0-0.899-5.743-0.064-14.022c0,0,0.449-3.517,0-5.569c0,0-1.541-5.283-5.135-10.032
	c0,0-3.85-5.017-3.914-10.535c0,0-0.257-2.524,0.77-3.937c0,0,8.383-11.6,12.406-20.998c0,0,4.344-7.969,5.499-12.847
	c0,0,1.733-7.535,1.861-11.001c0,0,4.942-4.301,6.995-6.098c0,0,5.456-2.807,8.921-6.979c0,0,4.813-4.495,5.519-8.602
	c0,0,1.476,13.16,1.605,28.113c0,0,1.091,22.059-0.578,38.745c0,0-4.428,38.51-7.444,51.923c0,0-7.637,40.703-8.536,55.015
	c0,0-1.348,22.36-0.898,37.57c0,0,0.128,5.097,1.091,13.248c0,0,4.492,25.031,10.075,42.744c0,0,7.573,24.49,9.434,29.817
	c0,0,3.017,9.877,2.439,16.938c0,0-1.476,11.313-1.476,14.457c0,0-0.77,14.579,1.284,20.163c0,0,2.46,6.161,6.824,6.61
	c0,0,3.136,0.128,3.841-1.284c0,0,1.55,2.118,4.631,2.118c0,0,4.055-0.513,4.697-2.31c0,0,0.901,1.412,4.495,1.476
	c0,0,4.651,0.192,5.549-2.76c0,0,0.696,1.669,3.584,1.412c0,0,4.259-0.834,5.414-2.76c0,0,2.262,2.183,5.278,1.861
	c0,0,5.904-0.321,6.417-4.493c0,0,0.938-2.694-1.18-6.674c0,0-5.092-10.396-8.237-16.558c0,0-6.582-10.653-6.967-12.193
	c0,0-1.203-1.348-1.075-5.327c0,0,2.637-19.188,2.187-27.724c0,0-0.262-9.242-2.059-19.574c0,0-1.863-10.524-3.275-15.339
	c0,0-1.137-4.556-0.239-9.498c0,0,1.123-6.674,3.369-13.477c0,0,4.474-9.819,6.271-21.371c0,0,4.396-15.691,2.406-23.456
	c0,0,4.605,1.797,10.67,2.92c0,0,5.103,0.962,10.141,0.77c5.038,0.192,10.134-0.77,10.134-0.77c6.065-1.123,10.666-2.92,10.666-2.92
	c-1.988,7.765,2.42,23.456,2.42,23.456c1.797,11.552,6.277,21.371,6.277,21.371c2.246,6.803,3.37,13.477,3.37,13.477
	c0.898,4.942-0.228,9.498-0.228,9.498c-1.412,4.814-3.266,15.339-3.266,15.339c-1.797,10.332-2.043,19.574-2.043,19.574
	c-0.45,8.535,2.208,27.724,2.208,27.724c0.128,3.979-1.068,5.327-1.068,5.327c-0.386,1.54-6.947,12.193-6.947,12.193
	c-3.145,6.161-8.211,16.558-8.211,16.558c-2.118,3.979-1.171,6.674-1.171,6.674c0.514,4.172,6.433,4.493,6.433,4.493
	c3.016,0.321,5.293-1.861,5.293-1.861c1.155,1.926,5.431,2.76,5.431,2.76c2.889,0.257,3.597-1.412,3.597-1.412
	c0.898,2.952,5.565,2.76,5.565,2.76c3.595-0.063,4.508-1.476,4.508-1.476c0.642,1.797,4.718,2.31,4.718,2.31
	c3.08,0,4.652-2.118,4.652-2.118c0.706,1.412,3.863,1.284,3.863,1.284c4.364-0.449,6.843-6.61,6.843-6.61
	c2.054-5.584,1.283-20.133,1.283-20.133c0-3.145-1.476-14.43-1.476-14.43c-0.577-7.06,2.438-16.913,2.438-16.913
	c1.861-5.327,9.435-29.781,9.435-29.781c5.583-17.713,10.075-42.701,10.075-42.701c0.963-8.15,1.092-13.227,1.092-13.227
	c0.448-15.21-0.899-37.516-0.899-37.516c-0.897-14.312-8.535-54.974-8.535-54.974c-3.017-13.413-7.444-51.862-7.444-51.862
	c-1.668-16.687-0.577-38.715-0.577-38.715c0.128-14.953,1.604-28.088,1.604-28.088c0.706,4.107,5.52,8.609,5.52,8.609
	c3.466,4.172,8.921,6.989,8.921,6.989c2.053,1.797,6.995,6.107,6.995,6.107c0.128,3.466,1.86,11.007,1.86,11.007
	c1.155,4.876,5.499,12.858,5.499,12.858c4.023,9.397,12.407,21.009,12.407,21.009c1.026,1.412,0.771,3.938,0.771,3.938
	c-0.065,5.519-3.915,10.543-3.915,10.543c-3.595,4.75-5.135,10.038-5.135,10.038c-0.449,2.053,0,5.571,0,5.571
	c0.834,8.279-0.063,14.031-0.063,14.031c-0.578,4.043,1.219,4.437,1.219,4.437c1.797,0.642,4.749-0.65,4.749-0.65
	c3.786-1.091,4.492-8.393,4.492-8.393c0.193-2.633,0.45-8.578,0.45-8.578c0.128-3.723,4.043-4.305,4.043-4.305
	c3.209-0.192,4.812,2.02,4.812,2.02c2.118,3.979,2.375,8.957,2.375,8.957c0.128,7.701-1.926,11.924-1.926,11.924
	c-2.695,7.252-2.439,8.087-2.439,8.087c0.321,5.583,6.548,4.111,6.548,4.111c5.134,0,6.812-5.793,6.812-5.793
	c0.936,3.116,5.689,2.476,5.689,2.476c4.986-0.156,6.233-5.475,6.233-5.475c2.961,0.856,5.298-2.033,5.298-2.033
	c3.273-3.039,3.508-10.847,3.508-10.847c1.091,0.077,2.727-1.37,2.727-1.37c2.729-2.338,3.117-10.322,3.117-10.322
	c1.013-5.065,0-15.391,0-15.391c-0.389-3.508-5.844-18.227-5.844-18.227c-2.728-6.467-6.391-19.351-6.391-19.351
	c-1.169-5.144-3.039-14.477-3.039-14.477c-3.506-15.819-9.896-40.671-9.896-40.671c-3.819-11.688-13.092-33.963-13.092-33.963
	c-7.325-12.78-17.768-26.504-17.768-26.504c-18.624-18.468-32.884-26.862-32.884-26.862c-10.987-4.442-23.689-10.473-23.689-10.473
	c-4.753-1.948-4.908-6.539-4.908-6.539l0.077-4.696c-0.155-1.871,0.078-3.331,0.078-3.331c4.52-4.597,10.676-15.162,10.676-15.162
	c3.896-7.403,6.078-16.718,6.078-16.718c2.182,0.78,4.831-0.079,4.831-0.079c3.352-0.234,5.377-5.483,5.377-5.483
	c1.324-3.662,2.984-14.101,2.984-14.101c1.366-4.919,2.459-12.926,2.459-12.926c0.791-5.288-1.912-9.941-1.912-9.941
	c-2.207-4.141-6.285-4.868-6.285-4.868c3.006-12.842,0-26.729,0-26.729c-2.731-15.575-16.734-29.783-16.734-29.783
	C32.988-320.504,0-319.555,0-319.555s-32.991-0.949-50.578,22.003C-50.578-297.552-64.578-283.344-67.31-267.77z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-65.206-263.529c0,0-2.885,13.618,0,25.947
	c0,0-3.915,0.781-6.033,4.757c0,0-2.595,4.569-1.836,9.645c0,0,1.049,7.826,2.361,12.547c0,0,1.593,10.168,2.865,13.684
	c0,0,1.945,5.124,5.161,5.348c0,0,2.544,0.883,4.638,0.135c0,0,2.095,9.133,5.836,16.239c0,0,5.909,10.353,10.248,14.767
	c0,0,0.225,1.434,0.075,3.229l0.075,4.559c0,0-0.15,4.499-4.713,6.369c0,0-12.194,6.1-22.742,10.364c0,0-13.689,8.562-31.569,26.291
	c0,0-10.024,13.549-17.056,25.818c0,0-8.902,21.806-12.567,33.027c0,0-6.135,24.341-9.501,39.527c0,0-1.795,9.134-2.917,14.072
	c0,0-3.516,12.605-6.135,18.814c0,0-5.236,14.357-5.61,17.725c0,0-0.973,10.096,0,14.959c0,0,0.374,7.796,2.992,10.04
	c0,0,1.571,1.425,2.618,1.35c0,0,0.225,7.632,3.367,10.549c0,0,2.244,2.847,5.087,2.023c0,0,1.197,5.215,5.984,5.365
	c0,0,4.563,0.706,5.461-2.287c0,0,1.612,5.682,6.541,5.682c0,0,5.976,1.54,6.284-3.82c0,0,0.247-0.678-2.341-7.64
	c0,0-1.971-3.873-1.848-11.266c0,0,0.246-4.639,2.279-8.458c0,0,1.541-2.049,4.621-1.865c0,0,3.758,0.645,3.882,4.218
	c0,0,0.246,5.82,0.431,8.346c0,0,0.678,7.138,4.313,8.185c0,0,2.834,1.306,4.559,0.689c0,0,1.725-0.302,1.17-4.183
	c0,0-0.862-5.303-0.061-13.25c0,0,0.431-3.293,0-5.265c0,0-1.479-4.903-4.929-9.462c0,0-3.697-4.646-3.758-9.945
	c0,0-0.247-2.363,0.739-3.718c0,0,8.048-10.774,11.91-19.796c0,0,4.17-7.441,5.279-12.125c0,0,1.664-7.067,1.787-10.394
	c0,0,4.744-3.995,6.715-5.72c0,0,5.237-2.53,8.564-6.535c0,0,4.621-4.163,5.298-8.106c0,0,1.417,12.985,1.541,27.34
	c0,0,1.047,21.659-0.555,37.677c0,0-4.251,37.625-7.147,50.502c0,0-7.331,39.77-8.194,53.509c0,0-1.293,21.937-0.862,36.538
	c0,0,0.123,5.058,1.047,12.883c0,0,4.313,24.58,9.673,41.584c0,0,7.27,23.903,9.057,29.017c0,0,2.895,9.696,2.341,16.474
	c0,0-1.417,11.044-1.417,14.063c0,0-0.74,14.249,1.232,19.608c0,0,2.383,5.914,6.572,6.347c0,0,3.018,0.122,3.696-1.233
	c0,0,1.498,2.034,4.455,2.034c0,0,3.904-0.493,4.52-2.219c0,0,0.875,1.355,4.325,1.418c0,0,4.478,0.184,5.34-2.65
	c0,0,0.676,1.602,3.448,1.355c0,0,4.101-0.801,5.21-2.648c0,0,2.182,2.094,5.078,1.786c0,0,5.686-0.309,6.179-4.312
	c0,0,0.914-2.588-1.119-6.408c0,0-4.847-9.98-7.866-15.895c0,0-6.287-10.227-6.657-11.706c0,0-1.144-1.294-1.021-5.114
	c0,0,2.595-18.421,2.164-26.614c0,0-0.208-8.872-1.933-18.791c0,0-1.753-10.104-3.108-14.726c0,0-1.072-4.374-0.209-9.118
	c0,0,1.109-6.406,3.265-12.938c0,0,4.346-9.426,6.071-20.517c0,0,4.274-15.063,2.364-22.519c0,0,4.445,1.726,10.268,2.804
	c0,0,4.921,0.924,9.758,0.739c4.836,0.185,9.751-0.739,9.751-0.739c5.821-1.078,10.263-2.804,10.263-2.804
	c-1.91,7.455,2.378,22.519,2.378,22.519c1.726,11.091,6.079,20.517,6.079,20.517c2.156,6.531,3.267,12.938,3.267,12.938
	c0.862,4.744-0.196,9.118-0.196,9.118c-1.355,4.621-3.098,14.726-3.098,14.726c-1.725,9.919-1.916,18.791-1.916,18.791
	c-0.431,8.193,2.188,26.614,2.188,26.614c0.123,3.82-1.016,5.114-1.016,5.114c-0.368,1.479-6.634,11.706-6.634,11.706
	c-3.019,5.914-7.838,15.895-7.838,15.895c-2.033,3.82-1.107,6.408-1.107,6.408c0.492,4.004,6.194,4.312,6.194,4.312
	c2.896,0.308,5.096-1.786,5.096-1.786c1.108,1.848,5.229,2.648,5.229,2.648c2.772,0.246,3.461-1.355,3.461-1.355
	c0.863,2.834,5.359,2.65,5.359,2.65c3.449-0.062,4.337-1.418,4.337-1.418c0.617,1.726,4.543,2.219,4.543,2.219
	c2.957,0,4.48-2.034,4.48-2.034c0.679,1.355,3.721,1.233,3.721,1.233c4.188-0.433,6.592-6.347,6.592-6.347
	c1.971-5.359,1.231-19.577,1.231-19.577c0-3.019-1.417-14.03-1.417-14.03c-0.555-6.777,2.342-16.448,2.342-16.448
	c1.786-5.113,9.057-28.977,9.057-28.977c5.36-17.005,9.672-41.535,9.672-41.535c0.924-7.824,1.048-12.86,1.048-12.86
	c0.432-14.601-0.862-36.479-0.862-36.479c-0.862-13.738-8.194-53.463-8.194-53.463c-2.896-12.877-7.147-50.436-7.147-50.436
	c-1.602-16.02-0.554-37.645-0.554-37.645c0.123-14.356,1.54-27.312,1.54-27.312c0.678,3.943,5.298,8.113,5.298,8.113
	C76.306-20.542,81.543-18,81.543-18c1.972,1.725,6.716,5.729,6.716,5.729c0.123,3.327,1.786,10.4,1.786,10.4
	c1.108,4.683,5.279,12.137,5.279,12.137c3.862,9.022,11.909,19.808,11.909,19.808c0.986,1.355,0.74,3.721,0.74,3.721
	c-0.062,5.299-3.758,9.954-3.758,9.954c-3.451,4.559-4.929,9.468-4.929,9.468c-0.432,1.972,0,5.267,0,5.267
	c0.801,7.948-0.062,13.261-0.062,13.261c-0.554,3.882,1.171,4.188,1.171,4.188c1.726,0.616,4.56-0.688,4.56-0.688
	c3.635-1.048,4.312-8.183,4.312-8.183c0.184-2.525,0.431-8.339,0.431-8.339c0.123-3.573,3.882-4.213,3.882-4.213
	c3.081-0.185,4.621,1.862,4.621,1.862c2.032,3.818,2.279,8.46,2.279,8.46c0.123,7.393-1.849,11.265-1.849,11.265
	c-2.587,6.962-2.341,7.638-2.341,7.638c0.308,5.36,6.283,3.821,6.283,3.821c4.93,0,6.541-5.682,6.541-5.682
	c0.898,2.993,5.461,2.284,5.461,2.284c4.788-0.149,5.985-5.368,5.985-5.368c2.843,0.822,5.087-2.029,5.087-2.029
	c3.143-2.917,3.366-10.557,3.366-10.557c1.047,0.074,2.618-1.354,2.618-1.354c2.619-2.245,2.993-10.045,2.993-10.045
	c0.972-4.862,0-14.967,0-14.967c-0.374-3.366-5.611-17.735-5.611-17.735c-2.618-6.209-6.134-18.832-6.134-18.832
	c-1.122-4.937-2.918-14.081-2.918-14.081c-3.366-15.186-9.5-39.566-9.5-39.566c-3.666-11.222-12.568-33.062-12.568-33.062
	c-7.032-12.269-17.056-25.849-17.056-25.849C82.96-127.017,69.27-135.629,69.27-135.629c-10.548-4.264-22.741-10.395-22.741-10.395
	c-4.563-1.871-4.713-6.387-4.713-6.387l0.074-4.566c-0.149-1.795,0.075-3.238,0.075-3.238c4.339-4.413,10.249-14.79,10.249-14.79
	c3.74-7.107,5.835-16.274,5.835-16.274c2.095,0.749,4.638-0.142,4.638-0.142c3.217-0.224,5.162-5.365,5.162-5.365
	c1.271-3.516,2.865-13.719,2.865-13.719c1.311-4.721,2.36-12.573,2.36-12.573c0.759-5.076-1.836-9.673-1.836-9.673
	c-2.118-3.975-6.033-4.781-6.033-4.781c2.886-12.328,0-25.997,0-25.997c-2.623-14.952-16.291-28.592-16.291-28.592
	C32.031-314.155,0-313.243,0-313.243s-32.035-0.912-48.918,21.122C-48.918-292.121-62.583-278.481-65.206-263.529z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-63.102-259.289c0,0-2.765,13.396,0,25.211
	c0,0-3.752,0.857-5.782,4.667c0,0-2.486,4.511-1.759,9.375c0,0,1.005,7.668,2.262,12.192c0,0,1.527,9.928,2.746,13.298
	c0,0,1.864,5.014,4.946,5.229c0,0,2.438,0.914,4.445,0.197c0,0,2.008,8.981,5.592,15.792c0,0,5.664,10.163,9.822,14.393
	c0,0,0.215,1.416,0.072,3.136l0.071,4.427c0,0-0.143,4.423-4.516,6.215c0,0-11.686,6.198-21.794,10.285
	c0,0-13.12,8.774-30.254,25.765c0,0-9.606,13.402-16.345,25.16c0,0-8.532,21.368-12.044,32.122c0,0-5.879,23.866-9.105,38.419
	c0,0-1.721,8.943-2.796,13.675c0,0-3.369,12.344-5.879,18.294c0,0-5.018,14.006-5.376,17.232c0,0-0.932,9.874,0,14.534
	c0,0,0.358,7.611,2.867,9.763c0,0,1.506,1.406,2.509,1.334c0,0,0.215,7.463,3.226,10.259c0,0,2.151,2.808,4.875,2.019
	c0,0,1.147,5.113,5.736,5.257c0,0,4.373,0.772,5.233-2.094c0,0,1.545,5.569,6.269,5.569c0,0,5.727,1.607,6.022-3.53
	c0,0,0.236-0.52-2.244-7.19c0,0-1.889-3.523-1.771-10.608c0,0,0.236-4.3,2.185-7.96c0,0,1.476-1.885,4.428-1.708
	c0,0,3.601,0.703,3.719,4.127c0,0,0.237,5.688,0.414,8.109c0,0,0.649,6.969,4.133,7.972c0,0,2.716,1.319,4.369,0.729
	c0,0,1.653-0.215,1.122-3.936c0,0-0.827-4.86-0.059-12.477c0,0,0.413-3.07,0-4.959c0,0-1.417-4.525-4.724-8.895
	c0,0-3.542-4.275-3.601-9.354c0,0-0.237-2.201,0.708-3.5c0,0,7.713-9.947,11.414-18.593c0,0,3.996-6.914,5.059-11.401
	c0,0,1.594-6.599,1.712-9.787c0,0,4.547-3.689,6.436-5.342c0,0,5.019-2.254,8.207-6.092c0,0,4.428-3.831,5.078-7.609
	c0,0,1.358,12.809,1.476,26.566c0,0,1.003,21.259-0.532,36.61c0,0-4.074,36.741-6.849,49.081c0,0-7.026,38.836-7.852,52.002
	c0,0-1.24,21.514-0.827,35.506c0,0,0.118,5.021,1.004,12.52c0,0,4.133,24.127,9.269,40.423c0,0,6.967,23.315,8.68,28.215
	c0,0,2.775,9.518,2.243,16.011c0,0-1.358,10.774-1.358,13.668c0,0-0.708,13.919,1.181,19.056c0,0,2.306,5.668,6.321,6.081
	c0,0,2.9,0.118,3.549-1.182c0,0,1.447,1.949,4.281,1.949c0,0,3.752-0.473,4.343-2.126c0,0,0.848,1.299,4.154,1.358
	c0,0,4.305,0.177,5.131-2.539c0,0,0.656,1.535,3.313,1.299c0,0,3.942-0.767,5.005-2.538c0,0,2.103,2.007,4.878,1.712
	c0,0,5.468-0.296,5.94-4.133c0,0,0.891-2.48-1.057-6.141c0,0-4.602-9.565-7.495-15.233c0,0-5.993-9.801-6.347-11.218
	c0,0-1.085-1.24-0.967-4.9c0,0,2.553-17.653,2.14-25.507c0,0-0.153-8.502-1.807-18.008c0,0-1.642-9.684-2.941-14.111
	c0,0-1.006-4.191-0.179-8.737c0,0,1.096-6.142,3.162-12.399c0,0,4.218-9.034,5.871-19.662c0,0,4.153-14.436,2.322-21.58
	c0,0,4.286,1.653,9.866,2.688c0,0,4.74,0.885,9.375,0.708c4.636,0.177,9.367-0.708,9.367-0.708c5.579-1.034,9.861-2.688,9.861-2.688
	c-1.83,7.145,2.337,21.58,2.337,21.58c1.653,10.628,5.88,19.662,5.88,19.662c2.066,6.258,3.163,12.399,3.163,12.399
	c0.827,4.546-0.165,8.737-0.165,8.737c-1.299,4.428-2.93,14.111-2.93,14.111c-1.653,9.506-1.787,18.008-1.787,18.008
	c-0.414,7.854,2.165,25.507,2.165,25.507c0.118,3.66-0.96,4.9-0.96,4.9c-0.354,1.417-6.323,11.218-6.323,11.218
	c-2.894,5.668-7.464,15.233-7.464,15.233c-1.949,3.66-1.045,6.141-1.045,6.141c0.472,3.837,5.958,4.133,5.958,4.133
	c2.774,0.295,4.896-1.712,4.896-1.712c1.062,1.771,5.026,2.538,5.026,2.538c2.657,0.236,3.327-1.299,3.327-1.299
	c0.826,2.716,5.15,2.539,5.15,2.539c3.308-0.06,4.169-1.358,4.169-1.358c0.591,1.653,4.367,2.126,4.367,2.126
	c2.834,0,4.31-1.949,4.31-1.949c0.648,1.3,3.575,1.182,3.575,1.182c4.015-0.413,6.342-6.081,6.342-6.081
	c1.89-5.137,1.181-19.021,1.181-19.021c0-2.893-1.358-13.632-1.358-13.632c-0.53-6.494,2.244-15.981,2.244-15.981
	c1.712-4.901,8.679-28.173,8.679-28.173c5.138-16.296,9.271-40.369,9.271-40.369c0.886-7.499,1.004-12.494,1.004-12.494
	c0.413-13.993-0.827-35.441-0.827-35.441c-0.827-13.167-7.853-51.952-7.853-51.952c-2.775-12.34-6.85-49.01-6.85-49.01
	c-1.534-15.351-0.53-36.575-0.53-36.575c0.117-13.757,1.476-26.536,1.476-26.536c0.65,3.779,5.078,7.618,5.078,7.618
	c3.188,3.838,8.207,6.105,8.207,6.105c1.889,1.653,6.435,5.351,6.435,5.351c0.118,3.189,1.713,9.794,1.713,9.794
	c1.062,4.487,5.06,11.415,5.06,11.415c3.701,8.646,11.413,18.606,11.413,18.606c0.944,1.299,0.709,3.503,0.709,3.503
	c-0.06,5.078-3.603,9.364-3.603,9.364c-3.306,4.368-4.723,8.899-4.723,8.899c-0.413,1.89,0,4.962,0,4.962
	c0.768,7.616-0.059,12.489-0.059,12.489c-0.531,3.719,1.122,3.939,1.122,3.939c1.652,0.59,4.368-0.727,4.368-0.727
	c3.483-1.003,4.134-7.97,4.134-7.97c0.177-2.42,0.412-8.102,0.412-8.102c0.118-3.424,3.721-4.122,3.721-4.122
	c2.952-0.178,4.428,1.704,4.428,1.704c1.948,3.661,2.185,7.963,2.185,7.963c0.118,7.086-1.771,10.608-1.771,10.608
	c-2.479,6.671-2.243,7.188-2.243,7.188c0.295,5.137,6.022,3.53,6.022,3.53c4.723,0,6.268-5.569,6.268-5.569
	c0.861,2.866,5.234,2.091,5.234,2.091c4.588-0.144,5.734-5.261,5.734-5.261c2.725,0.789,4.875-2.025,4.875-2.025
	c3.012-2.796,3.227-10.266,3.227-10.266c1.004,0.07,2.509-1.34,2.509-1.34c2.51-2.15,2.868-9.768,2.868-9.768
	c0.932-4.66,0-14.542,0-14.542c-0.358-3.226-5.377-17.245-5.377-17.245c-2.509-5.95-5.878-18.312-5.878-18.312
	c-1.076-4.732-2.796-13.686-2.796-13.686c-3.227-14.554-9.105-38.463-9.105-38.463c-3.513-10.754-12.044-32.16-12.044-32.16
	c-6.739-11.757-16.346-25.193-16.346-25.193c-17.135-16.991-30.253-25.82-30.253-25.82c-10.109-4.086-21.794-10.319-21.794-10.319
	c-4.373-1.793-4.518-6.233-4.518-6.233l0.072-4.436c-0.144-1.72,0.072-3.145,0.072-3.145c4.157-4.23,9.82-14.42,9.82-14.42
	c3.585-6.811,5.592-15.829,5.592-15.829c2.009,0.717,4.445-0.204,4.445-0.204c3.083-0.215,4.947-5.248,4.947-5.248
	c1.219-3.37,2.746-13.336,2.746-13.336c1.256-4.525,2.262-12.221,2.262-12.221c0.728-4.865-1.76-9.404-1.76-9.404
	c-2.029-3.81-5.781-4.695-5.781-4.695c2.766-11.814,0-25.265,0-25.265c-2.514-14.329-15.847-27.4-15.847-27.4
	C31.075-307.805,0-306.932,0-306.932s-31.079-0.873-47.259,20.243C-47.259-286.689-60.588-273.618-63.102-259.289z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-60.998-255.049c0,0-2.645,13.173,0,24.475
	c0,0-3.589,0.934-5.53,4.578c0,0-2.379,4.451-1.683,9.104c0,0,0.961,7.509,2.164,11.838c0,0,1.46,9.688,2.626,12.911
	c0,0,1.783,4.905,4.732,5.11c0,0,2.331,0.945,4.251,0.259c0,0,1.92,8.83,5.349,15.344c0,0,5.417,9.974,9.395,14.02
	c0,0,0.205,1.397,0.068,3.043l0.069,4.296c0,0-0.137,4.345-4.321,6.06c0,0-11.177,6.296-20.846,10.205
	c0,0-12.549,8.988-28.938,25.24c0,0-9.189,13.255-15.635,24.501c0,0-8.16,20.931-11.52,31.217c0,0-5.623,23.391-8.709,37.312
	c0,0-1.646,8.752-2.675,13.278c0,0-3.222,12.083-5.623,17.774c0,0-4.8,13.654-5.143,16.74c0,0-0.891,9.651,0,14.109
	c0,0,0.343,7.428,2.743,9.484c0,0,1.44,1.388,2.4,1.318c0,0,0.206,7.294,3.086,9.968c0,0,2.057,2.77,4.663,2.014
	c0,0,1.097,5.014,5.486,5.15c0,0,4.183,0.84,5.006-1.903c0,0,1.478,5.459,5.996,5.459c0,0,5.478,1.674,5.76-3.239
	c0,0,0.226-0.361-2.146-6.742c0,0-1.807-3.172-1.694-9.949c0,0,0.226-3.962,2.09-7.464c0,0,1.412-1.72,4.235-1.55
	c0,0,3.445,0.761,3.558,4.037c0,0,0.226,5.555,0.396,7.869c0,0,0.621,6.802,3.953,7.762c0,0,2.598,1.331,4.179,0.767
	c0,0,1.581-0.129,1.073-3.687c0,0-0.79-4.42-0.056-11.705c0,0,0.395-2.848,0-4.654c0,0-1.356-4.145-4.518-8.324
	c0,0-3.389-3.905-3.445-8.763c0,0-0.226-2.041,0.677-3.284c0,0,7.377-9.12,10.918-17.39c0,0,3.823-6.386,4.839-10.678
	c0,0,1.525-6.131,1.638-9.181c0,0,4.348-3.382,6.156-4.963c0,0,4.8-1.978,7.85-5.649c0,0,4.235-3.498,4.857-7.113
	c0,0,1.299,12.634,1.412,25.793c0,0,0.96,20.858-0.509,35.543c0,0-3.896,35.856-6.551,47.66c0,0-6.72,37.9-7.511,50.496
	c0,0-1.186,21.089-0.791,34.474c0,0,0.113,4.982,0.96,12.154c0,0,3.954,23.675,8.867,39.262c0,0,6.664,22.727,8.302,27.414
	c0,0,2.654,9.337,2.146,15.549c0,0-1.299,10.503-1.299,13.271c0,0-0.678,13.588,1.13,18.502c0,0,2.228,5.421,6.068,5.816
	c0,0,2.782,0.113,3.404-1.13c0,0,1.394,1.864,4.105,1.864c0,0,3.601-0.452,4.166-2.033c0,0,0.821,1.242,3.984,1.299
	c0,0,4.132,0.169,4.923-2.429c0,0,0.635,1.469,3.176,1.243c0,0,3.784-0.734,4.801-2.429c0,0,2.023,1.921,4.678,1.638
	c0,0,5.249-0.282,5.701-3.953c0,0,0.869-2.372-0.995-5.874c0,0-4.356-9.149-7.123-14.57c0,0-5.7-9.375-6.038-10.73
	c0,0-1.025-1.187-0.912-4.688c0,0,2.51-16.886,2.115-24.397c0,0-0.099-8.132-1.68-17.226c0,0-1.532-9.262-2.774-13.497
	c0,0-0.94-4.01-0.15-8.358c0,0,1.082-5.873,3.059-11.86c0,0,4.091-8.64,5.672-18.806c0,0,4.03-13.809,2.279-20.643
	c0,0,4.127,1.581,9.464,2.57c0,0,4.558,0.847,8.992,0.677c4.433,0.17,8.982-0.677,8.982-0.677c5.337-0.989,9.459-2.57,9.459-2.57
	c-1.751,6.834,2.297,20.643,2.297,20.643c1.581,10.166,5.681,18.806,5.681,18.806c1.976,5.987,3.06,11.86,3.06,11.86
	c0.791,4.349-0.134,8.358-0.134,8.358c-1.242,4.235-2.762,13.497-2.762,13.497c-1.582,9.094-1.66,17.226-1.66,17.226
	c-0.395,7.512,2.144,24.397,2.144,24.397c0.113,3.501-0.904,4.688-0.904,4.688c-0.339,1.355-6.013,10.73-6.013,10.73
	c-2.767,5.421-7.09,14.57-7.09,14.57c-1.863,3.502-0.981,5.874-0.981,5.874c0.451,3.671,5.72,3.953,5.72,3.953
	c2.655,0.283,4.698-1.638,4.698-1.638c1.016,1.694,4.823,2.429,4.823,2.429c2.541,0.226,3.192-1.243,3.192-1.243
	c0.791,2.598,4.944,2.429,4.944,2.429c3.163-0.057,4-1.299,4-1.299c0.563,1.581,4.191,2.033,4.191,2.033
	c2.711,0,4.136-1.864,4.136-1.864c0.622,1.243,3.433,1.13,3.433,1.13c3.84-0.396,6.091-5.816,6.091-5.816
	c1.808-4.914,1.13-18.464,1.13-18.464c0-2.769-1.299-13.233-1.299-13.233c-0.508-6.213,2.146-15.519,2.146-15.519
	c1.638-4.688,8.302-27.367,8.302-27.367c4.913-15.587,8.867-39.204,8.867-39.204c0.847-7.172,0.96-12.127,0.96-12.127
	c0.395-13.386-0.791-34.404-0.791-34.404c-0.791-12.594-7.512-50.441-7.512-50.441c-2.654-11.804-6.551-47.583-6.551-47.583
	c-1.469-14.684-0.509-35.504-0.509-35.504c0.113-13.159,1.412-25.76,1.412-25.76c0.621,3.615,4.856,7.122,4.856,7.122
	c3.051,3.671,7.851,5.663,7.851,5.663c1.807,1.581,6.156,4.974,6.156,4.974c0.112,3.049,1.638,9.187,1.638,9.187
	c1.016,4.292,4.839,10.692,4.839,10.692c3.54,8.271,10.917,17.404,10.917,17.404c0.904,1.242,0.678,3.287,0.678,3.287
	c-0.056,4.857-3.444,8.774-3.444,8.774c-3.162,4.179-4.519,8.33-4.519,8.33c-0.395,1.808,0,4.656,0,4.656
	c0.734,7.286-0.056,11.719-0.056,11.719c-0.509,3.558,1.073,3.69,1.073,3.69c1.581,0.565,4.179-0.764,4.179-0.764
	c3.332-0.96,3.953-7.758,3.953-7.758c0.17-2.315,0.395-7.862,0.395-7.862c0.113-3.276,3.559-4.033,3.559-4.033
	c2.823-0.169,4.235,1.548,4.235,1.548c1.864,3.501,2.091,7.466,2.091,7.466c0.112,6.777-1.695,9.949-1.695,9.949
	c-2.372,6.382-2.146,6.739-2.146,6.739c0.283,4.913,5.762,3.242,5.762,3.242c4.518,0,5.996-5.46,5.996-5.46
	c0.822,2.742,5.006,1.899,5.006,1.899c4.388-0.137,5.485-5.153,5.485-5.153c2.605,0.754,4.663-2.021,4.663-2.021
	c2.88-2.675,3.085-9.977,3.085-9.977c0.96,0.068,2.4-1.323,2.4-1.323c2.4-2.058,2.743-9.491,2.743-9.491
	c0.892-4.457,0-14.118,0-14.118c-0.343-3.086-5.144-16.754-5.144-16.754c-2.399-5.691-5.623-17.793-5.623-17.793
	c-1.027-4.526-2.674-13.289-2.674-13.289c-3.086-13.92-8.709-37.359-8.709-37.359c-3.359-10.286-11.52-31.258-11.52-31.258
	c-6.446-11.246-15.636-24.538-15.636-24.538c-16.389-16.252-28.938-25.298-28.938-25.298c-9.669-3.909-20.847-10.243-20.847-10.243
	c-4.184-1.715-4.32-6.08-4.32-6.08l0.069-4.305c-0.138-1.646,0.067-3.053,0.067-3.053c3.979-4.046,9.396-14.049,9.396-14.049
	c3.429-6.514,5.349-15.383,5.349-15.383c1.92,0.685,4.251-0.268,4.251-0.268c2.949-0.206,4.732-5.13,4.732-5.13
	c1.166-3.223,2.626-12.953,2.626-12.953c1.201-4.328,2.164-11.869,2.164-11.869c0.695-4.653-1.684-9.136-1.684-9.136
	c-1.94-3.644-5.529-4.607-5.529-4.607c2.645-11.301,0-24.534,0-24.534c-2.405-13.706-15.403-26.209-15.403-26.209
	C30.119-301.456,0-300.62,0-300.62s-30.124-0.836-45.601,19.362C-45.6-281.258-58.593-268.755-60.998-255.049z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-58.894-250.809c0,0-2.525,12.951,0,23.738
	c0,0-3.426,1.011-5.279,4.489c0,0-2.27,4.392-1.607,8.834c0,0,0.918,7.351,2.066,11.483c0,0,1.394,9.448,2.507,12.525
	c0,0,1.702,4.795,4.517,4.992c0,0,2.225,0.975,4.058,0.32c0,0,1.833,8.678,5.106,14.896c0,0,5.171,9.785,8.967,13.647
	c0,0,0.196,1.379,0.066,2.95l0.065,4.165c0,0-0.131,4.268-4.124,5.904c0,0-10.669,6.396-19.899,10.127c0,0-11.978,9.2-27.622,24.713
	c0,0-8.772,13.109-14.924,23.844c0,0-7.79,20.493-10.997,30.312c0,0-5.368,22.916-8.313,36.204c0,0-1.571,8.561-2.553,12.881
	c0,0-3.077,11.82-5.368,17.253c0,0-4.581,13.304-4.909,16.249c0,0-0.851,9.428,0,13.683c0,0,0.328,7.245,2.618,9.208
	c0,0,1.375,1.368,2.291,1.304c0,0,0.197,7.124,2.946,9.677c0,0,1.964,2.729,4.451,2.009c0,0,1.047,4.911,5.237,5.042
	c0,0,3.993,0.908,4.778-1.711c0,0,1.411,5.348,5.723,5.348c0,0,5.229,1.74,5.499-2.949c0,0,0.216-0.202-2.049-6.294
	c0,0-1.725-2.821-1.617-9.29c0,0,0.216-3.624,1.995-6.967c0,0,1.348-1.555,4.043-1.393c0,0,3.288,0.82,3.396,3.946
	c0,0,0.216,5.423,0.378,7.633c0,0,0.593,6.633,3.773,7.549c0,0,2.48,1.344,3.989,0.805c0,0,1.51-0.042,1.025-3.438
	c0,0-0.755-3.979-0.054-10.933c0,0,0.377-2.623,0-4.349c0,0-1.294-3.766-4.313-7.755c0,0-3.234-3.537-3.288-8.173
	c0,0-0.216-1.88,0.647-3.066c0,0,7.041-8.293,10.421-16.188c0,0,3.649-5.858,4.619-9.955c0,0,1.456-5.662,1.563-8.573
	c0,0,4.151-3.075,5.876-4.584c0,0,4.583-1.702,7.494-5.206c0,0,4.043-3.166,4.636-6.617c0,0,1.24,12.459,1.348,25.02
	c0,0,0.916,20.459-0.486,34.475c0,0-3.719,34.974-6.253,46.24c0,0-6.415,36.967-7.17,48.989c0,0-1.132,20.666-0.755,33.441
	c0,0,0.108,4.944,0.917,11.79c0,0,3.773,23.223,8.463,38.102c0,0,6.362,22.139,7.925,26.613c0,0,2.534,9.155,2.049,15.086
	c0,0-1.24,10.233-1.24,12.874c0,0-0.647,13.26,1.078,17.949c0,0,2.151,5.176,5.816,5.553c0,0,2.665,0.107,3.258-1.078
	c0,0,1.343,1.778,3.931,1.778c0,0,3.449-0.431,3.988-1.939c0,0,0.795,1.186,3.814,1.239c0,0,3.959,0.161,4.714-2.318
	c0,0,0.614,1.402,3.04,1.186c0,0,3.626-0.699,4.597-2.317c0,0,1.944,1.833,4.478,1.563c0,0,5.031-0.27,5.463-3.773
	c0,0,0.845-2.265-0.934-5.606c0,0-4.111-8.733-6.752-13.909c0,0-5.405-8.948-5.729-10.241c0,0-0.965-1.134-0.857-4.476
	c0,0,2.468-16.119,2.091-23.288c0,0-0.044-7.763-1.553-16.441c0,0-1.422-8.842-2.608-12.886c0,0-0.874-3.826-0.119-7.978
	c0,0,1.068-5.607,2.955-11.321c0,0,3.963-8.248,5.472-17.951c0,0,3.909-13.181,2.238-19.704c0,0,3.966,1.51,9.061,2.453
	c0,0,4.377,0.809,8.608,0.647c4.231,0.161,8.601-0.647,8.601-0.647c5.094-0.943,9.056-2.453,9.056-2.453
	c-1.671,6.523,2.254,19.704,2.254,19.704c1.511,9.703,5.483,17.951,5.483,17.951c1.886,5.714,2.957,11.321,2.957,11.321
	c0.755,4.151-0.104,7.978-0.104,7.978c-1.186,4.044-2.595,12.886-2.595,12.886c-1.509,8.679-1.531,16.441-1.531,16.441
	c-0.377,7.169,2.121,23.288,2.121,23.288c0.108,3.342-0.85,4.476-0.85,4.476c-0.323,1.293-5.699,10.241-5.699,10.241
	c-2.642,5.176-6.717,13.909-6.717,13.909c-1.779,3.342-0.92,5.606-0.92,5.606c0.432,3.504,5.483,3.773,5.483,3.773
	c2.533,0.27,4.499-1.563,4.499-1.563c0.971,1.618,4.621,2.317,4.621,2.317c2.427,0.217,3.059-1.186,3.059-1.186
	c0.755,2.479,4.736,2.318,4.736,2.318c3.02-0.054,3.83-1.239,3.83-1.239c0.539,1.509,4.018,1.939,4.018,1.939
	c2.588,0,3.963-1.778,3.963-1.778c0.593,1.186,3.289,1.078,3.289,1.078c3.665-0.377,5.841-5.553,5.841-5.553
	c1.725-4.689,1.078-17.908,1.078-17.908c0-2.641-1.24-12.834-1.24-12.834c-0.485-5.93,2.049-15.053,2.049-15.053
	c1.563-4.474,7.924-26.562,7.924-26.562c4.69-14.879,8.465-38.039,8.465-38.039c0.809-6.847,0.916-11.76,0.916-11.76
	c0.378-12.776-0.755-33.367-0.755-33.367c-0.755-12.021-7.17-48.931-7.17-48.931c-2.534-11.267-6.253-46.155-6.253-46.155
	c-1.401-14.018-0.485-34.437-0.485-34.437c0.107-12.56,1.348-24.983,1.348-24.983c0.593,3.45,4.636,6.626,4.636,6.626
	c2.911,3.504,7.493,5.221,7.493,5.221c1.726,1.509,5.877,4.596,5.877,4.596c0.107,2.911,1.563,8.581,1.563,8.581
	c0.97,4.097,4.618,9.971,4.618,9.971c3.381,7.895,10.422,16.202,10.422,16.202c0.862,1.187,0.646,3.07,0.646,3.07
	c-0.054,4.636-3.288,8.184-3.288,8.184c-3.019,3.989-4.312,7.764-4.312,7.764c-0.377,1.725,0,4.351,0,4.351
	c0.701,6.954-0.055,10.946-0.055,10.946c-0.484,3.396,1.025,3.443,1.025,3.443c1.509,0.538,3.989-0.803,3.989-0.803
	c3.18-0.916,3.772-7.546,3.772-7.546c0.162-2.21,0.378-7.624,0.378-7.624c0.108-3.127,3.396-3.941,3.396-3.941
	c2.694-0.161,4.043,1.39,4.043,1.39c1.779,3.342,1.995,6.969,1.995,6.969c0.107,6.469-1.618,9.291-1.618,9.291
	c-2.264,6.092-2.048,6.29-2.048,6.29c0.27,4.69,5.499,2.952,5.499,2.952c4.312,0,5.723-5.349,5.723-5.349
	c0.785,2.618,4.778,1.708,4.778,1.708c4.189-0.132,5.236-5.048,5.236-5.048c2.487,0.721,4.451-2.017,4.451-2.017
	c2.749-2.553,2.945-9.687,2.945-9.687c0.917,0.065,2.291-1.308,2.291-1.308c2.291-1.964,2.619-9.214,2.619-9.214
	c0.851-4.255,0-13.693,0-13.693c-0.328-2.945-4.91-16.264-4.91-16.264c-2.291-5.433-5.367-17.274-5.367-17.274
	c-0.981-4.32-2.553-12.893-2.553-12.893c-2.945-13.287-8.313-36.255-8.313-36.255c-3.207-9.818-10.997-30.355-10.997-30.355
	c-6.151-10.735-14.924-23.883-14.924-23.883c-15.644-15.514-27.622-24.778-27.622-24.778c-9.229-3.731-19.898-10.166-19.898-10.166
	c-3.993-1.637-4.124-5.926-4.124-5.926l0.064-4.175c-0.131-1.571,0.066-2.961,0.066-2.961c3.796-3.862,8.967-13.677,8.967-13.677
	c3.273-6.219,5.106-14.939,5.106-14.939c1.833,0.654,4.058-0.33,4.058-0.33c2.815-0.197,4.517-5.014,4.517-5.014
	c1.113-3.076,2.508-12.569,2.508-12.569c1.146-4.132,2.065-11.517,2.065-11.517c0.663-4.442-1.606-8.867-1.606-8.867
	c-1.854-3.479-5.279-4.521-5.279-4.521c2.525-10.787,0-23.802,0-23.802c-2.295-13.083-14.959-25.018-14.959-25.018
	C29.163-295.106,0-294.309,0-294.309s-29.168-0.797-43.94,18.482C-43.94-275.827-56.599-263.892-58.894-250.809z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-56.79-246.569c0,0-2.404,12.728,0,23.002
	c0,0-3.263,1.087-5.028,4.4c0,0-2.162,4.333-1.53,8.563c0,0,0.875,7.193,1.968,11.128c0,0,1.327,9.209,2.387,12.139
	c0,0,1.621,4.686,4.302,4.873c0,0,2.119,1.006,3.865,0.382c0,0,1.745,8.526,4.862,14.449c0,0,4.925,9.594,8.541,13.273
	c0,0,0.187,1.36,0.062,2.856l0.063,4.034c0,0-0.125,4.192-3.928,5.75c0,0-10.161,6.494-18.951,10.047
	c0,0-11.408,9.414-26.308,24.188c0,0-8.353,12.962-14.213,23.186c0,0-7.419,20.055-10.473,29.406c0,0-5.112,22.442-7.917,35.097
	c0,0-1.496,8.37-2.432,12.484c0,0-2.93,11.558-5.111,16.732c0,0-4.364,12.953-4.676,15.758c0,0-0.81,9.206,0,13.258
	c0,0,0.312,7.061,2.494,8.932c0,0,1.309,1.348,2.182,1.286c0,0,0.187,6.955,2.805,9.386c0,0,1.87,2.69,4.239,2.005
	c0,0,0.997,4.81,4.987,4.935c0,0,3.803,0.975,4.551-1.519c0,0,1.343,5.237,5.451,5.237c0,0,4.98,1.806,5.237-2.661
	c0,0,0.205-0.043-1.951-5.845c0,0-1.643-2.471-1.541-8.632c0,0,0.206-3.286,1.9-6.47c0,0,1.284-1.39,3.851-1.236
	c0,0,3.131,0.88,3.234,3.857c0,0,0.206,5.29,0.36,7.396c0,0,0.564,6.465,3.593,7.337c0,0,2.362,1.356,3.8,0.843
	c0,0,1.437,0.046,0.975-3.189c0,0-0.719-3.538-0.051-10.161c0,0,0.359-2.399,0-4.043c0,0-1.232-3.387-4.107-7.186
	c0,0-3.081-3.166-3.132-7.581c0,0-0.206-1.719,0.616-2.849c0,0,6.706-7.468,9.925-14.985c0,0,3.475-5.331,4.399-9.232
	c0,0,1.386-5.193,1.489-7.967c0,0,3.953-2.768,5.596-4.206c0,0,4.364-1.425,7.137-4.762c0,0,3.85-2.834,4.415-6.12
	c0,0,1.181,12.283,1.284,24.246c0,0,0.872,20.059-0.463,33.408c0,0-3.542,34.089-5.955,44.818c0,0-6.11,36.033-6.829,47.483
	c0,0-1.078,20.242-0.718,32.41c0,0,0.102,4.905,0.872,11.426c0,0,3.594,22.77,8.061,36.939c0,0,6.058,21.551,7.547,25.812
	c0,0,2.413,8.976,1.951,14.623c0,0-1.181,9.963-1.181,12.479c0,0-0.616,12.929,1.027,17.396c0,0,2.074,4.929,5.565,5.288
	c0,0,2.547,0.103,3.112-1.027c0,0,1.291,1.695,3.755,1.695c0,0,3.298-0.411,3.812-1.849c0,0,0.768,1.13,3.643,1.181
	c0,0,3.786,0.154,4.505-2.208c0,0,0.594,1.335,2.905,1.13c0,0,3.468-0.668,4.392-2.208c0,0,1.865,1.746,4.278,1.489
	c0,0,4.813-0.257,5.224-3.594c0,0,0.822-2.156-0.872-5.34c0,0-3.865-8.317-6.381-13.245c0,0-5.111-8.523-5.419-9.756
	c0,0-0.906-1.077-0.803-4.262c0,0,2.427-15.351,2.067-22.179c0,0,0.011-7.394-1.427-15.659c0,0-1.312-8.42-2.441-12.271
	c0,0-0.808-3.646-0.089-7.599c0,0,1.055-5.34,2.852-10.782c0,0,3.835-7.854,5.273-17.097c0,0,3.786-12.553,2.195-18.765
	c0,0,3.807,1.437,8.659,2.336c0,0,4.195,0.77,8.226,0.616c4.03,0.153,8.216-0.616,8.216-0.616c4.853-0.899,8.654-2.336,8.654-2.336
	c-1.592,6.212,2.213,18.765,2.213,18.765c1.438,9.242,5.283,17.097,5.283,17.097c1.797,5.442,2.854,10.782,2.854,10.782
	c0.719,3.953-0.072,7.599-0.072,7.599c-1.13,3.851-2.427,12.271-2.427,12.271c-1.438,8.266-1.402,15.659-1.402,15.659
	c-0.36,6.828,2.099,22.179,2.099,22.179c0.103,3.185-0.795,4.262-0.795,4.262c-0.309,1.232-5.388,9.756-5.388,9.756
	c-2.517,4.928-6.344,13.245-6.344,13.245c-1.693,3.184-0.856,5.34-0.856,5.34c0.411,3.337,5.246,3.594,5.246,3.594
	c2.413,0.257,4.301-1.489,4.301-1.489c0.924,1.54,4.418,2.208,4.418,2.208c2.311,0.205,2.924-1.13,2.924-1.13
	c0.719,2.362,4.53,2.208,4.53,2.208c2.875-0.051,3.661-1.181,3.661-1.181c0.513,1.438,3.842,1.849,3.842,1.849
	c2.464,0,3.79-1.695,3.79-1.695c0.564,1.13,3.145,1.027,3.145,1.027c3.491-0.359,5.592-5.288,5.592-5.288
	c1.643-4.467,1.026-17.352,1.026-17.352c0-2.516-1.181-12.436-1.181-12.436c-0.462-5.646,1.951-14.587,1.951-14.587
	c1.488-4.262,7.547-25.759,7.547-25.759c4.467-14.17,8.061-36.873,8.061-36.873c0.771-6.521,0.873-11.395,0.873-11.395
	c0.359-12.168-0.719-32.329-0.719-32.329c-0.719-11.449-6.829-47.421-6.829-47.421c-2.413-10.729-5.955-44.729-5.955-44.729
	C56.697,25.818,57.57,5.802,57.57,5.802c0.103-11.963,1.283-24.207,1.283-24.207c0.564,3.285,4.416,6.13,4.416,6.13
	c2.771,3.337,7.136,4.778,7.136,4.778C72.047-6.059,76-3.278,76-3.278c0.104,2.772,1.489,7.974,1.489,7.974
	c0.924,3.901,4.399,9.25,4.399,9.25c3.219,7.518,9.925,15.001,9.925,15.001c0.822,1.129,0.616,2.852,0.616,2.852
	c-0.051,4.416-3.131,7.594-3.131,7.594c-2.875,3.801-4.108,7.194-4.108,7.194c-0.359,1.643,0,4.046,0,4.046
	c0.668,6.624-0.051,10.176-0.051,10.176c-0.462,3.234,0.975,3.194,0.975,3.194c1.438,0.513,3.8-0.84,3.8-0.84
	c3.029-0.872,3.595-7.334,3.595-7.334c0.153-2.105,0.358-7.386,0.358-7.386c0.104-2.979,3.235-3.852,3.235-3.852
	c2.566-0.154,3.85,1.233,3.85,1.233c1.694,3.183,1.9,6.472,1.9,6.472c0.102,6.161-1.54,8.632-1.54,8.632
	c-2.157,5.803-1.951,5.841-1.951,5.841c0.256,4.467,5.236,2.662,5.236,2.662c4.107,0,5.451-5.236,5.451-5.236
	c0.748,2.492,4.551,1.515,4.551,1.515c3.99-0.124,4.986-4.94,4.986-4.94c2.369,0.687,4.239-2.013,4.239-2.013
	c2.619-2.431,2.807-9.396,2.807-9.396c0.872,0.062,2.181-1.292,2.181-1.292c2.182-1.871,2.494-8.938,2.494-8.938
	c0.81-4.052,0-13.269,0-13.269c-0.312-2.806-4.675-15.774-4.675-15.774c-2.183-5.174-5.112-16.753-5.112-16.753
	c-0.936-4.115-2.432-12.497-2.432-12.497c-2.806-12.655-7.918-35.151-7.918-35.151c-3.054-9.351-10.473-29.454-10.473-29.454
	c-5.859-10.224-14.213-23.228-14.213-23.228c-14.899-14.774-26.308-24.256-26.308-24.256c-8.79-3.554-18.951-10.09-18.951-10.09
	c-3.804-1.559-3.927-5.773-3.927-5.773l0.062-4.044c-0.125-1.497,0.062-2.869,0.062-2.869c3.616-3.678,8.541-13.306,8.541-13.306
	c3.117-5.922,4.862-14.494,4.862-14.494c1.746,0.623,3.866-0.393,3.866-0.393c2.68-0.188,4.301-4.896,4.301-4.896
	c1.061-2.93,2.389-12.187,2.389-12.187c1.092-3.934,1.967-11.164,1.967-11.164c0.632-4.23-1.53-8.599-1.53-8.599
	c-1.765-3.313-5.028-4.434-5.028-4.434c2.405-10.273,0-23.07,0-23.07c-2.186-12.46-14.514-23.826-14.514-23.826
	C28.207-288.757,0-287.997,0-287.997s-28.212-0.76-42.281,17.602C-42.281-270.395-54.604-259.029-56.79-246.569z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-54.686-242.329c0,0-2.284,12.506,0,22.266
	c0,0-3.099,1.163-4.776,4.31c0,0-2.054,4.274-1.454,8.293c0,0,0.831,7.035,1.869,10.773c0,0,1.262,8.969,2.268,11.753
	c0,0,1.54,4.576,4.087,4.754c0,0,2.013,1.037,3.672,0.444c0,0,1.658,8.375,4.619,14.001c0,0,4.679,9.405,8.113,12.899
	c0,0,0.178,1.343,0.06,2.764l0.059,3.903c0,0-0.119,4.114-3.731,5.595c0,0-9.653,6.592-18.004,9.967c0,0-10.838,9.627-24.992,23.663
	c0,0-7.937,12.815-13.503,22.528c0,0-7.047,19.618-9.949,28.501c0,0-4.856,21.967-7.521,33.989c0,0-1.422,8.179-2.31,12.088
	c0,0-2.784,11.295-4.856,16.21c0,0-4.146,12.602-4.442,15.267c0,0-0.77,8.983,0,12.832c0,0,0.296,6.877,2.369,8.654
	c0,0,1.244,1.329,2.073,1.27c0,0,0.177,6.786,2.665,9.096c0,0,1.776,2.652,4.027,2.001c0,0,0.947,4.709,4.738,4.827
	c0,0,3.612,1.042,4.323-1.327c0,0,1.276,5.126,5.178,5.126c0,0,4.731,1.873,4.975-2.371c0,0,0.195,0.116-1.853-5.396
	c0,0-1.561-2.12-1.464-7.973c0,0,0.196-2.948,1.805-5.972c0,0,1.219-1.226,3.658-1.079c0,0,2.975,0.937,3.073,3.766
	c0,0,0.195,5.158,0.341,7.157c0,0,0.537,6.297,3.415,7.126c0,0,2.243,1.369,3.609,0.881c0,0,1.366,0.133,0.927-2.939
	c0,0-0.683-3.099-0.049-9.39c0,0,0.341-2.177,0-3.736c0,0-1.171-3.009-3.902-6.617c0,0-2.927-2.797-2.975-6.991
	c0,0-0.195-1.558,0.585-2.631c0,0,6.371-6.641,9.429-13.783c0,0,3.301-4.802,4.179-8.509c0,0,1.317-4.727,1.415-7.359
	c0,0,3.755-2.462,5.316-3.828c0,0,4.146-1.149,6.78-4.319c0,0,3.658-2.502,4.194-5.624c0,0,1.122,12.108,1.22,23.472
	c0,0,0.829,19.66-0.439,32.342c0,0-3.366,33.204-5.658,43.398c0,0-5.804,35.099-6.487,45.976c0,0-1.025,19.819-0.683,31.379
	c0,0,0.097,4.867,0.829,11.062c0,0,3.414,22.315,7.658,35.777c0,0,5.755,20.963,7.169,25.013c0,0,2.293,8.795,1.854,14.16
	c0,0-1.122,9.692-1.122,12.083c0,0-0.585,12.599,0.976,16.842c0,0,1.995,4.682,5.312,5.023c0,0,2.429,0.098,2.966-0.976
	c0,0,1.239,1.61,3.581,1.61c0,0,3.146-0.391,3.634-1.757c0,0,0.741,1.073,3.473,1.122c0,0,3.613,0.146,4.296-2.098
	c0,0,0.574,1.269,2.769,1.073c0,0,3.31-0.634,4.188-2.098c0,0,1.785,1.659,4.078,1.415c0,0,4.595-0.244,4.985-3.415
	c0,0,0.799-2.048-0.81-5.071c0,0-3.62-7.902-6.01-12.584c0,0-4.816-8.098-5.109-9.268c0,0-0.847-1.023-0.749-4.048
	c0,0,2.385-14.584,2.044-21.071c0,0,0.065-7.022-1.301-14.876c0,0-1.201-7.999-2.274-11.656c0,0-0.743-3.464-0.06-7.22
	c0,0,1.042-5.071,2.749-10.242c0,0,3.707-7.463,5.073-16.241c0,0,3.665-11.927,2.153-17.827c0,0,3.647,1.365,8.257,2.219
	c0,0,4.014,0.731,7.843,0.585c3.828,0.146,7.832-0.585,7.832-0.585c4.609-0.854,8.252-2.219,8.252-2.219
	c-1.512,5.9,2.173,17.827,2.173,17.827c1.365,8.778,5.084,16.241,5.084,16.241c1.707,5.171,2.751,10.242,2.751,10.242
	c0.683,3.756-0.04,7.22-0.04,7.22c-1.073,3.657-2.261,11.656-2.261,11.656c-1.365,7.854-1.274,14.876-1.274,14.876
	c-0.341,6.487,2.078,21.071,2.078,21.071c0.098,3.024-0.74,4.048-0.74,4.048c-0.293,1.17-5.077,9.268-5.077,9.268
	c-2.39,4.682-5.969,12.584-5.969,12.584c-1.61,3.023-0.794,5.071-0.794,5.071c0.39,3.171,5.009,3.415,5.009,3.415
	c2.292,0.244,4.102-1.415,4.102-1.415c0.879,1.464,4.217,2.098,4.217,2.098c2.194,0.195,2.789-1.073,2.789-1.073
	c0.683,2.244,4.321,2.098,4.321,2.098c2.732-0.049,3.492-1.122,3.492-1.122c0.488,1.366,3.667,1.757,3.667,1.757
	c2.341,0,3.618-1.61,3.618-1.61c0.536,1.073,3.001,0.976,3.001,0.976c3.316-0.342,5.341-5.023,5.341-5.023
	c1.562-4.243,0.976-16.795,0.976-16.795c0-2.391-1.122-12.037-1.122-12.037c-0.439-5.365,1.854-14.122,1.854-14.122
	c1.414-4.048,7.17-24.954,7.17-24.954c4.243-13.462,7.657-35.708,7.657-35.708c0.732-6.194,0.829-11.027,0.829-11.027
	c0.342-11.56-0.683-31.292-0.683-31.292c-0.683-10.877-6.486-45.91-6.486-45.91c-2.293-10.192-5.658-43.302-5.658-43.302
	C54.598,28.203,55.426,8.59,55.426,8.59c0.098-11.365,1.22-23.432,1.22-23.432c0.537,3.122,4.194,5.635,4.194,5.635
	c2.635,3.17,6.779,4.336,6.779,4.336c1.562,1.366,5.317,3.841,5.317,3.841c0.097,2.634,1.414,7.368,1.414,7.368
	c0.878,3.707,4.18,8.528,4.18,8.528c3.057,7.143,9.428,13.799,9.428,13.799c0.781,1.073,0.586,2.635,0.586,2.635
	c-0.049,4.195-2.976,7.005-2.976,7.005c-2.731,3.609-3.902,6.625-3.902,6.625c-0.341,1.562,0,3.741,0,3.741
	c0.635,6.292-0.048,9.404-0.048,9.404c-0.438,3.072,0.926,2.945,0.926,2.945c1.366,0.488,3.61-0.877,3.61-0.877
	c2.877-0.83,3.414-7.123,3.414-7.123c0.146-2,0.341-7.147,0.341-7.147c0.098-2.829,3.073-3.76,3.073-3.76
	c2.438-0.146,3.658,1.074,3.658,1.074c1.609,3.024,1.805,5.977,1.805,5.977c0.097,5.852-1.463,7.973-1.463,7.973
	c-2.049,5.513-1.854,5.393-1.854,5.393c0.244,4.243,4.976,2.372,4.976,2.372c3.901,0,5.178-5.126,5.178-5.126
	c0.711,2.368,4.324,1.323,4.324,1.323c3.79-0.119,4.736-4.833,4.736-4.833c2.252,0.651,4.028-2.009,4.028-2.009
	c2.487-2.31,2.665-9.106,2.665-9.106c0.829,0.059,2.072-1.276,2.072-1.276c2.073-1.777,2.369-8.66,2.369-8.66
	c0.77-3.85,0-12.844,0-12.844c-0.296-2.665-4.441-15.284-4.441-15.284c-2.073-4.915-4.856-16.234-4.856-16.234
	c-0.889-3.909-2.31-12.101-2.31-12.101c-2.665-12.022-7.521-34.047-7.521-34.047c-2.901-8.883-9.949-28.552-9.949-28.552
	c-5.567-9.712-13.503-22.572-13.503-22.572c-14.154-14.036-24.992-23.736-24.992-23.736c-8.35-3.375-18.004-10.013-18.004-10.013
	c-3.612-1.481-3.731-5.619-3.731-5.619l0.061-3.915c-0.119-1.421,0.059-2.775,0.059-2.775c3.436-3.494,8.113-12.936,8.113-12.936
	c2.962-5.626,4.62-14.049,4.62-14.049c1.658,0.592,3.672-0.455,3.672-0.455c2.546-0.178,4.086-4.779,4.086-4.779
	c1.007-2.784,2.268-11.804,2.268-11.804c1.038-3.738,1.869-10.812,1.869-10.812c0.602-4.019-1.454-8.331-1.454-8.331
	c-1.676-3.147-4.775-4.346-4.775-4.346c2.285-9.76,0-22.339,0-22.339c-2.076-11.837-14.07-22.635-14.07-22.635
	C27.25-282.408,0-281.686,0-281.686s-27.257-0.722-40.623,16.722C-40.622-264.964-52.609-254.166-54.686-242.329z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-52.583-238.089c0,0-2.164,12.283,0,21.53
	c0,0-2.936,1.239-4.525,4.221c0,0-1.946,4.215-1.377,8.022c0,0,0.787,6.877,1.771,10.418c0,0,1.195,8.73,2.149,11.366
	c0,0,1.458,4.468,3.871,4.636c0,0,1.907,1.067,3.478,0.506c0,0,1.571,8.223,4.377,13.553c0,0,4.432,9.216,7.686,12.526
	c0,0,0.168,1.324,0.056,2.671l0.056,3.771c0,0-0.112,4.037-3.534,5.44c0,0-9.146,6.69-17.056,9.888c0,0-10.268,9.839-23.677,23.137
	c0,0-7.518,12.668-12.792,21.869c0,0-6.677,19.181-9.426,27.597c0,0-4.601,21.491-7.125,32.881c0,0-1.347,7.988-2.189,11.691
	c0,0-2.637,11.033-4.6,15.689c0,0-3.928,12.251-4.208,14.775c0,0-0.73,8.761,0,12.407c0,0,0.28,6.693,2.244,8.376
	c0,0,1.178,1.311,1.964,1.254c0,0,0.168,6.617,2.524,8.806c0,0,1.684,2.612,3.816,1.996c0,0,0.897,4.607,4.488,4.72
	c0,0,3.423,1.108,4.096-1.136c0,0,1.209,5.015,4.906,5.015c0,0,4.482,1.938,4.713-2.081c0,0,0.185,0.275-1.756-4.947
	c0,0-1.479-1.77-1.386-7.314c0,0,0.184-2.61,1.709-5.476c0,0,1.156-1.06,3.466-0.921c0,0,2.818,0.996,2.911,3.676
	c0,0,0.185,5.025,0.323,6.92c0,0,0.509,6.129,3.235,6.913c0,0,2.125,1.383,3.419,0.921c0,0,1.294,0.219,0.878-2.692
	c0,0-0.647-2.657-0.046-8.617c0,0,0.323-1.953,0-3.432c0,0-1.109-2.628-3.697-6.048c0,0-2.772-2.427-2.818-6.4
	c0,0-0.185-1.397,0.554-2.413c0,0,6.036-5.813,8.933-12.58c0,0,3.127-4.274,3.959-7.787c0,0,1.248-4.257,1.34-6.752
	c0,0,3.558-2.155,5.037-3.449c0,0,3.927-0.873,6.422-3.876c0,0,3.466-2.17,3.974-5.127c0,0,1.063,11.932,1.156,22.698
	c0,0,0.785,19.26-0.416,31.274c0,0-3.189,32.32-5.36,41.978c0,0-5.499,34.165-6.146,44.47c0,0-0.97,19.396-0.646,30.347
	c0,0,0.093,4.829,0.786,10.696c0,0,3.234,21.864,7.254,34.617c0,0,5.453,20.376,6.793,24.211c0,0,2.171,8.615,1.756,13.698
	c0,0-1.063,9.422-1.063,11.687c0,0-0.555,12.269,0.924,16.289c0,0,1.918,4.436,5.06,4.759c0,0,2.312,0.093,2.82-0.924
	c0,0,1.188,1.524,3.406,1.524c0,0,2.995-0.37,3.457-1.663c0,0,0.715,1.017,3.303,1.062c0,0,3.44,0.139,4.087-1.987
	c0,0,0.554,1.202,2.633,1.017c0,0,3.152-0.601,3.984-1.986c0,0,1.706,1.57,3.878,1.34c0,0,4.377-0.231,4.746-3.234
	c0,0,0.776-1.94-0.748-4.806c0,0-3.375-7.486-5.639-11.921c0,0-4.522-7.671-4.799-8.78c0,0-0.788-0.97-0.695-3.835
	c0,0,2.343-13.815,2.02-19.962c0,0,0.119-6.654-1.174-14.093c0,0-1.091-7.578-2.108-11.043c0,0-0.676-3.281-0.029-6.839
	c0,0,1.028-4.807,2.645-9.704c0,0,3.58-7.069,4.874-15.388c0,0,3.542-11.297,2.11-16.888c0,0,3.488,1.293,7.855,2.103
	c0,0,3.832,0.692,7.46,0.554c3.627,0.139,7.449-0.554,7.449-0.554c4.366-0.81,7.849-2.103,7.849-2.103
	c-1.433,5.591,2.131,16.888,2.131,16.888c1.294,8.318,4.886,15.388,4.886,15.388c1.617,4.897,2.647,9.704,2.647,9.704
	c0.647,3.558-0.009,6.839-0.009,6.839c-1.017,3.465-2.092,11.043-2.092,11.043c-1.294,7.438-1.147,14.093-1.147,14.093
	c-0.324,6.146,2.057,19.962,2.057,19.962c0.092,2.865-0.687,3.835-0.687,3.835c-0.277,1.109-4.764,8.78-4.764,8.78
	c-2.265,4.435-5.597,11.921-5.597,11.921c-1.524,2.865-0.73,4.806-0.73,4.806c0.369,3.003,4.771,3.234,4.771,3.234
	c2.173,0.23,3.904-1.34,3.904-1.34c0.831,1.386,4.013,1.986,4.013,1.986c2.08,0.186,2.655-1.017,2.655-1.017
	c0.647,2.126,4.115,1.987,4.115,1.987c2.588-0.046,3.323-1.062,3.323-1.062c0.462,1.293,3.49,1.663,3.49,1.663
	c2.219,0,3.446-1.524,3.446-1.524c0.508,1.017,2.857,0.924,2.857,0.924c3.142-0.323,5.091-4.759,5.091-4.759
	c1.478-4.021,0.924-16.239,0.924-16.239c0-2.265-1.062-11.638-1.062-11.638c-0.416-5.082,1.756-13.657,1.756-13.657
	c1.34-3.835,6.792-24.149,6.792-24.149c4.02-12.754,7.255-34.542,7.255-34.542c0.692-5.869,0.785-10.661,0.785-10.661
	c0.323-10.951-0.646-30.255-0.646-30.255c-0.646-10.304-6.146-44.398-6.146-44.398c-2.173-9.657-5.36-41.876-5.36-41.876
	c-1.201-12.015-0.416-31.226-0.416-31.226c0.092-10.766,1.155-22.655,1.155-22.655c0.508,2.957,3.974,5.139,3.974,5.139
	c2.495,3.003,6.423,3.894,6.423,3.894c1.479,1.294,5.036,3.463,5.036,3.463c0.093,2.495,1.34,6.763,1.34,6.763
	c0.832,3.511,3.96,7.806,3.96,7.806c2.897,6.767,8.933,12.598,8.933,12.598c0.739,1.017,0.555,2.418,0.555,2.418
	c-0.046,3.975-2.819,6.414-2.819,6.414c-2.587,3.42-3.695,6.058-3.695,6.058c-0.324,1.479,0,3.435,0,3.435
	c0.6,5.961-0.048,8.633-0.048,8.633c-0.415,2.911,0.879,2.698,0.879,2.698c1.294,0.462,3.42-0.915,3.42-0.915
	c2.726-0.786,3.233-6.911,3.233-6.911c0.14-1.895,0.324-6.909,0.324-6.909c0.092-2.681,2.911-3.67,2.911-3.67
	c2.31-0.138,3.465,0.918,3.465,0.918c1.525,2.864,1.71,5.479,1.71,5.479c0.092,5.545-1.386,7.314-1.386,7.314
	c-1.941,5.223-1.756,4.943-1.756,4.943c0.23,4.02,4.713,2.083,4.713,2.083c3.697,0,4.906-5.016,4.906-5.016
	c0.673,2.244,4.095,1.132,4.095,1.132c3.591-0.112,4.489-4.727,4.489-4.727c2.132,0.617,3.814-2.005,3.814-2.005
	c2.357-2.188,2.525-8.816,2.525-8.816c0.785,0.056,1.964-1.261,1.964-1.261c1.963-1.684,2.244-8.383,2.244-8.383
	c0.729-3.646,0-12.42,0-12.42c-0.281-2.523-4.208-14.793-4.208-14.793c-1.964-4.657-4.602-15.715-4.602-15.715
	c-0.841-3.703-2.188-11.705-2.188-11.705c-2.525-11.389-7.125-32.943-7.125-32.943c-2.75-8.415-9.426-27.649-9.426-27.649
	c-5.274-9.202-12.792-21.918-12.792-21.918c-13.41-13.297-23.678-23.214-23.678-23.214c-7.911-3.198-17.056-9.937-17.056-9.937
	c-3.423-1.403-3.535-5.466-3.535-5.466l0.057-3.784c-0.112-1.346,0.056-2.683,0.056-2.683c3.255-3.31,7.687-12.564,7.687-12.564
	c2.806-5.33,4.376-13.605,4.376-13.605c1.571,0.561,3.479-0.518,3.479-0.518c2.412-0.168,3.871-4.661,3.871-4.661
	c0.954-2.637,2.148-11.421,2.148-11.421c0.984-3.541,1.771-10.46,1.771-10.46c0.568-3.807-1.377-8.062-1.377-8.062
	c-1.588-2.982-4.525-4.26-4.525-4.26c2.165-9.246,0-21.607,0-21.607c-1.967-11.214-13.625-21.444-13.625-21.444
	C26.293-276.058,0-275.375,0-275.375s-26.301-0.683-38.963,15.842C-38.962-259.533-50.615-249.303-52.583-238.089z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-50.478-233.849c0,0-2.044,12.061,0,20.793
	c0,0-2.773,1.317-4.273,4.133c0,0-1.839,4.155-1.301,7.75c0,0,0.743,6.72,1.672,10.064c0,0,1.129,8.49,2.03,10.98
	c0,0,1.377,4.358,3.656,4.517c0,0,1.801,1.098,3.285,0.568c0,0,1.484,8.072,4.133,13.105c0,0,4.186,9.027,7.26,12.153
	c0,0,0.159,1.306,0.053,2.577l0.053,3.641c0,0-0.106,3.961-3.339,5.285c0,0-8.637,6.789-16.108,9.809
	c0,0-9.697,10.053-22.361,22.611c0,0-7.101,12.522-12.082,21.212c0,0-6.306,18.743-8.902,26.691c0,0-4.345,21.017-6.73,31.774
	c0,0-1.271,7.797-2.066,11.294c0,0-2.491,10.77-4.345,15.168c0,0-3.709,11.9-3.974,14.284c0,0-0.689,8.538,0,11.982
	c0,0,0.265,6.509,2.119,8.099c0,0,1.113,1.291,1.855,1.238c0,0,0.159,6.448,2.384,8.515c0,0,1.59,2.574,3.603,1.991
	c0,0,0.848,4.507,4.24,4.613c0,0,3.232,1.175,3.868-0.944c0,0,1.142,4.903,4.633,4.903c0,0,4.233,2.006,4.451-1.791
	c0,0,0.175,0.434-1.658-4.498c0,0-1.397-1.419-1.309-6.656c0,0,0.174-2.271,1.614-4.978c0,0,1.091-0.896,3.273-0.764
	c0,0,2.662,1.054,2.75,3.585c0,0,0.174,4.893,0.305,6.682c0,0,0.48,5.961,3.055,6.702c0,0,2.008,1.394,3.229,0.958
	c0,0,1.222,0.306,0.83-2.443c0,0-0.611-2.216-0.044-7.845c0,0,0.305-1.73,0-3.126c0,0-1.047-2.249-3.491-5.479
	c0,0-2.619-2.056-2.662-5.809c0,0-0.175-1.237,0.523-2.197c0,0,5.701-4.985,8.437-11.377c0,0,2.954-3.747,3.739-7.063
	c0,0,1.178-3.788,1.266-6.146c0,0,3.36-1.849,4.756-3.071c0,0,3.71-0.596,6.066-3.432c0,0,3.273-1.838,3.753-4.631
	c0,0,1.004,11.757,1.091,21.925c0,0,0.742,18.86-0.392,30.207c0,0-3.012,31.438-5.063,40.557c0,0-5.193,33.231-5.804,42.964
	c0,0-0.916,18.972-0.611,29.314c0,0,0.088,4.79,0.742,10.332c0,0,3.055,21.412,6.852,33.456c0,0,5.149,19.788,6.415,23.41
	c0,0,2.051,8.435,1.658,13.235c0,0-1.004,9.151-1.004,11.291c0,0-0.523,11.938,0.873,15.734c0,0,1.841,4.189,4.809,4.495
	c0,0,2.194,0.087,2.674-0.873c0,0,1.136,1.44,3.231,1.44c0,0,2.843-0.35,3.28-1.571c0,0,0.688,0.96,3.132,1.004
	c0,0,3.267,0.131,3.878-1.877c0,0,0.534,1.135,2.498,0.961c0,0,2.993-0.568,3.779-1.877c0,0,1.627,1.484,3.678,1.266
	c0,0,4.158-0.219,4.508-3.055c0,0,0.753-1.833-0.687-4.539c0,0-3.129-7.07-5.268-11.259c0,0-4.228-7.244-4.489-8.292
	c0,0-0.729-0.916-0.641-3.622c0,0,2.301-13.048,1.996-18.852c0,0,0.174-6.285-1.048-13.312c0,0-0.981-7.157-1.941-10.43
	c0,0-0.61-3.099,0.001-6.458c0,0,1.015-4.539,2.542-9.165c0,0,3.452-6.677,4.674-14.532c0,0,3.421-10.67,2.068-15.951
	c0,0,3.329,1.223,7.453,1.986c0,0,3.651,0.655,7.077,0.523c3.425,0.132,7.064-0.523,7.064-0.523
	c4.124-0.764,7.447-1.986,7.447-1.986c-1.354,5.281,2.09,15.951,2.09,15.951c1.221,7.855,4.687,14.532,4.687,14.532
	c1.527,4.626,2.545,9.165,2.545,9.165c0.61,3.359,0.021,6.458,0.021,6.458c-0.96,3.272-1.924,10.43-1.924,10.43
	c-1.222,7.026-1.019,13.312-1.019,13.312c-0.306,5.804,2.034,18.852,2.034,18.852c0.088,2.706-0.631,3.622-0.631,3.622
	c-0.262,1.048-4.453,8.292-4.453,8.292c-2.138,4.188-5.222,11.259-5.222,11.259c-1.44,2.706-0.669,4.539-0.669,4.539
	c0.349,2.836,4.535,3.055,4.535,3.055c2.051,0.219,3.705-1.266,3.705-1.266c0.785,1.309,3.811,1.877,3.811,1.877
	c1.964,0.174,2.521-0.961,2.521-0.961c0.61,2.008,3.907,1.877,3.907,1.877c2.444-0.044,3.153-1.004,3.153-1.004
	c0.437,1.222,3.317,1.571,3.317,1.571c2.094,0,3.271-1.44,3.271-1.44c0.48,0.96,2.714,0.873,2.714,0.873
	c2.968-0.306,4.841-4.495,4.841-4.495c1.396-3.797,0.873-15.682,0.873-15.682c0-2.14-1.004-11.239-1.004-11.239
	c-0.393-4.8,1.658-13.192,1.658-13.192c1.266-3.622,6.415-23.346,6.415-23.346c3.797-12.044,6.852-33.376,6.852-33.376
	c0.654-5.542,0.741-10.294,0.741-10.294c0.307-10.343-0.61-29.218-0.61-29.218c-0.611-9.732-5.804-42.888-5.804-42.888
	c-2.052-9.12-5.062-40.449-5.062-40.449c-1.135-11.348-0.393-30.155-0.393-30.155c0.087-10.168,1.091-21.879,1.091-21.879
	c0.479,2.793,3.753,4.642,3.753,4.642c2.356,2.837,6.065,3.453,6.065,3.453c1.397,1.223,4.758,3.085,4.758,3.085
	c0.087,2.357,1.266,6.155,1.266,6.155c0.785,3.317,3.739,7.085,3.739,7.085c2.735,6.391,8.436,11.396,8.436,11.396
	c0.698,0.96,0.524,2.2,0.524,2.2c-0.044,3.753-2.662,5.825-2.662,5.825c-2.444,3.229-3.491,5.488-3.491,5.488
	c-0.306,1.396,0,3.13,0,3.13c0.567,5.63-0.044,7.861-0.044,7.861c-0.393,2.75,0.829,2.449,0.829,2.449
	c1.222,0.438,3.229-0.952,3.229-0.952c2.574-0.742,3.055-6.699,3.055-6.699c0.131-1.79,0.306-6.671,0.306-6.671
	c0.087-2.531,2.749-3.579,2.749-3.579c2.182-0.131,3.273,0.76,3.273,0.76c1.439,2.706,1.614,4.982,1.614,4.982
	c0.087,5.236-1.309,6.655-1.309,6.655c-1.833,4.933-1.659,4.494-1.659,4.494c0.219,3.796,4.452,1.793,4.452,1.793
	c3.491,0,4.633-4.903,4.633-4.903c0.636,2.118,3.868,0.938,3.868,0.938c3.391-0.105,4.239-4.618,4.239-4.618
	c2.014,0.582,3.603-2.001,3.603-2.001c2.227-2.066,2.385-8.527,2.385-8.527c0.742,0.053,1.855-1.244,1.855-1.244
	c1.854-1.59,2.119-8.106,2.119-8.106c0.688-3.444,0-11.995,0-11.995c-0.265-2.385-3.975-14.303-3.975-14.303
	c-1.854-4.398-4.345-15.195-4.345-15.195c-0.795-3.498-2.066-11.31-2.066-11.31c-2.385-10.756-6.729-31.838-6.729-31.838
	C94.106-65.212,87.8-84.011,87.8-84.011c-4.98-8.69-12.082-21.263-12.082-21.263c-12.663-12.558-22.36-22.692-22.36-22.692
	c-7.473-3.021-16.109-9.861-16.109-9.861c-3.231-1.325-3.338-5.312-3.338-5.312l0.053-3.654c-0.105-1.272,0.054-2.591,0.054-2.591
	c3.072-3.126,7.259-12.193,7.259-12.193c2.649-5.034,4.133-13.16,4.133-13.16c1.484,0.53,3.286-0.58,3.286-0.58
	c2.278-0.159,3.656-4.545,3.656-4.545c0.9-2.49,2.029-11.037,2.029-11.037c0.93-3.345,1.672-10.108,1.672-10.108
	c0.537-3.596-1.301-7.794-1.301-7.794c-1.5-2.816-4.272-4.173-4.272-4.173c2.043-8.732,0-20.875,0-20.875
	c-1.858-10.591-13.183-20.252-13.183-20.252C25.337-269.709,0-269.063,0-269.063s-25.345-0.646-37.304,14.962
	C-37.303-254.101-48.62-244.44-50.478-233.849z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-48.375-229.609c0,0-1.924,11.838,0,20.057
	c0,0-2.61,1.393-4.022,4.043c0,0-1.73,4.096-1.224,7.48c0,0,0.699,6.561,1.574,9.709c0,0,1.062,8.25,1.91,10.594
	c0,0,1.296,4.249,3.441,4.398c0,0,1.696,1.129,3.092,0.63c0,0,1.396,7.92,3.89,12.658c0,0,3.94,8.837,6.832,11.779
	c0,0,0.15,1.287,0.05,2.484l0.05,3.51c0,0-0.1,3.883-3.142,5.13c0,0-8.129,6.887-15.161,9.73c0,0-9.126,10.265-21.046,22.085
	c0,0-6.683,12.375-11.37,20.554c0,0-5.935,18.305-8.379,25.786c0,0-4.089,20.542-6.334,30.666c0,0-1.197,7.605-1.945,10.897
	c0,0-2.344,10.508-4.089,14.648c0,0-3.491,11.548-3.741,13.792c0,0-0.648,8.314,0,11.557c0,0,0.25,6.325,1.995,7.821
	c0,0,1.048,1.271,1.746,1.222c0,0,0.149,6.279,2.244,8.225c0,0,1.496,2.535,3.391,1.986c0,0,0.798,4.405,3.99,4.505
	c0,0,3.042,1.243,3.641-0.752c0,0,1.075,4.792,4.36,4.792c0,0,3.984,2.073,4.19-1.501c0,0,0.164,0.593-1.561-4.049
	c0,0-1.314-1.068-1.232-5.998c0,0,0.164-1.934,1.52-4.48c0,0,1.026-0.73,3.08-0.607c0,0,2.506,1.113,2.588,3.495
	c0,0,0.164,4.76,0.287,6.444c0,0,0.452,5.793,2.875,6.49c0,0,1.89,1.407,3.04,0.996c0,0,1.15,0.394,0.78-2.194
	c0,0-0.575-1.774-0.041-7.073c0,0,0.288-1.506,0-2.82c0,0-0.986-1.87-3.286-4.909c0,0-2.464-1.687-2.505-5.219
	c0,0-0.165-1.075,0.493-1.979c0,0,5.365-4.16,7.94-10.176c0,0,2.78-3.219,3.519-6.341c0,0,1.109-3.319,1.191-5.538
	c0,0,3.163-1.542,4.477-2.691c0,0,3.491-0.32,5.709-2.989c0,0,3.081-1.506,3.533-4.135c0,0,0.944,11.582,1.026,21.151
	c0,0,0.699,18.461-0.369,29.141c0,0-2.834,30.552-4.765,39.136c0,0-4.887,32.297-5.462,41.456c0,0-0.863,18.549-0.575,28.283
	c0,0,0.082,4.752,0.698,9.969c0,0,2.875,20.958,6.448,32.294c0,0,4.847,19.2,6.038,22.609c0,0,1.93,8.254,1.561,12.771
	c0,0-0.945,8.883-0.945,10.896c0,0-0.493,11.608,0.822,15.182c0,0,1.763,3.943,4.556,4.231c0,0,2.076,0.082,2.528-0.822
	c0,0,1.085,1.354,3.056,1.354c0,0,2.692-0.327,3.103-1.478c0,0,0.662,0.903,2.962,0.945c0,0,3.094,0.123,3.669-1.768
	c0,0,0.514,1.068,2.362,0.904c0,0,2.835-0.534,3.575-1.766c0,0,1.547,1.396,3.478,1.19c0,0,3.94-0.205,4.269-2.875
	c0,0,0.73-1.725-0.626-4.271c0,0-2.883-6.654-4.895-10.598c0,0-3.934-6.817-4.181-7.804c0,0-0.668-0.862-0.586-3.409
	c0,0,2.26-12.281,1.972-17.743c0,0,0.229-5.915-0.921-12.527c0,0-0.871-6.736-1.774-9.816c0,0-0.545-2.916,0.03-6.079
	c0,0,1.001-4.271,2.439-8.625c0,0,3.324-6.284,4.474-13.678c0,0,3.299-10.042,2.026-15.012c0,0,3.169,1.149,7.051,1.868
	c0,0,3.47,0.616,6.694,0.493c3.224,0.123,6.681-0.493,6.681-0.493c3.883-0.719,7.046-1.868,7.046-1.868
	c-1.274,4.97,2.048,15.012,2.048,15.012c1.149,7.394,4.487,13.678,4.487,13.678c1.438,4.354,2.442,8.625,2.442,8.625
	c0.575,3.163,0.052,6.079,0.052,6.079c-0.902,3.08-1.756,9.816-1.756,9.816c-1.15,6.612-0.891,12.527-0.891,12.527
	c-0.288,5.462,2.013,17.743,2.013,17.743c0.082,2.547-0.577,3.409-0.577,3.409c-0.246,0.986-4.141,7.804-4.141,7.804
	c-2.012,3.943-4.849,10.598-4.849,10.598c-1.354,2.547-0.605,4.271-0.605,4.271c0.329,2.67,4.297,2.875,4.297,2.875
	c1.931,0.205,3.507-1.19,3.507-1.19c0.739,1.231,3.608,1.766,3.608,1.766c1.849,0.164,2.386-0.904,2.386-0.904
	c0.575,1.891,3.701,1.768,3.701,1.768c2.3-0.042,2.984-0.945,2.984-0.945c0.409,1.15,3.141,1.478,3.141,1.478
	c1.971,0,3.1-1.354,3.1-1.354c0.452,0.904,2.57,0.822,2.57,0.822c2.793-0.288,4.59-4.231,4.59-4.231
	c1.315-3.573,0.822-15.126,0.822-15.126c0-2.013-0.945-10.84-0.945-10.84c-0.37-4.519,1.562-12.728,1.562-12.728
	c1.19-3.408,6.038-22.541,6.038-22.541c3.572-11.336,6.447-32.21,6.447-32.21c0.616-5.217,0.698-9.928,0.698-9.928
	c0.288-9.734-0.575-28.181-0.575-28.181c-0.575-9.159-5.462-41.377-5.462-41.377c-1.931-8.584-4.765-39.023-4.765-39.023
	c-1.068-10.679-0.37-29.085-0.37-29.085c0.083-9.57,1.027-21.103,1.027-21.103c0.451,2.629,3.532,4.147,3.532,4.147
	c2.219,2.67,5.709,3.011,5.709,3.011c1.314,1.15,4.478,2.707,4.478,2.707c0.082,2.219,1.19,5.55,1.19,5.55
	c0.739,3.122,3.52,6.362,3.52,6.362c2.575,6.016,7.939,10.194,7.939,10.194c0.657,0.904,0.493,1.984,0.493,1.984
	c-0.041,3.532-2.505,5.234-2.505,5.234c-2.3,3.039-3.286,4.92-3.286,4.92c-0.288,1.314,0,2.824,0,2.824
	c0.534,5.299-0.041,7.091-0.041,7.091c-0.37,2.587,0.78,2.201,0.78,2.201c1.15,0.411,3.04-0.991,3.04-0.991
	c2.423-0.698,2.875-6.486,2.875-6.486c0.123-1.685,0.287-6.434,0.287-6.434c0.082-2.382,2.588-3.487,2.588-3.487
	c2.053-0.123,3.08,0.602,3.08,0.602c1.355,2.547,1.52,4.485,1.52,4.485c0.082,4.929-1.231,5.998-1.231,5.998
	c-1.726,4.642-1.562,4.044-1.562,4.044c0.205,3.573,4.189,1.504,4.189,1.504c3.286,0,4.36-4.793,4.36-4.793
	c0.6,1.995,3.642,0.748,3.642,0.748c3.192-0.101,3.99-4.513,3.99-4.513c1.895,0.548,3.391-1.997,3.391-1.997
	c2.094-1.944,2.244-8.236,2.244-8.236c0.698,0.05,1.746-1.229,1.746-1.229c1.745-1.497,1.994-7.829,1.994-7.829
	c0.648-3.241,0-11.57,0-11.57c-0.249-2.244-3.74-13.812-3.74-13.812c-1.745-4.14-4.089-14.676-4.089-14.676
	c-0.749-3.292-1.945-10.913-1.945-10.913c-2.245-10.124-6.334-30.735-6.334-30.735C89.435-65.728,83.5-84.093,83.5-84.093
	C78.812-92.271,72.13-104.7,72.13-104.7c-11.92-11.82-21.046-22.172-21.046-22.172c-7.032-2.842-15.161-9.784-15.161-9.784
	c-3.043-1.247-3.142-5.159-3.142-5.159l0.05-3.523c-0.101-1.197,0.049-2.499,0.049-2.499c2.894-2.942,6.833-11.821,6.833-11.821
	c2.493-4.738,3.89-12.716,3.89-12.716c1.396,0.498,3.093-0.643,3.093-0.643c2.144-0.149,3.44-4.427,3.44-4.427
	c0.849-2.344,1.91-10.655,1.91-10.655c0.875-3.147,1.574-9.755,1.574-9.755c0.506-3.384-1.224-7.526-1.224-7.526
	c-1.412-2.65-4.022-4.085-4.022-4.085c1.923-8.219,0-20.144,0-20.144c-1.749-9.968-12.737-19.061-12.737-19.061
	C24.381-263.359,0-262.751,0-262.751s-24.389-0.607-35.644,14.082C-35.644-248.67-46.625-239.577-48.375-229.609z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-46.271-225.369c0,0-1.803,11.616,0,19.321
	c0,0-2.447,1.469-3.771,3.954c0,0-1.622,4.036-1.147,7.209c0,0,0.655,6.403,1.475,9.354c0,0,0.996,8.011,1.791,10.208
	c0,0,1.216,4.139,3.226,4.279c0,0,1.59,1.16,2.899,0.692c0,0,1.309,7.768,3.647,12.21c0,0,3.693,8.648,6.405,11.406
	c0,0,0.14,1.269,0.047,2.391l0.047,3.378c0,0-0.094,3.807-2.946,4.976c0,0-7.621,6.985-14.213,9.65c0,0-8.557,10.479-19.731,21.56
	c0,0-6.265,12.228-10.66,19.895c0,0-5.564,17.868-7.855,24.881c0,0-3.834,20.068-5.938,29.559c0,0-1.122,7.414-1.823,10.5
	c0,0-2.198,10.246-3.834,14.127c0,0-3.273,11.197-3.507,13.301c0,0-0.608,8.092,0,11.131c0,0,0.234,6.142,1.87,7.544
	c0,0,0.982,1.253,1.637,1.206c0,0,0.14,6.11,2.104,7.933c0,0,1.403,2.497,3.179,1.983c0,0,0.748,4.304,3.741,4.398
	c0,0,2.852,1.31,3.413-0.562c0,0,1.007,4.681,4.088,4.681c0,0,3.735,2.14,3.927-1.211c0,0,0.154,0.751-1.463-3.6
	c0,0-1.232-0.719-1.155-5.339c0,0,0.154-1.598,1.425-3.984c0,0,0.962-0.564,2.888-0.45c0,0,2.349,1.173,2.426,3.405
	c0,0,0.154,4.627,0.269,6.206c0,0,0.424,5.625,2.696,6.279c0,0,1.771,1.419,2.849,1.034c0,0,1.078,0.479,0.732-1.946
	c0,0-0.54-1.333-0.039-6.301c0,0,0.271-1.282,0-2.515c0,0-0.924-1.49-3.08-4.341c0,0-2.311-1.315-2.349-4.628
	c0,0-0.154-0.914,0.462-1.761c0,0,5.03-3.333,7.443-8.973c0,0,2.607-2.691,3.3-5.617c0,0,1.04-2.853,1.117-4.933
	c0,0,2.965-1.234,4.197-2.312c0,0,3.273-0.043,5.352-2.546c0,0,2.888-1.175,3.312-3.638c0,0,0.885,11.406,0.962,20.377
	c0,0,0.655,18.062-0.346,28.072c0,0-2.657,29.669-4.467,37.716c0,0-4.582,31.363-5.121,39.95c0,0-0.809,18.125-0.539,27.251
	c0,0,0.077,4.713,0.654,9.604c0,0,2.696,20.506,6.046,31.133c0,0,4.543,18.612,5.66,21.808c0,0,1.81,8.074,1.463,12.311
	c0,0-0.885,8.611-0.885,10.499c0,0-0.462,11.277,0.77,14.628c0,0,1.686,3.696,4.305,3.966c0,0,1.958,0.077,2.382-0.771
	c0,0,1.032,1.271,2.881,1.271c0,0,2.54-0.308,2.925-1.387c0,0,0.635,0.848,2.792,0.886c0,0,2.921,0.116,3.46-1.656
	c0,0,0.493,1.002,2.226,0.848c0,0,2.677-0.5,3.371-1.655c0,0,1.468,1.309,3.278,1.116c0,0,3.722-0.192,4.03-2.695
	c0,0,0.707-1.617-0.564-4.005c0,0-2.637-6.238-4.524-9.935c0,0-3.64-6.392-3.871-7.315c0,0-0.609-0.81-0.532-3.196
	c0,0,2.218-11.514,1.948-16.635c0,0,0.284-5.545-0.794-11.744c0,0-0.761-6.315-1.608-9.203c0,0-0.478-2.734,0.061-5.699
	c0,0,0.987-4.005,2.335-8.087c0,0,3.197-5.891,4.275-12.821c0,0,3.177-9.415,1.983-14.074c0,0,3.01,1.078,6.649,1.752
	c0,0,3.288,0.578,6.312,0.462c3.021,0.116,6.298-0.462,6.298-0.462c3.638-0.674,6.642-1.752,6.642-1.752
	c-1.193,4.659,2.007,14.074,2.007,14.074c1.078,6.931,4.289,12.821,4.289,12.821c1.349,4.082,2.338,8.087,2.338,8.087
	c0.539,2.965,0.084,5.699,0.084,5.699c-0.847,2.888-1.589,9.203-1.589,9.203c-1.077,6.199-0.763,11.744-0.763,11.744
	c-0.269,5.121,1.991,16.635,1.991,16.635c0.077,2.387-0.521,3.196-0.521,3.196c-0.23,0.924-3.829,7.315-3.829,7.315
	c-1.887,3.696-4.475,9.935-4.475,9.935c-1.27,2.388-0.543,4.005-0.543,4.005c0.308,2.503,4.06,2.695,4.06,2.695
	c1.81,0.192,3.309-1.116,3.309-1.116c0.692,1.155,3.406,1.655,3.406,1.655c1.731,0.154,2.25-0.848,2.25-0.848
	c0.54,1.772,3.493,1.656,3.493,1.656c2.157-0.038,2.815-0.886,2.815-0.886c0.385,1.079,2.966,1.387,2.966,1.387
	c1.85,0,2.928-1.271,2.928-1.271c0.425,0.848,2.427,0.771,2.427,0.771c2.618-0.27,4.34-3.966,4.34-3.966
	c1.231-3.351,0.77-14.57,0.77-14.57c0-1.887-0.885-10.441-0.885-10.441c-0.347-4.234,1.463-12.262,1.463-12.262
	c1.116-3.196,5.66-21.735,5.66-21.735c3.35-10.629,6.046-31.046,6.046-31.046c0.577-4.89,0.654-9.561,0.654-9.561
	c0.27-9.126-0.539-27.143-0.539-27.143c-0.539-8.588-5.121-39.867-5.121-39.867c-1.81-8.048-4.467-37.597-4.467-37.597
	c-1.001-10.012-0.346-28.015-0.346-28.015c0.076-8.972,0.962-20.327,0.962-20.327c0.424,2.465,3.312,3.651,3.312,3.651
	c2.079,2.503,5.352,2.567,5.352,2.567c1.232,1.079,4.197,2.331,4.197,2.331c0.077,2.079,1.117,4.942,1.117,4.942
	c0.693,2.926,3.299,5.641,3.299,5.641c2.414,5.64,7.444,8.993,7.444,8.993C73.155,28.387,73,29.306,73,29.306
	c-0.038,3.312-2.349,4.645-2.349,4.645c-2.156,2.85-3.08,4.352-3.08,4.352c-0.271,1.232,0,2.52,0,2.52
	c0.5,4.967-0.039,6.319-0.039,6.319c-0.347,2.426,0.731,1.953,0.731,1.953c1.078,0.385,2.85-1.029,2.85-1.029
	c2.271-0.655,2.695-6.276,2.695-6.276c0.115-1.578,0.27-6.193,0.27-6.193c0.077-2.233,2.426-3.397,2.426-3.397
	c1.926-0.116,2.888,0.445,2.888,0.445c1.271,2.387,1.426,3.987,1.426,3.987c0.076,4.621-1.155,5.341-1.155,5.341
	c-1.617,4.351-1.463,3.594-1.463,3.594c0.191,3.35,3.927,1.214,3.927,1.214c3.081,0,4.088-4.682,4.088-4.682
	c0.562,1.871,3.413,0.556,3.413,0.556c2.993-0.093,3.741-4.405,3.741-4.405c1.775,0.516,3.179-1.993,3.179-1.993
	c1.964-1.822,2.104-7.946,2.104-7.946c0.654,0.047,1.637-1.213,1.637-1.213c1.636-1.403,1.87-7.553,1.87-7.553
	c0.606-3.039,0-11.146,0-11.146c-0.234-2.104-3.507-13.323-3.507-13.323c-1.637-3.88-3.834-14.156-3.834-14.156
	C94.117-22.169,92.995-29.6,92.995-29.6c-2.104-9.491-5.938-29.631-5.938-29.631c-2.291-7.013-7.854-24.944-7.854-24.944
	c-4.396-7.668-10.66-19.952-10.66-19.952c-11.174-11.081-19.731-21.65-19.731-21.65c-6.592-2.665-14.213-9.708-14.213-9.708
	c-2.852-1.169-2.945-5.006-2.945-5.006l0.047-3.392c-0.093-1.123,0.047-2.406,0.047-2.406c2.712-2.759,6.405-11.451,6.405-11.451
	c2.338-4.442,3.646-12.271,3.646-12.271c1.309,0.467,2.899-0.705,2.899-0.705c2.01-0.141,3.226-4.31,3.226-4.31
	c0.795-2.198,1.791-10.272,1.791-10.272c0.82-2.951,1.475-9.403,1.475-9.403c0.475-3.173-1.146-7.257-1.146-7.257
	c-1.324-2.485-3.771-3.999-3.771-3.999c1.804-7.705,0-19.412,0-19.412c-1.639-9.345-12.293-17.87-12.293-17.87
	C23.425-257.01,0-256.439,0-256.439s-23.433-0.57-33.985,13.201C-33.984-243.239-44.631-234.714-46.271-225.369z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-44.167-221.128c0,0-1.683,11.393,0,18.585
	c0,0-2.284,1.545-3.519,3.864c0,0-1.514,3.978-1.071,6.939c0,0,0.612,6.245,1.377,8.999c0,0,0.929,7.771,1.671,9.822
	c0,0,1.135,4.03,3.011,4.161c0,0,1.484,1.19,2.706,0.753c0,0,1.221,7.617,3.403,11.762c0,0,3.448,8.458,5.979,11.033
	c0,0,0.131,1.25,0.043,2.298l0.044,3.247c0,0-0.087,3.73-2.749,4.821c0,0-7.113,7.083-13.266,9.57c0,0-7.986,10.692-18.415,21.034
	c0,0-5.848,12.081-9.95,19.238c0,0-5.193,17.43-7.331,23.976c0,0-3.578,19.592-5.542,28.451c0,0-1.047,7.223-1.702,10.103
	c0,0-2.051,9.984-3.578,13.606c0,0-3.055,10.846-3.273,12.81c0,0-0.567,7.87,0,10.706c0,0,0.218,5.958,1.746,7.267
	c0,0,0.916,1.233,1.527,1.189c0,0,0.131,5.941,1.964,7.643c0,0,1.309,2.458,2.967,1.979c0,0,0.698,4.203,3.491,4.29
	c0,0,2.662,1.377,3.186-0.368c0,0,0.94,4.57,3.815,4.57c0,0,3.486,2.205,3.666-0.923c0,0,0.144,0.91-1.366-3.15
	c0,0-1.15-0.368-1.078-4.681c0,0,0.144-1.259,1.33-3.487c0,0,0.898-0.4,2.695-0.292c0,0,2.193,1.229,2.264,3.313
	c0,0,0.144,4.495,0.252,5.97c0,0,0.395,5.456,2.516,6.066c0,0,1.653,1.433,2.659,1.073c0,0,1.007,0.566,0.683-1.698
	c0,0-0.503-0.892-0.036-5.528c0,0,0.252-1.06,0-2.209c0,0-0.862-1.111-2.875-3.771c0,0-2.156-0.947-2.192-4.037
	c0,0-0.144-0.754,0.431-1.545c0,0,4.695-2.506,6.947-7.769c0,0,2.433-2.164,3.08-4.896c0,0,0.97-2.384,1.042-4.324
	c0,0,2.768-0.929,3.918-1.935c0,0,3.054,0.233,4.995-2.104c0,0,2.696-0.842,3.091-3.142c0,0,0.827,11.231,0.898,19.605
	c0,0,0.611,17.66-0.323,27.005c0,0-2.48,28.784-4.169,36.296c0,0-4.277,30.428-4.78,38.442c0,0-0.755,17.701-0.503,26.22
	c0,0,0.072,4.675,0.611,9.238c0,0,2.516,20.054,5.642,29.973c0,0,4.241,18.023,5.283,21.007c0,0,1.69,7.894,1.366,11.847
	c0,0-0.827,8.342-0.827,10.104c0,0-0.431,10.947,0.719,14.074c0,0,1.609,3.45,4.053,3.702c0,0,1.841,0.072,2.236-0.719
	c0,0,0.981,1.187,2.706,1.187c0,0,2.389-0.288,2.749-1.295c0,0,0.608,0.791,2.62,0.827c0,0,2.749,0.108,3.252-1.546
	c0,0,0.473,0.936,2.091,0.791c0,0,2.519-0.467,3.166-1.545c0,0,1.389,1.222,3.078,1.042c0,0,3.504-0.18,3.791-2.516
	c0,0,0.684-1.509-0.502-3.738c0,0-2.392-5.822-4.153-9.271c0,0-3.345-5.967-3.561-6.828c0,0-0.55-0.755-0.478-2.983
	c0,0,2.176-10.746,1.924-15.526c0,0,0.339-5.175-0.668-10.961c0,0-0.65-5.894-1.441-8.59c0,0-0.412-2.551,0.091-5.318
	c0,0,0.974-3.737,2.232-7.548c0,0,3.069-5.498,4.075-11.968c0,0,3.055-8.787,1.941-13.135c0,0,2.85,1.006,6.247,1.635
	c0,0,3.107,0.539,5.928,0.432c2.821,0.107,5.914-0.432,5.914-0.432c3.396-0.629,6.239-1.635,6.239-1.635
	c-1.114,4.348,1.967,13.135,1.967,13.135c1.006,6.47,4.09,11.968,4.09,11.968c1.258,3.811,2.235,7.548,2.235,7.548
	c0.503,2.768,0.115,5.318,0.115,5.318c-0.791,2.696-1.421,8.59-1.421,8.59c-1.008,5.786-0.636,10.961-0.636,10.961
	c-0.252,4.78,1.97,15.526,1.97,15.526c0.071,2.229-0.467,2.983-0.467,2.983c-0.216,0.861-3.518,6.828-3.518,6.828
	c-1.761,3.449-4.1,9.271-4.1,9.271c-1.187,2.229-0.481,3.738-0.481,3.738c0.287,2.336,3.822,2.516,3.822,2.516
	c1.688,0.18,3.109-1.042,3.109-1.042c0.647,1.078,3.203,1.545,3.203,1.545c1.617,0.145,2.116-0.791,2.116-0.791
	c0.504,1.654,3.287,1.546,3.287,1.546c2.013-0.036,2.646-0.827,2.646-0.827c0.359,1.007,2.791,1.295,2.791,1.295
	c1.726,0,2.756-1.187,2.756-1.187c0.395,0.791,2.281,0.719,2.281,0.719c2.444-0.252,4.091-3.702,4.091-3.702
	c1.149-3.127,0.719-14.013,0.719-14.013c0-1.761-0.827-10.042-0.827-10.042c-0.323-3.954,1.366-11.798,1.366-11.798
	c1.042-2.983,5.283-20.931,5.283-20.931c3.127-9.919,5.642-29.88,5.642-29.88c0.539-4.564,0.611-9.194,0.611-9.194
	c0.252-8.519-0.503-26.106-0.503-26.106c-0.504-8.015-4.78-38.355-4.78-38.355c-1.689-7.511-4.169-36.17-4.169-36.17
	c-0.935-9.345-0.323-26.945-0.323-26.945c0.072-8.373,0.897-19.55,0.897-19.55c0.396,2.3,3.092,3.155,3.092,3.155
	c1.94,2.336,4.996,2.126,4.996,2.126c1.149,1.006,3.917,1.952,3.917,1.952c0.071,1.94,1.042,4.337,1.042,4.337
	c0.646,2.73,3.08,4.919,3.08,4.919c2.253,5.263,6.946,7.791,6.946,7.791c0.575,0.791,0.432,1.55,0.432,1.55
	c-0.035,3.091-2.192,4.055-2.192,4.055c-2.012,2.659-2.875,3.782-2.875,3.782c-0.252,1.149,0,2.214,0,2.214
	c0.467,4.636-0.036,5.548-0.036,5.548c-0.323,2.265,0.683,1.705,0.683,1.705c1.007,0.36,2.659-1.067,2.659-1.067
	c2.121-0.61,2.517-6.063,2.517-6.063c0.107-1.473,0.252-5.956,0.252-5.956c0.072-2.084,2.264-3.306,2.264-3.306
	c1.797-0.108,2.695,0.287,2.695,0.287c1.186,2.229,1.33,3.49,1.33,3.49c0.071,4.313-1.078,4.683-1.078,4.683
	c-1.51,4.061-1.366,3.145-1.366,3.145c0.18,3.127,3.666,0.924,3.666,0.924c2.875,0,3.816-4.569,3.816-4.569
	c0.522,1.745,3.185,0.362,3.185,0.362c2.793-0.087,3.491-4.297,3.491-4.297c1.658,0.48,2.968-1.988,2.968-1.988
	c1.832-1.702,1.963-7.658,1.963-7.658c0.611,0.044,1.528-1.197,1.528-1.197c1.526-1.31,1.745-7.275,1.745-7.275
	c0.566-2.837,0-10.722,0-10.722C96.11,2.939,93.055-7.93,93.055-7.93c-1.526-3.622-3.578-13.637-3.578-13.637
	c-0.654-2.88-1.702-10.121-1.702-10.121c-1.964-8.858-5.542-28.526-5.542-28.526c-2.138-6.546-7.33-24.042-7.33-24.042
	c-4.103-7.157-9.95-19.297-9.95-19.297c-10.43-10.342-18.415-21.129-18.415-21.129c-6.153-2.488-13.267-9.632-13.267-9.632
	c-2.661-1.091-2.749-4.852-2.749-4.852l0.044-3.263c-0.087-1.047,0.044-2.313,0.044-2.313c2.53-2.575,5.979-11.08,5.979-11.08
	c2.182-4.145,3.404-11.826,3.404-11.826c1.221,0.436,2.705-0.768,2.705-0.768c1.877-0.131,3.011-4.192,3.011-4.192
	c0.742-2.051,1.672-9.889,1.672-9.889c0.765-2.754,1.377-9.051,1.377-9.051c0.442-2.961-1.071-6.989-1.071-6.989
	c-1.235-2.319-3.52-3.912-3.52-3.912c1.683-7.191,0-18.68,0-18.68c-1.53-8.722-11.848-16.678-11.848-16.678
	C22.469-250.661,0-250.128,0-250.128s-22.477-0.532-32.326,12.322C-32.326-237.807-42.637-229.851-44.167-221.128z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-42.062-216.889c0,0-1.563,11.171,0,17.849
	c0,0-2.121,1.621-3.268,3.775c0,0-1.405,3.918-0.995,6.668c0,0,0.569,6.087,1.279,8.644c0,0,0.863,7.532,1.552,9.436
	c0,0,1.054,3.92,2.796,4.042c0,0,1.378,1.221,2.512,0.815c0,0,1.135,7.465,3.161,11.314c0,0,3.201,8.269,5.551,10.66
	c0,0,0.122,1.232,0.041,2.204l0.04,3.117c0,0-0.081,3.652-2.552,4.665c0,0-6.605,7.182-12.319,9.492c0,0-7.415,10.905-17.099,20.508
	c0,0-5.43,11.934-9.239,18.58c0,0-4.822,16.992-6.808,23.071c0,0-3.322,19.117-5.146,27.343c0,0-0.972,7.032-1.58,9.706
	c0,0-1.905,9.722-3.323,13.085c0,0-2.836,10.495-3.039,12.319c0,0-0.527,7.647,0,10.281c0,0,0.203,5.772,1.621,6.989
	c0,0,0.851,1.214,1.418,1.173c0,0,0.122,5.771,1.824,7.352c0,0,1.215,2.42,2.755,1.975c0,0,0.648,4.102,3.242,4.183
	c0,0,2.471,1.444,2.958-0.177c0,0,0.873,4.459,3.543,4.459c0,0,3.237,2.271,3.404-0.632c0,0,0.133,1.068-1.269-2.702
	c0,0-1.067-0.019-1.001-4.023c0,0,0.134-0.92,1.235-2.989c0,0,0.834-0.235,2.503-0.135c0,0,2.036,1.288,2.102,3.225
	c0,0,0.134,4.361,0.234,5.729c0,0,0.367,5.289,2.336,5.856c0,0,1.535,1.444,2.47,1.11c0,0,0.934,0.653,0.634-1.448
	c0,0-0.468-0.452-0.034-4.758c0,0,0.234-0.836,0-1.902c0,0-0.801-0.733-2.669-3.202c0,0-2.003-0.577-2.036-3.447
	c0,0-0.134-0.593,0.4-1.327c0,0,4.36-1.68,6.451-6.566c0,0,2.259-1.636,2.86-4.172c0,0,0.901-1.915,0.968-3.718
	c0,0,2.569-0.622,3.637-1.557c0,0,2.837,0.51,4.639-1.659c0,0,2.503-0.509,2.87-2.645c0,0,0.768,11.055,0.834,18.83
	c0,0,0.568,17.262-0.3,25.938c0,0-2.303,27.9-3.871,34.875c0,0-3.971,29.494-4.439,36.937c0,0-0.7,17.277-0.467,25.187
	c0,0,0.067,4.637,0.568,8.875c0,0,2.336,19.601,5.239,28.812c0,0,3.938,17.437,4.906,20.205c0,0,1.568,7.715,1.268,11.386
	c0,0-0.768,8.07-0.768,9.706c0,0-0.4,10.618,0.668,13.521c0,0,1.531,3.204,3.8,3.438c0,0,1.723,0.066,2.09-0.667
	c0,0,0.93,1.101,2.532,1.101c0,0,2.237-0.267,2.571-1.201c0,0,0.582,0.734,2.45,0.768c0,0,2.576,0.101,3.044-1.436
	c0,0,0.452,0.868,1.954,0.735c0,0,2.361-0.435,2.962-1.436c0,0,1.309,1.135,2.878,0.968c0,0,3.286-0.166,3.553-2.336
	c0,0,0.661-1.401-0.441-3.471c0,0-2.147-5.406-3.782-8.609c0,0-3.051-5.54-3.251-6.342c0,0-0.491-0.7-0.424-2.77
	c0,0,2.134-9.979,1.901-14.417c0,0,0.392-4.805-0.542-10.178c0,0-0.54-5.474-1.274-7.977c0,0-0.347-2.369,0.12-4.938
	c0,0,0.961-3.472,2.129-7.008c0,0,2.941-5.106,3.876-11.113c0,0,2.933-8.159,1.898-12.197c0,0,2.691,0.934,5.845,1.519
	c0,0,2.925,0.501,5.545,0.399c2.619,0.102,5.53-0.399,5.53-0.399c3.153-0.585,5.837-1.519,5.837-1.519
	c-1.034,4.038,1.926,12.197,1.926,12.197c0.934,6.007,3.891,11.113,3.891,11.113c1.168,3.536,2.132,7.008,2.132,7.008
	c0.468,2.569,0.146,4.938,0.146,4.938c-0.734,2.503-1.254,7.977-1.254,7.977c-0.935,5.373-0.506,10.178-0.506,10.178
	c-0.234,4.438,1.946,14.417,1.946,14.417c0.067,2.069-0.412,2.77-0.412,2.77c-0.199,0.802-3.205,6.342-3.205,6.342
	c-1.636,3.203-3.727,8.609-3.727,8.609c-1.102,2.069-0.419,3.471-0.419,3.471c0.267,2.17,3.586,2.336,3.586,2.336
	c1.568,0.167,2.911-0.968,2.911-0.968c0.6,1.001,3.001,1.436,3.001,1.436c1.501,0.133,1.981-0.735,1.981-0.735
	c0.468,1.536,3.08,1.436,3.08,1.436c1.868-0.033,2.476-0.768,2.476-0.768c0.334,0.935,2.616,1.201,2.616,1.201
	c1.602,0,2.583-1.101,2.583-1.101c0.366,0.733,2.138,0.667,2.138,0.667c2.27-0.233,3.84-3.438,3.84-3.438
	c1.068-2.903,0.667-13.457,0.667-13.457c0-1.635-0.767-9.643-0.767-9.643c-0.301-3.671,1.268-11.332,1.268-11.332
	c0.968-2.771,4.906-20.128,4.906-20.128c2.903-9.21,5.239-28.713,5.239-28.713c0.501-4.238,0.566-8.828,0.566-8.828
	c0.234-7.91-0.467-25.069-0.467-25.069c-0.467-7.442-4.438-36.845-4.438-36.845C45.172,78.958,42.87,51.19,42.87,51.19
	c-0.867-8.677-0.301-25.875-0.301-25.875c0.067-7.776,0.834-18.774,0.834-18.774c0.367,2.136,2.87,2.659,2.87,2.659
	c1.803,2.169,4.64,1.685,4.64,1.685c1.067,0.934,3.638,1.574,3.638,1.574c0.066,1.803,0.967,3.729,0.967,3.729
	c0.602,2.536,2.86,4.198,2.86,4.198c2.092,4.887,6.451,6.59,6.451,6.59c0.533,0.733,0.4,1.332,0.4,1.332
	c-0.033,2.87-2.036,3.465-2.036,3.465c-1.868,2.47-2.67,3.214-2.67,3.214c-0.232,1.068,0,1.909,0,1.909
	c0.435,4.305-0.032,4.777-0.032,4.777c-0.301,2.102,0.634,1.456,0.634,1.456c0.934,0.334,2.469-1.105,2.469-1.105
	c1.969-0.568,2.336-5.852,2.336-5.852c0.101-1.368,0.234-5.718,0.234-5.718c0.066-1.936,2.102-3.216,2.102-3.216
	c1.669-0.1,2.503,0.13,2.503,0.13c1.103,2.069,1.235,2.994,1.235,2.994c0.067,4.005-1.001,4.023-1.001,4.023
	c-1.402,3.771-1.269,2.695-1.269,2.695c0.167,2.904,3.404,0.636,3.404,0.636c2.67,0,3.543-4.46,3.543-4.46
	c0.486,1.62,2.958,0.172,2.958,0.172c2.593-0.081,3.241-4.191,3.241-4.191c1.54,0.446,2.756-1.985,2.756-1.985
	c1.702-1.579,1.823-7.366,1.823-7.366c0.567,0.04,1.419-1.183,1.419-1.183c1.418-1.216,1.62-6.998,1.62-6.998
	c0.526-2.634,0-10.297,0-10.297c-0.202-1.824-3.039-12.342-3.039-12.342c-1.418-3.363-3.322-13.117-3.322-13.117
	c-0.607-2.675-1.581-9.725-1.581-9.725C80.733-42,77.411-61.198,77.411-61.198c-1.985-6.078-6.808-23.14-6.808-23.14
	c-3.809-6.646-9.238-18.642-9.238-18.642c-9.686-9.603-17.101-20.608-17.101-20.608c-5.713-2.31-12.318-9.555-12.318-9.555
	c-2.472-1.013-2.553-4.699-2.553-4.699l0.041-3.132c-0.082-0.972,0.04-2.221,0.04-2.221c2.351-2.391,5.551-10.708,5.551-10.708
	c2.026-3.85,3.161-11.382,3.161-11.382c1.135,0.405,2.513-0.83,2.513-0.83c1.742-0.122,2.796-4.076,2.796-4.076
	c0.688-1.904,1.552-9.505,1.552-9.505c0.711-2.558,1.279-8.699,1.279-8.699c0.41-2.749-0.995-6.721-0.995-6.721
	c-1.147-2.153-3.269-3.824-3.269-3.824c1.563-6.678,0-17.949,0-17.949c-1.42-8.099-11.403-15.487-11.403-15.487
	C21.513-244.311,0-243.816,0-243.816s-21.521-0.494-30.666,11.441C-30.666-232.375-40.642-224.988-42.062-216.889z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-39.959-212.648c0,0-1.443,10.948,0,17.112
	c0,0-1.958,1.699-3.017,3.686c0,0-1.297,3.86-0.918,6.398c0,0,0.525,5.929,1.181,8.29c0,0,0.796,7.291,1.432,9.049
	c0,0,0.973,3.811,2.581,3.923c0,0,1.272,1.251,2.319,0.877c0,0,1.048,7.313,2.918,10.867c0,0,2.955,8.079,5.124,10.286
	c0,0,0.112,1.213,0.037,2.111l0.038,2.985c0,0-0.075,3.576-2.357,4.511c0,0-6.096,7.28-11.37,9.412c0,0-6.845,11.118-15.785,19.983
	c0,0-5.012,11.787-8.528,17.921c0,0-4.451,16.556-6.284,22.166c0,0-3.067,18.643-4.75,26.236c0,0-0.898,6.841-1.459,9.31
	c0,0-1.758,9.459-3.067,12.563c0,0-2.618,10.144-2.805,11.827c0,0-0.486,7.425,0,9.856c0,0,0.187,5.59,1.496,6.712
	c0,0,0.785,1.195,1.309,1.157c0,0,0.112,5.603,1.683,7.062c0,0,1.122,2.38,2.544,1.969c0,0,0.598,4,2.992,4.075
	c0,0,2.282,1.513,2.731,0.016c0,0,0.806,4.348,3.27,4.348c0,0,2.988,2.338,3.142-0.342c0,0,0.123,1.228-1.17-2.253
	c0,0-0.986,0.332-0.925-3.364c0,0,0.124-0.583,1.14-2.492c0,0,0.77-0.071,2.311,0.021c0,0,1.879,1.348,1.94,3.134
	c0,0,0.123,4.229,0.216,5.493c0,0,0.339,5.121,2.156,5.644c0,0,1.417,1.457,2.28,1.149c0,0,0.862,0.74,0.585-1.2
	c0,0-0.431-0.011-0.031-3.985c0,0,0.216-0.611,0-1.598c0,0-0.739-0.354-2.464-2.633c0,0-1.848-0.207-1.879-2.856
	c0,0-0.123-0.431,0.369-1.108c0,0,4.024-0.854,5.955-5.364c0,0,2.086-1.108,2.64-3.45c0,0,0.832-1.446,0.893-3.11
	c0,0,2.372-0.314,3.358-1.178c0,0,2.619,0.786,4.282-1.217c0,0,2.31-0.176,2.649-2.148c0,0,0.709,10.88,0.77,18.058
	c0,0,0.524,16.861-0.277,24.871c0,0-2.125,27.016-3.573,33.454c0,0-3.666,28.561-4.097,35.43c0,0-0.647,16.854-0.432,24.156
	c0,0,0.062,4.598,0.524,8.51c0,0,2.156,19.147,4.836,27.649c0,0,3.635,16.85,4.529,19.406c0,0,1.448,7.532,1.17,10.921
	c0,0-0.708,7.801-0.708,9.312c0,0-0.37,10.288,0.616,12.968c0,0,1.454,2.957,3.549,3.173c0,0,1.605,0.062,1.944-0.616
	c0,0,0.877,1.017,2.356,1.017c0,0,2.086-0.246,2.395-1.109c0,0,0.554,0.678,2.279,0.709c0,0,2.403,0.092,2.835-1.325
	c0,0,0.432,0.801,1.818,0.679c0,0,2.203-0.4,2.758-1.325c0,0,1.23,1.048,2.678,0.894c0,0,3.068-0.153,3.314-2.157
	c0,0,0.638-1.293-0.379-3.202c0,0-1.901-4.991-3.411-7.948c0,0-2.757-5.113-2.941-5.854c0,0-0.432-0.646-0.37-2.557
	c0,0,2.092-9.21,1.877-13.307c0,0,0.447-4.437-0.415-9.396c0,0-0.43-5.052-1.108-7.362c0,0-0.28-2.187,0.151-4.559
	c0,0,0.947-3.204,2.025-6.469c0,0,2.814-4.713,3.676-10.258c0,0,2.812-7.532,1.856-11.261c0,0,2.532,0.863,5.443,1.402
	c0,0,2.744,0.462,5.162,0.37c2.418,0.092,5.147-0.37,5.147-0.37c2.911-0.539,5.434-1.402,5.434-1.402
	c-0.955,3.729,1.886,11.261,1.886,11.261c0.861,5.545,3.691,10.258,3.691,10.258c1.078,3.265,2.028,6.469,2.028,6.469
	c0.432,2.372,0.178,4.559,0.178,4.559c-0.678,2.311-1.086,7.362-1.086,7.362c-0.863,4.96-0.379,9.396-0.379,9.396
	c-0.215,4.097,1.926,13.307,1.926,13.307c0.062,1.91-0.356,2.557-0.356,2.557c-0.186,0.74-2.895,5.854-2.895,5.854
	c-1.51,2.957-3.353,7.948-3.353,7.948c-1.018,1.909-0.356,3.202-0.356,3.202c0.247,2.004,3.348,2.157,3.348,2.157
	c1.448,0.154,2.714-0.894,2.714-0.894c0.554,0.925,2.798,1.325,2.798,1.325c1.386,0.122,1.847-0.679,1.847-0.679
	c0.431,1.417,2.873,1.325,2.873,1.325c1.725-0.031,2.307-0.709,2.307-0.709c0.309,0.863,2.44,1.109,2.44,1.109
	c1.479,0,2.41-1.017,2.41-1.017c0.339,0.679,1.995,0.616,1.995,0.616c2.095-0.216,3.59-3.173,3.59-3.173
	c0.984-2.68,0.616-12.901,0.616-12.901c0-1.509-0.709-9.244-0.709-9.244c-0.277-3.388,1.171-10.866,1.171-10.866
	c0.893-2.558,4.527-19.323,4.527-19.323c2.681-8.502,4.836-27.548,4.836-27.548c0.464-3.912,0.524-8.461,0.524-8.461
	c0.216-7.302-0.431-24.032-0.431-24.032c-0.432-6.869-4.098-35.334-4.098-35.334c-1.447-6.438-3.573-33.317-3.573-33.317
	c-0.801-8.009-0.277-24.804-0.277-24.804c0.062-7.178,0.77-17.999,0.77-17.999c0.34,1.972,2.65,2.164,2.65,2.164
	c1.663,2.002,4.281,1.242,4.281,1.242c0.985,0.861,3.357,1.197,3.357,1.197c0.062,1.663,0.895,3.122,0.895,3.122
	c0.554,2.342,2.639,3.477,2.639,3.477c1.931,4.511,5.955,5.388,5.955,5.388c0.493,0.678,0.37,1.115,0.37,1.115
	c-0.031,2.65-1.879,2.876-1.879,2.876C57.739,32.965,57,33.33,57,33.33c-0.216,0.985,0,1.604,0,1.604
	c0.4,3.974-0.031,4.006-0.031,4.006c-0.277,1.941,0.586,1.208,0.586,1.208c0.862,0.308,2.279-1.143,2.279-1.143
	c1.817-0.524,2.156-5.641,2.156-5.641c0.093-1.263,0.216-5.479,0.216-5.479c0.062-1.787,1.94-3.125,1.94-3.125
	c1.54-0.093,2.311-0.027,2.311-0.027c1.017,1.909,1.14,2.496,1.14,2.496c0.062,3.697-0.924,3.365-0.924,3.365
	c-1.294,3.48-1.171,2.247-1.171,2.247c0.153,2.68,3.143,0.345,3.143,0.345c2.464,0,3.271-4.348,3.271-4.348
	c0.448,1.496,2.73-0.021,2.73-0.021c2.394-0.075,2.992-4.084,2.992-4.084c1.421,0.412,2.543-1.98,2.543-1.98
	c1.571-1.458,1.683-7.077,1.683-7.077c0.524,0.037,1.311-1.166,1.311-1.166c1.309-1.123,1.496-6.722,1.496-6.722
	c0.485-2.432,0-9.873,0-9.873c-0.188-1.683-2.807-11.851-2.807-11.851c-1.309-3.105-3.066-12.598-3.066-12.598
	c-0.562-2.469-1.458-9.329-1.458-9.329c-1.685-7.593-4.751-26.319-4.751-26.319c-1.832-5.61-6.284-22.238-6.284-22.238
	c-3.516-6.134-8.528-17.986-8.528-17.986c-8.938-8.865-15.784-20.087-15.784-20.087c-5.273-2.132-11.37-9.479-11.37-9.479
	c-2.282-0.935-2.356-4.545-2.356-4.545l0.037-3.002c-0.075-0.898,0.037-2.129,0.037-2.129c2.17-2.207,5.125-10.337,5.125-10.337
	c1.87-3.553,2.917-10.937,2.917-10.937c1.048,0.374,2.318-0.893,2.318-0.893c1.609-0.112,2.581-3.958,2.581-3.958
	c0.637-1.758,1.434-9.123,1.434-9.123c0.656-2.36,1.18-8.346,1.18-8.346c0.38-2.538-0.918-6.452-0.918-6.452
	c-1.059-1.988-3.016-3.738-3.016-3.738c1.441-6.164,0-17.217,0-17.217C38.647-220.125,29-226.944,29-226.944
	C20.557-237.961,0-237.505,0-237.505s-20.565-0.456-29.007,10.561C-29.007-226.944-38.647-220.125-39.959-212.648z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-37.855-208.409c0,0-1.322,10.725,0,16.376
	c0,0-1.794,1.775-2.765,3.597c0,0-1.189,3.8-0.842,6.126c0,0,0.481,5.772,1.082,7.936c0,0,0.731,7.051,1.314,8.663
	c0,0,0.891,3.701,2.365,3.804c0,0,1.166,1.282,2.126,0.939c0,0,0.96,7.162,2.674,10.419c0,0,2.709,7.89,4.698,9.913
	c0,0,0.103,1.195,0.034,2.018l0.034,2.854c0,0-0.068,3.499-2.16,4.356c0,0-5.589,7.378-10.423,9.333c0,0-6.274,11.331-14.469,19.457
	c0,0-4.594,11.64-7.817,17.263c0,0-4.081,16.118-5.761,21.261c0,0-2.811,18.167-4.354,25.128c0,0-0.823,6.65-1.337,8.913
	c0,0-1.612,9.197-2.812,12.042c0,0-2.4,9.793-2.571,11.336c0,0-0.446,7.202,0,9.431c0,0,0.171,5.405,1.371,6.434
	c0,0,0.72,1.176,1.2,1.142c0,0,0.103,5.434,1.543,6.771c0,0,1.029,2.342,2.332,1.965c0,0,0.548,3.899,2.743,3.968
	c0,0,2.091,1.578,2.503,0.207c0,0,0.738,4.236,2.998,4.236c0,0,2.739,2.405,2.88-0.052c0,0,0.113,1.387-1.073-1.805
	c0,0-0.904,0.684-0.847-2.705c0,0,0.113-0.244,1.044-1.995c0,0,0.706,0.094,2.118,0.179c0,0,1.723,1.406,1.779,3.044
	c0,0,0.113,4.097,0.198,5.255c0,0,0.31,4.952,1.976,5.433c0,0,1.299,1.47,2.09,1.187c0,0,0.791,0.828,0.537-0.951
	c0,0-0.396,0.43-0.029-3.213c0,0,0.198-0.389,0-1.293c0,0-0.677,0.027-2.259-2.063c0,0-1.694,0.163-1.722-2.265
	c0,0-0.113-0.271,0.339-0.892c0,0,3.688-0.027,5.458-4.162c0,0,1.912-0.58,2.42-2.727c0,0,0.762-0.979,0.819-2.504
	c0,0,2.174-0.009,3.078-0.799c0,0,2.4,1.062,3.925-0.773c0,0,2.118,0.155,2.428-1.651c0,0,0.65,10.704,0.706,17.283
	c0,0,0.479,16.462-0.254,23.804c0,0-1.948,26.132-3.275,32.034c0,0-3.361,27.626-3.756,33.923c0,0-0.593,16.431-0.395,23.123
	c0,0,0.056,4.56,0.48,8.146c0,0,1.976,18.695,4.433,26.488c0,0,3.332,16.261,4.151,18.605c0,0,1.327,7.352,1.073,10.458
	c0,0-0.649,7.531-0.649,8.915c0,0-0.339,9.958,0.564,12.415c0,0,1.377,2.711,3.297,2.908c0,0,1.488,0.057,1.798-0.564
	c0,0,0.826,0.932,2.182,0.932c0,0,1.935-0.226,2.217-1.017c0,0,0.528,0.621,2.109,0.649c0,0,2.23,0.084,2.626-1.215
	c0,0,0.412,0.735,1.682,0.622c0,0,2.045-0.367,2.554-1.215c0,0,1.151,0.961,2.478,0.819c0,0,2.849-0.142,3.075-1.977
	c0,0,0.615-1.186-0.317-2.937c0,0-1.656-4.575-3.039-7.285c0,0-2.463-4.688-2.633-5.366c0,0-0.371-0.593-0.315-2.343
	c0,0,2.051-8.443,1.853-12.199c0,0,0.502-4.065-0.289-8.613c0,0-0.319-4.631-0.94-6.748c0,0-0.215-2.005,0.18-4.18
	c0,0,0.934-2.936,1.922-5.93c0,0,2.686-4.32,3.477-9.403c0,0,2.689-6.904,1.813-10.321c0,0,2.372,0.791,5.041,1.285
	c0,0,2.562,0.424,4.779,0.339c2.216,0.085,4.763-0.339,4.763-0.339c2.668-0.494,5.032-1.285,5.032-1.285
	c-0.875,3.417,1.843,10.321,1.843,10.321c0.791,5.083,3.494,9.403,3.494,9.403c0.988,2.994,1.925,5.93,1.925,5.93
	c0.396,2.175,0.209,4.18,0.209,4.18c-0.622,2.117-0.919,6.748-0.919,6.748c-0.79,4.548-0.25,8.613-0.25,8.613
	c-0.198,3.756,1.904,12.199,1.904,12.199c0.056,1.75-0.302,2.343-0.302,2.343c-0.17,0.678-2.583,5.366-2.583,5.366
	c-1.385,2.71-2.979,7.285-2.979,7.285c-0.932,1.751-0.293,2.937-0.293,2.937c0.227,1.835,3.111,1.977,3.111,1.977
	c1.327,0.142,2.514-0.819,2.514-0.819c0.508,0.848,2.595,1.215,2.595,1.215c1.271,0.113,1.713-0.622,1.713-0.622
	c0.396,1.299,2.666,1.215,2.666,1.215c1.581-0.028,2.138-0.649,2.138-0.649c0.282,0.791,2.266,1.017,2.266,1.017
	c1.355,0,2.237-0.932,2.237-0.932c0.311,0.621,1.851,0.564,1.851,0.564c1.92-0.197,3.34-2.908,3.34-2.908
	c0.903-2.457,0.564-12.345,0.564-12.345c0-1.384-0.649-8.846-0.649-8.846c-0.254-3.106,1.073-10.402,1.073-10.402
	c0.819-2.343,4.151-18.518,4.151-18.518c2.456-7.794,4.433-26.382,4.433-26.382c0.424-3.586,0.48-8.096,0.48-8.096
	c0.197-6.692-0.396-22.994-0.396-22.994c-0.395-6.297-3.756-33.823-3.756-33.823c-1.327-5.902-3.275-31.89-3.275-31.89
	c-0.734-7.343-0.255-23.735-0.255-23.735c0.058-6.579,0.706-17.222,0.706-17.222c0.312,1.807,2.43,1.668,2.43,1.668
	c1.524,1.835,3.925,0.8,3.925,0.8c0.903,0.79,3.078,0.818,3.078,0.818c0.056,1.525,0.818,2.518,0.818,2.518
	c0.509,2.146,2.419,2.754,2.419,2.754c1.771,4.135,5.459,4.187,5.459,4.187c0.452,0.621,0.34,0.898,0.34,0.898
	c-0.028,2.428-1.724,2.285-1.724,2.285c-1.581,2.09-2.259,2.077-2.259,2.077c-0.197,0.902,0,1.298,0,1.298
	c0.368,3.642-0.028,3.233-0.028,3.233c-0.254,1.779,0.537,0.96,0.537,0.96c0.79,0.283,2.089-1.181,2.089-1.181
	c1.666-0.479,1.978-5.428,1.978-5.428c0.085-1.158,0.198-5.241,0.198-5.241c0.056-1.638,1.778-3.034,1.778-3.034
	c1.412-0.085,2.117-0.185,2.117-0.185c0.932,1.751,1.045,2,1.045,2c0.057,3.389-0.847,2.706-0.847,2.706
	c-1.187,3.19-1.073,1.798-1.073,1.798c0.141,2.457,2.88,0.055,2.88,0.055c2.259,0,2.998-4.236,2.998-4.236
	c0.412,1.37,2.503-0.214,2.503-0.214c2.195-0.067,2.743-3.976,2.743-3.976c1.303,0.377,2.332-1.977,2.332-1.977
	c1.439-1.339,1.543-6.788,1.543-6.788c0.48,0.034,1.2-1.15,1.2-1.15c1.2-1.029,1.371-6.444,1.371-6.444c0.445-2.229,0-9.448,0-9.448
	c-0.171-1.543-2.571-11.361-2.571-11.361c-1.2-2.846-2.812-12.079-2.812-12.079c-0.514-2.263-1.337-8.933-1.337-8.933
	c-1.543-6.96-4.354-25.215-4.354-25.215c-1.68-5.143-5.76-21.336-5.76-21.336c-3.224-5.623-7.817-17.331-7.817-17.331
	c-8.195-8.126-14.469-19.566-14.469-19.566c-4.835-1.954-10.423-9.402-10.423-9.402c-2.093-0.857-2.16-4.392-2.16-4.392l0.034-2.871
	c-0.069-0.823,0.033-2.036,0.033-2.036c1.989-2.023,4.697-9.967,4.697-9.967c1.715-3.257,2.675-10.492,2.675-10.492
	c0.96,0.343,2.126-0.955,2.126-0.955c1.475-0.103,2.365-3.841,2.365-3.841c0.583-1.612,1.313-8.74,1.313-8.74
	c0.602-2.164,1.083-7.994,1.083-7.994c0.347-2.326-0.843-6.184-0.843-6.184c-0.971-1.822-2.765-3.651-2.765-3.651
	c1.322-5.65,0-16.485,0-16.485c-1.202-6.853-10.516-13.104-10.516-13.104C19.601-231.611,0-231.194,0-231.194
	s-19.609-0.417-27.348,9.682C-27.347-221.513-36.653-215.262-37.855-208.409z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-35.751-204.168c0,0-1.202,10.503,0,15.64
	c0,0-1.631,1.851-2.514,3.508c0,0-1.081,3.74-0.765,5.855c0,0,0.437,5.613,0.984,7.581c0,0,0.664,6.812,1.194,8.277
	c0,0,0.81,3.592,2.15,3.685c0,0,1.06,1.313,1.933,1.001c0,0,0.873,7.01,2.431,9.971c0,0,2.463,7.701,4.27,9.54
	c0,0,0.094,1.176,0.032,1.924l0.031,2.724c0,0-0.063,3.421-1.964,4.201c0,0-5.081,7.477-9.476,9.253c0,0-5.704,11.544-13.153,18.931
	c0,0-4.177,11.494-7.107,16.606c0,0-3.709,15.68-5.237,20.355c0,0-2.556,17.693-3.958,24.021c0,0-0.748,6.459-1.216,8.516
	c0,0-1.465,8.935-2.556,11.522c0,0-2.182,9.441-2.337,10.844c0,0-0.406,6.979,0,9.005c0,0,0.155,5.222,1.246,6.157
	c0,0,0.655,1.157,1.091,1.126c0,0,0.094,5.265,1.403,6.48c0,0,0.935,2.303,2.119,1.96c0,0,0.499,3.798,2.494,3.86
	c0,0,1.901,1.646,2.275,0.398c0,0,0.672,4.125,2.726,4.125c0,0,2.49,2.472,2.618,0.238c0,0,0.103,1.546-0.975-1.355
	c0,0-0.822,1.033-0.77-2.047c0,0,0.102,0.093,0.949-1.498c0,0,0.642,0.259,1.926,0.336c0,0,1.566,1.464,1.617,2.953
	c0,0,0.103,3.965,0.18,5.018c0,0,0.282,4.784,1.797,5.222c0,0,1.181,1.48,1.899,1.225c0,0,0.719,0.914,0.488-0.703
	c0,0-0.359,0.871-0.026-2.44c0,0,0.18-0.166,0-0.987c0,0-0.616,0.405-2.053-1.494c0,0-1.54,0.533-1.566-1.675
	c0,0-0.103-0.11,0.308-0.674c0,0,3.353,0.8,4.962-2.959c0,0,1.738-0.053,2.2-2.004c0,0,0.693-0.51,0.744-1.896
	c0,0,1.977,0.297,2.799-0.422c0,0,2.182,1.339,3.568-0.33c0,0,1.925,0.488,2.208-1.154c0,0,0.59,10.528,0.641,16.51
	c0,0,0.437,16.062-0.231,22.736c0,0-1.771,25.248-2.978,30.613c0,0-3.054,26.692-3.414,32.416c0,0-0.539,16.008-0.359,22.092
	c0,0,0.051,4.522,0.436,7.782c0,0,1.797,18.242,4.031,25.327c0,0,3.029,15.673,3.773,17.804c0,0,1.207,7.172,0.976,9.996
	c0,0-0.591,7.261-0.591,8.52c0,0-0.308,9.628,0.514,11.86c0,0,1.299,2.465,3.044,2.645c0,0,1.37,0.052,1.653-0.514
	c0,0,0.774,0.848,2.006,0.848c0,0,1.783-0.205,2.04-0.924c0,0,0.502,0.564,1.939,0.59c0,0,2.058,0.077,2.417-1.104
	c0,0,0.392,0.668,1.547,0.565c0,0,1.886-0.334,2.348-1.104c0,0,1.072,0.873,2.279,0.745c0,0,2.631-0.129,2.837-1.797
	c0,0,0.591-1.078-0.256-2.67c0,0-1.41-4.159-2.668-6.623c0,0-2.169-4.261-2.323-4.877c0,0-0.312-0.54-0.261-2.131
	c0,0,2.009-7.676,1.829-11.09c0,0,0.557-3.696-0.162-7.829c0,0-0.209-4.21-0.774-6.136c0,0-0.149-1.822,0.21-3.8
	c0,0,0.92-2.67,1.819-5.391c0,0,2.558-3.927,3.277-8.548c0,0,2.567-6.277,1.771-9.383c0,0,2.213,0.719,4.639,1.168
	c0,0,2.381,0.385,4.396,0.308c2.016,0.077,4.38-0.308,4.38-0.308c2.426-0.449,4.63-1.168,4.63-1.168
	c-0.796,3.105,1.802,9.383,1.802,9.383c0.719,4.621,3.295,8.548,3.295,8.548c0.898,2.721,1.822,5.391,1.822,5.391
	c0.358,1.978,0.238,3.8,0.238,3.8c-0.563,1.926-0.75,6.136-0.75,6.136c-0.719,4.133-0.123,7.829-0.123,7.829
	c-0.179,3.414,1.884,11.09,1.884,11.09c0.051,1.591-0.248,2.131-0.248,2.131c-0.154,0.616-2.271,4.877-2.271,4.877
	c-1.258,2.464-2.604,6.623-2.604,6.623c-0.848,1.592-0.23,2.67-0.23,2.67c0.205,1.668,2.873,1.797,2.873,1.797
	c1.207,0.128,2.316-0.745,2.316-0.745c0.462,0.771,2.393,1.104,2.393,1.104c1.155,0.103,1.578-0.565,1.578-0.565
	c0.359,1.182,2.458,1.104,2.458,1.104c1.438-0.025,1.969-0.59,1.969-0.59c0.256,0.719,2.09,0.924,2.09,0.924
	c1.232,0,2.065-0.848,2.065-0.848c0.282,0.565,1.707,0.514,1.707,0.514c1.746-0.18,3.089-2.645,3.089-2.645
	c0.822-2.232,0.514-11.788,0.514-11.788c0-1.258-0.591-8.445-0.591-8.445c-0.23-2.824,0.977-9.938,0.977-9.938
	c0.744-2.131,3.772-17.714,3.772-17.714c2.234-7.085,4.031-25.217,4.031-25.217c0.385-3.26,0.436-7.729,0.436-7.729
	c0.181-6.084-0.358-21.956-0.358-21.956c-0.36-5.725-3.414-32.312-3.414-32.312c-1.207-5.365-2.979-30.464-2.979-30.464
	c-0.668-6.674-0.23-22.664-0.23-22.664c0.051-5.981,0.641-16.446,0.641-16.446c0.283,1.644,2.208,1.172,2.208,1.172
	c1.386,1.669,3.568,0.357,3.568,0.357c0.822,0.719,2.798,0.441,2.798,0.441c0.052,1.388,0.745,1.91,0.745,1.91
	c0.462,1.951,2.2,2.033,2.2,2.033c1.608,3.759,4.962,2.985,4.962,2.985c0.411,0.564,0.308,0.681,0.308,0.681
	c-0.025,2.208-1.565,1.695-1.565,1.695c-1.438,1.899-2.054,1.508-2.054,1.508c-0.18,0.822,0,0.993,0,0.993
	c0.333,3.312-0.025,2.463-0.025,2.463c-0.231,1.618,0.487,0.712,0.487,0.712c0.719,0.257,1.899-1.219,1.899-1.219
	c1.515-0.438,1.797-5.216,1.797-5.216c0.077-1.054,0.18-5.004,0.18-5.004c0.052-1.487,1.617-2.942,1.617-2.942
	c1.284-0.077,1.925-0.342,1.925-0.342c0.849,1.591,0.95,1.503,0.95,1.503c0.053,3.08-0.77,2.047-0.77,2.047
	c-1.078,2.9-0.976,1.349-0.976,1.349c0.128,2.233,2.618-0.234,2.618-0.234c2.055,0,2.726-4.126,2.726-4.126
	c0.374,1.246,2.275-0.404,2.275-0.404c1.995-0.063,2.493-3.87,2.493-3.87c1.186,0.343,2.12-1.973,2.12-1.973
	c1.309-1.217,1.403-6.497,1.403-6.497c0.436,0.03,1.091-1.136,1.091-1.136c1.091-0.936,1.246-6.167,1.246-6.167
	c0.405-2.026,0-9.024,0-9.024c-0.155-1.402-2.337-10.871-2.337-10.871C69.581-22.529,68.116-31.5,68.116-31.5
	c-0.468-2.058-1.216-8.537-1.216-8.537c-1.403-6.328-3.958-24.111-3.958-24.111c-1.528-4.676-5.237-20.434-5.237-20.434
	c-2.93-5.112-7.106-16.676-7.106-16.676c-7.449-7.388-13.153-19.045-13.153-19.045c-4.395-1.777-9.476-9.326-9.476-9.326
	c-1.901-0.779-1.964-4.239-1.964-4.239l0.03-2.74c-0.062-0.749,0.032-1.944,0.032-1.944c1.808-1.839,4.271-9.595,4.271-9.595
	c1.558-2.961,2.431-10.048,2.431-10.048c0.873,0.312,1.933-1.018,1.933-1.018c1.34-0.093,2.15-3.723,2.15-3.723
	c0.53-1.465,1.194-8.357,1.194-8.357c0.547-1.967,0.983-7.642,0.983-7.642c0.316-2.115-0.765-5.916-0.765-5.916
	c-0.883-1.656-2.515-3.563-2.515-3.563c1.202-5.137,0-15.754,0-15.754c-1.093-6.23-10.071-11.913-10.071-11.913
	C18.645-225.263,0-224.882,0-224.882s-18.653-0.38-25.688,8.801C-25.688-216.082-34.658-210.398-35.751-204.168z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-33.647-199.928c0,0-1.082,10.28,0,14.904
	c0,0-1.468,1.927-2.262,3.418c0,0-0.973,3.682-0.689,5.585c0,0,0.394,5.455,0.885,7.226c0,0,0.598,6.572,1.075,7.891
	c0,0,0.729,3.482,1.935,3.566c0,0,0.954,1.344,1.74,1.063c0,0,0.785,6.859,2.188,9.524c0,0,2.216,7.51,3.843,9.166
	c0,0,0.084,1.158,0.028,1.831l0.028,2.592c0,0-0.056,3.345-1.767,4.046c0,0-4.573,7.576-8.528,9.175c0,0-5.134,11.757-11.839,18.405
	c0,0-3.759,11.347-6.396,15.948c0,0-3.338,15.242-4.712,19.45c0,0-2.301,17.218-3.563,22.913c0,0-0.674,6.268-1.094,8.119
	c0,0-1.319,8.672-2.301,11.001c0,0-1.963,9.091-2.104,10.353c0,0-0.364,6.756,0,8.58c0,0,0.141,5.038,1.123,5.88
	c0,0,0.589,1.137,0.981,1.108c0,0,0.085,5.095,1.263,6.189c0,0,0.841,2.264,1.907,1.956c0,0,0.449,3.696,2.245,3.753
	c0,0,1.711,1.713,2.047,0.59c0,0,0.605,4.014,2.453,4.014c0,0,2.241,2.538,2.357,0.528c0,0,0.092,1.705-0.878-0.906
	c0,0-0.739,1.383-0.693-1.389c0,0,0.092,0.432,0.855-1.001c0,0,0.577,0.424,1.732,0.494c0,0,1.41,1.521,1.456,2.862
	c0,0,0.092,3.832,0.162,4.779c0,0,0.254,4.617,1.617,5.01c0,0,1.063,1.494,1.71,1.264c0,0,0.647,1.001,0.439-0.455
	c0,0-0.324,1.312-0.024-1.668c0,0,0.162,0.058,0-0.683c0,0-0.554,0.785-1.848-0.925c0,0-1.386,0.903-1.409-1.084
	c0,0-0.093,0.052,0.277-0.457c0,0,3.018,1.627,4.466-1.756c0,0,1.564,0.475,1.98-1.281c0,0,0.624-0.042,0.67-1.289
	c0,0,1.779,0.604,2.518-0.043c0,0,1.964,1.615,3.212,0.113c0,0,1.733,0.82,1.987-0.659c0,0,0.531,10.354,0.577,15.737
	c0,0,0.393,15.662-0.208,21.669c0,0-1.594,24.364-2.68,29.193c0,0-2.749,25.758-3.072,30.909c0,0-0.486,15.584-0.324,21.061
	c0,0,0.046,4.482,0.393,7.417c0,0,1.617,17.79,3.627,24.166c0,0,2.726,15.085,3.396,17.003c0,0,1.086,6.992,0.878,9.533
	c0,0-0.531,6.99-0.531,8.123c0,0-0.277,9.298,0.462,11.308c0,0,1.222,2.218,2.793,2.38c0,0,1.252,0.046,1.506-0.462
	c0,0,0.723,0.762,1.832,0.762c0,0,1.632-0.185,1.863-0.832c0,0,0.474,0.51,1.768,0.532c0,0,1.885,0.069,2.208-0.994
	c0,0,0.372,0.602,1.411,0.51c0,0,1.729-0.302,2.144-0.994c0,0,0.993,0.785,2.079,0.67c0,0,2.413-0.115,2.598-1.617
	c0,0,0.568-0.97-0.194-2.403c0,0-1.165-3.743-2.297-5.961c0,0-1.874-3.835-2.013-4.389c0,0-0.253-0.485-0.207-1.918
	c0,0,1.967-6.908,1.805-9.981c0,0,0.611-3.327-0.035-7.046c0,0-0.099-3.789-0.608-5.521c0,0-0.083-1.641,0.241-3.419
	c0,0,0.906-2.403,1.715-4.853c0,0,2.431-3.535,3.077-7.694c0,0,2.446-5.648,1.729-8.443c0,0,2.053,0.646,4.237,1.051
	c0,0,2.199,0.347,4.013,0.277c1.812,0.069,3.996-0.277,3.996-0.277c2.183-0.404,4.227-1.051,4.227-1.051
	c-0.716,2.795,1.762,8.443,1.762,8.443c0.646,4.159,3.096,7.694,3.096,7.694c0.809,2.449,1.719,4.853,1.719,4.853
	c0.323,1.778,0.271,3.419,0.271,3.419c-0.509,1.732-0.583,5.521-0.583,5.521c-0.647,3.719,0.006,7.046,0.006,7.046
	c-0.162,3.073,1.86,9.981,1.86,9.981c0.047,1.433-0.192,1.918-0.192,1.918c-0.139,0.554-1.96,4.389-1.96,4.389
	c-1.132,2.218-2.231,5.961-2.231,5.961c-0.762,1.434-0.168,2.403-0.168,2.403c0.186,1.502,2.637,1.617,2.637,1.617
	c1.086,0.115,2.117-0.67,2.117-0.67c0.416,0.692,2.19,0.994,2.19,0.994c1.04,0.092,1.444-0.51,1.444-0.51
	c0.322,1.063,2.25,0.994,2.25,0.994c1.295-0.022,1.8-0.532,1.8-0.532c0.23,0.647,1.916,0.832,1.916,0.832
	c1.108,0,1.892-0.762,1.892-0.762c0.254,0.508,1.563,0.462,1.563,0.462c1.57-0.162,2.839-2.38,2.839-2.38
	c0.74-2.01,0.462-11.232,0.462-11.232c0-1.132-0.531-8.047-0.531-8.047c-0.208-2.541,0.878-9.472,0.878-9.472
	c0.67-1.918,3.396-16.909,3.396-16.909c2.01-6.377,3.627-24.051,3.627-24.051c0.347-2.934,0.393-7.363,0.393-7.363
	c0.162-5.475-0.323-20.919-0.323-20.919c-0.323-5.151-3.072-30.802-3.072-30.802c-1.086-4.829-2.681-29.037-2.681-29.037
	c-0.601-6.007-0.208-21.594-0.208-21.594c0.046-5.384,0.577-15.671,0.577-15.671c0.255,1.479,1.987,0.677,1.987,0.677
	c1.248,1.502,3.212-0.085,3.212-0.085c0.739,0.646,2.518,0.063,2.518,0.063c0.047,1.248,0.67,1.305,0.67,1.305
	c0.416,1.756,1.98,1.311,1.98,1.311c1.448,3.383,4.466,1.783,4.466,1.783c0.37,0.509,0.277,0.464,0.277,0.464
	c-0.023,1.987-1.409,1.106-1.409,1.106c-1.294,1.71-1.848,0.938-1.848,0.938c-0.162,0.739,0,0.688,0,0.688
	c0.3,2.979-0.023,1.691-0.023,1.691c-0.208,1.455,0.439,0.463,0.439,0.463c0.646,0.231,1.709-1.257,1.709-1.257
	c1.362-0.393,1.617-5.004,1.617-5.004c0.069-0.948,0.161-4.764,0.161-4.764c0.046-1.34,1.456-2.854,1.456-2.854
	c1.155-0.069,1.732-0.5,1.732-0.5c0.763,1.433,0.854,1.006,0.854,1.006c0.048,2.773-0.692,1.39-0.692,1.39
	c-0.971,2.61-0.878,0.899-0.878,0.899c0.115,2.011,2.356-0.524,2.356-0.524c1.849,0,2.453-4.015,2.453-4.015
	c0.336,1.122,2.048-0.597,2.048-0.597c1.795-0.056,2.244-3.763,2.244-3.763c1.066,0.309,1.907-1.969,1.907-1.969
	c1.179-1.095,1.263-6.207,1.263-6.207c0.394,0.027,0.982-1.119,0.982-1.119c0.981-0.842,1.122-5.89,1.122-5.89
	c0.363-1.824,0-8.599,0-8.599c-0.141-1.262-2.104-10.381-2.104-10.381c-0.981-2.328-2.301-11.039-2.301-11.039
	c-0.42-1.852-1.094-8.141-1.094-8.141c-1.263-5.695-3.562-23.007-3.562-23.007c-1.375-4.208-4.713-19.532-4.713-19.532
	c-2.637-4.601-6.396-16.021-6.396-16.021c-6.705-6.649-11.84-18.523-11.84-18.523c-3.954-1.599-8.527-9.249-8.527-9.249
	c-1.711-0.702-1.768-4.086-1.768-4.086l0.028-2.611c-0.056-0.673,0.028-1.851,0.028-1.851c1.627-1.655,3.843-9.224,3.843-9.224
	c1.403-2.665,2.188-9.603,2.188-9.603c0.785,0.28,1.739-1.08,1.739-1.08c1.206-0.084,1.936-3.607,1.936-3.607
	c0.477-1.318,1.075-7.973,1.075-7.973c0.491-1.771,0.885-7.29,0.885-7.29c0.285-1.903-0.688-5.647-0.688-5.647
	c-0.795-1.491-2.263-3.477-2.263-3.477c1.082-4.623,0-15.022,0-15.022c-0.984-5.607-9.627-10.722-9.627-10.722
	C17.689-218.914,0-218.571,0-218.571s-17.699-0.342-24.03,7.921C-24.029-210.65-32.663-205.535-33.647-199.928z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-31.543-195.688c0,0-0.962,10.058,0,14.167
	c0,0-1.305,2.005-2.011,3.33c0,0-0.865,3.622-0.612,5.314c0,0,0.35,5.297,0.787,6.871c0,0,0.531,6.333,0.955,7.505
	c0,0,0.648,3.373,1.72,3.447c0,0,0.848,1.375,1.546,1.125c0,0,0.699,6.707,1.946,9.076c0,0,1.969,7.321,3.416,8.792
	c0,0,0.075,1.14,0.025,1.739l0.025,2.461c0,0-0.05,3.268-1.571,3.891c0,0-4.065,7.674-7.581,9.095c0,0-4.563,11.97-10.523,17.88
	c0,0-3.341,11.2-5.685,15.289c0,0-2.968,14.805-4.19,18.546c0,0-2.044,16.743-3.166,21.805c0,0-0.599,6.076-0.973,7.722
	c0,0-1.172,8.41-2.045,10.48c0,0-1.745,8.74-1.87,9.862c0,0-0.324,6.533,0,8.154c0,0,0.125,4.855,0.998,5.603
	c0,0,0.523,1.118,0.872,1.093c0,0,0.075,4.926,1.123,5.899c0,0,0.748,2.225,1.695,1.95c0,0,0.399,3.597,1.995,3.646
	c0,0,1.521,1.78,1.82,0.783c0,0,0.538,3.902,2.181,3.902c0,0,1.992,2.604,2.094,0.817c0,0,0.083,1.863-0.78-0.457
	c0,0-0.657,1.734-0.616-0.731c0,0,0.082,0.771,0.76-0.503c0,0,0.513,0.59,1.54,0.65c0,0,1.253,1.582,1.294,2.773
	c0,0,0.082,3.699,0.145,4.542c0,0,0.225,4.447,1.437,4.798c0,0,0.945,1.506,1.52,1.301c0,0,0.575,1.088,0.39-0.206
	c0,0-0.287,1.753-0.02-0.896c0,0,0.143,0.28,0-0.376c0,0-0.493,1.163-1.643-0.356c0,0-1.233,1.272-1.253-0.493
	c0,0-0.082,0.212,0.246-0.24c0,0,2.683,2.454,3.97-0.554c0,0,1.39,1.003,1.76-0.557c0,0,0.554,0.426,0.596-0.684
	c0,0,1.581,0.911,2.238,0.336c0,0,1.746,1.892,2.855,0.557c0,0,1.54,1.151,1.766-0.162c0,0,0.472,10.178,0.513,14.963
	c0,0,0.349,15.262-0.185,20.602c0,0-1.417,23.48-2.382,27.772c0,0-2.444,24.824-2.731,29.403c0,0-0.432,15.16-0.288,20.027
	c0,0,0.041,4.445,0.349,7.054c0,0,1.438,17.337,3.225,23.005c0,0,2.423,14.497,3.018,16.202c0,0,0.966,6.812,0.781,9.07
	c0,0-0.472,6.72-0.472,7.728c0,0-0.247,8.968,0.41,10.754c0,0,1.145,1.972,2.541,2.114c0,0,1.135,0.043,1.36-0.409
	c0,0,0.671,0.677,1.657,0.677c0,0,1.481-0.164,1.686-0.739c0,0,0.448,0.452,1.598,0.472c0,0,1.712,0.062,1.999-0.883
	c0,0,0.351,0.534,1.275,0.452c0,0,1.571-0.267,1.94-0.883c0,0,0.914,0.698,1.879,0.596c0,0,2.195-0.103,2.359-1.438
	c0,0,0.546-0.862-0.132-2.136c0,0-0.92-3.327-1.926-5.299c0,0-1.58-3.408-1.703-3.901c0,0-0.194-0.432-0.153-1.705
	c0,0,1.925-6.141,1.781-8.871c0,0,0.666-2.958,0.091-6.264c0,0,0.011-3.368-0.44-4.908c0,0-0.017-1.458,0.27-3.04
	c0,0,0.893-2.137,1.612-4.312c0,0,2.303-3.142,2.878-6.839c0,0,2.323-5.021,1.687-7.506c0,0,1.893,0.575,3.834,0.934
	c0,0,2.018,0.309,3.629,0.247c1.612,0.062,3.612-0.247,3.612-0.247c1.941-0.358,3.825-0.934,3.825-0.934
	c-0.637,2.485,1.72,7.506,1.72,7.506c0.575,3.697,2.897,6.839,2.897,6.839c0.719,2.176,1.615,4.312,1.615,4.312
	c0.287,1.582,0.302,3.04,0.302,3.04c-0.452,1.54-0.415,4.908-0.415,4.908c-0.575,3.306,0.134,6.264,0.134,6.264
	c-0.144,2.73,1.838,8.871,1.838,8.871c0.041,1.273-0.137,1.705-0.137,1.705c-0.124,0.493-1.648,3.901-1.648,3.901
	c-1.007,1.972-1.857,5.299-1.857,5.299c-0.679,1.273-0.105,2.136-0.105,2.136c0.164,1.335,2.399,1.438,2.399,1.438
	c0.965,0.103,1.919-0.596,1.919-0.596c0.369,0.616,1.988,0.883,1.988,0.883c0.924,0.082,1.309-0.452,1.309-0.452
	c0.287,0.945,2.044,0.883,2.044,0.883c1.15-0.02,1.63-0.472,1.63-0.472c0.205,0.575,1.74,0.739,1.74,0.739
	c0.986,0,1.72-0.677,1.72-0.677c0.227,0.452,1.419,0.409,1.419,0.409c1.397-0.143,2.589-2.114,2.589-2.114
	c0.657-1.786,0.411-10.675,0.411-10.675c0-1.008-0.473-7.649-0.473-7.649c-0.185-2.259,0.781-9.007,0.781-9.007
	c0.595-1.704,3.019-16.105,3.019-16.105c1.786-5.668,3.224-22.885,3.224-22.885c0.309-2.608,0.35-6.996,0.35-6.996
	c0.144-4.867-0.287-19.882-0.287-19.882c-0.288-4.58-2.732-29.291-2.732-29.291c-0.965-4.292-2.382-27.611-2.382-27.611
	c-0.534-5.339-0.185-20.523-0.185-20.523c0.041-4.785,0.513-14.895,0.513-14.895c0.227,1.315,1.768,0.182,1.768,0.182
	c1.108,1.335,2.854-0.527,2.854-0.527c0.657,0.575,2.239-0.313,2.239-0.313c0.041,1.109,0.595,0.697,0.595,0.697
	c0.37,1.562,1.76,0.589,1.76,0.589c1.287,3.007,3.971,0.582,3.971,0.582c0.328,0.452,0.245,0.246,0.245,0.246
	c-0.02,1.768-1.252,0.517-1.252,0.517c-1.149,1.52-1.643,0.371-1.643,0.371c-0.144,0.656,0,0.382,0,0.382
	c0.267,2.649-0.021,0.921-0.021,0.921c-0.185,1.294,0.391,0.215,0.391,0.215c0.575,0.206,1.52-1.295,1.52-1.295
	c1.212-0.35,1.438-4.792,1.438-4.792c0.061-0.842,0.143-4.526,0.143-4.526c0.042-1.19,1.294-2.762,1.294-2.762
	c1.027-0.062,1.541-0.658,1.541-0.658c0.677,1.274,0.759,0.51,0.759,0.51c0.041,2.465-0.615,0.731-0.615,0.731
	c-0.862,2.32-0.78,0.45-0.78,0.45c0.103,1.787,2.095-0.814,2.095-0.814c1.644,0,2.181-3.904,2.181-3.904
	c0.299,0.997,1.819-0.788,1.819-0.788c1.597-0.051,1.995-3.655,1.995-3.655c0.948,0.273,1.696-1.965,1.696-1.965
	c1.047-0.974,1.122-5.918,1.122-5.918c0.349,0.025,0.873-1.103,0.873-1.103c0.872-0.749,0.997-5.613,0.997-5.613
	c0.323-1.621,0-8.174,0-8.174c-0.125-1.123-1.87-9.891-1.87-9.891c-0.873-2.07-2.045-10.52-2.045-10.52
	c-0.374-1.645-0.973-7.745-0.973-7.745c-1.123-5.062-3.167-21.903-3.167-21.903c-1.222-3.74-4.188-18.63-4.188-18.63
	c-2.344-4.089-5.687-15.366-5.687-15.366c-5.96-5.909-10.522-18.002-10.522-18.002c-3.517-1.421-7.58-9.172-7.58-9.172
	c-1.521-0.624-1.571-3.933-1.571-3.933l0.025-2.48c-0.05-0.598,0.024-1.759,0.024-1.759c1.446-1.471,3.416-8.852,3.416-8.852
	c1.247-2.369,1.945-9.159,1.945-9.159c0.698,0.249,1.546-1.143,1.546-1.143c1.072-0.075,1.72-3.489,1.72-3.489
	c0.425-1.172,0.955-7.59,0.955-7.59c0.438-1.574,0.787-6.938,0.787-6.938c0.253-1.692-0.611-5.379-0.611-5.379
	c-0.706-1.325-2.012-3.39-2.012-3.39c0.962-4.109,0-14.29,0-14.29c-0.874-4.984-9.183-9.531-9.183-9.531
	C16.733-212.563,0-212.259,0-212.259s-16.743-0.304-22.37,7.04C-22.369-205.219-30.669-200.672-31.543-195.688z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-29.439-191.448c0,0-0.842,9.835,0,13.431
	c0,0-1.142,2.081-1.76,3.24c0,0-0.756,3.563-0.535,5.044c0,0,0.306,5.139,0.688,6.516c0,0,0.465,6.093,0.836,7.119
	c0,0,0.567,3.263,1.506,3.328c0,0,0.741,1.406,1.352,1.188c0,0,0.611,6.555,1.702,8.628c0,0,1.724,7.132,2.989,8.419
	c0,0,0.066,1.122,0.022,1.646l0.022,2.33c0,0-0.044,3.19-1.375,3.736c0,0-3.556,7.772-6.633,9.016c0,0-3.992,12.182-9.207,17.353
	c0,0-2.924,11.054-4.975,14.632c0,0-2.596,14.367-3.665,17.64c0,0-1.79,16.268-2.771,20.698c0,0-0.524,5.885-0.851,7.325
	c0,0-1.026,8.148-1.79,9.959c0,0-1.527,8.389-1.636,9.371c0,0-0.284,6.311,0,7.729c0,0,0.109,4.67,0.873,5.325
	c0,0,0.458,1.099,0.763,1.077c0,0,0.066,4.757,0.982,5.608c0,0,0.655,2.187,1.484,1.947c0,0,0.349,3.494,1.746,3.538
	c0,0,1.331,1.847,1.592,0.975c0,0,0.471,3.792,1.908,3.792c0,0,1.743,2.671,1.833,1.106c0,0,0.072,2.022-0.683-0.008
	c0,0-0.575,2.084-0.539-0.072c0,0,0.072,1.107,0.665-0.007c0,0,0.449,0.754,1.348,0.808c0,0,1.096,1.641,1.132,2.683
	c0,0,0.072,3.567,0.126,4.304c0,0,0.197,4.281,1.257,4.587c0,0,0.827,1.52,1.33,1.339c0,0,0.503,1.176,0.342,0.043
	c0,0-0.252,2.194-0.018-0.124c0,0,0.125,0.505,0-0.07c0,0-0.432,1.543-1.438,0.214c0,0-1.078,1.642-1.096,0.097
	c0,0-0.072,0.373,0.216-0.021c0,0,2.347,3.279,3.473,0.648c0,0,1.217,1.53,1.54,0.165c0,0,0.485,0.896,0.521-0.076
	c0,0,1.384,1.219,1.959,0.715c0,0,1.527,2.167,2.498,0.999c0,0,1.347,1.484,1.545,0.334c0,0,0.413,10.004,0.449,14.189
	c0,0,0.306,14.863-0.162,19.535c0,0-1.239,22.596-2.084,26.352c0,0-2.138,23.891-2.39,27.897c0,0-0.377,14.736-0.252,18.996
	c0,0,0.036,4.405,0.306,6.688c0,0,1.258,16.884,2.821,21.843c0,0,2.121,13.91,2.642,15.401c0,0,0.844,6.632,0.683,8.608
	c0,0-0.414,6.451-0.414,7.331c0,0-0.215,8.638,0.36,10.2c0,0,1.067,1.726,2.288,1.852c0,0,1.017,0.036,1.215-0.359
	c0,0,0.619,0.594,1.482,0.594c0,0,1.329-0.145,1.508-0.647c0,0,0.422,0.395,1.428,0.413c0,0,1.539,0.054,1.79-0.773
	c0,0,0.331,0.469,1.14,0.396c0,0,1.412-0.234,1.735-0.773c0,0,0.834,0.611,1.679,0.521c0,0,1.977-0.09,2.12-1.258
	c0,0,0.523-0.754-0.07-1.869c0,0-0.674-2.911-1.555-4.637c0,0-1.286-2.982-1.393-3.413c0,0-0.135-0.378-0.099-1.491
	c0,0,1.883-5.373,1.758-7.764c0,0,0.72-2.588,0.217-5.48c0,0,0.121-2.947-0.274-4.295c0,0,0.049-1.275,0.301-2.659
	c0,0,0.879-1.869,1.508-3.774c0,0,2.175-2.749,2.678-5.983c0,0,2.202-4.394,1.645-6.567c0,0,1.734,0.503,3.432,0.817
	c0,0,1.836,0.27,3.247,0.216c1.41,0.054,3.229-0.216,3.229-0.216c1.697-0.314,3.423-0.817,3.423-0.817
	c-0.558,2.174,1.678,6.567,1.678,6.567c0.504,3.234,2.699,5.983,2.699,5.983c0.629,1.905,1.512,3.774,1.512,3.774
	c0.252,1.384,0.333,2.659,0.333,2.659c-0.395,1.348-0.248,4.295-0.248,4.295c-0.503,2.893,0.262,5.48,0.262,5.48
	c-0.126,2.391,1.817,7.764,1.817,7.764c0.036,1.113-0.083,1.491-0.083,1.491c-0.108,0.431-1.336,3.413-1.336,3.413
	c-0.88,1.726-1.484,4.637-1.484,4.637c-0.593,1.115-0.042,1.869-0.042,1.869c0.145,1.168,2.162,1.258,2.162,1.258
	c0.844,0.09,1.72-0.521,1.72-0.521c0.323,0.539,1.785,0.773,1.785,0.773c0.81,0.072,1.175-0.396,1.175-0.396
	c0.252,0.827,1.838,0.773,1.838,0.773c1.006-0.019,1.46-0.413,1.46-0.413c0.18,0.503,1.564,0.647,1.564,0.647
	c0.863,0,1.547-0.594,1.547-0.594c0.198,0.396,1.276,0.359,1.276,0.359c1.222-0.126,2.339-1.852,2.339-1.852
	c0.575-1.562,0.359-10.118,0.359-10.118c0-0.881-0.413-7.25-0.413-7.25c-0.162-1.977,0.683-8.541,0.683-8.541
	c0.521-1.492,2.642-15.302,2.642-15.302c1.563-4.959,2.821-21.719,2.821-21.719c0.27-2.283,0.306-6.63,0.306-6.63
	c0.126-4.258-0.252-18.845-0.252-18.845c-0.252-4.007-2.39-27.78-2.39-27.78c-0.845-3.756-2.085-26.184-2.085-26.184
	c-0.467-4.673-0.162-19.454-0.162-19.454c0.036-4.188,0.45-14.118,0.45-14.118c0.197,1.149,1.545-0.315,1.545-0.315
	c0.97,1.168,2.498-0.969,2.498-0.969c0.575,0.503,1.958-0.691,1.958-0.691c0.036,0.971,0.521,0.091,0.521,0.091
	c0.323,1.365,1.54-0.133,1.54-0.133c1.127,2.632,3.474-0.619,3.474-0.619c0.287,0.396,0.216,0.029,0.216,0.029
	c-0.018,1.545-1.097-0.073-1.097-0.073c-1.006,1.328-1.438-0.198-1.438-0.198c-0.126,0.575,0,0.077,0,0.077
	c0.234,2.317-0.018,0.148-0.018,0.148c-0.162,1.132,0.341-0.033,0.341-0.033c0.504,0.181,1.33-1.333,1.33-1.333
	c1.06-0.306,1.258-4.581,1.258-4.581c0.054-0.735,0.126-4.286,0.126-4.286c0.036-1.042,1.132-2.672,1.132-2.672
	c0.898-0.054,1.349-0.814,1.349-0.814c0.593,1.114,0.664,0.012,0.664,0.012c0.035,2.157-0.539,0.073-0.539,0.073
	c-0.754,2.03-0.683,0.001-0.683,0.001c0.089,1.563,1.832-1.104,1.832-1.104c1.438,0,1.908-3.793,1.908-3.793
	c0.262,0.873,1.593-0.979,1.593-0.979c1.396-0.044,1.745-3.549,1.745-3.549c0.83,0.24,1.484-1.961,1.484-1.961
	c0.917-0.851,0.981-5.628,0.981-5.628c0.306,0.022,0.765-1.088,0.765-1.088c0.763-0.654,0.872-5.335,0.872-5.335
	c0.283-1.419,0-7.75,0-7.75c-0.109-0.982-1.637-9.4-1.637-9.4c-0.764-1.811-1.789-10-1.789-10c-0.326-1.44-0.851-7.35-0.851-7.35
	c-0.981-4.429-2.771-20.798-2.771-20.798c-1.069-3.273-3.666-17.729-3.666-17.729c-2.052-3.578-4.975-14.71-4.975-14.71
	c-5.215-5.171-9.208-17.481-9.208-17.481c-3.076-1.244-6.633-9.096-6.633-9.096c-1.331-0.546-1.374-3.779-1.374-3.779l0.021-2.35
	c-0.043-0.524,0.021-1.667,0.021-1.667c1.266-1.287,2.989-8.481,2.989-8.481c1.091-2.073,1.702-8.714,1.702-8.714
	c0.61,0.218,1.353-1.205,1.353-1.205c0.938-0.066,1.505-3.372,1.505-3.372c0.371-1.026,0.836-7.208,0.836-7.208
	c0.383-1.377,0.689-6.585,0.689-6.585c0.221-1.48-0.536-5.11-0.536-5.11c-0.618-1.16-1.76-3.303-1.76-3.303
	c0.842-3.596,0-13.559,0-13.559c-0.766-4.361-8.738-8.339-8.738-8.339c-4.924-6.427-20.7-6.161-20.7-6.161
	s-15.787-0.266-20.711,6.161C-20.71-199.787-28.674-195.809-29.439-191.448z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-27.335-187.208c0,0-0.721,9.613,0,12.695
	c0,0-0.979,2.157-1.508,3.151c0,0-0.649,3.504-0.459,4.773c0,0,0.262,4.981,0.59,6.161c0,0,0.398,5.854,0.716,6.733
	c0,0,0.486,3.154,1.291,3.21c0,0,0.635,1.435,1.159,1.248c0,0,0.524,6.404,1.459,8.18c0,0,1.477,6.943,2.562,8.046
	c0,0,0.056,1.103,0.019,1.552l0.018,2.199c0,0-0.037,3.114-1.178,3.582c0,0-3.048,7.87-5.685,8.936c0,0-3.423,12.396-7.892,16.828
	c0,0-2.506,10.907-4.264,13.974c0,0-2.226,13.93-3.142,16.735c0,0-1.534,15.793-2.376,19.59c0,0-0.448,5.694-0.729,6.929
	c0,0-0.879,7.885-1.533,9.437c0,0-1.31,8.038-1.403,8.879c0,0-0.243,6.089,0,7.304c0,0,0.093,4.487,0.748,5.048
	c0,0,0.393,1.08,0.655,1.061c0,0,0.056,4.588,0.841,5.317c0,0,0.561,2.148,1.272,1.942c0,0,0.299,3.394,1.496,3.432
	c0,0,1.141,1.913,1.365,1.165c0,0,0.403,3.682,1.635,3.682c0,0,1.495,2.736,1.572,1.396c0,0,0.061,2.182-0.586,0.441
	c0,0-0.493,2.435-0.462,0.586c0,0,0.062,1.446,0.57,0.491c0,0,0.385,0.919,1.155,0.965c0,0,0.94,1.698,0.971,2.592
	c0,0,0.061,3.435,0.107,4.066c0,0,0.17,4.112,1.079,4.375c0,0,0.708,1.531,1.139,1.378c0,0,0.432,1.261,0.293,0.291
	c0,0-0.216,2.635-0.015,0.647c0,0,0.107,0.729,0,0.235c0,0-0.37,1.922-1.233,0.782c0,0-0.924,2.013-0.939,0.688
	c0,0-0.062,0.534,0.185,0.196c0,0,2.012,4.106,2.977,1.851c0,0,1.043,2.06,1.32,0.889c0,0,0.416,1.362,0.447,0.531
	c0,0,1.186,1.524,1.679,1.093c0,0,1.309,2.443,2.14,1.442c0,0,1.156,1.816,1.325,0.831c0,0,0.354,9.827,0.385,13.415
	c0,0,0.262,14.464-0.138,18.468c0,0-1.063,21.712-1.787,24.932c0,0-1.833,22.956-2.049,26.39c0,0-0.323,14.314-0.215,17.965
	c0,0,0.03,4.368,0.262,6.324c0,0,1.078,16.431,2.418,20.682c0,0,1.817,13.322,2.264,14.601c0,0,0.724,6.451,0.585,8.146
	c0,0-0.354,6.181-0.354,6.935c0,0-0.185,8.308,0.308,9.647c0,0,0.989,1.479,2.037,1.587c0,0,0.899,0.031,1.068-0.308
	c0,0,0.568,0.508,1.307,0.508c0,0,1.178-0.123,1.332-0.554c0,0,0.394,0.338,1.257,0.354c0,0,1.366,0.046,1.581-0.663
	c0,0,0.311,0.401,1.004,0.339c0,0,1.254-0.199,1.531-0.661c0,0,0.755,0.523,1.479,0.446c0,0,1.758-0.077,1.882-1.079
	c0,0,0.499-0.646-0.009-1.601c0,0-0.429-2.496-1.184-3.974c0,0-0.991-2.558-1.084-2.928c0,0-0.074-0.322-0.044-1.277
	c0,0,1.842-4.605,1.734-6.654c0,0,0.775-2.218,0.344-4.698c0,0,0.231-2.525-0.108-3.681c0,0,0.115-1.093,0.331-2.279
	c0,0,0.866-1.602,1.405-3.234c0,0,2.047-2.357,2.479-5.13c0,0,2.079-3.766,1.602-5.63c0,0,1.574,0.433,3.03,0.701
	c0,0,1.655,0.231,2.864,0.186c1.209,0.046,2.845-0.186,2.845-0.186c1.455-0.269,3.02-0.701,3.02-0.701
	c-0.478,1.864,1.638,5.63,1.638,5.63c0.432,2.772,2.5,5.13,2.5,5.13c0.539,1.633,1.408,3.234,1.408,3.234
	c0.216,1.187,0.364,2.279,0.364,2.279c-0.339,1.155-0.08,3.681-0.08,3.681c-0.432,2.48,0.391,4.698,0.391,4.698
	c-0.108,2.049,1.795,6.654,1.795,6.654c0.03,0.955-0.028,1.277-0.028,1.277c-0.093,0.37-1.025,2.928-1.025,2.928
	c-0.754,1.478-1.109,3.974-1.109,3.974c-0.508,0.955,0.021,1.601,0.021,1.601c0.123,1.002,1.925,1.079,1.925,1.079
	c0.724,0.077,1.521-0.446,1.521-0.446c0.277,0.462,1.583,0.661,1.583,0.661c0.693,0.062,1.04-0.339,1.04-0.339
	c0.215,0.709,1.629,0.663,1.629,0.663c0.863-0.016,1.292-0.354,1.292-0.354c0.154,0.431,1.39,0.554,1.39,0.554
	c0.739,0,1.374-0.508,1.374-0.508c0.171,0.339,1.133,0.308,1.133,0.308c1.047-0.107,2.089-1.587,2.089-1.587
	c0.493-1.34,0.308-9.562,0.308-9.562c0-0.754-0.354-6.851-0.354-6.851c-0.139-1.694,0.586-8.077,0.586-8.077
	c0.445-1.277,2.264-14.496,2.264-14.496c1.34-4.251,2.418-20.554,2.418-20.554c0.231-1.956,0.262-6.263,0.262-6.263
	c0.108-3.65-0.216-17.807-0.216-17.807c-0.215-3.436-2.048-26.271-2.048-26.271c-0.724-3.219-1.787-24.758-1.787-24.758
	c-0.4-4.004-0.139-18.384-0.139-18.384c0.031-3.588,0.386-13.342,0.386-13.342c0.169,0.985,1.324-0.811,1.324-0.811
	c0.832,1.001,2.141-1.411,2.141-1.411c0.493,0.431,1.679-1.069,1.679-1.069c0.031,0.832,0.447-0.516,0.447-0.516
	c0.277,1.171,1.319-0.854,1.319-0.854c0.966,2.255,2.978-1.821,2.978-1.821c0.246,0.338,0.186-0.188,0.186-0.188
	c-0.017,1.324-0.94-0.664-0.94-0.664c-0.861,1.141-1.231-0.767-1.231-0.767c-0.108,0.493,0-0.228,0-0.228
	c0.199,1.986-0.016-0.621-0.016-0.621c-0.139,0.97,0.292-0.281,0.292-0.281c0.433,0.154,1.141-1.372,1.141-1.372
	c0.909-0.262,1.078-4.369,1.078-4.369c0.046-0.631,0.107-4.049,0.107-4.049c0.031-0.893,0.97-2.58,0.97-2.58
	c0.771-0.047,1.156-0.973,1.156-0.973c0.508,0.955,0.569-0.484,0.569-0.484c0.031,1.848-0.462-0.586-0.462-0.586
	c-0.647,1.74-0.585-0.448-0.585-0.448c0.077,1.34,1.57-1.394,1.57-1.394c1.232,0,1.636-3.682,1.636-3.682
	c0.225,0.748,1.365-1.173,1.365-1.173c1.197-0.037,1.496-3.441,1.496-3.441c0.71,0.205,1.271-1.958,1.271-1.958
	c0.786-0.729,0.842-5.337,0.842-5.337c0.262,0.018,0.655-1.073,0.655-1.073c0.653-0.561,0.748-5.058,0.748-5.058
	c0.243-1.216,0-7.325,0-7.325c-0.095-0.842-1.403-8.91-1.403-8.91c-0.654-1.553-1.533-9.481-1.533-9.481
	c-0.281-1.234-0.729-6.953-0.729-6.953c-0.841-3.797-2.375-19.695-2.375-19.695c-0.916-2.805-3.143-16.826-3.143-16.826
	c-1.758-3.067-4.264-14.056-4.264-14.056c-4.47-4.432-7.892-16.959-7.892-16.959c-2.638-1.066-5.687-9.02-5.687-9.02
	c-1.14-0.468-1.178-3.626-1.178-3.626l0.019-2.219c-0.037-0.449,0.02-1.574,0.02-1.574c1.084-1.104,2.562-8.111,2.562-8.111
	c0.936-1.776,1.459-8.269,1.459-8.269c0.523,0.187,1.159-1.268,1.159-1.268c0.804-0.056,1.29-3.254,1.29-3.254
	c0.318-0.879,0.717-6.825,0.717-6.825c0.328-1.18,0.59-6.233,0.59-6.233c0.19-1.269-0.459-4.842-0.459-4.842
	c-0.529-0.994-1.508-3.216-1.508-3.216c0.722-3.082,0-12.827,0-12.827c-0.656-3.738-8.295-7.148-8.295-7.148
	C14.82-199.864,0-199.637,0-199.637s-14.831-0.227-19.052,5.281C-19.051-194.356-26.679-190.946-27.335-187.208z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-25.231-182.968c0,0-0.601,9.39,0,11.959
	c0,0-0.816,2.233-1.257,3.061c0,0-0.54,3.445-0.382,4.502c0,0,0.218,4.824,0.491,5.807c0,0,0.332,5.614,0.597,6.346
	c0,0,0.405,3.045,1.076,3.092c0,0,0.53,1.466,0.966,1.31c0,0,0.436,6.252,1.216,7.733c0,0,1.231,6.753,2.135,7.672
	c0,0,0.046,1.085,0.015,1.459l0.016,2.068c0,0-0.031,3.037-0.982,3.426c0,0-2.54,7.969-4.738,8.857c0,0-2.852,12.609-6.577,16.303
	c0,0-2.088,10.76-3.553,13.316c0,0-1.855,13.492-2.618,15.829c0,0-1.278,15.319-1.979,18.483c0,0-0.374,5.503-0.607,6.532
	c0,0-0.733,7.623-1.278,8.917c0,0-1.091,7.686-1.169,8.387c0,0-0.203,5.866,0,6.879c0,0,0.078,4.303,0.623,4.77
	c0,0,0.327,1.061,0.546,1.045c0,0,0.046,4.419,0.701,5.027c0,0,0.467,2.109,1.06,1.937c0,0,0.249,3.293,1.247,3.324
	c0,0,0.95,1.981,1.137,1.358c0,0,0.336,3.569,1.363,3.569c0,0,1.245,2.804,1.309,1.687c0,0,0.052,2.34-0.488,0.891
	c0,0-0.41,2.785-0.385,1.245c0,0,0.052,1.782,0.475,0.986c0,0,0.321,1.084,0.963,1.123c0,0,0.783,1.757,0.809,2.501
	c0,0,0.051,3.303,0.089,3.829c0,0,0.142,3.944,0.899,4.163c0,0,0.59,1.544,0.95,1.416c0,0,0.359,1.349,0.244,0.54
	c0,0-0.18,3.076-0.013,1.42c0,0,0.09,0.951,0,0.54c0,0-0.308,2.302-1.027,1.352c0,0-0.77,2.384-0.783,1.279
	c0,0-0.051,0.695,0.154,0.412c0,0,1.677,4.934,2.481,3.054c0,0,0.869,2.587,1.1,1.611c0,0,0.347,1.832,0.372,1.139
	c0,0,0.989,1.83,1.399,1.472c0,0,1.091,2.72,1.784,1.886c0,0,0.963,2.147,1.104,1.327c0,0,0.295,9.65,0.321,12.642
	c0,0,0.218,14.064-0.115,17.401c0,0-0.886,20.828-1.489,23.51c0,0-1.528,22.022-1.707,24.884c0,0-0.27,13.891-0.18,16.933
	c0,0,0.026,4.33,0.218,5.96c0,0,0.899,15.979,2.015,19.521c0,0,1.515,12.734,1.887,13.799c0,0,0.603,6.271,0.488,7.684
	c0,0-0.295,5.91-0.295,6.539c0,0-0.154,7.978,0.256,9.094c0,0,0.912,1.232,1.785,1.322c0,0,0.782,0.025,0.923-0.257
	c0,0,0.516,0.424,1.132,0.424c0,0,1.026-0.103,1.154-0.462c0,0,0.368,0.282,1.087,0.295c0,0,1.193,0.039,1.372-0.553
	c0,0,0.291,0.334,0.868,0.283c0,0,1.096-0.167,1.327-0.552c0,0,0.676,0.436,1.279,0.372c0,0,1.54-0.064,1.643-0.898
	c0,0,0.476-0.539,0.053-1.335c0,0-0.183-2.08-0.812-3.312c0,0-0.698-2.13-0.775-2.438c0,0-0.015-0.27,0.01-1.065
	c0,0,1.8-3.838,1.71-5.545c0,0,0.83-1.849,0.47-3.915c0,0,0.342-2.104,0.06-3.067c0,0,0.181-0.911,0.36-1.9
	c0,0,0.853-1.335,1.302-2.694c0,0,1.92-1.964,2.279-4.274c0,0,1.958-3.139,1.56-4.691c0,0,1.415,0.359,2.628,0.584
	c0,0,1.473,0.192,2.481,0.153c1.007,0.039,2.461-0.153,2.461-0.153c1.213-0.225,2.618-0.584,2.618-0.584
	c-0.397,1.553,1.596,4.691,1.596,4.691c0.359,2.311,2.302,4.274,2.302,4.274c0.448,1.359,1.306,2.694,1.306,2.694
	c0.179,0.989,0.396,1.9,0.396,1.9c-0.283,0.963,0.087,3.067,0.087,3.067c-0.359,2.066,0.518,3.915,0.518,3.915
	c-0.089,1.707,1.774,5.545,1.774,5.545c0.025,0.796,0.026,1.065,0.026,1.065c-0.077,0.309-0.713,2.438-0.713,2.438
	c-0.629,1.231-0.737,3.312-0.737,3.312c-0.423,0.796,0.083,1.335,0.083,1.335c0.104,0.834,1.688,0.898,1.688,0.898
	c0.603,0.063,1.323-0.372,1.323-0.372c0.23,0.385,1.38,0.552,1.38,0.552c0.578,0.051,0.906-0.283,0.906-0.283
	c0.179,0.592,1.422,0.553,1.422,0.553c0.719-0.013,1.122-0.295,1.122-0.295c0.128,0.359,1.215,0.462,1.215,0.462
	c0.616,0,1.202-0.424,1.202-0.424c0.141,0.282,0.987,0.257,0.987,0.257c0.873-0.09,1.839-1.322,1.839-1.322
	c0.41-1.116,0.257-9.006,0.257-9.006c0-0.629-0.296-6.452-0.296-6.452c-0.114-1.412,0.488-7.612,0.488-7.612
	c0.372-1.064,1.887-13.69,1.887-13.69c1.116-3.543,2.016-19.389,2.016-19.389c0.191-1.631,0.218-5.896,0.218-5.896
	c0.09-3.042-0.18-16.771-0.18-16.771c-0.179-2.862-1.707-24.759-1.707-24.759c-0.604-2.683-1.489-23.331-1.489-23.331
	c-0.333-3.337-0.115-17.313-0.115-17.313c0.025-2.991,0.321-12.566,0.321-12.566c0.141,0.822,1.103-1.306,1.103-1.306
	c0.694,0.834,1.785-1.854,1.785-1.854c0.41,0.36,1.399-1.446,1.399-1.446c0.024,0.693,0.372-1.121,0.372-1.121
	c0.23,0.975,1.1-1.576,1.1-1.576c0.805,1.879,2.481-3.023,2.481-3.023c0.205,0.282,0.153-0.405,0.153-0.405
	c-0.013,1.104-0.782-1.253-0.782-1.253c-0.72,0.949-1.027-1.336-1.027-1.336c-0.09,0.411,0-0.532,0-0.532
	c0.167,1.655-0.013-1.394-0.013-1.394c-0.115,0.809,0.244-0.529,0.244-0.529c0.359,0.128,0.949-1.409,0.949-1.409
	c0.758-0.219,0.899-4.157,0.899-4.157C34.45,13.182,34.5,9.897,34.5,9.897c0.026-0.745,0.809-2.49,0.809-2.49
	c0.643-0.038,0.964-1.13,0.964-1.13c0.423,0.797,0.475-0.981,0.475-0.981c0.025,1.541-0.386-1.244-0.386-1.244
	c-0.539,1.45-0.487-0.896-0.487-0.896c0.064,1.115,1.31-1.685,1.31-1.685c1.026,0,1.362-3.57,1.362-3.57
	c0.188,0.623,1.138-1.365,1.138-1.365c0.997-0.031,1.246-3.334,1.246-3.334c0.593,0.171,1.061-1.953,1.061-1.953
	c0.654-0.608,0.701-5.048,0.701-5.048c0.218,0.016,0.546-1.057,0.546-1.057c0.545-0.467,0.623-4.781,0.623-4.781
	c0.203-1.014,0-6.901,0-6.901c-0.078-0.701-1.169-8.42-1.169-8.42c-0.545-1.293-1.278-8.961-1.278-8.961
	c-0.234-1.028-0.608-6.557-0.608-6.557c-0.7-3.164-1.979-18.591-1.979-18.591c-0.764-2.337-2.618-15.924-2.618-15.924
	c-1.465-2.556-3.553-13.4-3.553-13.4c-3.726-3.694-6.577-16.439-6.577-16.439c-2.198-0.888-4.738-8.943-4.738-8.943
	c-0.951-0.39-0.981-3.472-0.981-3.472l0.016-2.089c-0.032-0.374,0.015-1.482,0.015-1.482c0.904-0.92,2.136-7.739,2.136-7.739
	c0.779-1.481,1.216-7.825,1.216-7.825c0.436,0.156,0.966-1.33,0.966-1.33c0.67-0.047,1.076-3.138,1.076-3.138
	c0.265-0.732,0.596-6.441,0.596-6.441c0.274-0.984,0.492-5.881,0.492-5.881c0.158-1.057-0.382-4.574-0.382-4.574
	c-0.441-0.828-1.257-3.129-1.257-3.129c0.601-2.568,0-12.095,0-12.095c-0.548-3.115-7.851-5.957-7.851-5.957
	c-3.518-4.59-17.381-4.4-17.381-4.4s-13.875-0.19-17.392,4.4C-17.392-188.925-24.686-186.083-25.231-182.968z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-23.127-178.728c0,0-0.481,9.168,0,11.222
	c0,0-0.652,2.31-1.005,2.973c0,0-0.433,3.385-0.307,4.231c0,0,0.175,4.666,0.394,5.452c0,0,0.266,5.374,0.477,5.96
	c0,0,0.325,2.935,0.861,2.973c0,0,0.424,1.497,0.773,1.372c0,0,0.349,6.101,0.972,7.285c0,0,0.985,6.563,1.708,7.299
	c0,0,0.038,1.066,0.013,1.366l0.012,1.936c0,0-0.025,2.96-0.785,3.272c0,0-2.032,8.067-3.79,8.778c0,0-2.282,12.822-5.262,15.777
	c0,0-1.671,10.613-2.843,12.657c0,0-1.483,13.055-2.094,14.925c0,0-1.023,14.844-1.584,17.375c0,0-0.299,5.312-0.486,6.135
	c0,0-0.586,7.361-1.022,8.396c0,0-0.873,7.335-0.935,7.896c0,0-0.162,5.643,0,6.454c0,0,0.062,4.118,0.498,4.493
	c0,0,0.262,1.041,0.437,1.028c0,0,0.037,4.25,0.561,4.736c0,0,0.374,2.071,0.848,1.933c0,0,0.199,3.192,0.997,3.217
	c0,0,0.761,2.048,0.91,1.549c0,0,0.269,3.458,1.09,3.458c0,0,0.996,2.871,1.048,1.977c0,0,0.041,2.499-0.39,1.339
	c0,0-0.329,3.135-0.309,1.903c0,0,0.042,2.122,0.38,1.485c0,0,0.257,1.249,0.771,1.279c0,0,0.626,1.815,0.646,2.411
	c0,0,0.042,3.169,0.072,3.591c0,0,0.113,3.776,0.719,3.951c0,0,0.472,1.558,0.76,1.454c0,0,0.287,1.437,0.195,0.789
	c0,0-0.144,3.518-0.01,2.192c0,0,0.072,1.175,0,0.846c0,0-0.247,2.68-0.822,1.921c0,0-0.616,2.752-0.626,1.869
	c0,0-0.041,0.856,0.123,0.63c0,0,1.341,5.762,1.985,4.257c0,0,0.695,3.114,0.88,2.334c0,0,0.277,2.301,0.298,1.745
	c0,0,0.79,2.138,1.119,1.851c0,0,0.873,2.996,1.427,2.329c0,0,0.77,2.48,0.883,1.822c0,0,0.237,9.477,0.257,11.869
	c0,0,0.175,13.664-0.092,16.333c0,0-0.709,19.944-1.191,22.09c0,0-1.222,21.088-1.366,23.377c0,0-0.216,13.468-0.144,15.901
	c0,0,0.021,4.291,0.175,5.595c0,0,0.719,15.526,1.612,18.36c0,0,1.211,12.146,1.509,12.998c0,0,0.483,6.091,0.39,7.22
	c0,0-0.236,5.641-0.236,6.144c0,0-0.123,7.647,0.206,8.541c0,0,0.834,0.985,1.533,1.058c0,0,0.663,0.021,0.776-0.205
	c0,0,0.464,0.338,0.957,0.338c0,0,0.875-0.082,0.977-0.369c0,0,0.342,0.227,0.917,0.236c0,0,1.02,0.031,1.164-0.442
	c0,0,0.27,0.268,0.732,0.227c0,0,0.938-0.133,1.122-0.441c0,0,0.596,0.35,1.079,0.298c0,0,1.322-0.052,1.404-0.719
	c0,0,0.453-0.431,0.115-1.067c0,0,0.062-1.664-0.441-2.649c0,0-0.403-1.705-0.465-1.951c0,0,0.044-0.216,0.064-0.853
	c0,0,1.758-3.07,1.686-4.436c0,0,0.884-1.479,0.597-3.132c0,0,0.452-1.684,0.226-2.454c0,0,0.247-0.729,0.391-1.52
	c0,0,0.838-1.068,1.198-2.156c0,0,1.792-1.572,2.08-3.42c0,0,1.835-2.51,1.517-3.753c0,0,1.255,0.288,2.226,0.467
	c0,0,1.292,0.154,2.099,0.124c0.806,0.03,2.077-0.124,2.077-0.124c0.971-0.179,2.216-0.467,2.216-0.467
	c-0.319,1.243,1.555,3.753,1.555,3.753c0.287,1.848,2.102,3.42,2.102,3.42c0.359,1.088,1.202,2.156,1.202,2.156
	c0.145,0.791,0.428,1.52,0.428,1.52c-0.227,0.771,0.255,2.454,0.255,2.454c-0.288,1.653,0.646,3.132,0.646,3.132
	c-0.072,1.365,1.752,4.436,1.752,4.436c0.021,0.637,0.081,0.853,0.081,0.853c-0.061,0.246-0.401,1.951-0.401,1.951
	c-0.503,0.985-0.362,2.649-0.362,2.649c-0.338,0.637,0.146,1.067,0.146,1.067c0.082,0.667,1.45,0.719,1.45,0.719
	c0.483,0.052,1.125-0.298,1.125-0.298c0.186,0.309,1.178,0.441,1.178,0.441c0.462,0.041,0.771-0.227,0.771-0.227
	c0.144,0.474,1.216,0.442,1.216,0.442c0.575-0.01,0.953-0.236,0.953-0.236c0.102,0.287,1.039,0.369,1.039,0.369
	c0.493,0,1.03-0.338,1.03-0.338c0.112,0.226,0.844,0.205,0.844,0.205c0.698-0.072,1.588-1.058,1.588-1.058
	c0.329-0.894,0.206-8.45,0.206-8.45c0-0.503-0.236-6.053-0.236-6.053c-0.093-1.13,0.391-7.146,0.391-7.146
	c0.298-0.853,1.509-12.887,1.509-12.887c0.894-2.834,1.611-18.224,1.611-18.224c0.154-1.304,0.176-5.529,0.176-5.529
	c0.071-2.434-0.145-15.733-0.145-15.733c-0.144-2.29-1.365-23.248-1.365-23.248c-0.482-2.146-1.191-21.905-1.191-21.905
	c-0.268-2.669-0.092-16.242-0.092-16.242c0.021-2.394,0.257-11.79,0.257-11.79c0.112,0.656,0.883-1.803,0.883-1.803
	c0.554,0.667,1.427-2.296,1.427-2.296c0.329,0.288,1.119-1.824,1.119-1.824c0.021,0.556,0.298-1.728,0.298-1.728
	c0.186,0.78,0.88-2.298,0.88-2.298c0.645,1.503,1.985-4.226,1.985-4.226c0.164,0.227,0.123-0.621,0.123-0.621
	c-0.01,0.883-0.626-1.844-0.626-1.844c-0.575,0.761-0.822-1.903-0.822-1.903c-0.072,0.328,0-0.84,0-0.84
	c0.134,1.325-0.01-2.163-0.01-2.163c-0.092,0.646,0.195-0.777,0.195-0.777c0.288,0.102,0.76-1.448,0.76-1.448
	c0.605-0.175,0.719-3.945,0.719-3.945c0.031-0.421,0.072-3.571,0.072-3.571c0.02-0.597,0.646-2.4,0.646-2.4
	c0.514-0.03,0.771-1.286,0.771-1.286c0.339,0.637,0.38-1.479,0.38-1.479c0.02,1.231-0.308-1.903-0.308-1.903
	c-0.433,1.16-0.392-1.346-0.392-1.346c0.053,0.893,1.048-1.973,1.048-1.973c0.821,0,1.091-3.46,1.091-3.46
	c0.149,0.499,0.909-1.556,0.909-1.556c0.799-0.025,0.997-3.228,0.997-3.228c0.475,0.138,0.849-1.949,0.849-1.949
	c0.523-0.486,0.561-4.758,0.561-4.758c0.175,0.013,0.438-1.041,0.438-1.041c0.436-0.374,0.498-4.505,0.498-4.505
	c0.163-0.81,0-6.475,0-6.475c-0.062-0.561-0.936-7.93-0.936-7.93c-0.436-1.035-1.021-8.441-1.021-8.441
	c-0.188-0.823-0.486-6.162-0.486-6.162c-0.562-2.531-1.584-17.486-1.584-17.486c-0.611-1.871-2.094-15.023-2.094-15.023
	c-1.172-2.044-2.844-12.745-2.844-12.745c-2.979-2.955-5.262-15.917-5.262-15.917c-1.757-0.711-3.79-8.867-3.79-8.867
	c-0.76-0.312-0.785-3.319-0.785-3.319l0.013-1.959c-0.025-0.299,0.013-1.389,0.013-1.389c0.723-0.735,1.708-7.368,1.708-7.368
	c0.623-1.184,0.972-7.38,0.972-7.38c0.35,0.125,0.773-1.393,0.773-1.393c0.536-0.037,0.861-3.02,0.861-3.02
	c0.212-0.586,0.477-6.058,0.477-6.058c0.219-0.787,0.394-5.529,0.394-5.529c0.126-0.846-0.306-4.305-0.306-4.305
	c-0.353-0.663-1.006-3.042-1.006-3.042c0.48-2.055,0-11.364,0-11.364c-0.438-2.492-7.406-4.765-7.406-4.765
	C12.908-187.166,0-187.014,0-187.014s-12.919-0.152-15.733,3.521C-15.733-183.493-22.691-181.22-23.127-178.728z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-21.023-174.488c0,0-0.361,8.945,0,10.486
	c0,0-0.489,2.386-0.754,2.883c0,0-0.324,3.327-0.23,3.961c0,0,0.131,4.507,0.295,5.098c0,0,0.2,5.134,0.359,5.573
	c0,0,0.243,2.826,0.645,2.854c0,0,0.318,1.528,0.58,1.434c0,0,0.261,5.949,0.729,6.837c0,0,0.739,6.374,1.281,6.926
	c0,0,0.028,1.048,0.009,1.272l0.01,1.806c0,0-0.019,2.883-0.589,3.117c0,0-1.525,8.165-2.843,8.698c0,0-1.711,13.035-3.946,15.251
	c0,0-1.253,10.466-2.132,12c0,0-1.113,12.617-1.571,14.02c0,0-0.767,14.368-1.188,16.267c0,0-0.224,5.121-0.364,5.738
	c0,0-0.44,7.099-0.767,7.875c0,0-0.655,6.984-0.702,7.405c0,0-0.121,5.42,0,6.028c0,0,0.047,3.935,0.374,4.216
	c0,0,0.197,1.022,0.328,1.012c0,0,0.028,4.081,0.421,4.446c0,0,0.28,2.031,0.635,1.928c0,0,0.15,3.091,0.748,3.109
	c0,0,0.571,2.115,0.683,1.741c0,0,0.202,3.348,0.818,3.348c0,0,0.747,2.937,0.785,2.267c0,0,0.031,2.657-0.292,1.787
	c0,0-0.247,3.486-0.231,2.562c0,0,0.03,2.459,0.285,1.981c0,0,0.192,1.414,0.577,1.437c0,0,0.47,1.874,0.485,2.321
	c0,0,0.031,3.037,0.054,3.353c0,0,0.085,3.609,0.539,3.74c0,0,0.355,1.569,0.57,1.492c0,0,0.216,1.522,0.146,1.038
	c0,0-0.107,3.958-0.007,2.964c0,0,0.054,1.397,0,1.15c0,0-0.185,3.061-0.616,2.49c0,0-0.462,3.123-0.47,2.46
	c0,0-0.031,1.018,0.092,0.848c0,0,1.006,6.588,1.489,5.459c0,0,0.521,3.643,0.66,3.058c0,0,0.208,2.768,0.223,2.352
	c0,0,0.593,2.444,0.84,2.229c0,0,0.654,3.272,1.07,2.771c0,0,0.578,2.813,0.663,2.32c0,0,0.177,9.3,0.192,11.095
	c0,0,0.131,13.265-0.069,15.267c0,0-0.532,19.06-0.894,20.669c0,0-0.916,20.153-1.024,21.871c0,0-0.162,13.043-0.108,14.867
	c0,0,0.016,4.254,0.131,5.232c0,0,0.539,15.073,1.209,17.198c0,0,0.909,11.558,1.132,12.198c0,0,0.362,5.909,0.293,6.757
	c0,0-0.177,5.369-0.177,5.747c0,0-0.092,7.316,0.154,7.986c0,0,0.757,0.74,1.281,0.794c0,0,0.546,0.016,0.631-0.153
	c0,0,0.412,0.254,0.782,0.254c0,0,0.723-0.062,0.8-0.278c0,0,0.314,0.17,0.746,0.178c0,0,0.847,0.023,0.955-0.332
	c0,0,0.25,0.201,0.596,0.17c0,0,0.78-0.1,0.918-0.33c0,0,0.517,0.262,0.879,0.223c0,0,1.104-0.038,1.165-0.539
	c0,0,0.431-0.323,0.177-0.801c0,0,0.307-1.248-0.07-1.987c0,0-0.109-1.278-0.155-1.463c0,0,0.103-0.162,0.119-0.639
	c0,0,1.715-2.304,1.661-3.327c0,0,0.939-1.109,0.724-2.35c0,0,0.562-1.263,0.392-1.841c0,0,0.313-0.546,0.421-1.139
	c0,0,0.825-0.801,1.095-1.618c0,0,1.664-1.178,1.88-2.564c0,0,1.714-1.883,1.475-2.814c0,0,1.096,0.216,1.824,0.35
	c0,0,1.11,0.116,1.715,0.094c0.604,0.022,1.694-0.094,1.694-0.094c0.727-0.134,1.812-0.35,1.812-0.35
	c-0.238,0.932,1.515,2.814,1.515,2.814c0.215,1.387,1.902,2.564,1.902,2.564c0.27,0.817,1.1,1.618,1.1,1.618
	c0.107,0.593,0.458,1.139,0.458,1.139c-0.17,0.578,0.422,1.841,0.422,1.841c-0.215,1.24,0.775,2.35,0.775,2.35
	c-0.055,1.023,1.729,3.327,1.729,3.327c0.015,0.477,0.136,0.639,0.136,0.639c-0.046,0.185-0.09,1.463-0.09,1.463
	c-0.377,0.739,0.012,1.987,0.012,1.987c-0.255,0.478,0.208,0.801,0.208,0.801c0.062,0.501,1.214,0.539,1.214,0.539
	c0.36,0.039,0.926-0.223,0.926-0.223c0.138,0.23,0.975,0.33,0.975,0.33c0.348,0.031,0.636-0.17,0.636-0.17
	c0.108,0.355,1.01,0.332,1.01,0.332c0.431-0.008,0.782-0.178,0.782-0.178c0.077,0.216,0.865,0.278,0.865,0.278
	c0.369,0,0.857-0.254,0.857-0.254c0.084,0.169,0.7,0.153,0.7,0.153c0.523-0.054,1.338-0.794,1.338-0.794
	c0.247-0.67,0.153-7.893,0.153-7.893c0-0.378-0.177-5.654-0.177-5.654c-0.069-0.848,0.293-6.682,0.293-6.682
	c0.224-0.64,1.132-12.083,1.132-12.083c0.67-2.125,1.209-17.058,1.209-17.058c0.115-0.978,0.131-5.162,0.131-5.162
	c0.055-1.825-0.107-14.696-0.107-14.696c-0.108-1.717-1.024-21.737-1.024-21.737c-0.361-1.61-0.894-20.478-0.894-20.478
	c-0.2-2.002-0.069-15.174-0.069-15.174c0.017-1.795,0.193-11.014,0.193-11.014c0.084,0.493,0.662-2.299,0.662-2.299
	c0.416,0.501,1.069-2.737,1.069-2.737c0.247,0.217,0.841-2.202,0.841-2.202c0.015,0.416,0.223-2.335,0.223-2.335
	c0.139,0.587,0.66-3.019,0.66-3.019c0.482,1.127,1.489-5.426,1.489-5.426c0.122,0.169,0.092-0.839,0.092-0.839
	c-0.007,0.662-0.47-2.435-0.47-2.435c-0.432,0.57-0.616-2.472-0.616-2.472c-0.055,0.246,0-1.145,0-1.145
	c0.101,0.993-0.008-2.936-0.008-2.936c-0.069,0.486,0.146-1.025,0.146-1.025c0.216,0.077,0.57-1.485,0.57-1.485
	c0.454-0.131,0.539-3.733,0.539-3.733c0.022-0.315,0.054-3.334,0.054-3.334c0.015-0.447,0.485-2.309,0.485-2.309
	c0.385-0.023,0.577-1.444,0.577-1.444c0.255,0.477,0.285-1.975,0.285-1.975c0.016,0.924-0.23-2.562-0.23-2.562
	c-0.324,0.87-0.293-1.795-0.293-1.795c0.038,0.67,0.784-2.263,0.784-2.263c0.617,0,0.818-3.348,0.818-3.348
	c0.112,0.374,0.684-1.749,0.684-1.749c0.598-0.019,0.748-3.12,0.748-3.12c0.354,0.103,0.636-1.945,0.636-1.945
	c0.392-0.365,0.42-4.468,0.42-4.468c0.131,0.009,0.328-1.026,0.328-1.026c0.327-0.28,0.374-4.228,0.374-4.228
	c0.121-0.607,0-6.051,0-6.051c-0.047-0.421-0.702-7.439-0.702-7.439c-0.327-0.776-0.767-7.922-0.767-7.922
	c-0.141-0.617-0.364-5.765-0.364-5.765c-0.421-1.899-1.188-16.383-1.188-16.383c-0.458-1.403-1.57-14.12-1.57-14.12
	c-0.88-1.534-2.133-12.09-2.133-12.09c-2.233-2.216-3.945-15.397-3.945-15.397c-1.318-0.533-2.843-8.79-2.843-8.79
	c-0.57-0.234-0.59-3.165-0.59-3.165l0.011-1.829c-0.02-0.224,0.009-1.297,0.009-1.297c0.543-0.551,1.28-6.997,1.28-6.997
	c0.469-0.888,0.73-6.935,0.73-6.935c0.261,0.094,0.579-1.455,0.579-1.455c0.403-0.028,0.646-2.903,0.646-2.903
	c0.159-0.44,0.358-5.676,0.358-5.676c0.164-0.59,0.295-5.175,0.295-5.175c0.095-0.635-0.229-4.038-0.229-4.038
	c-0.265-0.497-0.755-2.955-0.755-2.955c0.361-1.541,0-10.632,0-10.632c-0.327-1.869-6.961-3.574-6.961-3.574
	C11.952-180.816,0-180.702,0-180.702s-11.963-0.114-14.073,2.64C-14.073-178.062-20.696-176.357-21.023-174.488z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-18.919-170.248c0,0-0.24,8.723,0,9.75
	c0,0-0.326,2.463-0.503,2.794c0,0-0.216,3.267-0.153,3.69c0,0,0.088,4.349,0.197,4.743c0,0,0.133,4.894,0.239,5.187
	c0,0,0.162,2.716,0.43,2.735c0,0,0.212,1.559,0.386,1.496c0,0,0.175,5.797,0.487,6.39c0,0,0.492,6.184,0.854,6.552
	c0,0,0.018,1.03,0.006,1.179l0.006,1.675c0,0-0.012,2.806-0.393,2.962c0,0-1.016,8.263-1.895,8.619c0,0-1.14,13.248-2.63,14.725
	c0,0-0.836,10.319-1.422,11.342c0,0-0.742,12.179-1.047,13.114c0,0-0.511,13.894-0.792,15.16c0,0-0.149,4.93-0.243,5.341
	c0,0-0.293,6.837-0.511,7.354c0,0-0.437,6.633-0.468,6.914c0,0-0.081,5.197,0,5.603c0,0,0.031,3.751,0.25,3.938
	c0,0,0.131,1.003,0.218,0.997c0,0,0.019,3.911,0.28,4.154c0,0,0.187,1.993,0.424,1.924c0,0,0.1,2.989,0.499,3.002
	c0,0,0.38,2.182,0.455,1.933c0,0,0.134,3.236,0.545,3.236c0,0,0.498,3.003,0.524,2.557c0,0,0.02,2.816-0.195,2.236
	c0,0-0.165,3.836-0.154,3.22c0,0,0.02,2.797,0.19,2.479c0,0,0.128,1.578,0.385,1.594c0,0,0.313,1.933,0.323,2.231
	c0,0,0.021,2.904,0.036,3.115c0,0,0.057,3.44,0.36,3.527c0,0,0.236,1.582,0.38,1.531c0,0,0.143,1.609,0.097,1.285
	c0,0-0.072,4.398-0.005,3.737c0,0,0.036,1.62,0,1.457c0,0-0.123,3.438-0.411,3.059c0,0-0.308,3.492-0.313,3.051
	c0,0-0.021,1.178,0.062,1.065c0,0,0.67,7.413,0.992,6.662c0,0,0.348,4.169,0.44,3.778c0,0,0.139,3.237,0.149,2.96
	c0,0,0.395,2.75,0.56,2.606c0,0,0.436,3.55,0.713,3.216c0,0,0.385,3.146,0.442,2.816c0,0,0.118,9.125,0.128,10.321
	c0,0,0.087,12.864-0.046,14.199c0,0-0.354,18.175-0.596,19.248c0,0-0.611,19.22-0.683,20.364c0,0-0.107,12.62-0.071,13.837
	c0,0,0.01,4.215,0.087,4.867c0,0,0.359,14.62,0.806,16.037c0,0,0.606,10.971,0.755,11.396c0,0,0.241,5.73,0.195,6.294
	c0,0-0.118,5.101-0.118,5.352c0,0-0.062,6.987,0.102,7.434c0,0,0.68,0.493,1.029,0.529c0,0,0.429,0.01,0.485-0.103
	c0,0,0.361,0.169,0.607,0.169c0,0,0.572-0.041,0.623-0.185c0,0,0.288,0.113,0.576,0.118c0,0,0.674,0.016,0.746-0.222
	c0,0,0.229,0.135,0.46,0.113c0,0,0.622-0.065,0.714-0.22c0,0,0.438,0.174,0.679,0.148c0,0,0.886-0.025,0.927-0.359
	c0,0,0.407-0.215,0.238-0.534c0,0,0.553-0.832,0.301-1.324c0,0,0.186-0.853,0.155-0.976c0,0,0.162-0.108,0.173-0.426
	c0,0,1.673-1.535,1.637-2.219c0,0,0.994-0.738,0.85-1.565c0,0,0.673-0.842,0.56-1.228c0,0,0.378-0.364,0.45-0.76
	c0,0,0.812-0.534,0.992-1.078c0,0,1.537-0.786,1.68-1.71c0,0,1.592-1.255,1.433-1.876c0,0,0.937,0.145,1.422,0.233
	c0,0,0.929,0.077,1.332,0.062c0.402,0.016,1.31-0.062,1.31-0.062c0.485-0.089,1.411-0.233,1.411-0.233
	c-0.16,0.621,1.473,1.876,1.473,1.876c0.144,0.924,1.704,1.71,1.704,1.71c0.18,0.544,0.996,1.078,0.996,1.078
	c0.072,0.396,0.488,0.76,0.488,0.76c-0.112,0.386,0.591,1.228,0.591,1.228c-0.144,0.827,0.902,1.565,0.902,1.565
	c-0.036,0.684,1.708,2.219,1.708,2.219c0.011,0.317,0.191,0.426,0.191,0.426c-0.03,0.123,0.223,0.976,0.223,0.976
	c-0.252,0.492,0.385,1.324,0.385,1.324c-0.17,0.319,0.271,0.534,0.271,0.534c0.041,0.334,0.976,0.359,0.976,0.359
	c0.241,0.025,0.728-0.148,0.728-0.148c0.093,0.154,0.772,0.22,0.772,0.22c0.23,0.021,0.502-0.113,0.502-0.113
	c0.072,0.237,0.801,0.222,0.801,0.222c0.288-0.005,0.615-0.118,0.615-0.118c0.051,0.144,0.688,0.185,0.688,0.185
	c0.247,0,0.685-0.169,0.685-0.169c0.057,0.112,0.557,0.103,0.557,0.103c0.35-0.036,1.088-0.529,1.088-0.529
	c0.164-0.446,0.104-7.337,0.104-7.337c0-0.252-0.118-5.255-0.118-5.255c-0.047-0.565,0.195-6.217,0.195-6.217
	c0.148-0.427,0.755-11.278,0.755-11.278c0.446-1.417,0.806-15.891,0.806-15.891c0.077-0.652,0.087-4.798,0.087-4.798
	c0.036-1.217-0.071-13.658-0.071-13.658c-0.072-1.145-0.684-20.227-0.684-20.227c-0.241-1.073-0.595-19.052-0.595-19.052
	c-0.134-1.334-0.047-14.104-0.047-14.104c0.011-1.196,0.129-10.236,0.129-10.236c0.056,0.328,0.44-2.795,0.44-2.795
	c0.278,0.334,0.715-3.18,0.715-3.18c0.164,0.145,0.56-2.578,0.56-2.578c0.01,0.276,0.148-2.942,0.148-2.942
	c0.093,0.39,0.439-3.741,0.439-3.741c0.322,0.752,0.993-6.628,0.993-6.628c0.082,0.113,0.061-1.056,0.061-1.056
	c-0.005,0.44-0.312-3.023-0.312-3.023c-0.287,0.38-0.41-3.041-0.41-3.041c-0.036,0.164,0-1.45,0-1.45
	c0.066,0.663-0.006-3.706-0.006-3.706c-0.046,0.323,0.098-1.273,0.098-1.273c0.145,0.051,0.38-1.524,0.38-1.524
	c0.304-0.087,0.359-3.521,0.359-3.521c0.016-0.211,0.036-3.097,0.036-3.097c0.01-0.297,0.324-2.218,0.324-2.218
	c0.256-0.015,0.385-1.602,0.385-1.602c0.169,0.319,0.189-2.472,0.189-2.472c0.011,0.616-0.153-3.22-0.153-3.22
	c-0.216,0.581-0.195-2.244-0.195-2.244c0.025,0.446,0.523-2.553,0.523-2.553c0.41,0,0.545-3.237,0.545-3.237
	c0.075,0.249,0.455-1.941,0.455-1.941c0.398-0.012,0.499-3.013,0.499-3.013c0.236,0.069,0.424-1.941,0.424-1.941
	c0.262-0.243,0.281-4.178,0.281-4.178c0.087,0.006,0.218-1.01,0.218-1.01c0.218-0.187,0.249-3.951,0.249-3.951
	c0.081-0.405,0-5.626,0-5.626c-0.031-0.281-0.467-6.949-0.467-6.949c-0.22-0.518-0.513-7.403-0.513-7.403
	c-0.093-0.411-0.243-5.369-0.243-5.369c-0.279-1.266-0.791-15.279-0.791-15.279c-0.306-0.935-1.048-13.218-1.048-13.218
	c-0.586-1.023-1.421-11.435-1.421-11.435c-1.49-1.477-2.631-14.875-2.631-14.875c-0.879-0.355-1.895-8.714-1.895-8.714
	c-0.381-0.156-0.394-3.012-0.394-3.012l0.007-1.698c-0.013-0.15,0.006-1.204,0.006-1.204c0.361-0.368,0.854-6.626,0.854-6.626
	c0.311-0.592,0.486-6.491,0.486-6.491c0.175,0.062,0.387-1.518,0.387-1.518c0.268-0.018,0.43-2.785,0.43-2.785
	c0.106-0.293,0.238-5.293,0.238-5.293c0.11-0.393,0.197-4.823,0.197-4.823c0.062-0.423-0.153-3.77-0.153-3.77
	c-0.176-0.331-0.503-2.868-0.503-2.868c0.241-1.027,0-9.9,0-9.9c-0.218-1.246-6.518-2.383-6.518-2.383
	C10.996-174.467,0-174.391,0-174.391s-11.007-0.076-12.414,1.76C-12.414-172.631-18.701-171.494-18.919-170.248z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-16.816-166.008c0,0-0.12,8.5,0,9.014
	c0,0-0.163,2.539-0.251,2.705c0,0-0.108,3.207-0.077,3.419c0,0,0.044,4.191,0.098,4.388c0,0,0.067,4.655,0.12,4.801
	c0,0,0.081,2.607,0.215,2.616c0,0,0.106,1.59,0.193,1.558c0,0,0.087,5.646,0.243,5.942c0,0,0.247,5.995,0.427,6.179
	c0,0,0.01,1.011,0.003,1.086l0.004,1.543c0,0-0.007,2.729-0.197,2.807c0,0-0.508,8.362-0.947,8.54c0,0-0.571,13.461-1.316,14.2
	c0,0-0.417,10.172-0.71,10.683c0,0-0.371,11.742-0.524,12.21c0,0-0.256,13.419-0.396,14.052c0,0-0.075,4.739-0.122,4.944
	c0,0-0.146,6.574-0.255,6.833c0,0-0.218,6.282-0.234,6.423c0,0-0.04,4.975,0,5.177c0,0,0.016,3.567,0.125,3.661
	c0,0,0.065,0.984,0.109,0.981c0,0,0.009,3.742,0.14,3.864c0,0,0.094,1.953,0.212,1.919c0,0,0.05,2.888,0.249,2.894
	c0,0,0.191,2.25,0.228,2.125c0,0,0.067,3.125,0.273,3.125c0,0,0.249,3.07,0.261,2.847c0,0,0.011,2.975-0.097,2.685
	c0,0-0.082,4.186-0.077,3.878c0,0,0.01,3.136,0.095,2.977c0,0,0.064,1.743,0.192,1.751c0,0,0.157,1.991,0.162,2.14
	c0,0,0.01,2.772,0.018,2.877c0,0,0.028,3.273,0.18,3.317c0,0,0.118,1.594,0.19,1.568c0,0,0.072,1.696,0.049,1.534
	c0,0-0.036,4.84-0.003,4.509c0,0,0.018,1.846,0,1.763c0,0-0.062,3.817-0.205,3.629c0,0-0.154,3.862-0.157,3.641
	c0,0-0.01,1.339,0.031,1.282c0,0,0.335,8.241,0.496,7.865c0,0,0.174,4.696,0.22,4.502c0,0,0.069,3.705,0.074,3.566
	c0,0,0.198,3.058,0.28,2.985c0,0,0.218,3.826,0.357,3.659c0,0,0.193,3.477,0.221,3.312c0,0,0.059,8.949,0.064,9.547
	c0,0,0.044,12.466-0.023,13.133c0,0-0.177,17.292-0.298,17.828c0,0-0.305,18.284-0.341,18.857c0,0-0.054,12.196-0.036,12.805
	c0,0,0.005,4.177,0.043,4.502c0,0,0.18,14.168,0.403,14.877c0,0,0.303,10.383,0.378,10.596c0,0,0.12,5.549,0.097,5.832
	c0,0-0.059,4.829-0.059,4.955c0,0-0.031,6.656,0.052,6.88c0,0,0.602,0.247,0.777,0.265c0,0,0.31,0.005,0.338-0.052
	c0,0,0.309,0.085,0.433,0.085c0,0,0.42-0.021,0.445-0.092c0,0,0.262,0.056,0.405,0.059c0,0,0.502,0.007,0.538-0.111
	c0,0,0.209,0.067,0.325,0.058c0,0,0.463-0.034,0.509-0.111c0,0,0.358,0.088,0.479,0.075c0,0,0.667-0.013,0.688-0.18
	c0,0,0.384-0.108,0.299-0.268c0,0,0.799-0.416,0.673-0.662c0,0,0.48-0.426,0.464-0.487c0,0,0.222-0.055,0.228-0.213
	c0,0,1.632-0.768,1.614-1.109c0,0,1.048-0.369,0.976-0.783c0,0,0.783-0.421,0.726-0.613c0,0,0.445-0.183,0.481-0.38
	c0,0,0.798-0.267,0.888-0.539c0,0,1.409-0.393,1.481-0.854c0,0,1.47-0.628,1.39-0.938c0,0,0.777,0.071,1.02,0.116
	c0,0,0.748,0.039,0.949,0.031c0.201,0.008,0.927-0.031,0.927-0.031c0.242-0.045,1.008-0.116,1.008-0.116
	c-0.079,0.311,1.432,0.938,1.432,0.938c0.072,0.462,1.506,0.854,1.506,0.854c0.089,0.272,0.893,0.539,0.893,0.539
	c0.036,0.197,0.52,0.38,0.52,0.38c-0.056,0.192,0.758,0.613,0.758,0.613c-0.071,0.414,1.031,0.783,1.031,0.783
	c-0.018,0.342,1.687,1.109,1.687,1.109c0.005,0.158,0.246,0.213,0.246,0.213c-0.016,0.062,0.533,0.487,0.533,0.487
	c-0.126,0.246,0.76,0.662,0.76,0.662c-0.086,0.159,0.332,0.268,0.332,0.268c0.021,0.167,0.738,0.18,0.738,0.18
	c0.121,0.013,0.53-0.075,0.53-0.075c0.046,0.077,0.57,0.111,0.57,0.111c0.114,0.01,0.366-0.058,0.366-0.058
	c0.036,0.118,0.595,0.111,0.595,0.111c0.144-0.003,0.444-0.059,0.444-0.059c0.026,0.071,0.516,0.092,0.516,0.092
	c0.123,0,0.511-0.085,0.511-0.085c0.028,0.057,0.413,0.052,0.413,0.052c0.175-0.018,0.838-0.265,0.838-0.265
	C16.721,167.558,16.69,161,16.69,161c0-0.126-0.059-4.855-0.059-4.855c-0.023-0.282,0.098-5.751,0.098-5.751
	c0.074-0.215,0.377-10.475,0.377-10.475c0.224-0.709,0.403-14.726,0.403-14.726c0.039-0.326,0.044-4.431,0.044-4.431
	c0.018-0.607-0.036-12.621-0.036-12.621c-0.036-0.572-0.342-18.716-0.342-18.716c-0.12-0.537-0.297-17.625-0.297-17.625
	c-0.067-0.667-0.023-13.034-0.023-13.034c0.005-0.598,0.064-9.461,0.064-9.461c0.027,0.165,0.221-3.29,0.221-3.29
	c0.138,0.167,0.356-3.62,0.356-3.62c0.082,0.07,0.279-2.957,0.279-2.957c0.005,0.138,0.075-3.549,0.075-3.549
	c0.046,0.195,0.22-4.463,0.22-4.463c0.16,0.376,0.496-7.829,0.496-7.829c0.041,0.057,0.031-1.273,0.031-1.273
	c-0.003,0.221-0.157-3.613-0.157-3.613c-0.144,0.19-0.205-3.61-0.205-3.61c-0.018,0.082,0-1.754,0-1.754
	c0.033,0.331-0.003-4.478-0.003-4.478c-0.022,0.162,0.049-1.522,0.049-1.522c0.072,0.025,0.19-1.562,0.19-1.562
	c0.151-0.044,0.18-3.31,0.18-3.31c0.007-0.104,0.018-2.856,0.018-2.856c0.006-0.149,0.162-2.128,0.162-2.128
	c0.129-0.008,0.192-1.759,0.192-1.759c0.084,0.159,0.096-2.969,0.096-2.969c0.005,0.308-0.077-3.879-0.077-3.879
	c-0.108,0.29-0.099-2.694-0.099-2.694c0.014,0.224,0.263-2.842,0.263-2.842c0.205,0,0.272-3.126,0.272-3.126
	c0.037,0.125,0.228-2.132,0.228-2.132c0.199-0.007,0.249-2.907,0.249-2.907c0.118,0.035,0.212-1.937,0.212-1.937
	c0.131-0.121,0.141-3.888,0.141-3.888c0.043,0.003,0.109-0.994,0.109-0.994c0.108-0.093,0.124-3.674,0.124-3.674
	c0.041-0.202,0-5.202,0-5.202c-0.016-0.14-0.233-6.458-0.233-6.458c-0.109-0.259-0.256-6.884-0.256-6.884
	c-0.047-0.205-0.121-4.973-0.121-4.973c-0.141-0.633-0.396-14.175-0.396-14.175c-0.153-0.467-0.524-12.316-0.524-12.316
	C18.718-85.829,18.3-96.097,18.3-96.097c-0.745-0.739-1.315-14.354-1.315-14.354c-0.439-0.178-0.947-8.638-0.947-8.638
	c-0.19-0.078-0.196-2.859-0.196-2.859l0.003-1.567c-0.006-0.075,0.003-1.112,0.003-1.112c0.181-0.184,0.427-6.255,0.427-6.255
	c0.156-0.296,0.243-6.046,0.243-6.046c0.088,0.031,0.194-1.58,0.194-1.58c0.134-0.01,0.215-2.669,0.215-2.669
	c0.053-0.146,0.119-4.909,0.119-4.909c0.055-0.197,0.098-4.471,0.098-4.471c0.032-0.212-0.076-3.501-0.076-3.501
	c-0.088-0.166-0.251-2.782-0.251-2.782c0.12-0.513,0-9.168,0-9.168c-0.109-0.623-6.073-1.191-6.073-1.191
	c-0.703-0.918-10.741-0.88-10.741-0.88s-10.052-0.038-10.756,0.88C-10.755-167.199-16.707-166.631-16.816-166.008z"/>
<rect x="-14.712" y="-161.768" fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" width="29.424" height="323.535"/>
</svg>
`
},{}],138:[function(require,module,exports){
module.exports = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="1207.561px" height="858.898px" viewBox="0 0 1207.561 858.898" enable-background="new 0 0 1207.561 858.898"
	 xml:space="preserve">
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M0,137.573c7.053,0.271,13.971-1.078,13.971-1.078
	c8.491-1.572,14.69-4.088,14.69-4.088c-2.785,10.871,2.83,32.839,2.83,32.839c2.516,16.174,8.266,29.92,8.266,29.92
	c3.145,9.523,4.403,18.867,4.403,18.867c1.258,6.919-0.539,13.298-0.539,13.298c-1.978,6.738-4.942,21.474-4.942,21.474
	c-2.515,14.466-3.324,27.404-3.324,27.404c-0.629,11.949,2.426,38.813,2.426,38.813c0.181,5.571-1.616,7.457-1.616,7.457
	c-0.539,2.157-10.063,17.071-10.063,17.071c-4.402,8.626-11.95,23.181-11.95,23.181c-2.965,5.571-1.797,9.344-1.797,9.344
	c0.72,5.84,8.806,6.29,8.806,6.29c4.223,0.449,7.277-2.605,7.277-2.605c1.617,2.694,7.457,3.862,7.457,3.862
	c4.043,0.36,4.942-1.976,4.942-1.976c1.258,4.133,7.637,3.863,7.637,3.863c5.031-0.09,6.199-2.066,6.199-2.066
	c0.898,2.516,6.469,3.234,6.469,3.234c4.313,0,6.379-2.965,6.379-2.965c0.989,1.977,5.301,1.797,5.301,1.797
	c6.11-0.629,9.346-9.254,9.346-9.254c2.875-7.817,1.796-25.696,1.796-25.696c0-4.403-2.066-18.419-2.066-18.419
	c-0.809-9.883,3.414-21.564,3.414-21.564c2.606-7.457,13.208-37.825,13.208-37.825c7.817-24.798,14.106-54.357,14.106-54.357
	c1.348-11.411,1.526-16.892,1.526-16.892c0.629-21.295-1.258-47.889-1.258-47.889c-1.257-20.036-11.949-70.082-11.949-70.082
	c-4.223-18.777-10.423-66.127-10.423-66.127c-2.336-23.361-0.808-49.417-0.808-49.417c0.179-20.934,2.246-35.849,2.246-35.849
	c0.987,5.75,7.727,13.567,7.727,13.567c4.853,5.84,12.489,11.411,12.489,11.411c2.875,2.516,9.793,9.883,9.793,9.883
	c0.18,4.852,2.605,17.071,2.605,17.071c1.617,6.829,7.698,20.076,7.698,20.076c5.633,13.157,17.369,33.024,17.369,33.024
	c1.438,1.977,1.078,6.109,1.078,6.109c-0.09,7.728-5.48,16.442-5.48,16.442c-5.031,6.648-7.188,15.723-7.188,15.723
	c-0.629,2.875,0,8.626,0,8.626c1.168,11.59-0.09,21.743-0.09,21.743c-0.81,5.66,1.707,6.918,1.707,6.918
	c2.516,0.898,6.648-0.27,6.648-0.27c5.302-1.527,6.289-10.513,6.289-10.513c0.271-3.684,0.629-10.961,0.629-10.961
	c0.181-5.211,5.66-5.211,5.66-5.211c4.493-0.27,6.739,3.594,6.739,3.594c2.965,5.57,3.324,13.927,3.324,13.927
	c0.18,10.781-2.695,18.509-2.695,18.509c-3.774,10.152-3.414,12.578-3.414,12.578c0.449,7.816,9.164,7.008,9.164,7.008
	c7.188,0,9.539-6.904,9.539-6.904c1.309,4.364,7.964,4.396,7.964,4.396c6.982-0.218,8.729-6.546,8.729-6.546
	c4.145,1.199,7.418-2.072,7.418-2.072c4.582-4.255,4.908-13.746,4.908-13.746c1.528,0.109,3.819-1.528,3.819-1.528
	c3.818-3.272,4.363-13.091,4.363-13.091c1.419-7.091,0-19.637,0-19.637c-0.545-4.909-8.183-23.128-8.183-23.128
	c-3.817-9.056-8.945-24.546-8.945-24.546c-1.637-7.201-4.254-18.438-4.254-18.438c-4.91-22.147-13.855-51.711-13.855-51.711
	c-5.346-16.365-18.328-42.984-18.328-42.984c-10.255-17.891-24.874-33.055-24.874-33.055
	c-26.072-25.856-46.038-32.074-46.038-32.074c-15.382-6.218-33.164-11.237-33.164-11.237c-6.654-2.727-6.873-8.073-6.873-8.073
	l0.109-6c-0.218-2.618,0.109-4.255,0.109-4.255c6.327-6.436,14.945-18.873,14.945-18.873c5.454-10.364,8.51-21.164,8.51-21.164
	c3.055,1.09,6.764,0.545,6.764,0.545c4.69-0.327,7.528-6.655,7.528-6.655c1.854-5.127,4.178-17.931,4.178-17.931
	c1.913-6.886,3.443-16.449,3.443-16.449c1.105-7.403-2.679-12.624-2.679-12.624c-3.089-5.798-8.798-5.738-8.798-5.738
	c4.208-17.979,0-34.046,0-34.046c-3.826-21.804-21.179-41.696-21.179-41.696C42.549-383.999,0-382.669,0-382.669
	s-42.549-1.33-67.17,30.803c0,0-17.353,19.892-21.179,41.696c0,0-4.208,16.067,0,34.046c0,0-5.709-0.06-8.798,5.738
	c0,0-3.784,5.221-2.678,12.624c0,0,1.53,9.563,3.443,16.449c0,0,2.324,12.804,4.178,17.931c0,0,2.837,6.328,7.528,6.655
	c0,0,3.709,0.545,6.764-0.545c0,0,3.054,10.8,8.509,21.164c0,0,8.619,12.437,14.946,18.873c0,0,0.327,1.637,0.109,4.255l0.109,6
	c0,0-0.218,5.346-6.873,8.073c0,0-17.782,5.019-33.164,11.237c0,0-19.965,6.218-46.038,32.074c0,0-14.619,15.164-24.874,33.055
	c0,0-12.982,26.619-18.328,42.984c0,0-8.946,29.564-13.855,51.711c0,0-2.618,11.236-4.254,18.438c0,0-5.128,15.49-8.946,24.546
	c0,0-7.637,18.219-8.182,23.128c0,0-1.419,12.546,0,19.637c0,0,0.545,9.818,4.363,13.091c0,0,2.291,1.638,3.819,1.528
	c0,0,0.327,9.491,4.909,13.746c0,0,3.273,3.271,7.418,2.072c0,0,1.746,6.328,8.728,6.546c0,0,6.655-0.032,7.964-4.396
	c0,0,2.351,6.904,9.539,6.904c0,0,8.715,0.809,9.164-7.008c0,0,0.36-2.426-3.414-12.578c0,0-2.875-7.728-2.695-18.509
	c0,0,0.359-8.356,3.324-13.927c0,0,2.246-3.863,6.739-3.594c0,0,5.48,0,5.66,5.211c0,0,0.359,7.277,0.629,10.961
	c0,0,0.988,8.985,6.289,10.513c0,0,4.133,1.168,6.649,0.27c0,0,2.516-1.258,1.707-6.918c0,0-1.258-10.153-0.09-21.743
	c0,0,0.629-5.751,0-8.626c0,0-2.156-9.074-7.188-15.723c0,0-5.39-8.715-5.48-16.442c0,0-0.36-4.133,1.078-6.109
	c0,0,11.736-19.867,17.369-33.024c0,0,6.081-13.247,7.698-20.076c0,0,2.426-12.219,2.606-17.071c0,0,6.918-7.367,9.793-9.883
	c0,0,7.637-5.571,12.489-11.411c0,0,6.739-7.817,7.727-13.567c0,0,2.067,14.915,2.246,35.849c0,0,1.528,26.056-0.808,49.417
	c0,0-6.2,47.35-10.423,66.127c0,0-10.692,50.046-11.949,70.082c0,0-1.887,26.594-1.258,47.889c0,0,0.179,5.48,1.527,16.892
	c0,0,6.289,29.56,14.106,54.357c0,0,10.602,30.368,13.208,37.825c0,0,4.223,11.682,3.414,21.564c0,0-2.067,14.016-2.067,18.419
	c0,0-1.078,17.879,1.797,25.696c0,0,3.235,8.625,9.345,9.254c0,0,4.312,0.18,5.301-1.797c0,0,2.066,2.965,6.379,2.965
	c0,0,5.57-0.719,6.469-3.234c0,0,1.168,1.977,6.199,2.066c0,0,6.379,0.27,7.637-3.863c0,0,0.899,2.336,4.942,1.976
	c0,0,5.84-1.168,7.457-3.862c0,0,3.055,3.055,7.278,2.605c0,0,8.086-0.45,8.805-6.29c0,0,1.168-3.772-1.797-9.344
	c0,0-7.547-14.555-11.95-23.181c0,0-9.524-14.914-10.063-17.071c0,0-1.797-1.886-1.617-7.457c0,0,3.055-26.864,2.426-38.813
	c0,0-0.809-12.938-3.324-27.404c0,0-2.965-14.735-4.942-21.474c0,0-1.797-6.379-0.539-13.298c0,0,1.258-9.344,4.402-18.867
	c0,0,5.751-13.746,8.266-29.92c0,0,5.616-21.968,2.831-32.839c0,0,6.199,2.516,14.69,4.088C-13.971,136.495-7.053,137.843,0,137.573
	z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-86.461-305.233c0,0-4.1,15.808,0,33.326
	c0,0-5.563-0.009-8.573,5.64c0,0-3.687,5.145-2.609,12.358c0,0,1.491,9.393,3.355,16.102c0,0,2.264,12.558,4.071,17.554
	c0,0,2.764,6.212,7.334,6.531c0,0,3.615,0.561,6.591-0.502c0,0,2.976,10.626,8.291,20.724c0,0,8.398,12.226,14.563,18.497
	c0,0,0.319,1.613,0.106,4.164l0.106,5.872c0,0-0.212,5.259-6.696,7.916c0,0-17.327,5.047-32.315,11.106
	c0,0-19.452,6.314-44.857,31.506c0,0-14.244,14.962-24.236,32.395c0,0-12.649,26.147-17.858,42.092c0,0-8.716,29.048-13.5,50.627
	c0,0-2.551,11.032-4.145,18.049c0,0-4.996,15.211-8.717,24.034c0,0-7.44,17.861-7.972,22.645c0,0-1.382,12.313,0,19.222
	c0,0,0.532,9.629,4.252,12.818c0,0,2.232,1.612,3.72,1.506c0,0,0.319,9.315,4.784,13.46c0,0,3.189,3.226,7.228,2.056
	c0,0,1.701,6.218,8.504,6.43c0,0,6.484,0.012,7.759-4.24c0,0,2.291,6.783,9.295,6.783c0,0,8.492,0.846,8.929-6.771
	c0,0,0.35-2.305-3.326-12.197c0,0-2.802-7.444-2.627-17.95c0,0,0.35-8.077,3.239-13.504c0,0,2.189-3.73,6.566-3.467
	c0,0,5.34,0.037,5.515,5.115c0,0,0.351,7.141,0.613,10.729c0,0,0.963,8.812,6.128,10.3c0,0,4.027,1.168,6.479,0.292
	c0,0,2.451-1.192,1.663-6.707c0,0-1.226-9.795-0.088-21.088c0,0,0.613-5.564,0-8.366c0,0-2.101-8.763-7.003-15.241
	c0,0-5.253-8.413-5.34-15.941c0,0-0.351-3.999,1.05-5.925c0,0,11.436-19.188,16.923-32.009c0,0,5.926-12.81,7.502-19.462
	c0,0,2.364-11.828,2.539-16.555c0,0,6.741-7.116,9.542-9.567c0,0,7.441-5.351,12.169-11.041c0,0,6.565-7.545,7.528-13.148
	c0,0,2.014,14.696,2.189,35.093c0,0,1.488,25.614-0.788,48.375c0,0-6.041,46.443-10.155,64.74c0,0-10.418,49.086-11.643,68.608
	c0,0-1.839,26.134-1.226,46.882c0,0,0.175,5.417,1.488,16.534c0,0,6.128,29.06,13.745,53.222c0,0,10.33,29.772,12.869,37.04
	c0,0,4.114,11.48,3.326,21.11c0,0-2.013,13.742-2.013,18.032c0,0-1.051,17.539,1.751,25.156c0,0,3.165,8.404,9.118,9.017
	c0,0,4.207,0.175,5.17-1.751c0,0,2.02,2.89,6.222,2.89c0,0,5.434-0.701,6.31-3.152c0,0,1.144,1.926,6.046,2.014
	c0,0,6.224,0.263,7.45-3.765c0,0,0.88,2.277,4.82,1.926c0,0,5.698-1.138,7.274-3.764c0,0,2.983,2.976,7.098,2.539
	c0,0,7.89-0.438,8.591-6.128c0,0,1.147-3.678-1.742-9.105c0,0-7.327-14.182-11.616-22.586c0,0-9.26-14.532-9.786-16.634
	c0,0-1.743-1.838-1.568-7.267c0,0,3.017-26.175,2.404-37.818c0,0-0.759-12.606-3.211-26.7c0,0-2.866-14.358-4.792-20.923
	c0,0-1.737-6.216-0.512-12.957c0,0,1.246-9.104,4.31-18.384c0,0,5.636-13.395,8.087-29.152c0,0,5.506-21.405,2.792-31.997
	c0,0,6.056,2.451,14.329,3.983c0,0,6.756,1.312,13.628,1.05c6.872,0.263,13.627-1.05,13.627-1.05
	c8.273-1.532,14.329-3.983,14.329-3.983c-2.714,10.592,2.793,31.997,2.793,31.997c2.451,15.758,8.087,29.152,8.087,29.152
	c3.064,9.279,4.31,18.384,4.31,18.384c1.227,6.741-0.511,12.957-0.511,12.957c-1.926,6.564-4.791,20.923-4.791,20.923
	c-2.451,14.094-3.21,26.7-3.21,26.7c-0.611,11.644,2.407,37.818,2.407,37.818c0.175,5.429-1.568,7.267-1.568,7.267
	c-0.525,2.102-9.782,16.634-9.782,16.634c-4.29,8.404-11.615,22.586-11.615,22.586c-2.89,5.428-1.741,9.105-1.741,9.105
	c0.701,5.689,8.593,6.128,8.593,6.128c4.114,0.437,7.1-2.539,7.1-2.539c1.575,2.626,7.275,3.764,7.275,3.764
	c3.939,0.352,4.821-1.926,4.821-1.926c1.225,4.027,7.451,3.765,7.451,3.765c4.901-0.088,6.047-2.014,6.047-2.014
	c0.876,2.451,6.312,3.152,6.312,3.152c4.202,0,6.225-2.89,6.225-2.89c0.963,1.926,5.172,1.751,5.172,1.751
	c5.953-0.612,9.12-9.017,9.12-9.017c2.801-7.617,1.751-25.154,1.751-25.154c0-4.29-2.015-18.029-2.015-18.029
	c-0.786-9.63,3.327-21.108,3.327-21.108c2.539-7.267,12.869-37.035,12.869-37.035c7.616-24.163,13.744-53.217,13.744-53.217
	c1.314-11.118,1.489-16.534,1.489-16.534c0.611-20.748-1.227-46.877-1.227-46.877c-1.226-19.522-11.643-68.605-11.643-68.605
	C94.617,60.87,88.577,14.433,88.577,14.433C86.3-8.329,87.789-33.939,87.789-33.939c0.175-20.398,2.188-35.091,2.188-35.091
	c0.963,5.602,7.528,13.149,7.528,13.149c4.728,5.69,12.169,11.042,12.169,11.042c2.802,2.451,9.543,9.568,9.543,9.568
	c0.175,4.727,2.538,16.556,2.538,16.556c1.575,6.654,7.501,19.464,7.501,19.464c5.488,12.82,16.924,32.011,16.924,32.011
	c1.4,1.926,1.051,5.925,1.051,5.925c-0.088,7.529-5.34,15.941-5.34,15.941c-4.903,6.479-7.004,15.243-7.004,15.243
	c-0.613,2.801,0,8.366,0,8.366c1.138,11.293-0.088,21.087-0.088,21.087c-0.787,5.517,1.663,6.708,1.663,6.708
	c2.451,0.876,6.479-0.292,6.479-0.292c5.165-1.488,6.128-10.3,6.128-10.3c0.263-3.589,0.613-10.729,0.613-10.729
	c0.175-5.077,5.515-5.115,5.515-5.115c4.378-0.264,6.566,3.466,6.566,3.466c2.889,5.428,3.238,13.505,3.238,13.505
	c0.176,10.505-2.626,17.949-2.626,17.949c-3.677,9.893-3.327,12.197-3.327,12.197c0.438,7.616,8.931,6.771,8.931,6.771
	c7.003,0,9.294-6.784,9.294-6.784c1.276,4.252,7.76,4.24,7.76,4.24c6.803-0.212,8.504-6.43,8.504-6.43
	c4.039,1.169,7.229-2.056,7.229-2.056c4.464-4.146,4.782-13.461,4.782-13.461c1.488,0.106,3.722-1.506,3.722-1.506
	c3.72-3.188,4.252-12.819,4.252-12.819c1.381-6.909,0-19.223,0-19.223c-0.532-4.784-7.974-22.646-7.974-22.646
	c-3.72-8.822-8.716-24.035-8.716-24.035c-1.595-7.017-4.146-18.051-4.146-18.051c-4.783-21.578-13.499-50.628-13.499-50.628
	c-5.209-15.945-17.858-42.095-17.858-42.095c-9.992-17.432-24.236-32.397-24.236-32.397c-25.404-25.193-44.857-31.51-44.857-31.51
	c-14.988-6.059-32.314-11.109-32.314-11.109c-6.483-2.657-6.696-7.916-6.696-7.916l0.105-5.872
	c-0.212-2.551,0.107-4.165,0.107-4.165C59.603-181.253,68-193.481,68-193.481c5.314-10.099,8.291-20.727,8.291-20.727
	c2.977,1.063,6.59,0.501,6.59,0.501c4.571-0.319,7.335-6.532,7.335-6.532c1.808-4.996,4.071-17.556,4.071-17.556
	c1.864-6.709,3.354-16.105,3.354-16.105c1.078-7.212-2.609-12.361-2.609-12.361c-3.009-5.649-8.572-5.642-8.572-5.642
	c4.101-17.518,0-33.33,0-33.33c-3.728-21.245-20.779-40.627-20.779-40.627c-23.99-31.309-65.682-30.014-65.682-30.014
	s-41.691-1.295-65.681,30.014C-65.682-345.86-82.734-326.478-86.461-305.233z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-84.572-300.297c0,0-3.992,15.55,0,32.607
	c0,0-5.417,0.041-8.347,5.541c0,0-3.59,5.07-2.54,12.093c0,0,1.451,9.222,3.266,15.755c0,0,2.204,12.312,3.964,17.177
	c0,0,2.691,6.095,7.141,6.406c0,0,3.519,0.577,6.417-0.458c0,0,2.898,10.451,8.073,20.284c0,0,8.177,12.014,14.18,18.121
	c0,0,0.31,1.588,0.103,4.072l0.104,5.745c0,0-0.207,5.171-6.521,7.758c0,0-16.87,5.076-31.464,10.975c0,0-18.94,6.41-43.677,30.94
	c0,0-13.869,14.759-23.598,31.733c0,0-12.316,25.676-17.388,41.201c0,0-8.487,28.532-13.144,49.542c0,0-2.484,10.83-4.037,17.661
	c0,0-4.864,14.933-8.487,23.522c0,0-7.245,17.505-7.762,22.163c0,0-1.346,12.079,0,18.806c0,0,0.517,9.441,4.14,12.546
	c0,0,2.173,1.588,3.622,1.484c0,0,0.311,9.138,4.658,13.175c0,0,3.105,3.175,7.038,2.037c0,0,1.656,6.107,8.28,6.314
	c0,0,6.313,0.055,7.555-4.086c0,0,2.231,6.662,9.05,6.662c0,0,8.268,0.885,8.695-6.531c0,0,0.34-2.185-3.24-11.817
	c0,0-2.727-7.162-2.557-17.391c0,0,0.341-7.799,3.154-13.083c0,0,2.131-3.596,6.393-3.34c0,0,5.2,0.076,5.37,5.021
	c0,0,0.341,7.002,0.597,10.497c0,0,0.938,8.639,5.967,10.088c0,0,3.921,1.168,6.307,0.315c0,0,2.387-1.128,1.62-6.497
	c0,0-1.193-9.437-0.085-20.433c0,0,0.596-5.379,0-8.105c0,0-2.046-8.453-6.819-14.761c0,0-5.115-8.109-5.2-15.44
	c0,0-0.341-3.865,1.023-5.741c0,0,11.134-18.509,16.478-30.991c0,0,5.769-12.372,7.304-18.851c0,0,2.301-11.436,2.472-16.039
	c0,0,6.563-6.864,9.291-9.251c0,0,7.245-5.131,11.848-10.671c0,0,6.393-7.274,7.331-12.729c0,0,1.96,14.477,2.131,34.337
	c0,0,1.449,25.172-0.767,47.333c0,0-5.882,45.536-9.888,63.352c0,0-10.144,48.129-11.337,67.137c0,0-1.79,25.672-1.193,45.874
	c0,0,0.17,5.354,1.449,16.179c0,0,5.966,28.559,13.382,52.084c0,0,10.059,29.179,12.531,36.254c0,0,4.006,11.282,3.239,20.658
	c0,0-1.961,13.469-1.961,17.646c0,0-1.023,17.2,1.705,24.616c0,0,3.096,8.183,8.892,8.779c0,0,4.101,0.17,5.039-1.705
	c0,0,1.974,2.813,6.065,2.813c0,0,5.299-0.683,6.151-3.069c0,0,1.12,1.875,5.894,1.961c0,0,6.069,0.255,7.262-3.666
	c0,0,0.862,2.217,4.698,1.876c0,0,5.556-1.107,7.091-3.666c0,0,2.912,2.899,6.918,2.473c0,0,7.695-0.427,8.377-5.966
	c0,0,1.126-3.581-1.686-8.865c0,0-7.107-13.81-11.284-21.992c0,0-8.996-14.15-9.507-16.196c0,0-1.69-1.79-1.52-7.075
	c0,0,2.98-25.486,2.383-36.823c0,0-0.711-12.274-3.097-25.998c0,0-2.768-13.979-4.643-20.372c0,0-1.678-6.053-0.485-12.616
	c0,0,1.233-8.865,4.217-17.9c0,0,5.521-13.042,7.908-28.385c0,0,5.396-20.841,2.754-31.155c0,0,5.913,2.387,13.968,3.879
	c0,0,6.593,1.278,13.284,1.022c6.691,0.256,13.282-1.022,13.282-1.022c8.056-1.492,13.968-3.879,13.968-3.879
	c-2.642,10.314,2.757,31.155,2.757,31.155c2.387,15.343,7.909,28.385,7.909,28.385c2.983,9.035,4.217,17.9,4.217,17.9
	c1.193,6.563-0.482,12.616-0.482,12.616c-1.876,6.393-4.642,20.372-4.642,20.372c-2.387,13.724-3.095,25.998-3.095,25.998
	c-0.596,11.337,2.387,36.823,2.387,36.823c0.171,5.285-1.519,7.075-1.519,7.075c-0.511,2.046-9.503,16.196-9.503,16.196
	c-4.177,8.183-11.279,21.992-11.279,21.992c-2.812,5.284-1.685,8.865-1.685,8.865c0.682,5.539,8.38,5.966,8.38,5.966
	c4.006,0.427,6.921-2.473,6.921-2.473c1.534,2.559,7.094,3.666,7.094,3.666c3.835,0.341,4.7-1.876,4.7-1.876
	c1.192,3.921,7.265,3.666,7.265,3.666c4.773-0.086,5.896-1.961,5.896-1.961c0.852,2.387,6.153,3.069,6.153,3.069
	c4.093,0,6.07-2.813,6.07-2.813c0.938,1.875,5.043,1.705,5.043,1.705c5.796-0.597,8.896-8.779,8.896-8.779
	c2.727-7.416,1.705-24.611,1.705-24.611c0-4.177-1.961-17.64-1.961-17.64c-0.768-9.376,3.238-20.653,3.238-20.653
	c2.473-7.075,12.531-36.246,12.531-36.246c7.415-23.526,13.382-52.076,13.382-52.076c1.279-10.826,1.449-16.177,1.449-16.177
	c0.597-20.202-1.193-45.864-1.193-45.864c-1.192-19.008-11.337-67.129-11.337-67.129c-4.006-17.814-9.888-63.341-9.888-63.341
	c-2.216-22.162-0.767-47.327-0.767-47.327c0.17-19.861,2.131-34.333,2.131-34.333c0.938,5.455,7.331,12.73,7.331,12.73
	c4.603,5.541,11.848,10.674,11.848,10.674c2.728,2.387,9.291,9.253,9.291,9.253c0.171,4.603,2.472,16.042,2.472,16.042
	c1.534,6.478,7.305,18.852,7.305,18.852c5.344,12.483,16.478,30.995,16.478,30.995c1.364,1.876,1.023,5.742,1.023,5.742
	c-0.085,7.33-5.2,15.442-5.2,15.442c-4.773,6.307-6.819,14.761-6.819,14.761c-0.597,2.727,0,8.105,0,8.105
	c1.108,10.996-0.085,20.433-0.085,20.433c-0.767,5.371,1.619,6.498,1.619,6.498c2.387,0.852,6.308-0.315,6.308-0.315
	c5.029-1.449,5.968-10.088,5.968-10.088c0.256-3.495,0.597-10.497,0.597-10.497c0.17-4.944,5.37-5.02,5.37-5.02
	c4.262-0.257,6.393,3.339,6.393,3.339c2.813,5.285,3.154,13.082,3.154,13.082c0.17,10.229-2.559,17.39-2.559,17.39
	c-3.579,9.632-3.238,11.816-3.238,11.816c0.427,7.416,8.694,6.531,8.694,6.531c6.819,0,9.051-6.663,9.051-6.663
	c1.241,4.141,7.555,4.086,7.555,4.086c6.624-0.207,8.28-6.315,8.28-6.315c3.933,1.139,7.038-2.038,7.038-2.038
	c4.347-4.036,4.657-13.175,4.657-13.175c1.449,0.103,3.622-1.485,3.622-1.485c3.623-3.104,4.141-12.547,4.141-12.547
	c1.346-6.728,0-18.809,0-18.809c-0.518-4.657-7.763-22.165-7.763-22.165c-3.623-8.59-8.486-23.524-8.486-23.524
	c-1.554-6.831-4.037-17.663-4.037-17.663c-4.657-21.01-13.145-49.547-13.145-49.547c-5.071-15.525-17.388-41.206-17.388-41.206
	c-9.729-16.974-23.598-31.739-23.598-31.739c-24.737-24.53-43.678-30.947-43.678-30.947c-14.594-5.899-31.464-10.98-31.464-10.98
	c-6.313-2.588-6.521-7.759-6.521-7.759l0.104-5.745c-0.207-2.484,0.104-4.074,0.104-4.074c6.003-6.107,14.18-18.126,14.18-18.126
	c5.175-9.833,8.073-20.289,8.073-20.289c2.897,1.035,6.417,0.456,6.417,0.456c4.45-0.311,7.141-6.409,7.141-6.409
	c1.76-4.865,3.964-17.18,3.964-17.18c1.815-6.532,3.267-15.76,3.267-15.76c1.05-7.023-2.54-12.1-2.54-12.1
	c-2.931-5.501-8.348-5.545-8.348-5.545c3.992-17.057,0-32.615,0-32.615c-3.629-20.686-20.381-39.558-20.381-39.558
	C40.833-370.34,0-369.079,0-369.079s-40.833-1.261-64.192,29.224C-64.192-339.854-80.943-320.983-84.572-300.297z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-82.684-295.36c0,0-3.884,15.292,0,31.888
	c0,0-5.27,0.09-8.121,5.442c0,0-3.494,4.994-2.472,11.827c0,0,1.412,9.053,3.178,15.409c0,0,2.145,12.066,3.857,16.799
	c0,0,2.618,5.98,6.948,6.282c0,0,3.424,0.592,6.244-0.415c0,0,2.819,10.277,7.855,19.844c0,0,7.955,11.804,13.796,17.745
	c0,0,0.302,1.565,0.101,3.982l0.1,5.617c0,0-0.201,5.083-6.344,7.6c0,0-16.415,5.104-30.614,10.844c0,0-18.428,6.506-42.496,30.373
	c0,0-13.494,14.557-22.96,31.072c0,0-11.984,25.204-16.918,40.31c0,0-8.258,28.015-12.79,48.458c0,0-2.417,10.627-3.927,17.273
	c0,0-4.733,14.652-8.258,23.01c0,0-7.049,17.148-7.552,21.68c0,0-1.31,11.846,0,18.392c0,0,0.503,9.251,4.028,12.271
	c0,0,2.114,1.564,3.524,1.464c0,0,0.302,8.962,4.532,12.889c0,0,3.021,3.127,6.848,2.02c0,0,1.611,5.996,8.056,6.198
	c0,0,6.143,0.099,7.351-3.929c0,0,2.17,6.54,8.805,6.54c0,0,8.045,0.921,8.46-6.294c0,0,0.332-2.064-3.152-11.436
	c0,0-2.654-6.88-2.488-16.833c0,0,0.332-7.52,3.069-12.662c0,0,2.073-3.46,6.22-3.211c0,0,5.059,0.114,5.225,4.925
	c0,0,0.332,6.864,0.581,10.265c0,0,0.912,8.466,5.805,9.876c0,0,3.815,1.168,6.137,0.338c0,0,2.323-1.062,1.576-6.287
	c0,0-1.161-9.077-0.083-19.775c0,0,0.581-5.193,0-7.848c0,0-1.99-8.141-6.635-14.277c0,0-4.976-7.808-5.059-14.94
	c0,0-0.332-3.732,0.995-5.556c0,0,10.834-17.83,16.033-29.976c0,0,5.614-11.935,7.107-18.238c0,0,2.239-11.045,2.405-15.524
	c0,0,6.386-6.612,9.04-8.934c0,0,7.049-4.912,11.528-10.303c0,0,6.22-7.001,7.132-12.309c0,0,1.908,14.258,2.074,33.582
	c0,0,1.41,24.729-0.747,46.292c0,0-5.722,44.629-9.62,61.963c0,0-9.87,47.17-11.031,65.665c0,0-1.741,25.21-1.161,44.866
	c0,0,0.166,5.289,1.41,15.821c0,0,5.806,28.059,13.021,50.948c0,0,9.787,28.583,12.192,35.467c0,0,3.898,11.083,3.151,20.206
	c0,0-1.907,13.195-1.907,17.26c0,0-0.995,16.859,1.659,24.074c0,0,3.026,7.962,8.665,8.543c0,0,3.996,0.166,4.908-1.658
	c0,0,1.928,2.736,5.909,2.736c0,0,5.162-0.664,5.992-2.986c0,0,1.096,1.825,5.74,1.908c0,0,5.914,0.248,7.075-3.566
	c0,0,0.844,2.156,4.576,1.824c0,0,5.414-1.077,6.907-3.565c0,0,2.842,2.82,6.74,2.405c0,0,7.498-0.415,8.162-5.807
	c0,0,1.106-3.482-1.631-8.625c0,0-6.886-13.436-10.95-21.397c0,0-8.732-13.768-9.23-15.757c0,0-1.637-1.742-1.471-6.885
	c0,0,2.942-24.798,2.362-35.829c0,0-0.662-11.941-2.984-25.295c0,0-2.669-13.602-4.493-19.821c0,0-1.62-5.889-0.459-12.274
	c0,0,1.222-8.626,4.125-17.417c0,0,5.406-12.688,7.728-27.618c0,0,5.287-20.277,2.716-30.312c0,0,5.77,2.321,13.608,3.773
	c0,0,6.43,1.244,12.94,0.995c6.51,0.249,12.938-0.995,12.938-0.995c7.838-1.452,13.606-3.773,13.606-3.773
	c-2.571,10.035,2.719,30.312,2.719,30.312c2.322,14.93,7.731,27.618,7.731,27.618c2.903,8.791,4.124,17.417,4.124,17.417
	c1.162,6.386-0.455,12.274-0.455,12.274c-1.824,6.22-4.49,19.821-4.49,19.821c-2.321,13.354-2.979,25.295-2.979,25.295
	c-0.58,11.031,2.367,35.829,2.367,35.829c0.166,5.143-1.47,6.885-1.47,6.885c-0.498,1.989-9.224,15.757-9.224,15.757
	c-4.064,7.962-10.944,21.397-10.944,21.397c-2.735,5.143-1.628,8.625-1.628,8.625c0.664,5.392,8.166,5.807,8.166,5.807
	c3.898,0.415,6.744-2.405,6.744-2.405c1.492,2.488,6.912,3.565,6.912,3.565c3.732,0.332,4.579-1.824,4.579-1.824
	c1.161,3.814,7.079,3.566,7.079,3.566c4.645-0.083,5.744-1.908,5.744-1.908c0.828,2.322,5.998,2.986,5.998,2.986
	c3.98,0,5.913-2.736,5.913-2.736c0.912,1.824,4.914,1.658,4.914,1.658c5.641-0.581,8.671-8.543,8.671-8.543
	c2.654-7.215,1.658-24.067,1.658-24.067c0-4.064-1.906-17.25-1.906-17.25c-0.747-9.123,3.15-20.199,3.15-20.199
	c2.406-6.884,12.192-35.455,12.192-35.455c7.215-22.891,13.021-50.937,13.021-50.937c1.244-10.532,1.41-15.818,1.41-15.818
	c0.58-19.656-1.161-44.852-1.161-44.852c-1.161-18.494-11.03-65.653-11.03-65.653c-3.898-17.333-9.62-61.947-9.62-61.947
	c-2.157-21.564-0.747-46.283-0.747-46.283c0.166-19.324,2.073-33.576,2.073-33.576c0.912,5.308,7.133,12.313,7.133,12.313
	c4.479,5.391,11.527,10.306,11.527,10.306c2.654,2.322,9.04,8.937,9.04,8.937c0.166,4.479,2.406,15.527,2.406,15.527
	c1.492,6.303,7.106,18.241,7.106,18.241c5.198,12.146,16.032,29.981,16.032,29.981c1.327,1.823,0.995,5.557,0.995,5.557
	c-0.083,7.132-5.059,14.942-5.059,14.942c-4.646,6.137-6.635,14.278-6.635,14.278c-0.581,2.654,0,7.849,0,7.849
	c1.077,10.698-0.083,19.776-0.083,19.776c-0.746,5.226,1.575,6.286,1.575,6.286c2.322,0.83,6.138-0.337,6.138-0.337
	c4.893-1.41,5.806-9.876,5.806-9.876c0.248-3.399,0.58-10.265,0.58-10.265c0.166-4.811,5.225-4.924,5.225-4.924
	c4.147-0.249,6.221,3.211,6.221,3.211c2.736,5.142,3.068,12.66,3.068,12.66c0.166,9.952-2.487,16.83-2.487,16.83
	c-3.483,9.372-3.152,11.436-3.152,11.436c0.415,7.216,8.46,6.294,8.46,6.294c6.635,0,8.805-6.542,8.805-6.542
	c1.208,4.028,7.352,3.929,7.352,3.929c6.444-0.202,8.057-6.199,8.057-6.199c3.826,1.107,6.847-2.021,6.847-2.021
	c4.23-3.928,4.532-12.89,4.532-12.89c1.41,0.1,3.525-1.465,3.525-1.465c3.523-3.021,4.027-12.274,4.027-12.274
	c1.31-6.546,0-18.395,0-18.395c-0.504-4.531-7.553-21.684-7.553-21.684c-3.524-8.358-8.258-23.013-8.258-23.013
	c-1.51-6.646-3.927-17.275-3.927-17.275C178.787-12.616,170.53-40.64,170.53-40.64c-4.936-15.105-16.918-40.317-16.918-40.317
	c-9.466-16.515-22.961-31.081-22.961-31.081c-24.068-23.866-42.496-30.382-42.496-30.382c-14.199-5.74-30.614-10.853-30.614-10.853
	c-6.143-2.518-6.344-7.602-6.344-7.602l0.101-5.617c-0.202-2.417,0.101-3.983,0.101-3.983c5.841-5.942,13.797-17.753,13.797-17.753
	c5.035-9.567,7.854-19.851,7.854-19.851c2.82,1.007,6.244,0.411,6.244,0.411c4.33-0.302,6.948-6.286,6.948-6.286
	c1.712-4.733,3.856-16.804,3.856-16.804c1.767-6.355,3.179-15.416,3.179-15.416c1.021-6.833-2.472-11.838-2.472-11.838
	c-2.852-5.352-8.122-5.448-8.122-5.448c3.885-16.596,0-31.9,0-31.9c-3.53-20.127-19.981-38.489-19.981-38.489
	C39.974-363.51,0-362.283,0-362.283s-39.976-1.227-62.703,28.434C-62.703-333.849-79.153-315.487-82.684-295.36z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-80.795-290.424c0,0-3.776,15.034,0,31.169
	c0,0-5.124,0.14-7.896,5.343c0,0-3.396,4.919-2.403,11.562c0,0,1.373,8.882,3.09,15.061c0,0,2.085,11.821,3.75,16.422
	c0,0,2.545,5.864,6.755,6.158c0,0,3.329,0.608,6.07-0.371c0,0,2.741,10.103,7.637,19.404c0,0,7.734,11.592,13.413,17.369
	c0,0,0.293,1.541,0.098,3.89l0.098,5.49c0,0-0.196,4.995-6.168,7.443c0,0-15.959,5.132-29.764,10.713
	c0,0-17.916,6.601-41.316,29.805c0,0-13.119,14.354-22.322,30.411c0,0-11.651,24.733-16.448,39.419c0,0-8.029,27.498-12.434,47.373
	c0,0-2.35,10.424-3.819,16.887c0,0-4.601,14.37-8.028,22.497c0,0-6.853,16.79-7.343,21.196c0,0-1.273,11.612,0,17.977
	c0,0,0.49,9.062,3.916,12c0,0,2.056,1.539,3.427,1.44c0,0,0.294,8.785,4.406,12.604c0,0,2.937,3.079,6.657,2.002
	c0,0,1.567,5.887,7.833,6.083c0,0,5.972,0.142,7.147-3.774c0,0,2.11,6.42,8.561,6.42c0,0,7.821,0.958,8.224-6.057
	c0,0,0.323-1.943-3.064-11.054c0,0-2.58-6.599-2.419-16.274c0,0,0.323-7.241,2.983-12.24c0,0,2.016-3.326,6.048-3.084
	c0,0,4.918,0.151,5.08,4.828c0,0,0.322,6.728,0.564,10.033c0,0,0.887,8.294,5.644,9.664c0,0,3.709,1.168,5.967,0.361
	c0,0,2.258-0.997,1.532-6.077c0,0-1.129-8.719-0.08-19.12c0,0,0.564-5.007,0-7.588c0,0-1.936-7.829-6.451-13.796
	c0,0-4.838-7.506-4.919-14.439c0,0-0.322-3.598,0.968-5.372c0,0,10.533-17.151,15.587-28.959c0,0,5.458-11.497,6.909-17.625
	c0,0,2.178-10.654,2.339-15.008c0,0,6.208-6.36,8.789-8.617c0,0,6.853-4.693,11.208-9.934c0,0,6.047-6.73,6.934-11.89
	c0,0,1.855,14.039,2.016,32.826c0,0,1.371,24.287-0.726,45.251c0,0-5.563,43.724-9.353,60.575c0,0-9.595,46.211-10.724,64.193
	c0,0-1.694,24.748-1.129,43.857c0,0,0.161,5.227,1.371,15.466c0,0,5.644,27.557,12.659,49.812c0,0,9.514,27.988,11.853,34.68
	c0,0,3.79,10.885,3.064,19.755c0,0-1.855,12.92-1.855,16.871c0,0-0.967,16.521,1.613,23.535c0,0,2.957,7.741,8.44,8.306
	c0,0,3.89,0.161,4.777-1.612c0,0,1.881,2.661,5.751,2.661c0,0,5.027-0.646,5.833-2.903c0,0,1.072,1.773,5.588,1.854
	c0,0,5.758,0.242,6.887-3.468c0,0,0.826,2.097,4.454,1.774c0,0,5.273-1.048,6.724-3.467c0,0,2.77,2.741,6.56,2.339
	c0,0,7.303-0.404,7.948-5.646c0,0,1.085-3.386-1.576-8.386c0,0-6.666-13.062-10.617-20.803c0,0-8.468-13.386-8.951-15.32
	c0,0-1.584-1.693-1.423-6.692c0,0,2.905-24.108,2.34-34.834c0,0-0.613-11.61-2.87-24.593c0,0-2.57-13.223-4.344-19.271
	c0,0-1.56-5.726-0.431-11.934c0,0,1.209-8.386,4.031-16.933c0,0,5.292-12.337,7.55-26.852c0,0,5.178-19.714,2.678-29.471
	c0,0,5.627,2.258,13.247,3.669c0,0,6.266,1.209,12.596,0.968c6.33,0.241,12.594-0.968,12.594-0.968
	c7.62-1.411,13.245-3.669,13.245-3.669c-2.499,9.757,2.684,29.471,2.684,29.471c2.258,14.515,7.552,26.852,7.552,26.852
	c2.822,8.547,4.032,16.933,4.032,16.933c1.129,6.208-0.428,11.934-0.428,11.934c-1.773,6.048-4.34,19.271-4.34,19.271
	c-2.258,12.982-2.864,24.593-2.864,24.593c-0.564,10.726,2.348,34.834,2.348,34.834c0.161,4.999-1.421,6.692-1.421,6.692
	c-0.484,1.935-8.944,15.32-8.944,15.32c-3.951,7.74-10.607,20.803-10.607,20.803c-2.661,5-1.572,8.386-1.572,8.386
	c0.645,5.241,7.953,5.646,7.953,5.646c3.79,0.402,6.564-2.339,6.564-2.339c1.452,2.419,6.731,3.467,6.731,3.467
	c3.628,0.322,4.458-1.774,4.458-1.774c1.129,3.71,6.894,3.468,6.894,3.468c4.516-0.081,5.591-1.854,5.591-1.854
	c0.808,2.258,5.842,2.903,5.842,2.903c3.87,0,5.759-2.661,5.759-2.661c0.887,1.773,4.785,1.612,4.785,1.612
	c5.482-0.564,8.445-8.306,8.445-8.306c2.581-7.015,1.613-23.525,1.613-23.525c0-3.95-1.854-16.859-1.854-16.859
	c-0.726-8.87,3.063-19.745,3.063-19.745c2.339-6.692,11.854-34.665,11.854-34.665c7.016-22.254,12.659-49.794,12.659-49.794
	c1.209-10.241,1.371-15.462,1.371-15.462c0.564-19.11-1.129-43.839-1.129-43.839c-1.129-17.981-10.724-64.179-10.724-64.179
	c-3.79-16.852-9.354-60.554-9.354-60.554c-2.096-20.964-0.726-45.237-0.726-45.237c0.162-18.788,2.016-32.819,2.016-32.819
	c0.888,5.161,6.936,11.895,6.936,11.895c4.354,5.241,11.208,9.937,11.208,9.937c2.58,2.258,8.789,8.623,8.789,8.623
	c0.161,4.354,2.338,15.012,2.338,15.012c1.451,6.128,6.909,17.629,6.909,17.629c5.055,11.808,15.587,28.966,15.587,28.966
	c1.29,1.774,0.968,5.373,0.968,5.373c-0.081,6.935-4.919,14.442-4.919,14.442c-4.515,5.967-6.45,13.798-6.45,13.798
	c-0.564,2.581,0,7.589,0,7.589c1.048,10.401-0.081,19.121-0.081,19.121c-0.726,5.08,1.532,6.076,1.532,6.076
	c2.258,0.806,5.967-0.36,5.967-0.36c4.757-1.371,5.645-9.663,5.645-9.663c0.241-3.306,0.564-10.033,0.564-10.033
	c0.161-4.677,5.079-4.828,5.079-4.828c4.032-0.242,6.048,3.083,6.048,3.083c2.661,5,2.983,12.238,2.983,12.238
	c0.162,9.676-2.419,16.272-2.419,16.272c-3.387,9.11-3.064,11.053-3.064,11.053c0.403,7.015,8.226,6.055,8.226,6.055
	c6.449,0,8.56-6.421,8.56-6.421c1.175,3.916,7.147,3.773,7.147,3.773c6.266-0.195,7.833-6.083,7.833-6.083
	c3.72,1.077,6.656-2.004,6.656-2.004c4.112-3.818,4.406-12.605,4.406-12.605c1.371,0.099,3.427-1.441,3.427-1.441
	c3.428-2.938,3.916-12.003,3.916-12.003c1.273-6.364,0-17.98,0-17.98c-0.488-4.406-7.343-21.202-7.343-21.202
	c-3.426-8.126-8.028-22.502-8.028-22.502c-1.469-6.462-3.817-16.888-3.817-16.888c-4.406-19.875-12.435-47.385-12.435-47.385
	c-4.798-14.686-16.447-39.429-16.447-39.429c-9.204-16.056-22.323-30.422-22.323-30.422c-23.399-23.204-41.316-29.819-41.316-29.819
	c-13.805-5.581-29.763-10.725-29.763-10.725c-5.973-2.447-6.168-7.444-6.168-7.444l0.098-5.49c-0.195-2.35,0.098-3.893,0.098-3.893
	c5.679-5.776,13.413-17.379,13.413-17.379c4.896-9.301,7.637-19.413,7.637-19.413c2.742,0.979,6.07,0.366,6.07,0.366
	c4.209-0.294,6.756-6.163,6.756-6.163c1.664-4.602,3.75-16.427,3.75-16.427c1.716-6.18,3.089-15.072,3.089-15.072
	c0.993-6.644-2.403-11.577-2.403-11.577c-2.771-5.203-7.896-5.351-7.896-5.351c3.776-16.135,0-31.185,0-31.185
	c-3.434-19.568-19.583-37.42-19.583-37.42c-22.097-28.837-61.213-27.644-61.213-27.644s-39.117-1.193-61.212,27.644
	C-61.213-327.844-77.362-309.992-80.795-290.424z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-78.907-285.487c0,0-3.668,14.776,0,30.45
	c0,0-4.977,0.19-7.67,5.244c0,0-3.299,4.844-2.335,11.297c0,0,1.334,8.711,3.002,14.714c0,0,2.026,11.575,3.642,16.045
	c0,0,2.473,5.747,6.563,6.033c0,0,3.233,0.624,5.897-0.327c0,0,2.663,9.928,7.418,18.963c0,0,7.514,11.382,13.03,16.993
	c0,0,0.285,1.517,0.095,3.8l0.095,5.361c0,0-0.19,4.908-5.992,7.286c0,0-15.502,5.161-28.913,10.582c0,0-17.404,6.697-40.135,29.238
	c0,0-12.745,14.152-21.685,29.75c0,0-11.318,24.261-15.978,38.527c0,0-7.799,26.983-12.079,46.29c0,0-2.282,10.22-3.709,16.497
	c0,0-4.47,14.092-7.799,21.986c0,0-6.658,16.434-7.133,20.713c0,0-1.236,11.379,0,17.561c0,0,0.475,8.874,3.804,11.728
	c0,0,1.998,1.515,3.329,1.42c0,0,0.285,8.608,4.28,12.318c0,0,2.853,3.029,6.467,1.983c0,0,1.522,5.776,7.609,5.966
	c0,0,5.801,0.188,6.943-3.618c0,0,2.049,6.3,8.316,6.3c0,0,7.598,0.996,7.989-5.819c0,0,0.314-1.822-2.976-10.673
	c0,0-2.507-6.316-2.35-15.715c0,0,0.313-6.962,2.898-11.819c0,0,1.958-3.192,5.875-2.957c0,0,4.778,0.19,4.934,4.733
	c0,0,0.314,6.59,0.549,9.801c0,0,0.861,8.121,5.483,9.452c0,0,3.603,1.167,5.796,0.384c0,0,2.193-0.932,1.488-5.866
	c0,0-1.096-8.359-0.078-18.465c0,0,0.548-4.822,0-7.328c0,0-1.88-7.519-6.266-13.314c0,0-4.7-7.202-4.778-13.938
	c0,0-0.314-3.465,0.94-5.188c0,0,10.231-16.473,15.141-27.942c0,0,5.302-11.06,6.712-17.013c0,0,2.115-10.262,2.272-14.492
	c0,0,6.031-6.108,8.538-8.301c0,0,6.658-4.473,10.887-9.564c0,0,5.875-6.458,6.737-11.471c0,0,1.801,13.82,1.958,32.07
	c0,0,1.331,23.845-0.705,44.21c0,0-5.405,42.815-9.086,59.186c0,0-9.321,45.254-10.418,62.721c0,0-1.645,24.287-1.097,42.852
	c0,0,0.157,5.162,1.332,15.109c0,0,5.483,27.056,12.298,48.674c0,0,9.242,27.394,11.514,33.895c0,0,3.681,10.686,2.976,19.302
	c0,0-1.801,12.647-1.801,16.485c0,0-0.94,16.18,1.566,22.995c0,0,2.888,7.519,8.214,8.067c0,0,3.784,0.156,4.646-1.566
	c0,0,1.834,2.585,5.594,2.585c0,0,4.891-0.627,5.674-2.82c0,0,1.049,1.724,5.435,1.802c0,0,5.604,0.235,6.7-3.369
	c0,0,0.808,2.037,4.332,1.725c0,0,5.131-1.02,6.541-3.368c0,0,2.699,2.663,6.38,2.271c0,0,7.107-0.393,7.734-5.483
	c0,0,1.064-3.29-1.52-8.146c0,0-6.446-12.688-10.284-20.209c0,0-8.204-13.003-8.674-14.882c0,0-1.531-1.645-1.374-6.502
	c0,0,2.867-23.42,2.319-33.838c0,0-0.564-11.279-2.757-23.89c0,0-2.471-12.847-4.194-18.721c0,0-1.501-5.562-0.404-11.593
	c0,0,1.197-8.146,3.938-16.449c0,0,5.177-11.983,7.371-26.084c0,0,5.068-19.15,2.64-28.629c0,0,5.484,2.193,12.886,3.564
	c0,0,6.104,1.175,12.252,0.939c6.149,0.235,12.25-0.939,12.25-0.939c7.402-1.371,12.884-3.564,12.884-3.564
	c-2.428,9.479,2.646,28.629,2.646,28.629c2.193,14.101,7.373,26.084,7.373,26.084c2.742,8.304,3.939,16.449,3.939,16.449
	c1.097,6.031-0.399,11.593-0.399,11.593c-1.723,5.874-4.189,18.721-4.189,18.721c-2.193,12.61-2.75,23.89-2.75,23.89
	c-0.548,10.418,2.328,33.838,2.328,33.838c0.157,4.857-1.371,6.502-1.371,6.502c-0.47,1.879-8.665,14.882-8.665,14.882
	c-3.838,7.521-10.271,20.209-10.271,20.209c-2.585,4.856-1.516,8.146-1.516,8.146c0.625,5.091,7.739,5.483,7.739,5.483
	c3.683,0.392,6.388-2.271,6.388-2.271c1.409,2.349,6.548,3.368,6.548,3.368c3.524,0.312,4.338-1.725,4.338-1.725
	c1.097,3.604,6.708,3.369,6.708,3.369c4.386-0.078,5.439-1.802,5.439-1.802c0.783,2.193,5.684,2.82,5.684,2.82
	c3.76,0,5.604-2.585,5.604-2.585c0.861,1.723,4.656,1.566,4.656,1.566c5.326-0.549,8.221-8.067,8.221-8.067
	c2.507-6.815,1.567-22.983,1.567-22.983c0-3.838-1.802-16.471-1.802-16.471c-0.705-8.616,2.977-19.29,2.977-19.29
	c2.271-6.501,11.514-33.874,11.514-33.874c6.815-21.619,12.299-48.654,12.299-48.654c1.174-9.948,1.331-15.104,1.331-15.104
	c0.548-18.564-1.097-42.826-1.097-42.826c-1.097-17.468-10.418-62.701-10.418-62.701c-3.682-16.371-9.086-59.161-9.086-59.161
	c-2.037-20.366-0.705-44.193-0.705-44.193c0.156-18.251,1.958-32.061,1.958-32.061c0.862,5.013,6.736,11.477,6.736,11.477
	c4.229,5.091,10.888,9.568,10.888,9.568c2.506,2.194,8.538,8.308,8.538,8.308c0.156,4.229,2.271,14.497,2.271,14.497
	c1.409,5.953,6.712,17.018,6.712,17.018c4.91,11.47,15.142,27.951,15.142,27.951c1.253,1.724,0.94,5.188,0.94,5.188
	c-0.078,6.736-4.778,13.942-4.778,13.942c-4.387,5.796-6.266,13.317-6.266,13.317c-0.55,2.507,0,7.328,0,7.328
	c1.018,10.105-0.079,18.467-0.079,18.467c-0.705,4.934,1.487,5.865,1.487,5.865c2.194,0.783,5.798-0.383,5.798-0.383
	c4.62-1.332,5.482-9.451,5.482-9.451c0.235-3.212,0.548-9.801,0.548-9.801c0.157-4.543,4.936-4.732,4.936-4.732
	c3.916-0.235,5.874,2.955,5.874,2.955c2.585,4.856,2.898,11.817,2.898,11.817c0.156,9.399-2.35,15.712-2.35,15.712
	c-3.29,8.852-2.978,10.672-2.978,10.672c0.393,6.815,7.99,5.817,7.99,5.817c6.267,0,8.316-6.301,8.316-6.301
	c1.141,3.805,6.942,3.618,6.942,3.618c6.087-0.19,7.608-5.969,7.608-5.969c3.614,1.046,6.468-1.985,6.468-1.985
	c3.994-3.709,4.28-12.32,4.28-12.32c1.331,0.095,3.328-1.421,3.328-1.421c3.329-2.854,3.805-11.731,3.805-11.731
	c1.236-6.182,0-17.565,0-17.565c-0.476-4.28-7.133-20.721-7.133-20.721c-3.329-7.894-7.799-21.99-7.799-21.99
	c-1.427-6.277-3.71-16.501-3.71-16.501c-4.279-19.308-12.078-46.304-12.078-46.304c-4.661-14.266-15.979-38.539-15.979-38.539
	c-8.94-15.598-21.685-29.765-21.685-29.765c-22.731-22.54-40.136-29.255-40.136-29.255c-13.41-5.421-28.913-10.596-28.913-10.596
	c-5.801-2.378-5.991-7.288-5.991-7.288l0.095-5.362c-0.19-2.282,0.096-3.802,0.096-3.802c5.516-5.612,13.029-17.005,13.029-17.005
	c4.755-9.036,7.418-18.976,7.418-18.976c2.663,0.951,5.897,0.321,5.897,0.321c4.089-0.285,6.562-6.04,6.562-6.04
	c1.617-4.471,3.644-16.051,3.644-16.051c1.667-6.003,3.001-14.729,3.001-14.729c0.965-6.453-2.334-11.315-2.334-11.315
	c-2.693-5.055-7.67-5.255-7.67-5.255c3.668-15.674,0-30.469,0-30.469c-3.335-19.009-19.186-36.351-19.186-36.351
	C38.258-349.852,0-348.692,0-348.692s-38.26-1.159-59.724,26.854C-59.724-321.838-75.572-304.497-78.907-285.487z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-77.019-280.551c0,0-3.561,14.518,0,29.731
	c0,0-4.831,0.24-7.445,5.145c0,0-3.202,4.768-2.265,11.032c0,0,1.294,8.541,2.913,14.367c0,0,1.966,11.329,3.535,15.667
	c0,0,2.4,5.632,6.37,5.909c0,0,3.138,0.639,5.723-0.284c0,0,2.585,9.754,7.2,18.524c0,0,7.293,11.17,12.647,16.616
	c0,0,0.277,1.494,0.092,3.709l0.092,5.234c0,0-0.184,4.82-5.815,7.128c0,0-15.047,5.19-28.063,10.451
	c0,0-16.893,6.793-38.955,28.671c0,0-12.37,13.95-21.047,29.089c0,0-10.985,23.789-15.508,37.636c0,0-7.569,26.466-11.723,45.205
	c0,0-2.216,10.018-3.601,16.11c0,0-4.338,13.812-7.569,21.473c0,0-6.462,16.077-6.923,20.231c0,0-1.2,11.145,0,17.146
	c0,0,0.461,8.685,3.692,11.453c0,0,1.939,1.492,3.231,1.399c0,0,0.277,8.432,4.154,12.031c0,0,2.769,2.982,6.277,1.967
	c0,0,1.477,5.666,7.385,5.851c0,0,5.631,0.229,6.739-3.462c0,0,1.989,6.177,8.071,6.177c0,0,7.374,1.033,7.755-5.581
	c0,0,0.304-1.701-2.889-10.292c0,0-2.433-6.033-2.281-15.156c0,0,0.304-6.684,2.812-11.396c0,0,1.9-3.058,5.702-2.83
	c0,0,4.637,0.228,4.789,4.637c0,0,0.304,6.452,0.532,9.569c0,0,0.837,7.948,5.322,9.24c0,0,3.497,1.167,5.626,0.406
	c0,0,2.129-0.865,1.444-5.655c0,0-1.064-8.002-0.076-17.81c0,0,0.533-4.636,0-7.068c0,0-1.824-7.207-6.082-12.833
	c0,0-4.561-6.899-4.637-13.438c0,0-0.304-3.331,0.912-5.004c0,0,9.931-15.792,14.697-26.925c0,0,5.146-10.623,6.514-16.4
	c0,0,2.053-9.871,2.205-13.976c0,0,5.854-5.857,8.287-7.986c0,0,6.462-4.252,10.567-9.194c0,0,5.702-6.186,6.538-11.052
	c0,0,1.749,13.601,1.901,31.314c0,0,1.292,23.403-0.684,43.169c0,0-5.246,41.909-8.819,57.798c0,0-9.047,44.295-10.112,61.249
	c0,0-1.596,23.826-1.064,41.843c0,0,0.152,5.099,1.292,14.753c0,0,5.322,26.556,11.936,47.538c0,0,8.971,26.798,11.176,33.108
	c0,0,3.573,10.486,2.889,18.849c0,0-1.749,12.373-1.749,16.099c0,0-0.912,15.841,1.521,22.454c0,0,2.817,7.299,7.987,7.831
	c0,0,3.679,0.152,4.515-1.521c0,0,1.788,2.509,5.438,2.509c0,0,4.754-0.607,5.515-2.737c0,0,1.024,1.674,5.282,1.749
	c0,0,5.448,0.229,6.512-3.27c0,0,0.79,1.977,4.211,1.673c0,0,4.988-0.988,6.357-3.269c0,0,2.627,2.585,6.2,2.205
	c0,0,6.912-0.381,7.52-5.322c0,0,1.044-3.193-1.465-7.907c0,0-6.226-12.316-9.951-19.614c0,0-7.939-12.62-8.396-14.444
	c0,0-1.477-1.597-1.325-6.311c0,0,2.829-22.73,2.297-32.843c0,0-0.514-10.947-2.643-23.188c0,0-2.372-12.468-4.044-18.17
	c0,0-1.442-5.397-0.378-11.252c0,0,1.185-7.905,3.846-15.965c0,0,5.062-11.632,7.191-25.315c0,0,4.959-18.589,2.602-27.788
	c0,0,5.341,2.129,12.525,3.46c0,0,5.941,1.14,11.909,0.912c5.968,0.228,11.905-0.912,11.905-0.912
	c7.185-1.331,12.523-3.46,12.523-3.46c-2.356,9.199,2.608,27.788,2.608,27.788c2.129,13.684,7.195,25.315,7.195,25.315
	c2.661,8.06,3.847,15.965,3.847,15.965c1.064,5.854-0.371,11.252-0.371,11.252c-1.673,5.702-4.039,18.17-4.039,18.17
	c-2.129,12.24-2.635,23.188-2.635,23.188c-0.532,10.112,2.308,32.843,2.308,32.843c0.152,4.714-1.321,6.311-1.321,6.311
	c-0.456,1.824-8.386,14.444-8.386,14.444c-3.725,7.298-9.937,19.614-9.937,19.614c-2.509,4.714-1.459,7.907-1.459,7.907
	c0.608,4.941,7.527,5.322,7.527,5.322c3.572,0.38,6.209-2.205,6.209-2.205c1.367,2.28,6.365,3.269,6.365,3.269
	c3.422,0.304,4.219-1.673,4.219-1.673c1.063,3.498,6.521,3.27,6.521,3.27c4.258-0.075,5.288-1.749,5.288-1.749
	c0.761,2.13,5.526,2.737,5.526,2.737c3.648,0,5.45-2.509,5.45-2.509c0.836,1.673,4.526,1.521,4.526,1.521
	c5.17-0.532,7.997-7.831,7.997-7.831c2.433-6.613,1.52-22.439,1.52-22.439c0-3.726-1.747-16.081-1.747-16.081
	c-0.685-8.363,2.889-18.835,2.889-18.835c2.205-6.311,11.175-33.085,11.175-33.085c6.615-20.983,11.937-47.513,11.937-47.513
	c1.141-9.655,1.293-14.747,1.293-14.747c0.531-18.019-1.065-41.814-1.065-41.814c-1.064-16.954-10.111-61.225-10.111-61.225
	c-3.572-15.89-8.818-57.769-8.818-57.769c-1.977-19.766-0.685-43.148-0.685-43.148c0.152-17.714,1.901-31.303,1.901-31.303
	c0.836,4.866,6.538,11.059,6.538,11.059c4.104,4.941,10.566,9.2,10.566,9.2c2.434,2.128,8.287,7.992,8.287,7.992
	c0.152,4.105,2.205,13.983,2.205,13.983c1.368,5.778,6.515,16.406,6.515,16.406c4.766,11.133,14.696,26.937,14.696,26.937
	c1.216,1.672,0.912,5.004,0.912,5.004c-0.076,6.538-4.638,13.442-4.638,13.442c-4.257,5.626-6.082,12.836-6.082,12.836
	c-0.532,2.433,0,7.07,0,7.07c0.989,9.807-0.076,17.81-0.076,17.81c-0.684,4.789,1.445,5.655,1.445,5.655
	c2.129,0.761,5.626-0.405,5.626-0.405c4.484-1.292,5.321-9.239,5.321-9.239c0.229-3.116,0.532-9.568,0.532-9.568
	c0.152-4.409,4.789-4.638,4.789-4.638c3.802-0.228,5.702,2.828,5.702,2.828c2.509,4.713,2.813,11.396,2.813,11.396
	c0.151,9.123-2.281,15.153-2.281,15.153c-3.193,8.591-2.89,10.291-2.89,10.291c0.381,6.613,7.756,5.578,7.756,5.578
	c6.082,0,8.07-6.18,8.07-6.18c1.108,3.692,6.739,3.462,6.739,3.462c5.908-0.185,7.385-5.853,7.385-5.853
	c3.509,1.016,6.277-1.969,6.277-1.969c3.877-3.6,4.154-12.034,4.154-12.034c1.292,0.092,3.23-1.4,3.23-1.4
	c3.231-2.77,3.692-11.459,3.692-11.459c1.2-6,0-17.151,0-17.151c-0.461-4.153-6.923-20.239-6.923-20.239
	c-3.231-7.661-7.57-21.479-7.57-21.479c-1.384-6.093-3.6-16.114-3.6-16.114c-4.154-18.739-11.724-45.222-11.724-45.222
	c-4.522-13.847-15.508-37.651-15.508-37.651c-8.678-15.139-21.047-29.106-21.047-29.106c-22.063-21.878-38.956-28.691-38.956-28.691
	c-13.015-5.262-28.062-10.469-28.062-10.469c-5.632-2.308-5.816-7.13-5.816-7.13l0.093-5.235c-0.185-2.215,0.092-3.712,0.092-3.712
	c5.354-5.446,12.647-16.631,12.647-16.631c4.615-8.77,7.2-18.538,7.2-18.538c2.585,0.923,5.723,0.276,5.723,0.276
	c3.97-0.277,6.37-5.918,6.37-5.918c1.569-4.338,3.535-15.674,3.535-15.674c1.619-5.826,2.913-14.383,2.913-14.383
	c0.936-6.264-2.266-11.054-2.266-11.054c-2.613-4.906-7.444-5.158-7.444-5.158c3.56-15.213,0-29.754,0-29.754
	c-3.237-18.45-18.786-35.281-18.786-35.281C37.399-343.022,0-341.897,0-341.897s-37.402-1.125-58.235,26.065
	C-58.235-315.832-73.782-299.001-77.019-280.551z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-75.13-275.615c0,0-3.453,14.259,0,29.011
	c0,0-4.685,0.291-7.219,5.047c0,0-3.105,4.693-2.197,10.767c0,0,1.255,8.37,2.825,14.02c0,0,1.906,11.083,3.428,15.29
	c0,0,2.327,5.515,6.176,5.784c0,0,3.044,0.655,5.55-0.24c0,0,2.507,9.579,6.982,18.083c0,0,7.072,10.96,12.264,16.241
	c0,0,0.268,1.469,0.089,3.618l0.09,5.106c0,0-0.179,4.732-5.64,6.97c0,0-14.59,5.218-27.212,10.321c0,0-16.381,6.888-37.774,28.103
	c0,0-11.995,13.747-20.409,28.428c0,0-10.653,23.318-15.039,36.745c0,0-7.34,25.949-11.368,44.121c0,0-2.148,9.814-3.491,15.722
	c0,0-4.207,13.531-7.34,20.961c0,0-6.266,15.721-6.714,19.748c0,0-1.163,10.912,0,16.73c0,0,0.448,8.495,3.581,11.181
	c0,0,1.88,1.467,3.133,1.377c0,0,0.268,8.255,4.028,11.746c0,0,2.685,2.934,6.087,1.949c0,0,1.432,5.556,7.161,5.735
	c0,0,5.46,0.273,6.534-3.308c0,0,1.93,6.057,7.827,6.057c0,0,7.151,1.07,7.52-5.344c0,0,0.295-1.58-2.802-9.911
	c0,0-2.359-5.751-2.211-14.597c0,0,0.295-6.405,2.727-10.976c0,0,1.844-2.923,5.53-2.702c0,0,4.497,0.266,4.644,4.542
	c0,0,0.295,6.313,0.516,9.336c0,0,0.811,7.775,5.16,9.029c0,0,3.392,1.166,5.456,0.429c0,0,2.064-0.801,1.401-5.446
	c0,0-1.033-7.643-0.074-17.152c0,0,0.516-4.45,0-6.81c0,0-1.769-6.896-5.898-12.352c0,0-4.423-6.597-4.497-12.937
	c0,0-0.295-3.196,0.885-4.818c0,0,9.63-15.114,14.251-25.909c0,0,4.99-10.185,6.317-15.788c0,0,1.99-9.479,2.138-13.46
	c0,0,5.676-5.605,8.036-7.669c0,0,6.266-4.033,10.247-8.825c0,0,5.529-5.915,6.34-10.633c0,0,1.695,13.382,1.843,30.559
	c0,0,1.253,22.96-0.664,42.128c0,0-5.086,41.001-8.551,56.409c0,0-8.773,43.336-9.805,59.776c0,0-1.548,23.364-1.032,40.837
	c0,0,0.147,5.033,1.253,14.396c0,0,5.16,26.055,11.574,46.401c0,0,8.699,26.202,10.837,32.321c0,0,3.465,10.289,2.802,18.397
	c0,0-1.696,12.098-1.696,15.711c0,0-0.885,15.5,1.474,21.914c0,0,2.748,7.077,7.762,7.594c0,0,3.573,0.147,4.384-1.475
	c0,0,1.741,2.433,5.28,2.433c0,0,4.619-0.59,5.356-2.653c0,0,1.001,1.622,5.129,1.695c0,0,5.293,0.222,6.325-3.171
	c0,0,0.771,1.917,4.089,1.622c0,0,4.846-0.958,6.173-3.17c0,0,2.557,2.507,6.022,2.139c0,0,6.715-0.368,7.305-5.16
	c0,0,1.023-3.098-1.41-7.667c0,0-6.005-11.943-9.617-19.021c0,0-7.676-12.238-8.118-14.007c0,0-1.424-1.548-1.277-6.119
	c0,0,2.792-22.043,2.276-31.848c0,0-0.466-10.616-2.53-22.485c0,0-2.273-12.09-3.894-17.619c0,0-1.383-5.233-0.351-10.911
	c0,0,1.173-7.667,3.753-15.48c0,0,4.948-11.279,7.012-24.549c0,0,4.849-18.025,2.564-26.945c0,0,5.198,2.064,12.164,3.354
	c0,0,5.778,1.105,11.564,0.885c5.787,0.221,11.562-0.885,11.562-0.885c6.967-1.29,12.162-3.354,12.162-3.354
	c-2.285,8.92,2.571,26.945,2.571,26.945c2.064,13.27,7.018,24.549,7.018,24.549c2.58,7.813,3.754,15.48,3.754,15.48
	c1.032,5.678-0.344,10.911-0.344,10.911c-1.622,5.529-3.89,17.619-3.89,17.619c-2.063,11.869-2.519,22.485-2.519,22.485
	c-0.517,9.805,2.289,31.848,2.289,31.848c0.146,4.571-1.273,6.119-1.273,6.119c-0.442,1.769-8.104,14.007-8.104,14.007
	c-3.613,7.077-9.603,19.021-9.603,19.021c-2.433,4.569-1.403,7.667-1.403,7.667c0.59,4.792,7.314,5.16,7.314,5.16
	c3.465,0.368,6.031-2.139,6.031-2.139c1.327,2.212,6.184,3.17,6.184,3.17c3.318,0.295,4.098-1.622,4.098-1.622
	c1.031,3.393,6.335,3.171,6.335,3.171c4.129-0.073,5.137-1.695,5.137-1.695c0.737,2.063,5.368,2.653,5.368,2.653
	c3.539,0,5.295-2.433,5.295-2.433c0.811,1.622,4.397,1.475,4.397,1.475c5.014-0.517,7.773-7.594,7.773-7.594
	c2.359-6.414,1.474-21.896,1.474-21.896c0-3.612-1.694-15.692-1.694-15.692c-0.664-8.109,2.801-18.38,2.801-18.38
	c2.138-6.119,10.837-32.294,10.837-32.294c6.414-20.349,11.574-46.372,11.574-46.372c1.105-9.363,1.253-14.39,1.253-14.39
	c0.517-17.473-1.032-40.803-1.032-40.803c-1.032-16.439-9.805-59.749-9.805-59.749C82,61.573,76.913,20.606,76.913,20.606
	c-1.918-19.168-0.664-42.104-0.664-42.104c0.147-17.177,1.843-30.545,1.843-30.545c0.811,4.718,6.34,10.64,6.34,10.64
	c3.981,4.792,10.248,8.832,10.248,8.832c2.359,2.064,8.035,7.677,8.035,7.677c0.147,3.981,2.138,13.468,2.138,13.468
	C106.18-5.823,111.17,4.37,111.17,4.37c4.622,10.796,14.251,25.922,14.251,25.922c1.18,1.622,0.885,4.819,0.885,4.819
	c-0.074,6.341-4.497,12.942-4.497,12.942c-4.128,5.455-5.898,12.355-5.898,12.355c-0.516,2.358,0,6.811,0,6.811
	c0.96,9.51-0.072,17.154-0.072,17.154c-0.664,4.644,1.399,5.444,1.399,5.444c2.064,0.737,5.456-0.428,5.456-0.428
	c4.35-1.253,5.16-9.026,5.16-9.026c0.221-3.022,0.517-9.337,0.517-9.337c0.147-4.275,4.645-4.542,4.645-4.542
	c3.686-0.222,5.529,2.7,5.529,2.7c2.432,4.571,2.727,10.975,2.727,10.975c0.148,8.846-2.211,14.593-2.211,14.593
	c-3.097,8.33-2.802,9.91-2.802,9.91c0.369,6.413,7.52,5.34,7.52,5.34c5.898,0,7.827-6.06,7.827-6.06
	c1.074,3.581,6.534,3.307,6.534,3.307c5.729-0.18,7.161-5.737,7.161-5.737c3.401,0.985,6.087-1.951,6.087-1.951
	c3.76-3.491,4.028-11.749,4.028-11.749c1.253,0.089,3.133-1.379,3.133-1.379c3.133-2.686,3.581-11.186,3.581-11.186
	c1.163-5.819,0-16.738,0-16.738c-0.448-4.028-6.714-19.758-6.714-19.758c-3.134-7.429-7.341-20.968-7.341-20.968
	c-1.343-5.908-3.49-15.728-3.49-15.728c-4.028-18.171-11.368-44.14-11.368-44.14c-4.387-13.427-15.038-36.763-15.038-36.763
	c-8.415-14.68-20.41-28.447-20.41-28.447c-21.393-21.215-37.774-28.128-37.774-28.128c-12.621-5.102-27.212-10.34-27.212-10.34
	c-5.461-2.238-5.64-6.974-5.64-6.974l0.09-5.107c-0.179-2.148,0.089-3.621,0.089-3.621c5.192-5.281,12.265-16.258,12.265-16.258
	c4.475-8.504,6.981-18.1,6.981-18.1c2.506,0.895,5.55,0.232,5.55,0.232c3.85-0.269,6.177-5.796,6.177-5.796
	c1.521-4.207,3.428-15.298,3.428-15.298c1.57-5.65,2.825-14.039,2.825-14.039c0.908-6.074-2.197-10.792-2.197-10.792
	c-2.534-4.757-7.219-5.061-7.219-5.061c3.453-14.752,0-29.039,0-29.039c-3.14-17.891-18.388-34.212-18.388-34.212
	C36.541-336.193,0-335.102,0-335.102s-36.543-1.091-56.746,25.275C-56.746-309.827-71.991-293.506-75.13-275.615z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-73.242-270.678c0,0-3.345,14.001,0,28.292
	c0,0-4.538,0.34-6.994,4.949c0,0-3.007,4.616-2.128,10.5c0,0,1.216,8.201,2.737,13.674c0,0,1.847,10.836,3.321,14.912
	c0,0,2.254,5.4,5.983,5.66c0,0,2.949,0.671,5.377-0.196c0,0,2.428,9.405,6.764,17.643c0,0,6.85,10.748,11.88,15.864
	c0,0,0.26,1.446,0.086,3.527l0.087,4.978c0,0-0.173,4.645-5.463,6.813c0,0-14.135,5.247-26.362,10.19
	c0,0-15.869,6.984-36.594,27.536c0,0-11.62,13.545-19.771,27.766c0,0-10.32,22.847-14.569,35.855c0,0-7.11,25.433-11.013,43.036
	c0,0-2.081,9.611-3.382,15.334c0,0-4.075,13.252-7.11,20.449c0,0-6.07,15.362-6.504,19.265c0,0-1.127,10.679,0,16.315
	c0,0,0.434,8.307,3.469,10.907c0,0,1.821,1.443,3.035,1.356c0,0,0.26,8.078,3.902,11.46c0,0,2.601,2.885,5.897,1.931
	c0,0,1.387,5.446,6.937,5.62c0,0,5.29,0.317,6.33-3.151c0,0,1.869,5.935,7.582,5.935c0,0,6.928,1.109,7.285-5.105
	c0,0,0.286-1.46-2.714-9.529c0,0-2.285-5.468-2.142-14.038c0,0,0.285-6.127,2.642-10.554c0,0,1.786-2.789,5.356-2.575
	c0,0,4.357,0.304,4.5,4.445c0,0,0.285,6.177,0.5,9.104c0,0,0.785,7.603,4.999,8.817c0,0,3.285,1.166,5.285,0.451
	c0,0,1.999-0.735,1.357-5.234c0,0-1-7.285-0.072-16.498c0,0,0.5-4.266,0-6.55c0,0-1.714-6.585-5.713-11.87
	c0,0-4.285-6.293-4.357-12.436c0,0-0.285-3.063,0.857-4.635c0,0,9.329-14.434,13.806-24.893c0,0,4.834-9.748,6.12-15.175
	c0,0,1.928-9.088,2.071-12.944c0,0,5.499-5.353,7.784-7.352c0,0,6.071-3.814,9.927-8.456c0,0,5.357-5.643,6.142-10.214
	c0,0,1.643,13.163,1.786,29.803c0,0,1.214,22.518-0.643,41.087c0,0-4.928,40.094-8.284,55.02c0,0-8.499,42.379-9.499,58.305
	c0,0-1.5,22.903-1,39.829c0,0,0.143,4.971,1.214,14.04c0,0,5,25.553,11.213,45.265c0,0,8.427,25.606,10.498,31.534
	c0,0,3.357,10.09,2.714,17.945c0,0-1.643,11.825-1.643,15.324c0,0-0.857,15.161,1.429,21.374c0,0,2.678,6.856,7.535,7.355
	c0,0,3.467,0.144,4.253-1.428c0,0,1.695,2.357,5.123,2.357c0,0,4.483-0.571,5.197-2.571c0,0,0.977,1.571,4.976,1.642
	c0,0,5.138,0.216,6.138-3.069c0,0,0.753,1.855,3.967,1.57c0,0,4.705-0.929,5.99-3.07c0,0,2.485,2.428,5.842,2.07
	c0,0,6.52-0.356,7.091-4.998c0,0,1.002-3-1.354-7.429c0,0-5.785-11.568-9.285-18.425c0,0-7.411-11.856-7.84-13.57
	c0,0-1.371-1.499-1.228-5.927c0,0,2.754-21.354,2.254-30.853c0,0-0.416-10.284-2.416-21.782c0,0-2.174-11.712-3.745-17.069
	c0,0-1.324-5.07-0.324-10.568c0,0,1.161-7.429,3.661-14.998c0,0,4.833-10.928,6.833-23.782c0,0,4.74-17.462,2.526-26.104
	c0,0,5.054,2,11.803,3.249c0,0,5.615,1.072,11.221,0.857c5.607,0.215,11.218-0.857,11.218-0.857
	c6.749-1.249,11.801-3.249,11.801-3.249c-2.214,8.642,2.535,26.104,2.535,26.104c1.999,12.854,6.838,23.782,6.838,23.782
	c2.499,7.569,3.661,14.998,3.661,14.998c1,5.498-0.315,10.568-0.315,10.568c-1.572,5.357-3.739,17.069-3.739,17.069
	c-1.999,11.498-2.404,21.782-2.404,21.782c-0.499,9.499,2.27,30.853,2.27,30.853c0.144,4.428-1.224,5.927-1.224,5.927
	c-0.428,1.714-7.825,13.57-7.825,13.57c-3.5,6.856-9.267,18.425-9.267,18.425c-2.357,4.429-1.348,7.429-1.348,7.429
	c0.572,4.642,7.103,4.998,7.103,4.998c3.355,0.357,5.852-2.07,5.852-2.07c1.286,2.142,6.003,3.07,6.003,3.07
	c3.214,0.285,3.977-1.57,3.977-1.57c1,3.285,6.149,3.069,6.149,3.069c3.999-0.07,4.984-1.642,4.984-1.642
	c0.714,2,5.212,2.571,5.212,2.571c3.428,0,5.14-2.357,5.14-2.357c0.785,1.571,4.27,1.428,4.27,1.428
	c4.855-0.499,7.547-7.355,7.547-7.355c2.286-6.213,1.429-21.354,1.429-21.354c0-3.499-1.643-15.302-1.643-15.302
	c-0.644-7.855,2.714-17.926,2.714-17.926c2.071-5.927,10.498-31.504,10.498-31.504c6.214-19.711,11.213-45.231,11.213-45.231
	c1.071-9.069,1.214-14.033,1.214-14.033c0.5-16.926-1-39.788-1-39.788c-1-15.927-9.498-58.273-9.498-58.273
	c-3.356-14.926-8.285-54.981-8.285-54.981c-1.856-18.567-0.642-41.059-0.642-41.059c0.142-16.64,1.785-29.787,1.785-29.787
	c0.786,4.571,6.142,10.222,6.142,10.222c3.856,4.642,9.927,8.463,9.927,8.463c2.285,2,7.784,7.362,7.784,7.362
	c0.144,3.857,2.071,12.954,2.071,12.954c1.286,5.427,6.12,15.184,6.12,15.184c4.477,10.458,13.806,24.906,13.806,24.906
	c1.144,1.572,0.857,4.638,0.857,4.638c-0.072,6.141-4.357,12.44-4.357,12.44c-3.999,5.285-5.713,11.874-5.713,11.874
	c-0.5,2.285,0,6.551,0,6.551c0.928,9.213-0.071,16.499-0.071,16.499c-0.643,4.499,1.357,5.235,1.357,5.235
	c1.999,0.714,5.284-0.451,5.284-0.451c4.214-1.214,5-8.814,5-8.814c0.214-2.929,0.5-9.104,0.5-9.104
	c0.142-4.142,4.499-4.446,4.499-4.446c3.57-0.215,5.355,2.572,5.355,2.572c2.357,4.428,2.644,10.552,2.644,10.552
	c0.142,8.57-2.144,14.034-2.144,14.034c-2.999,8.07-2.714,9.529-2.714,9.529c0.357,6.213,7.285,5.102,7.285,5.102
	c5.713,0,7.582-5.938,7.582-5.938c1.041,3.469,6.33,3.15,6.33,3.15c5.55-0.173,6.938-5.62,6.938-5.62
	c3.295,0.953,5.896-1.935,5.896-1.935c3.642-3.382,3.901-11.464,3.901-11.464c1.216,0.086,3.036-1.358,3.036-1.358
	c3.035-2.602,3.469-10.914,3.469-10.914c1.128-5.637,0-16.323,0-16.323c-0.434-3.902-6.505-19.276-6.505-19.276
	c-3.034-7.197-7.109-20.457-7.109-20.457c-1.301-5.723-3.382-15.34-3.382-15.34c-3.902-17.603-11.014-43.059-11.014-43.059
	c-4.249-13.007-14.567-35.873-14.567-35.873c-8.152-14.222-19.772-27.79-19.772-27.79c-20.725-20.552-36.594-27.564-36.594-27.564
	c-12.228-4.942-26.362-10.212-26.362-10.212c-5.289-2.168-5.463-6.816-5.463-6.816l0.087-4.979
	c-0.174-2.082,0.087-3.532,0.087-3.532c5.029-5.116,11.88-15.884,11.88-15.884c4.335-8.238,6.765-17.663,6.765-17.663
	c2.428,0.868,5.376,0.188,5.376,0.188c3.729-0.26,5.982-5.673,5.982-5.673c1.476-4.075,3.322-14.922,3.322-14.922
	c1.521-5.473,2.736-13.695,2.736-13.695c0.88-5.884-2.128-10.53-2.128-10.53c-2.455-4.608-6.994-4.964-6.994-4.964
	c3.345-14.291,0-28.324,0-28.324c-3.04-17.332-17.988-33.143-17.988-33.143C35.683-329.363,0-328.306,0-328.306
	s-35.686-1.057-55.257,24.485C-55.257-303.821-70.201-288.01-73.242-270.678z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-71.354-265.742c0,0-3.237,13.743,0,27.573
	c0,0-4.392,0.39-6.768,4.85c0,0-2.911,4.541-2.06,10.235c0,0,1.177,8.03,2.649,13.327c0,0,1.787,10.59,3.214,14.535
	c0,0,2.182,5.283,5.79,5.535c0,0,2.853,0.687,5.203-0.152c0,0,2.35,9.23,6.546,17.202c0,0,6.629,10.538,11.497,15.489
	c0,0,0.251,1.421,0.084,3.435l0.084,4.851c0,0-0.168,4.558-5.287,6.656c0,0-13.679,5.275-25.512,10.058
	c0,0-15.357,7.08-35.414,26.969c0,0-11.245,13.343-19.133,27.105c0,0-9.986,22.376-14.098,34.964c0,0-6.882,24.916-10.658,41.952
	c0,0-2.014,9.407-3.273,14.946c0,0-3.944,12.972-6.881,19.937c0,0-5.875,15.006-6.294,18.782c0,0-1.091,10.444,0,15.899
	c0,0,0.419,8.117,3.357,10.636c0,0,1.762,1.418,2.937,1.334c0,0,0.251,7.901,3.776,11.175c0,0,2.518,2.836,5.707,1.913
	c0,0,1.342,5.336,6.713,5.503c0,0,5.119,0.36,6.126-2.995c0,0,1.809,5.812,7.338,5.812c0,0,6.704,1.146,7.049-4.866
	c0,0,0.277-1.339-2.626-9.149c0,0-2.212-5.186-2.073-13.479c0,0,0.276-5.849,2.557-10.134c0,0,1.728-2.653,5.183-2.446
	c0,0,4.216,0.341,4.354,4.35c0,0,0.277,6.039,0.484,8.872c0,0,0.761,7.43,4.838,8.604c0,0,3.179,1.166,5.115,0.476
	c0,0,1.935-0.671,1.313-5.025c0,0-0.968-6.926-0.069-15.842c0,0,0.483-4.079,0-6.29c0,0-1.659-6.273-5.529-11.388
	c0,0-4.147-5.992-4.216-11.936c0,0-0.277-2.93,0.829-4.45c0,0,9.028-13.756,13.36-23.876c0,0,4.679-9.311,5.923-14.562
	c0,0,1.866-8.697,2.004-12.429c0,0,5.322-5.101,7.533-7.036c0,0,5.875-3.594,9.607-8.086c0,0,5.184-5.372,5.944-9.795
	c0,0,1.59,12.944,1.729,29.047c0,0,1.175,22.076-0.622,40.046c0,0-4.769,39.187-8.017,53.632c0,0-8.225,41.42-9.193,56.832
	c0,0-1.451,22.442-0.967,38.822c0,0,0.138,4.906,1.175,13.683c0,0,4.838,25.053,10.851,44.128c0,0,8.155,25.013,10.159,30.749
	c0,0,3.249,9.891,2.627,17.493c0,0-1.59,11.55-1.59,14.938c0,0-0.829,14.82,1.382,20.834c0,0,2.609,6.635,7.309,7.117
	c0,0,3.362,0.14,4.122-1.382c0,0,1.649,2.281,4.967,2.281c0,0,4.347-0.553,5.038-2.488c0,0,0.952,1.521,4.823,1.589
	c0,0,4.983,0.208,5.95-2.971c0,0,0.735,1.796,3.845,1.521c0,0,4.563-0.898,5.807-2.973c0,0,2.414,2.351,5.662,2.004
	c0,0,6.324-0.345,6.877-4.837c0,0,0.982-2.902-1.299-7.188c0,0-5.565-11.197-8.951-17.832c0,0-7.148-11.472-7.562-13.131
	c0,0-1.318-1.452-1.18-5.737c0,0,2.717-20.665,2.233-29.857c0,0-0.368-9.951-2.303-21.078c0,0-2.075-11.336-3.595-16.519
	c0,0-1.265-4.907-0.297-10.229c0,0,1.148-7.188,3.567-14.515c0,0,4.719-10.574,6.654-23.015c0,0,4.631-16.898,2.488-25.261
	c0,0,4.912,1.935,11.443,3.145c0,0,5.452,1.036,10.876,0.829c5.427,0.207,10.873-0.829,10.873-0.829
	c6.531-1.21,11.44-3.145,11.44-3.145c-2.143,8.362,2.497,25.261,2.497,25.261c1.936,12.44,6.66,23.015,6.66,23.015
	c2.419,7.326,3.568,14.515,3.568,14.515c0.968,5.321-0.288,10.229-0.288,10.229c-1.52,5.183-3.588,16.519-3.588,16.519
	c-1.935,11.127-2.29,21.078-2.29,21.078c-0.483,9.192,2.25,29.857,2.25,29.857c0.139,4.285-1.174,5.737-1.174,5.737
	c-0.415,1.659-7.546,13.131-7.546,13.131c-3.387,6.635-8.931,17.832-8.931,17.832c-2.281,4.285-1.291,7.188-1.291,7.188
	c0.553,4.492,6.889,4.837,6.889,4.837c3.248,0.347,5.674-2.004,5.674-2.004c1.244,2.074,5.821,2.973,5.821,2.973
	c3.11,0.275,3.855-1.521,3.855-1.521c0.968,3.179,5.964,2.971,5.964,2.971c3.87-0.068,4.833-1.589,4.833-1.589
	c0.69,1.936,5.054,2.488,5.054,2.488c3.317,0,4.985-2.281,4.985-2.281c0.76,1.521,4.14,1.382,4.14,1.382
	c4.7-0.482,7.323-7.117,7.323-7.117c2.212-6.014,1.383-20.812,1.383-20.812c0-3.387-1.59-14.914-1.59-14.914
	c-0.622-7.602,2.626-17.47,2.626-17.47c2.005-5.737,10.16-30.714,10.16-30.714c6.013-19.076,10.851-44.091,10.851-44.091
	c1.036-8.777,1.175-13.676,1.175-13.676c0.483-16.38-0.968-38.776-0.968-38.776c-0.967-15.412-9.192-56.797-9.192-56.797
	c-3.248-14.445-8.017-53.587-8.017-53.587c-1.797-17.971-0.622-40.016-0.622-40.016C72.54-33.454,74.13-46.38,74.13-46.38
	c0.761,4.423,5.943,9.804,5.943,9.804c3.733,4.492,9.607,8.095,9.607,8.095c2.212,1.935,7.534,7.047,7.534,7.047
	c0.138,3.732,2.004,12.438,2.004,12.438c1.243,5.253,5.922,14.572,5.922,14.572c4.333,10.121,13.359,23.894,13.359,23.894
	c1.106,1.52,0.83,4.452,0.83,4.452c-0.068,5.943-4.216,11.94-4.216,11.94c-3.87,5.115-5.529,11.394-5.529,11.394
	c-0.483,2.211,0,6.292,0,6.292c0.898,8.916-0.068,15.843-0.068,15.843c-0.622,4.354,1.312,5.024,1.312,5.024
	c1.936,0.691,5.114-0.474,5.114-0.474c4.078-1.175,4.838-8.602,4.838-8.602c0.208-2.834,0.484-8.873,0.484-8.873
	c0.138-4.008,4.354-4.352,4.354-4.352c3.456-0.207,5.185,2.446,5.185,2.446c2.279,4.285,2.557,10.13,2.557,10.13
	c0.138,8.293-2.073,13.475-2.073,13.475c-2.902,7.81-2.627,9.146-2.627,9.146c0.347,6.013,7.05,4.865,7.05,4.865
	c5.529,0,7.338-5.818,7.338-5.818c1.007,3.357,6.126,2.995,6.126,2.995c5.37-0.168,6.714-5.506,6.714-5.506
	c3.188,0.923,5.706-1.917,5.706-1.917c3.524-3.272,3.776-11.179,3.776-11.179c1.176,0.084,2.938-1.336,2.938-1.336
	c2.937-2.519,3.356-10.643,3.356-10.643c1.091-5.455,0-15.909,0-15.909c-0.42-3.776-6.294-18.795-6.294-18.795
	c-2.937-6.965-6.882-19.945-6.882-19.945c-1.258-5.539-3.271-14.954-3.271-14.954c-3.777-17.035-10.658-41.977-10.658-41.977
	c-4.112-12.588-14.099-34.985-14.099-34.985c-7.889-13.763-19.134-27.131-19.134-27.131c-20.057-19.889-35.414-27-35.414-27
	c-11.832-4.784-25.511-10.085-25.511-10.085c-5.119-2.098-5.287-6.659-5.287-6.659l0.084-4.851
	c-0.168-2.014,0.084-3.441,0.084-3.441c4.867-4.951,11.497-15.51,11.497-15.51c4.196-7.973,6.545-17.226,6.545-17.226
	c2.351,0.84,5.203,0.143,5.203,0.143c3.609-0.252,5.791-5.55,5.791-5.55c1.426-3.944,3.214-14.546,3.214-14.546
	c1.471-5.296,2.648-13.35,2.648-13.35c0.851-5.694-2.061-10.27-2.061-10.27c-2.376-4.46-6.767-4.867-6.767-4.867
	c3.236-13.83,0-27.609,0-27.609c-2.943-16.773-17.59-32.074-17.59-32.074c-18.939-24.718-53.765-23.695-53.765-23.695
	s-34.827-1.023-53.767,23.695C-53.768-297.816-68.411-282.515-71.354-265.742z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-69.465-260.805c0,0-3.129,13.485,0,26.854
	c0,0-4.245,0.44-6.542,4.751c0,0-2.814,4.465-1.991,9.97c0,0,1.137,7.859,2.56,12.979c0,0,1.728,10.345,3.107,14.158
	c0,0,2.109,5.167,5.597,5.411c0,0,2.758,0.702,5.029-0.109c0,0,2.272,9.056,6.328,16.763c0,0,6.409,10.326,11.114,15.112
	c0,0,0.243,1.398,0.081,3.345l0.081,4.723c0,0-0.162,4.47-5.111,6.498c0,0-13.223,5.304-24.661,9.928
	c0,0-14.845,7.175-34.233,26.401c0,0-10.87,13.14-18.496,26.444c0,0-9.653,21.904-13.628,34.072c0,0-6.652,24.4-10.303,40.868
	c0,0-1.947,9.204-3.163,14.558c0,0-3.813,12.692-6.652,19.425c0,0-5.679,14.649-6.084,18.3c0,0-1.055,10.212,0,15.484
	c0,0,0.405,7.929,3.244,10.362c0,0,1.704,1.394,2.84,1.312c0,0,0.243,7.726,3.65,10.89c0,0,2.434,2.788,5.516,1.895
	c0,0,1.298,5.227,6.49,5.389c0,0,4.948,0.404,5.922-2.841c0,0,1.748,5.692,7.093,5.692c0,0,6.481,1.184,6.815-4.629
	c0,0,0.267-1.218-2.539-8.767c0,0-2.138-4.904-2.004-12.922c0,0,0.267-5.568,2.471-9.712c0,0,1.671-2.52,5.011-2.318
	c0,0,4.076,0.379,4.209,4.254c0,0,0.267,5.9,0.468,8.641c0,0,0.735,7.256,4.677,8.393c0,0,3.073,1.166,4.944,0.498
	c0,0,1.87-0.606,1.269-4.815c0,0-0.935-6.567-0.067-15.186c0,0,0.468-3.894,0-6.031c0,0-1.603-5.962-5.345-10.906
	c0,0-4.008-5.689-4.075-11.435c0,0-0.267-2.797,0.802-4.267c0,0,8.727-13.076,12.915-22.858c0,0,4.522-8.874,5.725-13.95
	c0,0,1.803-8.305,1.937-11.913c0,0,5.144-4.849,7.282-6.719c0,0,5.679-3.375,9.287-7.718c0,0,5.011-5.099,5.745-9.375
	c0,0,1.537,12.725,1.671,28.291c0,0,1.135,21.634-0.602,39.004c0,0-4.609,38.28-7.749,52.244c0,0-7.951,40.461-8.886,55.36
	c0,0-1.403,21.979-0.936,37.813c0,0,0.134,4.843,1.136,13.327c0,0,4.677,24.552,10.489,42.991c0,0,7.884,24.417,9.821,29.962
	c0,0,3.14,9.692,2.539,17.041c0,0-1.536,11.277-1.536,14.55c0,0-0.802,14.481,1.336,20.294c0,0,2.539,6.414,7.082,6.882
	c0,0,3.257,0.134,3.992-1.336c0,0,1.602,2.204,4.809,2.204c0,0,4.211-0.534,4.879-2.404c0,0,0.929,1.47,4.67,1.536
	c0,0,4.828,0.2,5.763-2.872c0,0,0.717,1.736,3.723,1.469c0,0,4.421-0.868,5.624-2.872c0,0,2.343,2.271,5.483,1.938
	c0,0,6.128-0.334,6.662-4.678c0,0,0.961-2.806-1.244-6.947c0,0-5.344-10.823-8.618-17.237c0,0-6.883-11.09-7.284-12.694
	c0,0-1.264-1.402-1.131-5.545c0,0,2.679-19.976,2.212-28.862c0,0-0.319-9.62-2.19-20.377c0,0-1.976-10.956-3.445-15.967
	c0,0-1.206-4.744-0.27-9.888c0,0,1.136-6.948,3.474-14.03c0,0,4.604-10.222,6.475-22.248c0,0,4.521-16.335,2.45-24.419
	c0,0,4.768,1.871,11.082,3.04c0,0,5.289,1.002,10.534,0.802c5.243,0.2,10.526-0.802,10.526-0.802
	c6.314-1.169,11.079-3.04,11.079-3.04c-2.071,8.084,2.461,24.419,2.461,24.419c1.871,12.026,6.481,22.248,6.481,22.248
	c2.339,7.082,3.476,14.03,3.476,14.03c0.937,5.144-0.259,9.888-0.259,9.888c-1.47,5.011-3.438,15.967-3.438,15.967
	c-1.869,10.757-2.175,20.377-2.175,20.377c-0.468,8.887,2.231,28.862,2.231,28.862c0.133,4.143-1.126,5.545-1.126,5.545
	c-0.401,1.604-7.267,12.694-7.267,12.694c-3.273,6.414-8.596,17.237-8.596,17.237c-2.204,4.142-1.234,6.947-1.234,6.947
	c0.534,4.344,6.677,4.678,6.677,4.678c3.14,0.334,5.496-1.938,5.496-1.938c1.201,2.004,5.639,2.872,5.639,2.872
	c3.007,0.268,3.734-1.469,3.734-1.469c0.936,3.072,5.777,2.872,5.777,2.872c3.742-0.066,4.682-1.536,4.682-1.536
	c0.668,1.87,4.896,2.404,4.896,2.404c3.207,0,4.831-2.204,4.831-2.204c0.734,1.47,4.01,1.336,4.01,1.336
	c4.543-0.468,7.1-6.882,7.1-6.882c2.138-5.812,1.336-20.268,1.336-20.268c0-3.274-1.536-14.524-1.536-14.524
	c-0.603-7.349,2.538-17.016,2.538-17.016c1.938-5.545,9.82-29.924,9.82-29.924c5.813-18.44,10.49-42.949,10.49-42.949
	c1.002-8.485,1.135-13.318,1.135-13.318c0.469-15.834-0.935-37.765-0.935-37.765c-0.935-14.897-8.886-55.321-8.886-55.321
	c-3.141-13.963-7.75-52.193-7.75-52.193c-1.737-17.37-0.602-38.97-0.602-38.97c0.135-15.566,1.67-28.271,1.67-28.271
	c0.735,4.276,5.746,9.386,5.746,9.386c3.608,4.342,9.286,7.726,9.286,7.726c2.139,1.871,7.283,6.732,7.283,6.732
	C94.597-16.097,96.4-7.78,96.4-7.78c1.203,5.077,5.726,13.959,5.726,13.959c4.188,9.783,12.915,22.879,12.915,22.879
	c1.068,1.47,0.802,4.268,0.802,4.268c-0.067,5.746-4.076,11.441-4.076,11.441c-3.741,4.943-5.344,10.911-5.344,10.911
	c-0.468,2.139,0,6.033,0,6.033c0.868,8.618-0.067,15.188-0.067,15.188c-0.601,4.209,1.27,4.813,1.27,4.813
	c1.871,0.668,4.944-0.496,4.944-0.496c3.941-1.136,4.677-8.39,4.677-8.39c0.2-2.739,0.468-8.64,0.468-8.64
	c0.133-3.875,4.209-4.257,4.209-4.257c3.34-0.199,5.01,2.318,5.01,2.318c2.205,4.143,2.473,9.708,2.473,9.708
	c0.134,8.018-2.005,12.915-2.005,12.915c-2.806,7.55-2.538,8.766-2.538,8.766c0.334,5.813,6.814,4.626,6.814,4.626
	c5.345,0,7.093-5.696,7.093-5.696c0.974,3.245,5.922,2.839,5.922,2.839c5.191-0.162,6.489-5.39,6.489-5.39
	c3.083,0.892,5.518-1.899,5.518-1.899c3.406-3.164,3.649-10.895,3.649-10.895c1.136,0.081,2.839-1.314,2.839-1.314
	c2.84-2.434,3.245-10.37,3.245-10.37c1.056-5.272,0-15.495,0-15.495c-0.405-3.649-6.084-18.312-6.084-18.312
	c-2.839-6.733-6.651-19.436-6.651-19.436c-1.218-5.354-3.164-14.566-3.164-14.566c-3.65-16.467-10.303-40.895-10.303-40.895
	c-3.975-12.169-13.628-34.097-13.628-34.097c-7.626-13.304-18.496-26.473-18.496-26.473c-19.388-19.225-34.232-26.436-34.232-26.436
	c-11.439-4.624-24.661-9.956-24.661-9.956c-4.949-2.028-5.111-6.502-5.111-6.502l0.081-4.724c-0.162-1.947,0.081-3.35,0.081-3.35
	c4.705-4.787,11.114-15.137,11.114-15.137c4.056-7.707,6.327-16.788,6.327-16.788c2.271,0.811,5.029,0.098,5.029,0.098
	c3.488-0.243,5.598-5.427,5.598-5.427c1.379-3.812,3.106-14.17,3.106-14.17c1.422-5.12,2.561-13.006,2.561-13.006
	c0.823-5.504-1.991-10.007-1.991-10.007c-2.297-4.311-6.542-4.771-6.542-4.771c3.129-13.369,0-26.893,0-26.893
	C66.62-277.02,52.273-291.81,52.273-291.81C33.966-315.703,0-314.715,0-314.715s-33.97-0.988-52.278,22.905
	C-52.278-291.81-66.621-277.02-69.465-260.805z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-67.577-255.869c0,0-3.021,13.227,0,26.135
	c0,0-4.099,0.49-6.317,4.652c0,0-2.717,4.39-1.922,9.705c0,0,1.098,7.689,2.472,12.632c0,0,1.668,10.099,2.999,13.78
	c0,0,2.037,5.052,5.405,5.287c0,0,2.663,0.718,4.856-0.065c0,0,2.193,8.881,6.109,16.322c0,0,6.188,10.116,10.73,14.737
	c0,0,0.235,1.374,0.078,3.253l0.078,4.596c0,0-0.156,4.382-4.934,6.34c0,0-12.767,5.332-23.811,9.797
	c0,0-14.333,7.272-33.053,25.834c0,0-10.495,12.938-17.858,25.783c0,0-9.32,21.432-13.158,33.181c0,0-6.423,23.884-9.947,39.784
	c0,0-1.88,9.001-3.055,14.17c0,0-3.681,12.412-6.422,18.913c0,0-5.483,14.291-5.875,17.815c0,0-1.018,9.979,0,15.07
	c0,0,0.392,7.739,3.133,10.089c0,0,1.645,1.37,2.742,1.291c0,0,0.235,7.549,3.524,10.604c0,0,2.35,2.738,5.326,1.878
	c0,0,1.253,5.114,6.266,5.271c0,0,4.778,0.448,5.718-2.685c0,0,1.688,5.571,6.848,5.571c0,0,6.257,1.221,6.58-4.392
	c0,0,0.258-1.097-2.451-8.386c0,0-2.065-4.622-1.936-12.362c0,0,0.258-5.291,2.387-9.29c0,0,1.613-2.386,4.838-2.191
	c0,0,3.935,0.417,4.064,4.157c0,0,0.258,5.765,0.452,8.409c0,0,0.709,7.083,4.515,8.18c0,0,2.967,1.166,4.773,0.521
	c0,0,1.807-0.541,1.226-4.604c0,0-0.903-6.211-0.065-14.531c0,0,0.452-3.707,0-5.772c0,0-1.548-5.65-5.16-10.424
	c0,0-3.87-5.386-3.935-10.934c0,0-0.258-2.662,0.774-4.081c0,0,8.426-12.397,12.47-21.844c0,0,4.366-8.435,5.527-13.337
	c0,0,1.742-7.913,1.871-11.397c0,0,4.967-4.597,7.031-6.403c0,0,5.483-3.155,8.967-7.348c0,0,4.837-4.828,5.547-8.956
	c0,0,1.484,12.506,1.613,27.536c0,0,1.096,21.191-0.581,37.963c0,0-4.451,37.374-7.483,50.854c0,0-7.676,39.504-8.579,53.89
	c0,0-1.354,21.518-0.903,36.806c0,0,0.129,4.778,1.097,12.971c0,0,4.515,24.051,10.127,41.854c0,0,7.612,23.823,9.483,29.177
	c0,0,3.031,9.493,2.451,16.588c0,0-1.484,11.003-1.484,14.164c0,0-0.774,14.142,1.29,19.753c0,0,2.47,6.193,6.857,6.645
	c0,0,3.15,0.129,3.86-1.29c0,0,1.556,2.129,4.652,2.129c0,0,4.076-0.517,4.721-2.322c0,0,0.904,1.419,4.517,1.483
	c0,0,4.672,0.193,5.575-2.773c0,0,0.699,1.677,3.601,1.419c0,0,4.279-0.839,5.44-2.773c0,0,2.272,2.192,5.304,1.87
	c0,0,5.932-0.322,6.448-4.516c0,0,0.94-2.709-1.188-6.708c0,0-5.124-10.45-8.285-16.643c0,0-6.62-10.708-7.007-12.257
	c0,0-1.211-1.354-1.082-5.354c0,0,2.642-19.287,2.19-27.867c0,0-0.269-9.289-2.076-19.674c0,0-1.877-10.579-3.296-15.417
	c0,0-1.146-4.58-0.243-9.547c0,0,1.124-6.708,3.382-13.546c0,0,4.49-9.869,6.296-21.481c0,0,4.411-15.771,2.412-23.577
	c0,0,4.625,1.808,10.721,2.937c0,0,5.126,0.967,10.19,0.773c5.062,0.193,10.183-0.773,10.183-0.773
	c6.096-1.129,10.718-2.937,10.718-2.937c-2,7.807,2.424,23.577,2.424,23.577c1.807,11.612,6.303,21.481,6.303,21.481
	c2.258,6.838,3.384,13.546,3.384,13.546c0.902,4.967-0.232,9.547-0.232,9.547c-1.419,4.838-3.287,15.417-3.287,15.417
	c-1.806,10.385-2.06,19.674-2.06,19.674c-0.452,8.58,2.211,27.867,2.211,27.867c0.129,3.999-1.076,5.354-1.076,5.354
	c-0.388,1.549-6.987,12.257-6.987,12.257c-3.16,6.192-8.26,16.643-8.26,16.643c-2.129,3.999-1.178,6.708-1.178,6.708
	c0.516,4.193,6.462,4.516,6.462,4.516c3.032,0.322,5.319-1.87,5.319-1.87c1.161,1.935,5.457,2.773,5.457,2.773
	c2.902,0.258,3.613-1.419,3.613-1.419c0.903,2.967,5.593,2.773,5.593,2.773c3.611-0.064,4.527-1.483,4.527-1.483
	c0.646,1.806,4.74,2.322,4.74,2.322c3.097,0,4.676-2.129,4.676-2.129c0.709,1.419,3.882,1.29,3.882,1.29
	c4.387-0.451,6.874-6.645,6.874-6.645c2.064-5.611,1.29-19.725,1.29-19.725c0-3.161-1.483-14.134-1.483-14.134
	c-0.58-7.097,2.452-16.562,2.452-16.562c1.869-5.354,9.481-29.133,9.481-29.133c5.612-17.804,10.127-41.81,10.127-41.81
	c0.968-8.191,1.098-12.961,1.098-12.961c0.451-15.287-0.903-36.751-0.903-36.751c-0.903-14.385-8.579-53.846-8.579-53.846
	c-3.032-13.48-7.483-50.8-7.483-50.8c-1.677-16.772-0.581-37.926-0.581-37.926c0.13-15.029,1.613-27.513,1.613-27.513
	c0.71,4.128,5.547,8.968,5.547,8.968c3.484,4.192,8.968,7.358,8.968,7.358c2.063,1.806,7.03,6.416,7.03,6.416
	c0.129,3.483,1.871,11.409,1.871,11.409c1.161,4.903,5.527,13.349,5.527,13.349c4.044,9.446,12.47,21.864,12.47,21.864
	c1.032,1.419,0.774,4.083,0.774,4.083c-0.065,5.548-3.936,10.941-3.936,10.941c-3.612,4.773-5.16,10.431-5.16,10.431
	c-0.452,2.064,0,5.773,0,5.773c0.839,8.321-0.064,14.531-0.064,14.531c-0.581,4.064,1.226,4.604,1.226,4.604
	c1.807,0.645,4.773-0.52,4.773-0.52c3.806-1.097,4.515-8.178,4.515-8.178c0.194-2.645,0.452-8.408,0.452-8.408
	c0.129-3.74,4.064-4.16,4.064-4.16c3.225-0.192,4.838,2.19,4.838,2.19c2.129,4,2.387,9.286,2.387,9.286
	c0.129,7.741-1.936,12.355-1.936,12.355c-2.71,7.289-2.451,8.386-2.451,8.386c0.322,5.611,6.58,4.388,6.58,4.388
	c5.159,0,6.848-5.577,6.848-5.577c0.939,3.133,5.718,2.685,5.718,2.685c5.013-0.157,6.267-5.275,6.267-5.275
	c2.976,0.862,5.325-1.881,5.325-1.881c3.29-3.056,3.525-10.609,3.525-10.609c1.096,0.078,2.741-1.294,2.741-1.294
	c2.74-2.35,3.133-10.098,3.133-10.098c1.018-5.091,0-15.08,0-15.08c-0.393-3.525-5.874-17.832-5.874-17.832
	c-2.742-6.501-6.423-18.924-6.423-18.924c-1.175-5.17-3.055-14.179-3.055-14.179c-3.524-15.899-9.947-39.814-9.947-39.814
	c-3.838-11.748-13.158-33.207-13.158-33.207c-7.363-12.845-17.858-25.815-17.858-25.815c-18.72-18.563-33.053-25.873-33.053-25.873
	c-11.044-4.464-23.811-9.828-23.811-9.828c-4.778-1.958-4.935-6.345-4.935-6.345l0.078-4.596c-0.157-1.88,0.078-3.26,0.078-3.26
	c4.543-4.621,10.73-14.763,10.73-14.763c3.916-7.441,6.109-16.35,6.109-16.35c2.193,0.783,4.856,0.053,4.856,0.053
	c3.368-0.235,5.404-5.304,5.404-5.304c1.331-3.681,2.999-13.794,2.999-13.794c1.374-4.943,2.473-12.661,2.473-12.661
	c0.795-5.315-1.922-9.746-1.922-9.746c-2.219-4.162-6.317-4.674-6.317-4.674c3.021-12.908,0-26.178,0-26.178
	c-2.746-15.654-16.791-29.936-16.791-29.936C33.108-308.874,0-307.92,0-307.92s-33.112-0.954-50.789,22.115
	C-50.789-285.805-64.831-271.523-67.577-255.869z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-65.688-250.933c0,0-2.913,12.969,0,25.416
	c0,0-3.953,0.54-6.091,4.553c0,0-2.62,4.315-1.854,9.44c0,0,1.059,7.518,2.384,12.285c0,0,1.608,9.854,2.892,13.403
	c0,0,1.964,4.935,5.212,5.162c0,0,2.568,0.734,4.682-0.021c0,0,2.115,8.707,5.891,15.882c0,0,5.967,9.904,10.348,14.36
	c0,0,0.226,1.35,0.075,3.163l0.076,4.467c0,0-0.151,4.295-4.759,6.183c0,0-12.31,5.361-22.96,9.666c0,0-13.821,7.368-31.872,25.267
	c0,0-10.121,12.736-17.22,25.122c0,0-8.988,20.961-12.689,32.29c0,0-6.193,23.367-9.592,38.699c0,0-1.812,8.798-2.945,13.783
	c0,0-3.55,12.133-6.194,18.4c0,0-5.286,13.935-5.664,17.334c0,0-0.982,9.745,0,14.654c0,0,0.378,7.55,3.021,9.815
	c0,0,1.586,1.347,2.643,1.271c0,0,0.227,7.372,3.399,10.317c0,0,2.266,2.69,5.136,1.859c0,0,1.208,5.006,6.042,5.157
	c0,0,4.607,0.492,5.514-2.529c0,0,1.627,5.45,6.603,5.45c0,0,6.034,1.258,6.345-4.154c0,0,0.249-0.976-2.364-8.005
	c0,0-1.99-4.339-1.866-11.804c0,0,0.249-5.011,2.302-8.868c0,0,1.555-2.251,4.665-2.065c0,0,3.794,0.456,3.919,4.064
	c0,0,0.249,5.625,0.435,8.176c0,0,0.684,6.911,4.354,7.968c0,0,2.862,1.166,4.603,0.544c0,0,1.742-0.475,1.182-4.394
	c0,0-0.871-5.851-0.062-13.875c0,0,0.435-3.521,0-5.512c0,0-1.493-5.34-4.976-9.943c0,0-3.732-5.083-3.795-10.433
	c0,0-0.248-2.528,0.747-3.897c0,0,8.125-11.718,12.024-20.827c0,0,4.211-7.997,5.33-12.725c0,0,1.68-7.522,1.804-10.881
	c0,0,4.79-4.345,6.78-6.086c0,0,5.287-2.936,8.646-6.979c0,0,4.665-4.556,5.35-8.537c0,0,1.43,12.287,1.555,26.78
	c0,0,1.057,20.749-0.56,36.922c0,0-4.292,36.467-7.216,49.467c0,0-7.402,38.545-8.272,52.416c0,0-1.307,21.058-0.871,35.8
	c0,0,0.124,4.715,1.057,12.613c0,0,4.354,23.551,9.766,40.717c0,0,7.34,23.229,9.144,28.391c0,0,2.923,9.294,2.363,16.137
	c0,0-1.43,10.729-1.43,13.776c0,0-0.747,13.802,1.244,19.213c0,0,2.4,5.972,6.63,6.407c0,0,3.045,0.125,3.729-1.244
	c0,0,1.51,2.053,4.496,2.053c0,0,3.939-0.498,4.561-2.239c0,0,0.881,1.368,4.364,1.431c0,0,4.517,0.187,5.388-2.674
	c0,0,0.68,1.616,3.48,1.367c0,0,4.136-0.809,5.256-2.675c0,0,2.201,2.115,5.124,1.804c0,0,5.737-0.311,6.234-4.354
	c0,0,0.92-2.612-1.133-6.469c0,0-4.904-10.077-7.952-16.049c0,0-6.355-10.325-6.728-11.818c0,0-1.158-1.307-1.034-5.162
	c0,0,2.604-18.599,2.169-26.872c0,0-0.221-8.957-1.963-18.971c0,0-1.778-10.202-3.146-14.867c0,0-1.087-4.416-0.216-9.206
	c0,0,1.112-6.469,3.289-13.062c0,0,4.375-9.517,6.116-20.713c0,0,4.303-15.209,2.374-22.734c0,0,4.482,1.741,10.36,2.83
	c0,0,4.964,0.933,9.847,0.746c4.883,0.187,9.839-0.746,9.839-0.746c5.878-1.089,10.355-2.83,10.355-2.83
	c-1.928,7.525,2.388,22.734,2.388,22.734c1.741,11.196,6.125,20.713,6.125,20.713c2.177,6.594,3.29,13.062,3.29,13.062
	c0.871,4.79-0.203,9.206-0.203,9.206c-1.369,4.665-3.137,14.867-3.137,14.867c-1.742,10.014-1.945,18.971-1.945,18.971
	c-0.437,8.273,2.19,26.872,2.19,26.872c0.125,3.855-1.026,5.162-1.026,5.162c-0.373,1.493-6.707,11.818-6.707,11.818
	c-3.048,5.972-7.924,16.049-7.924,16.049c-2.054,3.856-1.123,6.469-1.123,6.469c0.498,4.043,6.25,4.354,6.25,4.354
	c2.924,0.312,5.14-1.804,5.14-1.804c1.12,1.866,5.276,2.675,5.276,2.675c2.799,0.249,3.492-1.367,3.492-1.367
	c0.871,2.86,5.406,2.674,5.406,2.674c3.483-0.062,4.377-1.431,4.377-1.431c0.622,1.741,4.583,2.239,4.583,2.239
	c2.985,0,4.521-2.053,4.521-2.053c0.684,1.369,3.753,1.244,3.753,1.244c4.229-0.436,6.649-6.407,6.649-6.407
	c1.99-5.411,1.244-19.183,1.244-19.183c0-3.048-1.431-13.744-1.431-13.744c-0.56-6.843,2.364-16.107,2.364-16.107
	c1.803-5.162,9.143-28.343,9.143-28.343c5.412-17.168,9.766-40.668,9.766-40.668c0.934-7.899,1.059-12.604,1.059-12.604
	c0.435-14.741-0.871-35.738-0.871-35.738c-0.871-13.871-8.273-52.37-8.273-52.37c-2.924-13-7.216-49.407-7.216-49.407
	c-1.617-16.172-0.559-36.88-0.559-36.88c0.124-14.493,1.555-26.757,1.555-26.757c0.685,3.981,5.349,8.55,5.349,8.55
	c3.359,4.044,8.646,6.99,8.646,6.99c1.991,1.742,6.78,6.101,6.78,6.101c0.125,3.359,1.804,10.895,1.804,10.895
	c1.12,4.727,5.33,12.737,5.33,12.737c3.898,9.109,12.023,20.85,12.023,20.85c0.996,1.367,0.747,3.898,0.747,3.898
	c-0.062,5.351-3.795,10.441-3.795,10.441c-3.482,4.603-4.976,9.949-4.976,9.949c-0.436,1.99,0,5.515,0,5.515
	c0.809,8.023-0.062,13.877-0.062,13.877c-0.56,3.918,1.183,4.392,1.183,4.392c1.742,0.622,4.603-0.541,4.603-0.541
	c3.67-1.057,4.354-7.966,4.354-7.966c0.187-2.55,0.435-8.176,0.435-8.176c0.125-3.607,3.919-4.064,3.919-4.064
	c3.11-0.186,4.665,2.063,4.665,2.063c2.053,3.855,2.303,8.864,2.303,8.864c0.123,7.464-1.866,11.796-1.866,11.796
	c-2.613,7.028-2.364,8.004-2.364,8.004c0.311,5.412,6.345,4.149,6.345,4.149c4.977,0,6.604-5.455,6.604-5.455
	c0.906,3.021,5.513,2.527,5.513,2.527c4.834-0.15,6.042-5.159,6.042-5.159c2.87,0.83,5.136-1.864,5.136-1.864
	c3.172-2.945,3.399-10.323,3.399-10.323c1.057,0.075,2.643-1.273,2.643-1.273c2.645-2.266,3.021-9.826,3.021-9.826
	c0.981-4.908,0-14.666,0-14.666c-0.377-3.398-5.664-17.351-5.664-17.351c-2.645-6.268-6.193-18.412-6.193-18.412
	c-1.133-4.984-2.945-13.791-2.945-13.791c-3.399-15.332-9.593-38.733-9.593-38.733c-3.7-11.329-12.688-32.319-12.688-32.319
	c-7.101-12.386-17.221-25.156-17.221-25.156c-18.052-17.9-31.872-25.309-31.872-25.309c-10.649-4.305-22.96-9.7-22.96-9.7
	c-4.607-1.889-4.759-6.188-4.759-6.188l0.075-4.469c-0.15-1.812,0.076-3.169,0.076-3.169c4.38-4.456,10.347-14.39,10.347-14.39
	c3.776-7.175,5.892-15.912,5.892-15.912c2.114,0.755,4.683,0.008,4.683,0.008c3.247-0.226,5.211-5.181,5.211-5.181
	c1.284-3.55,2.894-13.417,2.894-13.417c1.323-4.767,2.383-12.318,2.383-12.318c0.766-5.125-1.854-9.484-1.854-9.484
	c-2.138-4.014-6.091-4.577-6.091-4.577c2.913-12.447,0-25.463,0-25.463c-2.647-15.095-16.392-28.867-16.392-28.867
	C32.25-302.044,0-301.125,0-301.125s-32.254-0.92-49.299,21.325C-49.299-279.799-63.041-266.027-65.688-250.933z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-63.8-245.996c0,0-2.805,12.71,0,24.696
	c0,0-3.806,0.59-5.866,4.455c0,0-2.522,4.239-1.785,9.174c0,0,1.02,7.349,2.296,11.939c0,0,1.549,9.607,2.785,13.025
	c0,0,1.891,4.82,5.018,5.038c0,0,2.473,0.75,4.51,0.022c0,0,2.036,8.533,5.673,15.442c0,0,5.745,9.693,9.964,13.985
	c0,0,0.218,1.326,0.072,3.071l0.073,4.34c0,0-0.145,4.207-4.582,6.025c0,0-11.855,5.39-22.11,9.535c0,0-13.309,7.464-30.692,24.701
	c0,0-9.745,12.532-16.582,24.46c0,0-8.655,20.489-12.219,31.399c0,0-5.964,22.85-9.236,37.615c0,0-1.746,8.594-2.837,13.394
	c0,0-3.418,11.852-5.964,17.889c0,0-5.091,13.577-5.454,16.851c0,0-0.946,9.512,0,14.239c0,0,0.363,7.361,2.909,9.543
	c0,0,1.527,1.321,2.545,1.248c0,0,0.219,7.195,3.273,10.032c0,0,2.182,2.643,4.946,1.842c0,0,1.163,4.896,5.818,5.04
	c0,0,4.437,0.536,5.309-2.373c0,0,1.568,5.329,6.36,5.329c0,0,5.81,1.296,6.109-3.916c0,0,0.24-0.854-2.276-7.624
	c0,0-1.917-4.057-1.797-11.244c0,0,0.24-4.733,2.216-8.446c0,0,1.498-2.117,4.493-1.938c0,0,3.654,0.494,3.773,3.969
	c0,0,0.24,5.487,0.42,7.943c0,0,0.659,6.738,4.193,7.756c0,0,2.755,1.166,4.432,0.567c0,0,1.677-0.41,1.138-4.184
	c0,0-0.838-5.492-0.06-13.22c0,0,0.42-3.336,0-5.253c0,0-1.437-5.027-4.792-9.461c0,0-3.593-4.78-3.653-9.932
	c0,0-0.24-2.396,0.718-3.713c0,0,7.825-11.038,11.579-19.811c0,0,4.055-7.56,5.133-12.112c0,0,1.617-7.131,1.737-10.365
	c0,0,4.612-4.094,6.529-5.771c0,0,5.091-2.716,8.326-6.609c0,0,4.492-4.284,5.151-8.118c0,0,1.378,12.068,1.498,26.024
	c0,0,1.018,20.307-0.539,35.881c0,0-4.133,35.56-6.949,48.078c0,0-7.128,37.587-7.966,50.944c0,0-1.258,20.595-0.839,34.791
	c0,0,0.12,4.651,1.019,12.258c0,0,4.192,23.048,9.404,39.58c0,0,7.068,22.633,8.805,27.604c0,0,2.815,9.095,2.276,15.684
	c0,0-1.378,10.455-1.378,13.391c0,0-0.719,13.462,1.198,18.673c0,0,2.331,5.75,6.404,6.169c0,0,2.94,0.12,3.599-1.198
	c0,0,1.463,1.977,4.338,1.977c0,0,3.803-0.479,4.402-2.155c0,0,0.857,1.316,4.211,1.377c0,0,4.363,0.18,5.201-2.575
	c0,0,0.662,1.557,3.358,1.317c0,0,3.995-0.778,5.073-2.575c0,0,2.129,2.036,4.945,1.736c0,0,5.54-0.3,6.019-4.192
	c0,0,0.899-2.517-1.077-6.23c0,0-4.684-9.703-7.619-15.453c0,0-6.092-9.942-6.451-11.381c0,0-1.104-1.258-0.984-4.972
	c0,0,2.566-17.909,2.147-25.876c0,0-0.172-8.625-1.849-18.27c0,0-1.68-9.822-2.997-14.314c0,0-1.028-4.253-0.19-8.865
	c0,0,1.1-6.229,3.197-12.579c0,0,4.26-9.164,5.937-19.946c0,0,4.193-14.645,2.336-21.893c0,0,4.339,1.677,9.999,2.725
	c0,0,4.801,0.899,9.503,0.72c4.702,0.18,9.495-0.72,9.495-0.72c5.659-1.048,9.994-2.725,9.994-2.725
	c-1.856,7.248,2.351,21.893,2.351,21.893c1.677,10.782,5.946,19.946,5.946,19.946c2.096,6.35,3.197,12.579,3.197,12.579
	c0.838,4.612-0.176,8.865-0.176,8.865c-1.318,4.492-2.986,14.314-2.986,14.314c-1.677,9.645-1.83,18.27-1.83,18.27
	c-0.42,7.967,2.172,25.876,2.172,25.876c0.119,3.714-0.979,4.972-0.979,4.972c-0.359,1.438-6.427,11.381-6.427,11.381
	c-2.936,5.75-7.589,15.453-7.589,15.453c-1.977,3.714-1.066,6.23-1.066,6.23c0.479,3.893,6.037,4.192,6.037,4.192
	c2.815,0.3,4.962-1.736,4.962-1.736c1.078,1.797,5.094,2.575,5.094,2.575c2.696,0.239,3.372-1.317,3.372-1.317
	c0.839,2.755,5.221,2.575,5.221,2.575c3.354-0.061,4.225-1.377,4.225-1.377c0.599,1.677,4.426,2.155,4.426,2.155
	c2.875,0,4.366-1.977,4.366-1.977c0.658,1.318,3.623,1.198,3.623,1.198c4.073-0.419,6.425-6.169,6.425-6.169
	c1.917-5.211,1.198-18.641,1.198-18.641c0-2.935-1.377-13.354-1.377-13.354c-0.539-6.589,2.276-15.652,2.276-15.652
	c1.736-4.972,8.805-27.554,8.805-27.554c5.211-16.531,9.404-39.526,9.404-39.526c0.897-7.606,1.018-12.246,1.018-12.246
	c0.419-14.195-0.838-34.727-0.838-34.727c-0.839-13.358-7.967-50.894-7.967-50.894c-2.815-12.519-6.948-48.014-6.948-48.014
	C63.69,11.206,64.709-9.056,64.709-9.056c0.12-13.957,1.497-25.999,1.497-25.999c0.659,3.834,5.152,8.132,5.152,8.132
	c3.233,3.894,8.324,6.621,8.324,6.621c1.917,1.678,6.529,5.786,6.529,5.786c0.12,3.235,1.737,10.38,1.737,10.38
	C89.028,0.416,93.082,7.99,93.082,7.99c3.755,8.771,11.579,19.834,11.579,19.834c0.958,1.318,0.719,3.715,0.719,3.715
	c-0.06,5.152-3.654,9.942-3.654,9.942c-3.354,4.432-4.792,9.467-4.792,9.467c-0.419,1.917,0,5.256,0,5.256
	c0.779,7.728-0.06,13.222-0.06,13.222c-0.539,3.772,1.138,4.182,1.138,4.182c1.679,0.599,4.434-0.564,4.434-0.564
	c3.533-1.018,4.192-7.754,4.192-7.754c0.18-2.455,0.419-7.942,0.419-7.942c0.12-3.475,3.774-3.97,3.774-3.97
	c2.994-0.18,4.492,1.936,4.492,1.936c1.977,3.714,2.216,8.441,2.216,8.441c0.12,7.188-1.797,11.238-1.797,11.238
	c-2.516,6.769-2.276,7.622-2.276,7.622c0.3,5.211,6.11,3.911,6.11,3.911c4.792,0,6.358-5.335,6.358-5.335
	c0.873,2.909,5.31,2.373,5.31,2.373c4.655-0.146,5.818-5.044,5.818-5.044c2.764,0.8,4.945-1.848,4.945-1.848
	c3.055-2.837,3.273-10.037,3.273-10.037c1.018,0.071,2.546-1.252,2.546-1.252c2.545-2.183,2.909-9.554,2.909-9.554
	c0.944-4.728,0-14.253,0-14.253c-0.364-3.272-5.455-16.869-5.455-16.869c-2.545-6.036-5.964-17.9-5.964-17.9
	c-1.092-4.801-2.836-13.404-2.836-13.404c-3.273-14.764-9.237-37.651-9.237-37.651c-3.564-10.91-12.218-31.431-12.218-31.431
	c-6.838-11.927-16.583-24.498-16.583-24.498c-17.383-17.237-30.692-24.745-30.692-24.745c-10.255-4.145-22.11-9.572-22.11-9.572
	c-4.436-1.818-4.582-6.031-4.582-6.031l0.073-4.341c-0.145-1.745,0.073-3.079,0.073-3.079c4.218-4.291,9.964-14.016,9.964-14.016
	c3.636-6.909,5.673-15.474,5.673-15.474c2.036,0.727,4.509-0.037,4.509-0.037c3.127-0.218,5.019-5.058,5.019-5.058
	c1.237-3.418,2.786-13.041,2.786-13.041c1.274-4.591,2.295-11.973,2.295-11.973c0.737-4.936-1.785-9.223-1.785-9.223
	c-2.059-3.865-5.866-4.48-5.866-4.48c2.806-11.986,0-24.748,0-24.748c-2.55-14.536-15.993-27.797-15.993-27.797
	C31.391-295.215,0-294.329,0-294.329s-31.396-0.886-47.81,20.536C-47.81-273.793-61.25-260.532-63.8-245.996z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-61.912-241.06c0,0-2.697,12.452,0,23.977
	c0,0-3.66,0.64-5.64,4.356c0,0-2.426,4.164-1.716,8.909c0,0,0.98,7.178,2.207,11.592c0,0,1.489,9.361,2.678,12.648
	c0,0,1.818,4.703,4.825,4.913c0,0,2.378,0.765,4.336,0.066c0,0,1.958,8.358,5.455,15.002c0,0,5.524,9.482,9.581,13.608
	c0,0,0.209,1.302,0.07,2.981l0.069,4.212c0,0-0.139,4.119-4.405,5.868c0,0-11.399,5.418-21.26,9.404c0,0-12.797,7.559-29.511,24.133
	c0,0-9.371,12.33-15.945,23.799c0,0-8.322,20.018-11.748,30.508c0,0-5.735,22.334-8.882,36.53c0,0-1.678,8.391-2.727,13.007
	c0,0-3.287,11.571-5.735,17.376c0,0-4.895,13.221-5.245,16.367c0,0-0.909,9.278,0,13.824c0,0,0.35,7.172,2.798,9.271
	c0,0,1.468,1.297,2.447,1.227c0,0,0.21,7.02,3.147,9.746c0,0,2.098,2.594,4.756,1.824c0,0,1.119,4.785,5.594,4.925
	c0,0,4.266,0.58,5.105-2.218c0,0,1.507,5.208,6.115,5.208c0,0,5.587,1.333,5.875-3.677c0,0,0.23-0.736-2.189-7.244
	c0,0-1.843-3.774-1.728-10.687c0,0,0.231-4.454,2.131-8.024c0,0,1.44-1.983,4.32-1.811c0,0,3.513,0.531,3.628,3.872
	c0,0,0.231,5.352,0.403,7.712c0,0,0.634,6.565,4.032,7.544c0,0,2.649,1.166,4.262,0.59c0,0,1.613-0.345,1.094-3.973
	c0,0-0.806-5.134-0.057-12.563c0,0,0.403-3.15,0-4.993c0,0-1.383-4.719-4.608-8.98c0,0-3.456-4.478-3.513-9.431
	c0,0-0.23-2.261,0.691-3.528c0,0,7.523-10.359,11.134-18.794c0,0,3.898-7.123,4.935-11.5c0,0,1.555-6.739,1.67-9.849
	c0,0,4.435-3.842,6.278-5.454c0,0,4.895-2.496,8.006-6.24c0,0,4.319-4.013,4.953-7.699c0,0,1.324,11.849,1.44,25.268
	c0,0,0.979,19.865-0.519,34.84c0,0-3.974,34.653-6.681,46.689c0,0-6.853,36.63-7.66,49.473c0,0-1.209,20.134-0.806,33.784
	c0,0,0.115,4.587,0.979,11.901c0,0,4.032,22.547,9.042,38.443c0,0,6.797,22.037,8.467,26.818c0,0,2.707,8.896,2.188,15.23
	c0,0-1.324,10.181-1.324,13.004c0,0-0.691,13.121,1.152,18.132c0,0,2.261,5.529,6.178,5.933c0,0,2.833,0.115,3.467-1.152
	c0,0,1.417,1.901,4.182,1.901c0,0,3.667-0.461,4.243-2.073c0,0,0.833,1.267,4.058,1.324c0,0,4.207,0.173,5.013-2.477
	c0,0,0.644,1.497,3.236,1.268c0,0,3.853-0.749,4.89-2.478c0,0,2.058,1.958,4.765,1.67c0,0,5.345-0.288,5.805-4.03
	c0,0,0.879-2.42-1.022-5.99c0,0-4.463-9.33-7.286-14.859c0,0-5.827-9.561-6.173-10.942c0,0-1.051-1.21-0.935-4.781
	c0,0,2.528-17.221,2.125-24.881c0,0-0.123-8.293-1.735-17.566c0,0-1.581-9.446-2.848-13.765c0,0-0.968-4.089-0.162-8.524
	c0,0,1.088-5.99,3.103-12.095c0,0,4.146-8.812,5.759-19.179c0,0,4.083-14.082,2.298-21.052c0,0,4.195,1.613,9.638,2.621
	c0,0,4.638,0.864,9.159,0.691c4.521,0.173,9.15-0.691,9.15-0.691c5.442-1.008,9.635-2.621,9.635-2.621
	c-1.786,6.97,2.312,21.052,2.312,21.052c1.612,10.366,5.767,19.179,5.767,19.179c2.017,6.104,3.105,12.095,3.105,12.095
	c0.807,4.436-0.146,8.524-0.146,8.524c-1.269,4.318-2.837,13.765-2.837,13.765c-1.612,9.273-1.716,17.566-1.716,17.566
	c-0.402,7.66,2.153,24.881,2.153,24.881c0.115,3.571-0.929,4.781-0.929,4.781c-0.347,1.382-6.147,10.942-6.147,10.942
	c-2.823,5.529-7.254,14.859-7.254,14.859c-1.901,3.57-1.01,5.99-1.01,5.99c0.461,3.742,5.823,4.03,5.823,4.03
	c2.707,0.288,4.784-1.67,4.784-1.67c1.037,1.729,4.912,2.478,4.912,2.478c2.592,0.229,3.251-1.268,3.251-1.268
	c0.808,2.649,5.035,2.477,5.035,2.477c3.225-0.058,4.073-1.324,4.073-1.324c0.575,1.612,4.268,2.073,4.268,2.073
	c2.766,0,4.211-1.901,4.211-1.901c0.634,1.268,3.495,1.152,3.495,1.152c3.916-0.403,6.2-5.933,6.2-5.933
	c1.843-5.011,1.152-18.097,1.152-18.097c0-2.822-1.325-12.966-1.325-12.966c-0.519-6.335,2.188-15.197,2.188-15.197
	c1.671-4.78,8.467-26.763,8.467-26.763c5.011-15.896,9.043-38.386,9.043-38.386c0.863-7.314,0.979-11.89,0.979-11.89
	c0.403-13.649-0.806-33.714-0.806-33.714c-0.808-12.844-7.661-49.417-7.661-49.417c-2.707-12.038-6.681-46.62-6.681-46.62
	c-1.497-14.975-0.519-34.792-0.519-34.792c0.115-13.42,1.44-25.241,1.44-25.241c0.634,3.686,4.953,7.714,4.953,7.714
	c3.109,3.744,8.006,6.253,8.006,6.253c1.843,1.612,6.277,5.471,6.277,5.471c0.115,3.11,1.67,9.865,1.67,9.865
	c1.037,4.377,4.936,11.514,4.936,11.514c3.61,8.434,11.134,18.82,11.134,18.82c0.921,1.267,0.691,3.53,0.691,3.53
	c-0.059,4.953-3.514,9.441-3.514,9.441c-3.226,4.262-4.607,8.986-4.607,8.986c-0.403,1.843,0,4.996,0,4.996
	c0.749,7.43-0.059,12.565-0.059,12.565c-0.518,3.628,1.096,3.972,1.096,3.972c1.611,0.576,4.262-0.587,4.262-0.587
	c3.398-0.979,4.031-7.541,4.031-7.541c0.173-2.361,0.403-7.712,0.403-7.712c0.115-3.34,3.629-3.873,3.629-3.873
	c2.88-0.173,4.319,1.808,4.319,1.808c1.9,3.57,2.131,8.021,2.131,8.021c0.115,6.911-1.728,10.679-1.728,10.679
	c-2.419,6.508-2.189,7.24-2.189,7.24c0.288,5.011,5.875,3.673,5.875,3.673c4.607,0,6.114-5.214,6.114-5.214
	c0.84,2.797,5.106,2.217,5.106,2.217c4.475-0.141,5.594-4.929,5.594-4.929c2.658,0.77,4.755-1.83,4.755-1.83
	c2.938-2.727,3.147-9.753,3.147-9.753c0.979,0.07,2.447-1.229,2.447-1.229c2.448-2.099,2.797-9.281,2.797-9.281
	c0.91-4.546,0-13.838,0-13.838c-0.349-3.147-5.244-16.388-5.244-16.388c-2.447-5.805-5.734-17.391-5.734-17.391
	c-1.049-4.616-2.728-13.017-2.728-13.017c-3.146-14.196-8.882-36.57-8.882-36.57c-3.426-10.49-11.748-30.541-11.748-30.541
	c-6.573-11.469-15.944-23.84-15.944-23.84c-16.714-16.574-29.513-24.181-29.513-24.181c-9.859-3.987-21.259-9.445-21.259-9.445
	c-4.266-1.748-4.406-5.873-4.406-5.873l0.07-4.214c-0.14-1.678,0.07-2.988,0.07-2.988c4.056-4.126,9.581-13.642,9.581-13.642
	c3.496-6.644,5.455-15.037,5.455-15.037c1.958,0.699,4.335-0.081,4.335-0.081c3.008-0.21,4.825-4.936,4.825-4.936
	c1.189-3.287,2.679-12.665,2.679-12.665c1.226-4.414,2.207-11.629,2.207-11.629c0.709-4.745-1.716-8.961-1.716-8.961
	c-1.98-3.716-5.641-4.383-5.641-4.383c2.697-11.526,0-24.033,0-24.033c-2.452-13.977-15.595-26.728-15.595-26.728
	C30.533-288.386,0-287.534,0-287.534s-30.538-0.852-46.321,19.746C-46.321-267.788-59.46-255.037-61.912-241.06z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-60.023-236.124c0,0-2.589,12.194,0,23.258
	c0,0-3.514,0.69-5.414,4.258c0,0-2.329,4.087-1.648,8.643c0,0,0.941,7.007,2.118,11.245c0,0,1.43,9.115,2.572,12.27
	c0,0,1.745,4.587,4.632,4.789c0,0,2.283,0.781,4.162,0.11c0,0,1.88,8.184,5.237,14.561c0,0,5.304,9.271,9.198,13.232
	c0,0,0.201,1.279,0.067,2.89l0.067,4.084c0,0-0.134,4.032-4.23,5.711c0,0-10.943,5.446-20.409,9.273c0,0-12.286,7.655-28.331,23.566
	c0,0-8.996,12.128-15.307,23.138c0,0-7.989,19.546-11.278,29.616c0,0-5.505,21.818-8.527,35.446c0,0-1.611,8.189-2.618,12.62
	c0,0-3.155,11.292-5.505,16.864c0,0-4.699,12.863-5.035,15.884c0,0-0.873,9.045,0,13.409c0,0,0.336,6.983,2.685,8.997
	c0,0,1.41,1.273,2.35,1.206c0,0,0.202,6.842,3.021,9.46c0,0,2.014,2.545,4.565,1.807c0,0,1.075,4.676,5.371,4.81
	c0,0,4.095,0.623,4.901-2.062c0,0,1.447,5.086,5.87,5.086c0,0,5.363,1.371,5.64-3.438c0,0,0.221-0.615-2.101-6.863
	c0,0-1.77-3.492-1.659-10.127c0,0,0.221-4.175,2.046-7.603c0,0,1.382-1.85,4.147-1.684c0,0,3.372,0.569,3.483,3.776
	c0,0,0.221,5.213,0.387,7.479c0,0,0.608,6.393,3.87,7.332c0,0,2.544,1.166,4.092,0.613c0,0,1.548-0.28,1.05-3.763
	c0,0-0.774-4.775-0.055-11.908c0,0,0.387-2.965,0-4.734c0,0-1.327-4.405-4.423-8.498c0,0-3.318-4.175-3.373-8.93
	c0,0-0.221-2.128,0.664-3.344c0,0,7.222-9.682,10.688-17.777c0,0,3.742-6.686,4.738-10.888c0,0,1.493-6.348,1.603-9.333
	c0,0,4.258-3.59,6.027-5.138c0,0,4.7-2.276,7.685-5.87c0,0,4.147-3.741,4.755-7.28c0,0,1.272,11.63,1.383,24.513
	c0,0,0.94,19.422-0.498,33.798c0,0-3.815,33.746-6.414,45.303c0,0-6.579,35.67-7.353,48c0,0-1.162,19.672-0.775,32.775
	c0,0,0.111,4.523,0.94,11.545c0,0,3.871,22.047,8.681,37.308c0,0,6.524,21.441,8.128,26.03c0,0,2.599,8.698,2.101,14.78
	c0,0-1.272,9.907-1.272,12.616c0,0-0.663,12.782,1.106,17.592c0,0,2.192,5.309,5.952,5.695c0,0,2.728,0.11,3.336-1.106
	c0,0,1.371,1.825,4.025,1.825c0,0,3.531-0.442,4.084-1.991c0,0,0.809,1.218,3.905,1.272c0,0,4.052,0.166,4.826-2.377
	c0,0,0.626,1.437,3.114,1.216c0,0,3.711-0.719,4.706-2.378c0,0,1.987,1.88,4.586,1.604c0,0,5.149-0.276,5.591-3.87
	c0,0,0.858-2.322-0.967-5.751c0,0-4.243-8.957-6.952-14.265c0,0-5.564-9.178-5.895-10.505c0,0-0.998-1.161-0.887-4.589
	c0,0,2.491-16.532,2.104-23.886c0,0-0.074-7.963-1.622-16.863c0,0-1.482-9.068-2.698-13.215c0,0-0.91-3.927-0.136-8.184
	c0,0,1.076-5.75,3.011-11.61c0,0,4.031-8.46,5.58-18.412c0,0,3.973-13.52,2.259-20.209c0,0,4.053,1.548,9.278,2.516
	c0,0,4.475,0.829,8.815,0.664c4.34,0.165,8.806-0.664,8.806-0.664c5.226-0.968,9.273-2.516,9.273-2.516
	c-1.714,6.689,2.275,20.209,2.275,20.209c1.549,9.952,5.59,18.412,5.59,18.412c1.935,5.86,3.013,11.61,3.013,11.61
	c0.773,4.257-0.12,8.184-0.12,8.184c-1.216,4.146-2.686,13.215-2.686,13.215c-1.548,8.9-1.601,16.863-1.601,16.863
	c-0.387,7.354,2.133,23.886,2.133,23.886c0.111,3.428-0.88,4.589-0.88,4.589c-0.331,1.327-5.867,10.505-5.867,10.505
	c-2.71,5.308-6.919,14.265-6.919,14.265c-1.823,3.429-0.953,5.751-0.953,5.751c0.442,3.594,5.611,3.87,5.611,3.87
	c2.599,0.276,4.606-1.604,4.606-1.604c0.994,1.659,4.729,2.378,4.729,2.378c2.488,0.221,3.13-1.216,3.13-1.216
	c0.774,2.543,4.85,2.377,4.85,2.377c3.096-0.055,3.921-1.272,3.921-1.272c0.553,1.549,4.11,1.991,4.11,1.991
	c2.654,0,4.057-1.825,4.057-1.825c0.607,1.217,3.365,1.106,3.365,1.106c3.761-0.387,5.977-5.695,5.977-5.695
	c1.769-4.81,1.105-17.554,1.105-17.554c0-2.709-1.271-12.576-1.271-12.576c-0.498-6.082,2.101-14.743,2.101-14.743
	c1.604-4.589,8.128-25.973,8.128-25.973c4.811-15.26,8.681-37.244,8.681-37.244c0.83-7.022,0.939-11.532,0.939-11.532
	c0.388-13.104-0.773-32.702-0.773-32.702c-0.774-12.33-7.354-47.94-7.354-47.94c-2.599-11.557-6.414-45.228-6.414-45.228
	c-1.438-14.376-0.498-33.747-0.498-33.747c0.111-12.883,1.384-24.483,1.384-24.483C62.853-25.853,67-22.096,67-22.096
	c2.984,3.594,7.685,5.884,7.685,5.884c1.77,1.548,6.027,5.156,6.027,5.156c0.109,2.986,1.603,9.35,1.603,9.35
	c0.995,4.202,4.738,10.902,4.738,10.902c3.466,8.097,10.688,17.806,10.688,17.806c0.885,1.216,0.663,3.348,0.663,3.348
	c-0.056,4.755-3.372,8.94-3.372,8.94c-3.097,4.091-4.424,8.505-4.424,8.505c-0.387,1.77,0,4.737,0,4.737
	c0.72,7.133-0.056,11.91-0.056,11.91c-0.497,3.482,1.051,3.761,1.051,3.761c1.548,0.553,4.092-0.609,4.092-0.609
	c3.263-0.939,3.87-7.328,3.87-7.328c0.166-2.268,0.388-7.48,0.388-7.48c0.109-3.206,3.482-3.777,3.482-3.777
	c2.766-0.166,4.147,1.681,4.147,1.681c1.824,3.428,2.046,7.598,2.046,7.598c0.109,6.635-1.659,10.119-1.659,10.119
	c-2.322,6.248-2.101,6.86-2.101,6.86c0.276,4.81,5.64,3.434,5.64,3.434c4.423,0,5.87-5.093,5.87-5.093
	c0.805,2.685,4.9,2.061,4.9,2.061c4.297-0.134,5.37-4.812,5.37-4.812c2.553,0.738,4.566-1.812,4.566-1.812
	c2.819-2.618,3.021-9.468,3.021-9.468c0.94,0.067,2.35-1.209,2.35-1.209c2.35-2.015,2.686-9.009,2.686-9.009
	c0.873-4.364,0-13.424,0-13.424c-0.336-3.021-5.035-15.906-5.035-15.906c-2.35-5.572-5.505-16.879-5.505-16.879
	c-1.007-4.431-2.619-12.63-2.619-12.63c-3.021-13.628-8.525-35.488-8.525-35.488c-3.289-10.07-11.278-29.653-11.278-29.653
	c-6.311-11.01-15.307-23.181-15.307-23.181c-16.046-15.912-28.331-23.618-28.331-23.618c-9.466-3.827-20.409-9.316-20.409-9.316
	c-4.096-1.679-4.229-5.717-4.229-5.717l0.066-4.086c-0.134-1.611,0.067-2.898,0.067-2.898c3.894-3.96,9.197-13.268,9.197-13.268
	c3.357-6.378,5.236-14.599,5.236-14.599c1.88,0.671,4.163-0.126,4.163-0.126c2.887-0.202,4.632-4.813,4.632-4.813
	c1.142-3.155,2.571-12.289,2.571-12.289c1.177-4.237,2.119-11.285,2.119-11.285c0.681-4.555-1.648-8.699-1.648-8.699
	c-1.9-3.568-5.414-4.287-5.414-4.287c2.589-11.064,0-23.317,0-23.317c-2.354-13.418-15.195-25.659-15.195-25.659
	C29.675-281.556,0-280.738,0-280.738s-29.68-0.818-44.831,18.956C-44.831-261.782-57.669-249.542-60.023-236.124z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-58.135-231.187c0,0-2.482,11.936,0,22.539
	c0,0-3.367,0.74-5.189,4.159c0,0-2.231,4.012-1.579,8.378c0,0,0.902,6.837,2.03,10.898c0,0,1.371,8.869,2.465,11.892
	c0,0,1.672,4.472,4.439,4.665c0,0,2.187,0.797,3.989,0.154c0,0,1.801,8.009,5.018,14.121c0,0,5.083,9.06,8.814,12.856
	c0,0,0.194,1.254,0.065,2.799l0.064,3.956c0,0-0.129,3.945-4.053,5.553c0,0-10.487,5.475-19.559,9.142
	c0,0-11.774,7.751-27.15,22.999c0,0-8.622,11.926-14.669,22.477c0,0-7.657,19.074-10.809,28.725c0,0-5.276,21.301-8.171,34.362
	c0,0-1.544,7.985-2.509,12.231c0,0-3.024,11.012-5.276,16.352c0,0-4.504,12.507-4.825,15.402c0,0-0.837,8.811,0,12.993
	c0,0,0.321,6.795,2.573,8.725c0,0,1.351,1.249,2.252,1.185c0,0,0.193,6.666,2.895,9.175c0,0,1.93,2.496,4.375,1.789
	c0,0,1.03,4.563,5.147,4.692c0,0,3.925,0.666,4.697-1.906c0,0,1.386,4.965,5.625,4.965c0,0,5.14,1.409,5.405-3.201
	c0,0,0.212-0.494-2.013-6.482c0,0-1.696-3.209-1.59-9.567c0,0,0.212-3.897,1.961-7.183c0,0,1.324-1.714,3.974-1.555
	c0,0,3.232,0.607,3.338,3.68c0,0,0.212,5.076,0.371,7.248c0,0,0.582,6.221,3.709,7.12c0,0,2.437,1.165,3.921,0.636
	c0,0,1.483-0.215,1.007-3.553c0,0-0.742-4.416-0.053-11.252c0,0,0.37-2.779,0-4.474c0,0-1.272-4.096-4.239-8.018
	c0,0-3.18-3.872-3.233-8.429c0,0-0.212-1.994,0.636-3.16c0,0,6.922-9.001,10.243-16.761c0,0,3.587-6.247,4.541-10.274
	c0,0,1.43-5.957,1.536-8.818c0,0,4.08-3.338,5.776-4.821c0,0,4.504-2.057,7.365-5.501c0,0,3.974-3.47,4.557-6.861
	c0,0,1.219,11.411,1.325,23.757c0,0,0.9,18.98-0.477,32.757c0,0-3.656,32.839-6.147,43.914c0,0-6.305,34.711-7.047,46.527
	c0,0-1.113,19.21-0.742,31.769c0,0,0.106,4.46,0.901,11.188c0,0,3.709,21.546,8.319,36.17c0,0,6.252,20.848,7.789,25.245
	c0,0,2.49,8.499,2.013,14.327c0,0-1.218,9.633-1.218,12.23c0,0-0.636,12.441,1.059,17.051c0,0,2.123,5.087,5.726,5.458
	c0,0,2.623,0.105,3.206-1.061c0,0,1.324,1.749,3.867,1.749c0,0,3.396-0.424,3.925-1.907c0,0,0.785,1.166,3.753,1.219
	c0,0,3.897,0.159,4.638-2.278c0,0,0.608,1.377,2.992,1.165c0,0,3.569-0.688,4.523-2.278c0,0,1.916,1.802,4.406,1.537
	c0,0,4.953-0.265,5.377-3.71c0,0,0.837-2.225-0.911-5.51c0,0-4.023-8.584-6.62-13.671c0,0-5.299-8.796-5.617-10.067
	c0,0-0.944-1.112-0.838-4.397c0,0,2.453-15.843,2.082-22.892c0,0-0.025-7.63-1.508-16.16c0,0-1.383-8.69-2.548-12.664
	c0,0-0.851-3.763-0.109-7.843c0,0,1.064-5.51,2.918-11.127c0,0,3.917-8.106,5.4-17.645c0,0,3.865-12.955,2.222-19.367
	c0,0,3.909,1.484,8.917,2.411c0,0,4.312,0.795,8.471,0.636c4.159,0.159,8.462-0.636,8.462-0.636
	c5.007-0.927,8.912-2.411,8.912-2.411c-1.644,6.412,2.239,19.367,2.239,19.367c1.483,9.538,5.409,17.645,5.409,17.645
	c1.855,5.617,2.922,11.127,2.922,11.127c0.74,4.08-0.093,7.843-0.093,7.843c-1.166,3.974-2.534,12.664-2.534,12.664
	c-1.484,8.53-1.486,16.16-1.486,16.16c-0.371,7.049,2.113,22.892,2.113,22.892c0.105,3.285-0.83,4.397-0.83,4.397
	c-0.318,1.271-5.588,10.067-5.588,10.067c-2.597,5.087-6.584,13.671-6.584,13.671c-1.748,3.285-0.896,5.51-0.896,5.51
	c0.424,3.445,5.398,3.71,5.398,3.71c2.489,0.265,4.427-1.537,4.427-1.537c0.954,1.591,4.549,2.278,4.549,2.278
	c2.384,0.212,3.01-1.165,3.01-1.165c0.741,2.438,4.662,2.278,4.662,2.278c2.967-0.053,3.77-1.219,3.77-1.219
	c0.529,1.483,3.953,1.907,3.953,1.907c2.544,0,3.902-1.749,3.902-1.749c0.582,1.166,3.236,1.061,3.236,1.061
	c3.603-0.371,5.752-5.458,5.752-5.458c1.694-4.609,1.059-17.011,1.059-17.011c0-2.598-1.218-12.188-1.218-12.188
	c-0.477-5.828,2.013-14.287,2.013-14.287c1.537-4.397,7.789-25.183,7.789-25.183c4.61-14.624,8.319-36.104,8.319-36.104
	c0.795-6.729,0.9-11.174,0.9-11.174c0.371-12.558-0.741-31.689-0.741-31.689C71.867,108.349,65.562,73.7,65.562,73.7
	c-2.49-11.073-6.147-43.833-6.147-43.833C58.038,16.09,58.939-2.836,58.939-2.836c0.105-12.346,1.323-23.725,1.323-23.725
	c0.583,3.391,4.558,6.878,4.558,6.878c2.86,3.444,7.365,5.516,7.365,5.516c1.695,1.483,5.775,4.84,5.775,4.84
	c0.106,2.861,1.537,8.836,1.537,8.836c0.953,4.027,4.54,10.29,4.54,10.29c3.322,7.76,10.243,16.791,10.243,16.791
	c0.848,1.166,0.636,3.163,0.636,3.163c-0.053,4.557-3.231,8.44-3.231,8.44c-2.969,3.921-4.239,8.024-4.239,8.024
	c-0.371,1.696,0,4.478,0,4.478c0.688,6.835-0.053,11.254-0.053,11.254c-0.478,3.339,1.006,3.552,1.006,3.552
	c1.483,0.529,3.921-0.633,3.921-0.633c3.127-0.9,3.709-7.116,3.709-7.116c0.159-2.172,0.371-7.247,0.371-7.247
	c0.105-3.073,3.339-3.683,3.339-3.683c2.648-0.158,3.974,1.553,3.974,1.553c1.748,3.284,1.96,7.177,1.96,7.177
	c0.106,6.357-1.589,9.559-1.589,9.559c-2.226,5.987-2.014,6.479-2.014,6.479c0.265,4.609,5.405,3.196,5.405,3.196
	c4.238,0,5.625-4.973,5.625-4.973c0.771,2.574,4.696,1.906,4.696,1.906c4.117-0.129,5.147-4.698,5.147-4.698
	c2.444,0.708,4.375-1.794,4.375-1.794c2.702-2.51,2.895-9.183,2.895-9.183c0.901,0.063,2.252-1.188,2.252-1.188
	c2.252-1.931,2.573-8.737,2.573-8.737c0.837-4.182,0-13.01,0-13.01c-0.321-2.895-4.825-15.424-4.825-15.424
	c-2.252-5.34-5.275-16.368-5.275-16.368c-0.966-4.247-2.51-12.243-2.51-12.243c-2.895-13.06-8.171-34.406-8.171-34.406
	c-3.151-9.651-10.808-28.765-10.808-28.765C97.402-84.648,88.781-96.62,88.781-96.62c-15.377-15.248-27.151-23.054-27.151-23.054
	c-9.072-3.667-19.559-9.188-19.559-9.188c-3.924-1.608-4.053-5.559-4.053-5.559l0.063-3.959c-0.128-1.544,0.065-2.807,0.065-2.807
	c3.73-3.796,8.813-12.895,8.813-12.895c3.217-6.112,5.019-14.161,5.019-14.161c1.802,0.643,3.988-0.171,3.988-0.171
	c2.768-0.193,4.44-4.69,4.44-4.69c1.093-3.024,2.464-11.913,2.464-11.913c1.128-4.061,2.03-10.94,2.03-10.94
	c0.652-4.366-1.579-8.438-1.579-8.438c-1.822-3.419-5.189-4.19-5.189-4.19c2.482-10.603,0-22.602,0-22.602
	c-2.256-12.859-14.797-24.59-14.797-24.59C28.816-274.727,0-273.943,0-273.943s-28.822-0.784-43.342,18.166
	C-43.342-255.777-55.879-244.046-58.135-231.187z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-56.247-226.25c0,0-2.374,11.678,0,21.82
	c0,0-3.221,0.789-4.963,4.06c0,0-2.135,3.937-1.511,8.112c0,0,0.864,6.667,1.942,10.551c0,0,1.311,8.623,2.358,11.516
	c0,0,1.6,4.355,4.246,4.54c0,0,2.092,0.813,3.815,0.197c0,0,1.723,7.835,4.8,13.681c0,0,4.862,8.849,8.432,12.48
	c0,0,0.184,1.231,0.061,2.708l0.062,3.829c0,0-0.123,3.857-3.877,5.395c0,0-10.032,5.504-18.709,9.012
	c0,0-11.262,7.846-25.97,22.431c0,0-8.246,11.723-14.031,21.816c0,0-7.323,18.603-10.339,27.834c0,0-5.046,20.785-7.816,33.277
	c0,0-1.477,7.782-2.4,11.844c0,0-2.892,10.732-5.046,15.84c0,0-4.308,12.148-4.616,14.919c0,0-0.8,8.578,0,12.578
	c0,0,0.308,6.604,2.462,8.45c0,0,1.292,1.226,2.154,1.163c0,0,0.185,6.489,2.769,8.89c0,0,1.847,2.447,4.185,1.771
	c0,0,0.985,4.454,4.923,4.577c0,0,3.754,0.711,4.493-1.751c0,0,1.326,4.845,5.381,4.845c0,0,4.916,1.445,5.169-2.964
	c0,0,0.203-0.373-1.926-6.1c0,0-1.621-2.929-1.52-9.011c0,0,0.203-3.617,1.875-6.761c0,0,1.267-1.579,3.801-1.427
	c0,0,3.092,0.645,3.193,3.584c0,0,0.203,4.938,0.355,7.016c0,0,0.558,6.047,3.548,6.909c0,0,2.332,1.164,3.751,0.658
	c0,0,1.419-0.15,0.963-3.343c0,0-0.71-4.059-0.051-10.597c0,0,0.355-2.593,0-4.215c0,0-1.216-3.784-4.055-7.534
	c0,0-3.041-3.569-3.091-7.929c0,0-0.203-1.86,0.608-2.976c0,0,6.62-8.322,9.798-15.744c0,0,3.43-5.811,4.342-9.662
	c0,0,1.369-5.565,1.47-8.302c0,0,3.903-3.086,5.525-4.505c0,0,4.308-1.837,7.045-5.132c0,0,3.801-3.197,4.358-6.441
	c0,0,1.166,11.192,1.268,23.001c0,0,0.861,18.538-0.457,31.716c0,0-3.497,31.933-5.879,42.525c0,0-6.031,33.754-6.741,45.056
	c0,0-1.064,18.75-0.709,30.761c0,0,0.101,4.396,0.861,10.833c0,0,3.548,21.045,7.958,35.033c0,0,5.98,20.252,7.45,24.459
	c0,0,2.382,8.299,1.926,13.874c0,0-1.166,9.36-1.166,11.843c0,0-0.608,12.103,1.014,16.513c0,0,2.053,4.864,5.5,5.22
	c0,0,2.516,0.101,3.074-1.014c0,0,1.278,1.673,3.711,1.673c0,0,3.259-0.406,3.766-1.825c0,0,0.761,1.115,3.599,1.166
	c0,0,3.742,0.152,4.451-2.179c0,0,0.59,1.316,2.87,1.114c0,0,3.428-0.658,4.34-2.18c0,0,1.845,1.724,4.227,1.47
	c0,0,4.757-0.253,5.162-3.548c0,0,0.817-2.128-0.856-5.271c0,0-3.803-8.21-6.286-13.076c0,0-5.035-8.413-5.34-9.63
	c0,0-0.891-1.064-0.789-4.207c0,0,2.416-15.154,2.061-21.896c0,0,0.024-7.298-1.395-15.458c0,0-1.284-8.312-2.399-12.112
	c0,0-0.791-3.6-0.081-7.503c0,0,1.051-5.271,2.825-10.643c0,0,3.802-7.755,5.221-16.878c0,0,3.755-12.392,2.184-18.524
	c0,0,3.766,1.419,8.555,2.307c0,0,4.15,0.76,8.128,0.607c3.979,0.152,8.118-0.607,8.118-0.607c4.789-0.888,8.55-2.307,8.55-2.307
	c-1.571,6.133,2.203,18.524,2.203,18.524c1.419,9.123,5.231,16.878,5.231,16.878c1.774,5.372,2.827,10.643,2.827,10.643
	c0.71,3.903-0.063,7.503-0.063,7.503c-1.115,3.801-2.385,12.112-2.385,12.112c-1.42,8.16-1.371,15.458-1.371,15.458
	c-0.354,6.741,2.095,21.896,2.095,21.896c0.101,3.143-0.782,4.207-0.782,4.207c-0.304,1.217-5.308,9.63-5.308,9.63
	c-2.483,4.866-6.247,13.076-6.247,13.076c-1.673,3.143-0.842,5.271-0.842,5.271c0.405,3.295,5.186,3.548,5.186,3.548
	c2.382,0.254,4.249-1.47,4.249-1.47c0.912,1.521,4.367,2.18,4.367,2.18c2.28,0.202,2.889-1.114,2.889-1.114
	c0.709,2.331,4.476,2.179,4.476,2.179c2.84-0.051,3.618-1.166,3.618-1.166c0.506,1.419,3.797,1.825,3.797,1.825
	c2.433,0,3.746-1.673,3.746-1.673c0.558,1.114,3.108,1.014,3.108,1.014c3.446-0.355,5.526-5.22,5.526-5.22
	c1.622-4.41,1.014-16.47,1.014-16.47c0-2.483-1.166-11.797-1.166-11.797c-0.456-5.575,1.926-13.833,1.926-13.833
	c1.47-4.207,7.451-24.393,7.451-24.393c4.409-13.988,7.957-34.963,7.957-34.963c0.76-6.438,0.862-10.817,0.862-10.817
	c0.354-12.012-0.71-30.677-0.71-30.677c-0.709-11.302-6.741-44.989-6.741-44.989c-2.382-10.593-5.879-42.439-5.879-42.439
	c-1.318-13.179-0.456-31.659-0.456-31.659c0.101-11.809,1.267-22.967,1.267-22.967c0.558,3.244,4.359,6.459,4.359,6.459
	c2.736,3.295,7.045,5.148,7.045,5.148c1.622,1.419,5.523,4.525,5.523,4.525c0.103,2.737,1.471,8.321,1.471,8.321
	c0.912,3.853,4.343,9.68,4.343,9.68c3.177,7.422,9.798,15.776,9.798,15.776c0.812,1.115,0.608,2.979,0.608,2.979
	c-0.052,4.358-3.093,7.94-3.093,7.94c-2.838,3.75-4.055,7.543-4.055,7.543c-0.354,1.622,0,4.219,0,4.219
	c0.659,6.538-0.05,10.599-0.05,10.599c-0.456,3.193,0.963,3.341,0.963,3.341c1.419,0.506,3.75-0.655,3.75-0.655
	c2.991-0.86,3.548-6.904,3.548-6.904c0.152-2.078,0.355-7.016,0.355-7.016c0.101-2.938,3.192-3.586,3.192-3.586
	c2.534-0.151,3.802,1.424,3.802,1.424c1.673,3.144,1.875,6.756,1.875,6.756c0.102,6.082-1.521,9-1.521,9
	c-2.129,5.727-1.926,6.097-1.926,6.097c0.253,4.41,5.17,2.959,5.17,2.959c4.054,0,5.381-4.852,5.381-4.852
	c0.738,2.461,4.492,1.749,4.492,1.749c3.938-0.123,4.923-4.581,4.923-4.581c2.339,0.677,4.186-1.778,4.186-1.778
	c2.585-2.4,2.769-8.897,2.769-8.897c0.862,0.062,2.154-1.167,2.154-1.167c2.153-1.847,2.462-8.465,2.462-8.465
	c0.8-4,0-12.595,0-12.595c-0.309-2.771-4.616-14.943-4.616-14.943c-2.154-5.107-5.046-15.857-5.046-15.857
	c-0.923-4.062-2.4-11.856-2.4-11.856c-2.769-12.492-7.815-33.325-7.815-33.325c-3.016-9.231-10.338-27.875-10.338-27.875
	C93.807-83.662,85.56-95.434,85.56-95.434c-14.708-14.585-25.97-22.49-25.97-22.49c-8.678-3.508-18.708-9.06-18.708-9.06
	c-3.755-1.539-3.877-5.403-3.877-5.403l0.061-3.83c-0.123-1.477,0.062-2.717,0.062-2.717c3.569-3.631,8.432-12.522,8.432-12.522
	c3.077-5.846,4.8-13.723,4.8-13.723c1.723,0.615,3.816-0.216,3.816-0.216c2.646-0.185,4.246-4.567,4.246-4.567
	c1.046-2.892,2.356-11.537,2.356-11.537c1.079-3.884,1.942-10.596,1.942-10.596c0.624-4.176-1.511-8.176-1.511-8.176
	c-1.742-3.27-4.964-4.093-4.964-4.093c2.374-10.142,0-21.887,0-21.887c-2.156-12.3-14.397-23.521-14.397-23.521
	C27.958-267.897,0-267.147,0-267.147s-27.965-0.75-41.854,17.376C-41.854-249.771-54.089-238.55-56.247-226.25z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-54.358-221.314c0,0-2.266,11.42,0,21.101
	c0,0-3.074,0.839-4.737,3.961c0,0-2.038,3.861-1.442,7.847c0,0,0.824,6.497,1.853,10.204c0,0,1.252,8.377,2.25,11.138
	c0,0,1.528,4.24,4.054,4.416c0,0,1.997,0.828,3.642,0.241c0,0,1.645,7.66,4.582,13.241c0,0,4.64,8.638,8.048,12.104
	c0,0,0.176,1.207,0.058,2.616l0.059,3.701c0,0-0.117,3.77-3.701,5.238c0,0-9.575,5.533-17.858,8.881c0,0-10.75,7.942-24.789,21.864
	c0,0-7.872,11.521-13.394,21.155c0,0-6.99,18.131-9.869,26.943c0,0-4.817,20.268-7.46,32.193c0,0-1.41,7.578-2.291,11.456
	c0,0-2.761,10.452-4.817,15.327c0,0-4.112,11.793-4.406,14.436c0,0-0.764,8.346,0,12.163c0,0,0.294,6.416,2.35,8.18
	c0,0,1.234,1.199,2.056,1.141c0,0,0.176,6.312,2.643,8.603c0,0,1.763,2.4,3.995,1.755c0,0,0.94,4.344,4.699,4.461
	c0,0,3.584,0.754,4.289-1.596c0,0,1.266,4.724,5.136,4.724c0,0,4.693,1.482,4.935-2.727c0,0,0.193-0.252-1.839-5.719
	c0,0-1.548-2.645-1.451-8.451c0,0,0.193-3.34,1.79-6.339c0,0,1.209-1.446,3.628-1.301c0,0,2.951,0.684,3.048,3.49
	c0,0,0.194,4.8,0.339,6.782c0,0,0.532,5.874,3.386,6.697c0,0,2.226,1.164,3.581,0.681c0,0,1.354-0.084,0.919-3.132
	c0,0-0.678-3.7-0.049-9.94c0,0,0.339-2.407,0-3.956c0,0-1.161-3.473-3.87-7.052c0,0-2.903-3.268-2.951-7.429
	c0,0-0.194-1.727,0.58-2.791c0,0,6.32-7.643,9.353-14.728c0,0,3.274-5.373,4.145-9.05c0,0,1.307-5.173,1.403-7.787
	c0,0,3.725-2.834,5.274-4.188c0,0,4.112-1.618,6.724-4.763c0,0,3.629-2.925,4.161-6.022c0,0,1.113,10.973,1.21,22.245
	c0,0,0.822,18.098-0.436,30.675c0,0-3.338,31.026-5.612,41.138c0,0-5.757,32.795-6.434,43.584c0,0-1.016,18.288-0.678,29.754
	c0,0,0.097,4.331,0.823,10.475c0,0,3.386,20.544,7.595,33.897c0,0,5.709,19.657,7.112,23.672c0,0,2.274,8.101,1.839,13.423
	c0,0-1.113,9.085-1.113,11.456c0,0-0.581,11.762,0.967,15.971c0,0,1.984,4.645,5.274,4.983c0,0,2.411,0.097,2.943-0.968
	c0,0,1.232,1.597,3.554,1.597c0,0,3.123-0.387,3.607-1.742c0,0,0.737,1.065,3.447,1.113c0,0,3.586,0.145,4.263-2.08
	c0,0,0.571,1.258,2.748,1.064c0,0,3.286-0.63,4.157-2.08c0,0,1.773,1.645,4.047,1.402c0,0,4.561-0.242,4.948-3.387
	c0,0,0.796-2.032-0.801-5.031c0,0-3.582-7.838-5.952-12.481c0,0-4.772-8.031-5.062-9.192c0,0-0.838-1.016-0.741-4.016
	c0,0,2.378-14.465,2.039-20.9c0,0,0.074-6.966-1.281-14.755c0,0-1.185-7.935-2.249-11.563c0,0-0.732-3.435-0.055-7.159
	c0,0,1.039-5.032,2.733-10.16c0,0,3.687-7.402,5.042-16.11c0,0,3.645-11.829,2.145-17.683c0,0,3.623,1.354,8.195,2.201
	c0,0,3.986,0.726,7.784,0.58c3.798,0.146,7.774-0.58,7.774-0.58c4.57-0.847,8.188-2.201,8.188-2.201
	c-1.5,5.854,2.165,17.683,2.165,17.683c1.355,8.708,5.054,16.11,5.054,16.11c1.693,5.128,2.735,10.16,2.735,10.16
	c0.677,3.725-0.036,7.159-0.036,7.159c-1.064,3.629-2.233,11.563-2.233,11.563c-1.355,7.789-1.257,14.755-1.257,14.755
	c-0.339,6.436,2.074,20.9,2.074,20.9c0.097,3-0.731,4.016-0.731,4.016c-0.29,1.161-5.029,9.192-5.029,9.192
	c-2.37,4.644-5.912,12.481-5.912,12.481c-1.596,2.999-0.785,5.031-0.785,5.031c0.387,3.145,4.973,3.387,4.973,3.387
	c2.273,0.242,4.071-1.402,4.071-1.402c0.871,1.45,4.186,2.08,4.186,2.08c2.177,0.193,2.768-1.064,2.768-1.064
	c0.677,2.225,4.291,2.08,4.291,2.08c2.709-0.048,3.465-1.113,3.465-1.113c0.484,1.355,3.641,1.742,3.641,1.742
	c2.321,0,3.591-1.597,3.591-1.597c0.531,1.064,2.979,0.968,2.979,0.968c3.29-0.339,5.303-4.983,5.303-4.983
	c1.548-4.209,0.968-15.926,0.968-15.926c0-2.371-1.113-11.408-1.113-11.408c-0.435-5.32,1.839-13.378,1.839-13.378
	c1.403-4.015,7.111-23.602,7.111-23.602c4.209-13.354,7.596-33.822,7.596-33.822c0.727-6.145,0.822-10.46,0.822-10.46
	c0.339-11.466-0.677-29.665-0.677-29.665c-0.678-10.788-6.435-43.513-6.435-43.513c-2.273-10.111-5.611-41.046-5.611-41.046
	C54.27,19.346,55.092,1.311,55.092,1.311c0.097-11.272,1.21-22.209,1.21-22.209c0.532,3.096,4.16,6.041,4.16,6.041
	c2.613,3.145,6.725,4.779,6.725,4.779c1.548,1.355,5.273,4.21,5.273,4.21c0.097,2.613,1.402,7.807,1.402,7.807
	c0.871,3.676,4.146,9.067,4.146,9.067c3.033,7.085,9.352,14.762,9.352,14.762c0.774,1.063,0.581,2.794,0.581,2.794
	c-0.049,4.161-2.95,7.44-2.95,7.44c-2.71,3.58-3.871,7.062-3.871,7.062c-0.338,1.548,0,3.959,0,3.959
	c0.629,6.241-0.048,9.943-0.048,9.943c-0.436,3.048,0.919,3.13,0.919,3.13c1.354,0.483,3.58-0.678,3.58-0.678
	c2.854-0.821,3.387-6.692,3.387-6.692c0.145-1.983,0.338-6.782,0.338-6.782c0.097-2.806,3.048-3.491,3.048-3.491
	c2.419-0.145,3.629,1.296,3.629,1.296c1.597,3,1.79,6.334,1.79,6.334c0.097,5.806-1.452,8.44-1.452,8.44
	c-2.03,5.467-1.838,5.716-1.838,5.716c0.242,4.209,4.936,2.72,4.936,2.72c3.87,0,5.136-4.73,5.136-4.73
	c0.705,2.35,4.288,1.594,4.288,1.594c3.76-0.118,4.7-4.466,4.7-4.466c2.231,0.646,3.993-1.76,3.993-1.76
	c2.469-2.291,2.645-8.612,2.645-8.612c0.822,0.058,2.056-1.146,2.056-1.146c2.057-1.763,2.351-8.192,2.351-8.192
	c0.763-3.818,0-12.181,0-12.181c-0.294-2.644-4.406-14.462-4.406-14.462c-2.056-4.875-4.817-15.346-4.817-15.346
	c-0.881-3.877-2.291-11.469-2.291-11.469c-2.644-11.924-7.461-32.243-7.461-32.243c-2.878-8.812-9.868-26.987-9.868-26.987
	c-5.521-9.634-13.394-21.207-13.394-21.207c-14.04-13.922-24.79-21.926-24.79-21.926c-8.282-3.348-17.858-8.932-17.858-8.932
	c-3.583-1.468-3.699-5.245-3.699-5.245l0.058-3.703c-0.117-1.41,0.059-2.627,0.059-2.627c3.407-3.466,8.049-12.147,8.049-12.147
	c2.937-5.581,4.581-13.286,4.581-13.286c1.646,0.587,3.643-0.261,3.643-0.261c2.526-0.176,4.053-4.444,4.053-4.444
	c0.999-2.761,2.25-11.161,2.25-11.161c1.03-3.707,1.854-10.251,1.854-10.251c0.596-3.986-1.442-7.915-1.442-7.915
	c-1.663-3.122-4.737-3.996-4.737-3.996c2.266-9.681,0-21.172,0-21.172c-2.06-11.741-14-22.452-14-22.452
	C27.1-261.068,0-260.352,0-260.352s-27.106-0.716-40.364,16.586C-40.364-243.766-52.298-233.055-54.358-221.314z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-52.47-216.377c0,0-2.158,11.162,0,20.382
	c0,0-2.928,0.889-4.512,3.862c0,0-1.941,3.786-1.373,7.582c0,0,0.785,6.326,1.765,9.857c0,0,1.192,8.131,2.143,10.761
	c0,0,1.455,4.123,3.86,4.291c0,0,1.903,0.844,3.469,0.285c0,0,1.567,7.486,4.364,12.8c0,0,4.42,8.427,7.664,11.728
	c0,0,0.168,1.183,0.056,2.526l0.056,3.573c0,0-0.112,3.682-3.524,5.081c0,0-9.119,5.56-17.008,8.749c0,0-10.238,8.038-23.609,21.297
	c0,0-7.497,11.319-12.756,20.494c0,0-6.657,17.66-9.399,26.052c0,0-4.587,19.751-7.105,31.108c0,0-1.342,7.376-2.182,11.068
	c0,0-2.629,10.172-4.587,14.816c0,0-3.916,11.436-4.196,13.953c0,0-0.727,8.111,0,11.747c0,0,0.28,6.229,2.238,7.906
	c0,0,1.175,1.176,1.958,1.12c0,0,0.168,6.136,2.517,8.317c0,0,1.679,2.352,3.805,1.735c0,0,0.895,4.234,4.475,4.346
	c0,0,3.413,0.798,4.084-1.439c0,0,1.206,4.602,4.892,4.602c0,0,4.469,1.521,4.7-2.488c0,0,0.184-0.132-1.751-5.338
	c0,0-1.474-2.362-1.382-7.892c0,0,0.184-3.062,1.705-5.918c0,0,1.151-1.312,3.455-1.173c0,0,2.811,0.721,2.903,3.394
	c0,0,0.184,4.662,0.322,6.551c0,0,0.507,5.701,3.226,6.485c0,0,2.119,1.164,3.409,0.703c0,0,1.29-0.019,0.876-2.921
	c0,0-0.645-3.341-0.046-9.285c0,0,0.322-2.222,0-3.696c0,0-1.106-3.162-3.686-6.57c0,0-2.765-2.966-2.812-6.928
	c0,0-0.184-1.593,0.553-2.606c0,0,6.019-6.964,8.907-13.711c0,0,3.119-4.937,3.948-8.438c0,0,1.244-4.783,1.336-7.271
	c0,0,3.548-2.582,5.023-3.872c0,0,3.916-1.398,6.404-4.393c0,0,3.456-2.654,3.963-5.603c0,0,1.059,10.754,1.151,21.49
	c0,0,0.784,17.653-0.414,29.633c0,0-3.179,30.119-5.345,39.749c0,0-5.483,31.836-6.128,42.11c0,0-0.968,17.827-0.645,28.747
	c0,0,0.092,4.268,0.783,10.119c0,0,3.225,20.043,7.234,32.76c0,0,5.437,19.062,6.773,22.887c0,0,2.166,7.901,1.751,12.97
	c0,0-1.06,8.812-1.06,11.069c0,0-0.553,11.423,0.922,15.431c0,0,1.914,4.423,5.047,4.746c0,0,2.306,0.092,2.813-0.922
	c0,0,1.185,1.521,3.396,1.521c0,0,2.988-0.369,3.448-1.659c0,0,0.714,1.015,3.294,1.061c0,0,3.431,0.138,4.076-1.981
	c0,0,0.553,1.198,2.627,1.014c0,0,3.143-0.6,3.972-1.981c0,0,1.703,1.567,3.868,1.336c0,0,4.366-0.229,4.734-3.225
	c0,0,0.775-1.936-0.745-4.792c0,0-3.362-7.464-5.62-11.888c0,0-4.507-7.648-4.784-8.755c0,0-0.784-0.967-0.692-3.823
	c0,0,2.341-13.777,2.018-19.905c0,0,0.122-6.635-1.168-14.053c0,0-1.086-7.557-2.099-11.013c0,0-0.673-3.271-0.028-6.818
	c0,0,1.027-4.792,2.639-9.677c0,0,3.573-7.05,4.863-15.343c0,0,3.536-11.266,2.108-16.841c0,0,3.48,1.29,7.834,2.097
	c0,0,3.823,0.691,7.44,0.553c3.617,0.139,7.429-0.553,7.429-0.553c4.354-0.807,7.829-2.097,7.829-2.097
	c-1.429,5.575,2.128,16.841,2.128,16.841c1.29,8.293,4.875,15.343,4.875,15.343c1.613,4.885,2.643,9.677,2.643,9.677
	c0.645,3.548-0.008,6.818-0.008,6.818c-1.015,3.456-2.085,11.013-2.085,11.013c-1.29,7.418-1.14,14.053-1.14,14.053
	c-0.323,6.128,2.054,19.905,2.054,19.905c0.093,2.856-0.683,3.823-0.683,3.823c-0.276,1.106-4.749,8.755-4.749,8.755
	c-2.257,4.424-5.576,11.888-5.576,11.888c-1.521,2.856-0.729,4.792-0.729,4.792c0.369,2.995,4.759,3.225,4.759,3.225
	c2.166,0.231,3.894-1.336,3.894-1.336c0.829,1.382,4.003,1.981,4.003,1.981c2.073,0.185,2.647-1.014,2.647-1.014
	c0.645,2.119,4.104,1.981,4.104,1.981c2.58-0.046,3.313-1.061,3.313-1.061c0.461,1.29,3.483,1.659,3.483,1.659
	c2.212,0,3.437-1.521,3.437-1.521c0.506,1.014,2.849,0.922,2.849,0.922c3.134-0.323,5.078-4.746,5.078-4.746
	c1.475-4.008,0.922-15.383,0.922-15.383c0-2.258-1.06-11.019-1.06-11.019c-0.415-5.067,1.751-12.923,1.751-12.923
	c1.336-3.825,6.773-22.812,6.773-22.812c4.008-12.716,7.233-32.682,7.233-32.682c0.691-5.852,0.783-10.102,0.783-10.102
	c0.322-10.92-0.645-28.652-0.645-28.652c-0.646-10.274-6.129-42.038-6.129-42.038c-2.165-9.63-5.345-39.652-5.345-39.652
	c-1.198-11.98-0.415-29.568-0.415-29.568C53.26-7.351,54.32-18.067,54.32-18.067c0.507,2.949,3.963,5.623,3.963,5.623
	c2.488,2.995,6.404,4.411,6.404,4.411c1.475,1.29,5.022,3.895,5.022,3.895c0.092,2.488,1.336,7.292,1.336,7.292
	c0.829,3.502,3.948,8.455,3.948,8.455c2.888,6.748,8.907,13.747,8.907,13.747c0.736,1.015,0.553,2.61,0.553,2.61
	c-0.046,3.963-2.811,6.941-2.811,6.941c-2.58,3.409-3.687,6.581-3.687,6.581c-0.322,1.474,0,3.699,0,3.699
	c0.6,5.943-0.046,9.287-0.046,9.287c-0.415,2.903,0.875,2.92,0.875,2.92c1.291,0.461,3.41-0.7,3.41-0.7
	c2.719-0.782,3.225-6.479,3.225-6.479c0.14-1.889,0.323-6.551,0.323-6.551c0.092-2.672,2.903-3.396,2.903-3.396
	c2.303-0.139,3.455,1.169,3.455,1.169c1.521,2.856,1.705,5.911,1.705,5.911c0.092,5.529-1.383,7.881-1.383,7.881
	c-1.935,5.207-1.751,5.335-1.751,5.335c0.23,4.01,4.7,2.482,4.7,2.482c3.687,0,4.892-4.611,4.892-4.611
	c0.672,2.238,4.084,1.439,4.084,1.439c3.581-0.112,4.476-4.352,4.476-4.352c2.126,0.615,3.804-1.742,3.804-1.742
	c2.351-2.182,2.519-8.327,2.519-8.327c0.783,0.056,1.958-1.125,1.958-1.125c1.958-1.679,2.237-7.919,2.237-7.919
	c0.728-3.638,0-11.769,0-11.769c-0.279-2.517-4.195-13.979-4.195-13.979c-1.958-4.644-4.588-14.834-4.588-14.834
	c-0.84-3.693-2.182-11.081-2.182-11.081c-2.518-11.357-7.105-31.163-7.105-31.163c-2.741-8.391-9.398-26.097-9.398-26.097
	c-5.259-9.176-12.756-20.549-12.756-20.549c-13.371-13.259-23.609-21.363-23.609-21.363c-7.889-3.188-17.008-8.804-17.008-8.804
	c-3.413-1.398-3.524-5.088-3.524-5.088l0.056-3.575c-0.111-1.343,0.056-2.536,0.056-2.536c3.245-3.301,7.665-11.774,7.665-11.774
	c2.797-5.315,4.364-12.849,4.364-12.849c1.566,0.56,3.468-0.305,3.468-0.305c2.406-0.168,3.861-4.321,3.861-4.321
	c0.951-2.63,2.142-10.785,2.142-10.785c0.981-3.531,1.767-9.907,1.767-9.907c0.566-3.796-1.373-7.653-1.373-7.653
	c-1.584-2.973-4.513-3.9-4.513-3.9c2.158-9.22,0-20.456,0-20.456c-1.962-11.182-13.601-21.383-13.601-21.383
	C26.242-254.239,0-253.557,0-253.557s-26.249-0.682-38.875,15.796C-38.875-237.761-50.508-227.56-52.47-216.377z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-50.582-211.441c0,0-2.05,10.903,0,19.662
	c0,0-2.782,0.94-4.286,3.764c0,0-1.844,3.71-1.305,7.317c0,0,0.746,6.155,1.677,9.51c0,0,1.132,7.885,2.036,10.383
	c0,0,1.382,4.008,3.667,4.167c0,0,1.807,0.86,3.295,0.328c0,0,1.489,7.312,4.146,12.361c0,0,4.199,8.216,7.281,11.352
	c0,0,0.16,1.159,0.054,2.434l0.053,3.446c0,0-0.107,3.594-3.349,4.923c0,0-8.663,5.589-16.157,8.619c0,0-9.726,8.133-22.429,20.729
	c0,0-7.121,11.116-12.117,19.833c0,0-6.325,17.188-8.929,25.16c0,0-4.359,19.236-6.75,30.025c0,0-1.276,7.172-2.073,10.68
	c0,0-2.498,9.893-4.358,14.304c0,0-3.721,11.078-3.986,13.47c0,0-0.691,7.878,0,11.333c0,0,0.265,6.038,2.125,7.632
	c0,0,1.117,1.152,1.861,1.099c0,0,0.159,5.959,2.391,8.032c0,0,1.595,2.302,3.614,1.718c0,0,0.851,4.123,4.252,4.23
	c0,0,3.242,0.841,3.88-1.285c0,0,1.146,4.481,4.647,4.481c0,0,4.246,1.558,4.465-2.25c0,0,0.175-0.012-1.663-4.957
	c0,0-1.401-2.081-1.313-7.333c0,0,0.175-2.782,1.619-5.496c0,0,1.095-1.178,3.283-1.046c0,0,2.67,0.759,2.758,3.298
	c0,0,0.175,4.524,0.306,6.318c0,0,0.482,5.529,3.064,6.273c0,0,2.014,1.164,3.239,0.726c0,0,1.226,0.047,0.832-2.711
	c0,0-0.613-2.981-0.044-8.629c0,0,0.307-2.036,0-3.437c0,0-1.05-2.851-3.502-6.089c0,0-2.626-2.662-2.67-6.427
	c0,0-0.175-1.46,0.526-2.423c0,0,5.717-6.285,8.461-12.694c0,0,2.963-4.497,3.751-7.824c0,0,1.182-4.391,1.269-6.755
	c0,0,3.371-2.33,4.771-3.555c0,0,3.721-1.179,6.085-4.024c0,0,3.283-2.382,3.764-5.184c0,0,1.007,10.535,1.094,20.734
	c0,0,0.745,17.212-0.393,28.592c0,0-3.021,29.212-5.078,38.36c0,0-5.209,30.879-5.822,40.64c0,0-0.919,17.365-0.612,27.739
	c0,0,0.087,4.204,0.744,9.763c0,0,3.064,19.542,6.872,31.623c0,0,5.165,18.466,6.434,22.101c0,0,2.058,7.702,1.664,12.518
	c0,0-1.007,8.537-1.007,10.682c0,0-0.525,11.082,0.875,14.891c0,0,1.845,4.202,4.822,4.509c0,0,2.2,0.087,2.681-0.876
	c0,0,1.139,1.445,3.24,1.445c0,0,2.851-0.351,3.289-1.576c0,0,0.689,0.963,3.14,1.007c0,0,3.277,0.131,3.889-1.882
	c0,0,0.535,1.138,2.505,0.963c0,0,3.001-0.569,3.789-1.883c0,0,1.631,1.488,3.689,1.27c0,0,4.169-0.219,4.52-3.063
	c0,0,0.754-1.84-0.691-4.553c0,0-3.142-7.092-5.286-11.294c0,0-4.244-7.266-4.506-8.315c0,0-0.732-0.919-0.644-3.633
	c0,0,2.303-13.089,1.997-18.91c0,0,0.171-6.304-1.055-13.351c0,0-0.987-7.179-1.95-10.462c0,0-0.613-3.107-0.001-6.478
	c0,0,1.015-4.552,2.547-9.192c0,0,3.458-6.697,4.684-14.576c0,0,3.427-10.702,2.07-15.999c0,0,3.336,1.227,7.473,1.992
	c0,0,3.66,0.656,7.096,0.525c3.437,0.131,7.085-0.525,7.085-0.525c4.136-0.766,7.467-1.992,7.467-1.992
	c-1.356,5.297,2.093,15.999,2.093,15.999c1.225,7.879,4.695,14.576,4.695,14.576c1.532,4.641,2.55,9.192,2.55,9.192
	c0.613,3.37,0.02,6.478,0.02,6.478c-0.962,3.283-1.934,10.462-1.934,10.462c-1.225,7.047-1.024,13.351-1.024,13.351
	c-0.307,5.821,2.035,18.91,2.035,18.91c0.087,2.714-0.634,3.633-0.634,3.633c-0.264,1.05-4.47,8.315-4.47,8.315
	c-2.145,4.202-5.241,11.294-5.241,11.294c-1.444,2.713-0.673,4.553-0.673,4.553c0.351,2.845,4.546,3.063,4.546,3.063
	c2.059,0.219,3.716-1.27,3.716-1.27c0.788,1.313,3.821,1.883,3.821,1.883c1.97,0.175,2.526-0.963,2.526-0.963
	c0.613,2.013,3.919,1.882,3.919,1.882c2.451-0.044,3.162-1.007,3.162-1.007c0.438,1.226,3.325,1.576,3.325,1.576
	c2.101,0,3.282-1.445,3.282-1.445c0.48,0.963,2.72,0.876,2.72,0.876c2.977-0.307,4.854-4.509,4.854-4.509
	c1.4-3.809,0.875-14.84,0.875-14.84c0-2.146-1.007-10.628-1.007-10.628c-0.393-4.815,1.664-12.47,1.664-12.47
	c1.27-3.633,6.434-22.021,6.434-22.021c3.809-12.081,6.872-31.541,6.872-31.541c0.657-5.56,0.745-9.745,0.745-9.745
	c0.307-10.374-0.612-27.639-0.612-27.639c-0.613-9.762-5.822-40.562-5.822-40.562c-2.058-9.148-5.077-38.259-5.077-38.259
	c-1.138-11.381-0.395-28.524-0.395-28.524C51.333-4.74,52.34-15.235,52.34-15.235c0.48,2.801,3.764,5.205,3.764,5.205
	c2.364,2.845,6.085,4.042,6.085,4.042c1.4,1.226,4.771,3.58,4.771,3.58c0.087,2.364,1.269,6.777,1.269,6.777
	c0.788,3.326,3.751,7.844,3.751,7.844c2.744,6.41,8.461,12.733,8.461,12.733c0.701,0.963,0.526,2.425,0.526,2.425
	c-0.044,3.765-2.67,6.441-2.67,6.441c-2.452,3.238-3.502,6.1-3.502,6.1c-0.307,1.4,0,3.44,0,3.44
	c0.568,5.646-0.044,8.633-0.044,8.633c-0.395,2.757,0.832,2.709,0.832,2.709c1.225,0.437,3.238-0.724,3.238-0.724
	c2.582-0.743,3.064-6.268,3.064-6.268c0.131-1.795,0.306-6.319,0.306-6.319c0.088-2.538,2.758-3.3,2.758-3.3
	c2.189-0.131,3.283,1.042,3.283,1.042c1.444,2.714,1.619,5.489,1.619,5.489c0.088,5.253-1.312,7.322-1.312,7.322
	c-1.839,4.945-1.663,4.954-1.663,4.954c0.219,3.808,4.465,2.243,4.465,2.243c3.501,0,4.646-4.489,4.646-4.489
	c0.639,2.126,3.88,1.281,3.88,1.281c3.401-0.105,4.253-4.234,4.253-4.234c2.019,0.585,3.613-1.726,3.613-1.726
	c2.232-2.072,2.392-8.042,2.392-8.042c0.743,0.054,1.86-1.104,1.86-1.104c1.86-1.594,2.126-7.647,2.126-7.647
	c0.69-3.455,0-11.353,0-11.353c-0.266-2.392-3.986-13.499-3.986-13.499c-1.86-4.411-4.358-14.323-4.358-14.323
	c-0.797-3.508-2.073-10.694-2.073-10.694c-2.391-10.79-6.749-30.081-6.749-30.081c-2.604-7.972-8.929-25.209-8.929-25.209
	c-4.996-8.717-12.118-19.89-12.118-19.89c-12.703-12.597-22.429-20.799-22.429-20.799c-7.494-3.03-16.157-8.676-16.157-8.676
	c-3.242-1.329-3.349-4.931-3.349-4.931l0.053-3.448c-0.106-1.276,0.054-2.446,0.054-2.446c3.082-3.135,7.281-11.4,7.281-11.4
	c2.657-5.049,4.146-12.411,4.146-12.411c1.487,0.532,3.295-0.35,3.295-0.35c2.284-0.159,3.667-4.198,3.667-4.198
	c0.903-2.498,2.036-10.409,2.036-10.409c0.932-3.354,1.677-9.563,1.677-9.563c0.539-3.606-1.306-7.391-1.306-7.391
	c-1.504-2.824-4.285-3.803-4.285-3.803c2.05-8.759,0-19.741,0-19.741c-1.864-10.623-13.202-20.314-13.202-20.314
	C25.384-247.409,0-246.761,0-246.761s-25.391-0.648-37.385,15.006C-37.385-231.755-48.717-222.064-50.582-211.441z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-48.693-206.505c0,0-1.942,10.645,0,18.943
	c0,0-2.635,0.99-4.061,3.665c0,0-1.746,3.635-1.236,7.052c0,0,0.707,5.985,1.589,9.163c0,0,1.073,7.639,1.929,10.005
	c0,0,1.309,3.892,3.474,4.043c0,0,1.712,0.876,3.122,0.372c0,0,1.41,7.137,3.927,11.921c0,0,3.978,8.004,6.898,10.975
	c0,0,0.151,1.135,0.051,2.344l0.05,3.318c0,0-0.101,3.506-3.172,4.765c0,0-8.207,5.618-15.307,8.488c0,0-9.214,8.229-21.248,20.162
	c0,0-6.747,10.914-11.48,19.172c0,0-5.992,16.716-8.459,24.269c0,0-4.129,18.719-6.395,28.94c0,0-1.208,6.969-1.964,10.292
	c0,0-2.366,9.613-4.128,13.792c0,0-3.525,10.721-3.777,12.987c0,0-0.654,7.644,0,10.917c0,0,0.252,5.849,2.014,7.359
	c0,0,1.058,1.128,1.763,1.077c0,0,0.151,5.782,2.265,7.746c0,0,1.511,2.254,3.424,1.7c0,0,0.806,4.014,4.028,4.113
	c0,0,3.072,0.887,3.676-1.128c0,0,1.085,4.359,4.403,4.359c0,0,4.022,1.596,4.229-2.012c0,0,0.166,0.109-1.575-4.576
	c0,0-1.327-1.798-1.244-6.774c0,0,0.165-2.504,1.534-5.074c0,0,1.037-1.042,3.11-0.919c0,0,2.53,0.798,2.612,3.202
	c0,0,0.166,4.388,0.291,6.087c0,0,0.456,5.356,2.903,6.062c0,0,1.907,1.164,3.068,0.749c0,0,1.161,0.112,0.788-2.5
	c0,0-0.581-2.624-0.041-7.975c0,0,0.29-1.85,0-3.177c0,0-0.996-2.539-3.318-5.607c0,0-2.488-2.359-2.529-5.926
	c0,0-0.166-1.325,0.497-2.237c0,0,5.417-5.606,8.017-11.68c0,0,2.806-4.06,3.553-7.212c0,0,1.119-3.999,1.202-6.238
	c0,0,3.193-2.079,4.52-3.24c0,0,3.525-0.959,5.765-3.654c0,0,3.11-2.111,3.566-4.765c0,0,0.954,10.316,1.036,19.978
	c0,0,0.705,16.771-0.373,27.552c0,0-2.861,28.305-4.81,36.972c0,0-4.935,29.92-5.515,39.167c0,0-0.871,16.904-0.581,26.731
	c0,0,0.083,4.141,0.705,9.406c0,0,2.903,19.042,6.511,30.487c0,0,4.893,17.871,6.095,21.312c0,0,1.949,7.504,1.576,12.066
	c0,0-0.954,8.263-0.954,10.295c0,0-0.497,10.743,0.83,14.351c0,0,1.775,3.981,4.595,4.271c0,0,2.094,0.083,2.55-0.829
	c0,0,1.093,1.368,3.083,1.368c0,0,2.716-0.332,3.13-1.493c0,0,0.666,0.912,2.988,0.954c0,0,3.121,0.124,3.701-1.783
	c0,0,0.517,1.078,2.383,0.912c0,0,2.86-0.539,3.606-1.783c0,0,1.56,1.41,3.509,1.202c0,0,3.974-0.207,4.306-2.902
	c0,0,0.733-1.741-0.636-4.312c0,0-2.921-6.718-4.953-10.699c0,0-3.979-6.883-4.228-7.879c0,0-0.678-0.871-0.595-3.442
	c0,0,2.266-12.398,1.975-17.913c0,0,0.22-5.972-0.941-12.648c0,0-0.888-6.8-1.8-9.91c0,0-0.555-2.945,0.026-6.138
	c0,0,1.003-4.312,2.454-8.708c0,0,3.344-6.345,4.505-13.81c0,0,3.317-10.139,2.031-15.156c0,0,3.194,1.162,7.113,1.887
	c0,0,3.497,0.622,6.753,0.498c3.255,0.124,6.74-0.498,6.74-0.498c3.919-0.725,7.105-1.887,7.105-1.887
	c-1.285,5.018,2.055,15.156,2.055,15.156c1.162,7.465,4.518,13.81,4.518,13.81c1.452,4.396,2.457,8.708,2.457,8.708
	c0.581,3.192,0.048,6.138,0.048,6.138c-0.912,3.11-1.782,9.91-1.782,9.91c-1.161,6.677-0.911,12.648-0.911,12.648
	c-0.29,5.515,2.016,17.913,2.016,17.913c0.083,2.571-0.585,3.442-0.585,3.442c-0.249,0.996-4.189,7.879-4.189,7.879
	c-2.031,3.981-4.905,10.699-4.905,10.699c-1.369,2.571-0.616,4.312-0.616,4.312c0.332,2.695,4.333,2.902,4.333,2.902
	c1.949,0.208,3.537-1.202,3.537-1.202c0.746,1.244,3.64,1.783,3.64,1.783c1.866,0.166,2.406-0.912,2.406-0.912
	c0.58,1.907,3.732,1.783,3.732,1.783c2.322-0.042,3.01-0.954,3.01-0.954c0.415,1.161,3.169,1.493,3.169,1.493
	c1.99,0,3.126-1.368,3.126-1.368c0.456,0.912,2.592,0.829,2.592,0.829c2.82-0.29,4.629-4.271,4.629-4.271
	c1.327-3.607,0.829-14.298,0.829-14.298c0-2.031-0.954-10.238-0.954-10.238c-0.373-4.562,1.576-12.015,1.576-12.015
	c1.203-3.441,6.096-21.231,6.096-21.231c3.608-11.445,6.51-30.399,6.51-30.399c0.622-5.267,0.705-9.388,0.705-9.388
	c0.29-9.828-0.58-26.627-0.58-26.627c-0.58-9.248-5.516-39.086-5.516-39.086c-1.949-8.666-4.81-36.866-4.81-36.866
	c-1.078-10.782-0.373-27.479-0.373-27.479c0.083-9.662,1.037-19.937,1.037-19.937c0.456,2.654,3.565,4.788,3.565,4.788
	c2.239,2.695,5.764,3.673,5.764,3.673c1.327,1.162,4.521,3.265,4.521,3.265c0.083,2.239,1.203,6.262,1.203,6.262
	c0.746,3.151,3.553,7.232,3.553,7.232c2.599,6.073,8.017,11.718,8.017,11.718c0.663,0.912,0.498,2.242,0.498,2.242
	c-0.043,3.566-2.53,5.94-2.53,5.94c-2.322,3.068-3.317,5.619-3.317,5.619c-0.291,1.327,0,3.181,0,3.181
	c0.539,5.349-0.042,7.977-0.042,7.977c-0.373,2.612,0.788,2.498,0.788,2.498c1.161,0.415,3.069-0.744,3.069-0.744
	c2.445-0.705,2.902-6.057,2.902-6.057c0.124-1.7,0.29-6.086,0.29-6.086c0.083-2.406,2.612-3.205,2.612-3.205
	c2.074-0.124,3.11,0.914,3.11,0.914c1.369,2.571,1.535,5.068,1.535,5.068c0.082,4.976-1.244,6.762-1.244,6.762
	c-1.742,4.687-1.576,4.573-1.576,4.573c0.207,3.606,4.229,2.005,4.229,2.005c3.317,0,4.402-4.369,4.402-4.369
	c0.604,2.014,3.676,1.127,3.676,1.127c3.223-0.101,4.028-4.12,4.028-4.12c1.913,0.555,3.424-1.707,3.424-1.707
	c2.115-1.964,2.266-7.757,2.266-7.757c0.705,0.05,1.763-1.083,1.763-1.083c1.762-1.51,2.014-7.375,2.014-7.375
	c0.655-3.272,0-10.938,0-10.938c-0.252-2.267-3.776-13.018-3.776-13.018c-1.763-4.179-4.129-13.813-4.129-13.813
	c-0.755-3.323-1.964-10.306-1.964-10.306c-2.266-10.222-6.394-28.999-6.394-28.999c-2.468-7.553-8.459-24.321-8.459-24.321
	C79.424-79.715,72.676-90.69,72.676-90.69c-12.034-11.933-21.248-20.235-21.248-20.235c-7.099-2.87-15.307-8.548-15.307-8.548
	c-3.071-1.259-3.172-4.774-3.172-4.774l0.051-3.32c-0.101-1.208,0.05-2.355,0.05-2.355c2.92-2.971,6.898-11.027,6.898-11.027
	c2.518-4.783,3.927-11.973,3.927-11.973c1.41,0.504,3.122-0.395,3.122-0.395c2.165-0.151,3.474-4.075,3.474-4.075
	c0.856-2.367,1.93-10.032,1.93-10.032c0.883-3.178,1.589-9.219,1.589-9.219c0.511-3.417-1.236-7.13-1.236-7.13
	c-1.426-2.676-4.061-3.706-4.061-3.706c1.941-8.298,0-19.026,0-19.026c-1.766-10.064-12.804-19.244-12.804-19.244
	C24.525-240.58,0-239.966,0-239.966s-24.532-0.614-35.896,14.217C-35.896-225.749-46.927-216.569-48.693-206.505z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-46.805-201.568c0,0-1.834,10.387,0,18.224
	c0,0-2.489,1.039-3.835,3.567c0,0-1.65,3.559-1.167,6.785c0,0,0.667,5.815,1.5,8.817c0,0,1.013,7.393,1.822,9.628
	c0,0,1.236,3.775,3.281,3.918c0,0,1.617,0.891,2.948,0.416c0,0,1.332,6.962,3.709,11.48c0,0,3.757,7.794,6.515,10.6
	c0,0,0.143,1.111,0.048,2.252l0.048,3.19c0,0-0.096,3.419-2.996,4.608c0,0-7.752,5.647-14.457,8.357c0,0-8.702,8.325-20.068,19.595
	c0,0-6.372,10.712-10.842,18.511c0,0-5.659,16.245-7.989,23.378c0,0-3.899,18.202-6.039,27.856c0,0-1.142,6.766-1.855,9.904
	c0,0-2.235,9.332-3.899,13.279c0,0-3.329,10.365-3.567,12.505c0,0-0.618,7.411,0,10.502c0,0,0.238,5.66,1.902,7.086
	c0,0,0.999,1.104,1.665,1.057c0,0,0.142,5.605,2.139,7.46c0,0,1.427,2.206,3.234,1.683c0,0,0.761,3.903,3.804,3.998
	c0,0,2.901,0.929,3.472-0.973c0,0,1.025,4.237,4.158,4.237c0,0,3.799,1.634,3.995-1.773c0,0,0.156,0.23-1.489-4.195
	c0,0-1.253-1.516-1.175-6.215c0,0,0.157-2.225,1.45-4.653c0,0,0.979-0.908,2.937-0.791c0,0,2.389,0.835,2.467,3.106
	c0,0,0.157,4.25,0.274,5.855c0,0,0.431,5.183,2.742,5.849c0,0,1.801,1.164,2.898,0.771c0,0,1.097,0.178,0.744-2.29
	c0,0-0.548-2.265-0.039-7.317c0,0,0.274-1.665,0-2.918c0,0-0.94-2.229-3.133-5.126c0,0-2.35-2.057-2.389-5.424
	c0,0-0.157-1.192,0.47-2.055c0,0,5.116-4.927,7.571-10.662c0,0,2.651-3.623,3.356-6.599c0,0,1.057-3.608,1.135-5.723
	c0,0,3.016-1.827,4.269-2.923c0,0,3.329-0.74,5.444-3.285c0,0,2.938-1.839,3.368-4.346c0,0,0.901,10.097,0.979,19.222
	c0,0,0.666,16.328-0.352,26.51c0,0-2.702,27.397-4.543,35.584c0,0-4.661,28.961-5.209,37.695c0,0-0.822,16.441-0.548,25.724
	c0,0,0.078,4.076,0.666,9.05c0,0,2.741,18.541,6.148,29.351c0,0,4.622,17.275,5.758,20.526c0,0,1.84,7.306,1.488,11.613
	c0,0-0.901,7.99-0.901,9.909c0,0-0.47,10.402,0.783,13.81c0,0,1.706,3.76,4.369,4.034c0,0,1.989,0.078,2.42-0.783
	c0,0,1.046,1.292,2.925,1.292c0,0,2.58-0.312,2.972-1.41c0,0,0.641,0.862,2.834,0.901c0,0,2.966,0.117,3.514-1.684
	c0,0,0.499,1.018,2.261,0.86c0,0,2.718-0.509,3.423-1.684c0,0,1.489,1.332,3.329,1.136c0,0,3.778-0.196,4.092-2.741
	c0,0,0.712-1.645-0.58-4.073c0,0-2.701-6.345-4.62-10.104c0,0-3.716-6.501-3.951-7.441c0,0-0.624-0.822-0.546-3.251
	c0,0,2.229-11.71,1.954-16.919c0,0,0.269-5.639-0.828-11.944c0,0-0.789-6.423-1.65-9.36c0,0-0.496-2.781,0.053-5.796
	c0,0,0.99-4.074,2.361-8.225c0,0,3.229-5.992,4.325-13.042c0,0,3.208-9.575,1.994-14.314c0,0,3.051,1.096,6.752,1.782
	c0,0,3.334,0.587,6.409,0.47c3.074,0.117,6.396-0.47,6.396-0.47c3.7-0.687,6.744-1.782,6.744-1.782
	c-1.215,4.739,2.018,14.314,2.018,14.314c1.097,7.05,4.34,13.042,4.34,13.042c1.37,4.15,2.364,8.225,2.364,8.225
	c0.548,3.015,0.076,5.796,0.076,5.796c-0.862,2.938-1.634,9.36-1.634,9.36c-1.096,6.306-0.796,11.944-0.796,11.944
	c-0.273,5.209,1.996,16.919,1.996,16.919c0.079,2.429-0.535,3.251-0.535,3.251c-0.234,0.94-3.909,7.441-3.909,7.441
	c-1.92,3.76-4.571,10.104-4.571,10.104c-1.292,2.429-0.56,4.073-0.56,4.073c0.313,2.545,4.12,2.741,4.12,2.741
	c1.841,0.196,3.359-1.136,3.359-1.136c0.705,1.175,3.458,1.684,3.458,1.684c1.762,0.157,2.285-0.86,2.285-0.86
	c0.548,1.801,3.547,1.684,3.547,1.684c2.193-0.039,2.857-0.901,2.857-0.901c0.392,1.098,3.012,1.41,3.012,1.41
	c1.88,0,2.972-1.292,2.972-1.292c0.43,0.861,2.462,0.783,2.462,0.783c2.663-0.274,4.404-4.034,4.404-4.034
	c1.254-3.407,0.784-13.755,0.784-13.755c0-1.919-0.901-9.849-0.901-9.849c-0.353-4.309,1.488-11.561,1.488-11.561
	c1.136-3.25,5.757-20.44,5.757-20.44c3.408-10.81,6.149-29.26,6.149-29.26c0.588-4.974,0.666-9.03,0.666-9.03
	c0.273-9.281-0.549-25.614-0.549-25.614c-0.549-8.734-5.209-37.609-5.209-37.609c-1.841-8.186-4.543-35.473-4.543-35.473
	c-1.019-10.183-0.353-26.435-0.353-26.435c0.078-9.125,0.979-19.18,0.979-19.18c0.432,2.507,3.368,4.369,3.368,4.369
	c2.115,2.546,5.444,3.306,5.444,3.306c1.253,1.096,4.269,2.949,4.269,2.949c0.078,2.115,1.137,5.748,1.137,5.748
	c0.704,2.977,3.355,6.621,3.355,6.621c2.455,5.735,7.571,10.703,7.571,10.703c0.626,0.862,0.47,2.058,0.47,2.058
	c-0.039,3.368-2.389,5.44-2.389,5.44c-2.193,2.897-3.133,5.137-3.133,5.137c-0.275,1.254,0,2.923,0,2.923
	c0.509,5.053-0.04,7.321-0.04,7.321c-0.353,2.467,0.744,2.288,0.744,2.288c1.097,0.392,2.898-0.768,2.898-0.768
	c2.31-0.666,2.741-5.845,2.741-5.845c0.118-1.604,0.273-5.854,0.273-5.854c0.079-2.272,2.469-3.109,2.469-3.109
	c1.958-0.117,2.937,0.787,2.937,0.787c1.292,2.428,1.449,4.646,1.449,4.646c0.078,4.699-1.175,6.202-1.175,6.202
	c-1.646,4.427-1.488,4.192-1.488,4.192c0.196,3.407,3.995,1.767,3.995,1.767c3.133,0,4.158-4.249,4.158-4.249
	c0.569,1.902,3.471,0.973,3.471,0.973c3.044-0.095,3.804-4.004,3.804-4.004c1.808,0.522,3.234-1.691,3.234-1.691
	c1.997-1.854,2.14-7.471,2.14-7.471c0.666,0.047,1.664-1.062,1.664-1.062c1.665-1.426,1.903-7.103,1.903-7.103
	c0.618-3.091,0-10.524,0-10.524c-0.238-2.14-3.567-12.536-3.567-12.536c-1.664-3.947-3.898-13.302-3.898-13.302
	c-0.714-3.138-1.855-9.919-1.855-9.919c-2.14-9.654-6.039-27.918-6.039-27.918c-2.331-7.133-7.989-23.431-7.989-23.431
	c-4.47-7.799-10.843-18.574-10.843-18.574c-11.365-11.271-20.067-19.672-20.067-19.672c-6.705-2.71-14.456-8.419-14.456-8.419
	c-2.901-1.189-2.996-4.617-2.996-4.617l0.048-3.193c-0.095-1.141,0.047-2.264,0.047-2.264c2.758-2.806,6.515-10.653,6.515-10.653
	c2.378-4.518,3.709-11.536,3.709-11.536c1.332,0.476,2.949-0.44,2.949-0.44c2.044-0.142,3.281-3.952,3.281-3.952
	c0.808-2.235,1.821-9.656,1.821-9.656c0.834-3.002,1.501-8.875,1.501-8.875c0.481-3.227-1.167-6.868-1.167-6.868
	c-1.348-2.527-3.835-3.609-3.835-3.609c1.834-7.837,0-18.311,0-18.311c-1.668-9.505-12.405-18.175-12.405-18.175
	C23.667-233.75,0-233.17,0-233.17s-23.675-0.58-34.407,13.427C-34.407-219.744-45.138-211.073-46.805-201.568z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-44.916-196.632c0,0-1.726,10.129,0,17.505
	c0,0-2.342,1.089-3.61,3.468c0,0-1.552,3.483-1.098,6.52c0,0,0.628,5.645,1.412,8.469c0,0,0.954,7.148,1.715,9.251
	c0,0,1.163,3.66,3.088,3.794c0,0,1.521,0.907,2.775,0.459c0,0,1.253,6.789,3.491,11.041c0,0,3.535,7.582,6.131,10.223
	c0,0,0.135,1.087,0.045,2.162l0.045,3.062c0,0-0.09,3.331-2.82,4.45c0,0-7.295,5.675-13.606,8.227c0,0-8.19,8.42-18.887,19.028
	c0,0-5.998,10.508-10.205,17.849c0,0-5.326,15.773-7.519,22.487c0,0-3.67,17.686-5.684,26.771c0,0-1.074,6.563-1.746,9.517
	c0,0-2.103,9.052-3.67,12.767c0,0-3.133,10.007-3.356,12.021c0,0-0.582,7.178,0,10.087c0,0,0.223,5.471,1.79,6.814
	c0,0,0.94,1.078,1.566,1.033c0,0,0.135,5.43,2.014,7.176c0,0,1.343,2.156,3.044,1.664c0,0,0.716,3.793,3.58,3.883
	c0,0,2.731,0.973,3.268-0.818c0,0,0.964,4.117,3.913,4.117c0,0,3.576,1.671,3.76-1.536c0,0,0.147,0.352-1.401-3.814
	c0,0-1.179-1.232-1.106-5.655c0,0,0.148-1.947,1.364-4.232c0,0,0.922-0.773,2.765-0.663c0,0,2.248,0.873,2.322,3.012
	c0,0,0.147,4.11,0.258,5.623c0,0,0.405,5.01,2.58,5.636c0,0,1.696,1.164,2.728,0.795c0,0,1.032,0.243,0.7-2.08
	c0,0-0.516-1.907-0.037-6.662c0,0,0.258-1.479,0-2.659c0,0-0.884-1.916-2.948-4.644c0,0-2.212-1.754-2.249-4.924
	c0,0-0.147-1.059,0.442-1.869c0,0,4.815-4.247,7.126-9.646c0,0,2.495-3.186,3.158-5.986c0,0,0.996-3.218,1.069-5.207
	c0,0,2.839-1.575,4.018-2.607c0,0,3.133-0.519,5.124-2.915c0,0,2.764-1.568,3.17-3.927c0,0,0.848,9.878,0.921,18.467
	c0,0,0.627,15.885-0.331,25.468c0,0-2.544,26.492-4.276,34.195c0,0-4.387,28.004-4.903,36.224c0,0-0.774,15.98-0.516,24.717
	c0,0,0.074,4.012,0.627,8.693c0,0,2.58,18.039,5.787,28.213c0,0,4.35,16.682,5.419,19.74c0,0,1.732,7.107,1.4,11.162
	c0,0-0.848,7.715-0.848,9.521c0,0-0.442,10.063,0.738,13.271c0,0,1.636,3.539,4.143,3.797c0,0,1.883,0.074,2.288-0.737
	c0,0,0.999,1.216,2.769,1.216c0,0,2.443-0.295,2.812-1.326c0,0,0.617,0.811,2.682,0.848c0,0,2.81,0.11,3.326-1.585
	c0,0,0.48,0.958,2.139,0.811c0,0,2.576-0.479,3.239-1.585c0,0,1.418,1.253,3.151,1.069c0,0,3.582-0.185,3.877-2.581
	c0,0,0.692-1.548-0.525-3.833c0,0-2.481-5.971-4.287-9.51c0,0-3.451-6.119-3.672-7.004c0,0-0.572-0.774-0.498-3.06
	c0,0,2.19-11.021,1.932-15.924c0,0,0.319-5.308-0.714-11.242c0,0-0.69-6.045-1.501-8.81c0,0-0.436-2.617,0.08-5.455
	c0,0,0.979-3.834,2.269-7.741c0,0,3.114-5.64,4.146-12.274c0,0,3.098-9.013,1.956-13.473c0,0,2.907,1.032,6.39,1.678
	c0,0,3.172,0.553,6.065,0.441c2.894,0.111,6.051-0.441,6.051-0.441c3.484-0.646,6.385-1.678,6.385-1.678
	c-1.144,4.46,1.98,13.473,1.98,13.473c1.032,6.635,4.161,12.274,4.161,12.274c1.29,3.907,2.271,7.741,2.271,7.741
	c0.516,2.838,0.104,5.455,0.104,5.455c-0.811,2.765-1.481,8.81-1.481,8.81c-1.032,5.935-0.682,11.242-0.682,11.242
	c-0.258,4.903,1.977,15.924,1.977,15.924c0.073,2.285-0.486,3.06-0.486,3.06c-0.221,0.885-3.63,7.004-3.63,7.004
	c-1.806,3.539-4.235,9.51-4.235,9.51c-1.216,2.285-0.504,3.833-0.504,3.833c0.295,2.396,3.908,2.581,3.908,2.581
	c1.732,0.184,3.181-1.069,3.181-1.069c0.663,1.106,3.276,1.585,3.276,1.585c1.658,0.147,2.164-0.811,2.164-0.811
	c0.516,1.695,3.361,1.585,3.361,1.585c2.063-0.037,2.705-0.848,2.705-0.848c0.369,1.031,2.854,1.326,2.854,1.326
	c1.769,0,2.817-1.216,2.817-1.216c0.404,0.812,2.333,0.737,2.333,0.737c2.507-0.258,4.18-3.797,4.18-3.797
	c1.18-3.207,0.737-13.212,0.737-13.212c0-1.807-0.848-9.46-0.848-9.46c-0.332-4.055,1.4-11.104,1.4-11.104
	c1.068-3.06,5.419-19.651,5.419-19.651c3.207-10.174,5.787-28.118,5.787-28.118c0.553-4.682,0.626-8.673,0.626-8.673
	c0.258-8.736-0.517-24.603-0.517-24.603c-0.516-8.22-4.901-36.133-4.901-36.133c-1.733-7.704-4.276-34.08-4.276-34.08
	c-0.958-9.584-0.332-25.39-0.332-25.39c0.074-8.588,0.922-18.421,0.922-18.421c0.405,2.359,3.17,3.951,3.17,3.951
	c1.99,2.396,5.124,2.937,5.124,2.937c1.18,1.032,4.018,2.635,4.018,2.635c0.074,1.99,1.068,5.232,1.068,5.232
	c0.664,2.801,3.159,6.01,3.159,6.01c2.311,5.398,7.125,9.689,7.125,9.689c0.59,0.811,0.443,1.872,0.443,1.872
	c-0.037,3.171-2.249,4.94-2.249,4.94c-2.064,2.729-2.949,4.656-2.949,4.656c-0.258,1.18,0,2.663,0,2.663
	c0.48,4.755-0.037,6.666-0.037,6.666c-0.331,2.321,0.701,2.078,0.701,2.078c1.032,0.367,2.729-0.791,2.729-0.791
	c2.174-0.626,2.579-5.633,2.579-5.633c0.11-1.511,0.259-5.622,0.259-5.622c0.073-2.138,2.321-3.013,2.321-3.013
	c1.844-0.11,2.766,0.659,2.766,0.659c1.216,2.285,1.362,4.224,1.362,4.224c0.074,4.423-1.104,5.645-1.104,5.645
	c-1.549,4.165-1.401,3.809-1.401,3.809c0.185,3.207,3.76,1.53,3.76,1.53c2.948,0,3.913-4.128,3.913-4.128
	c0.537,1.79,3.268,0.814,3.268,0.814c2.865-0.089,3.581-3.888,3.581-3.888c1.701,0.492,3.043-1.673,3.043-1.673
	c1.88-1.746,2.014-7.187,2.014-7.187c0.627,0.045,1.567-1.041,1.567-1.041c1.565-1.342,1.79-6.83,1.79-6.83
	c0.582-2.909,0-10.11,0-10.11C98.19,11.34,95.058,1.3,95.058,1.3c-1.565-3.715-3.67-12.792-3.67-12.792
	c-0.671-2.954-1.745-9.532-1.745-9.532c-2.014-9.086-5.684-26.836-5.684-26.836c-2.193-6.713-7.52-22.543-7.52-22.543
	c-4.208-7.34-10.205-17.916-10.205-17.916c-10.696-10.607-18.887-19.107-18.887-19.107c-6.311-2.551-13.605-8.292-13.605-8.292
	c-2.731-1.119-2.82-4.46-2.82-4.46l0.045-3.065c-0.09-1.074,0.044-2.174,0.044-2.174c2.596-2.64,6.132-10.279,6.132-10.279
	c2.238-4.252,3.491-11.098,3.491-11.098c1.253,0.448,2.775-0.484,2.775-0.484c1.925-0.135,3.088-3.83,3.088-3.83
	c0.761-2.104,1.714-9.28,1.714-9.28c0.785-2.825,1.413-8.53,1.413-8.53c0.454-3.037-1.1-6.607-1.1-6.607
	c-1.267-2.378-3.608-3.512-3.608-3.512c1.726-7.376,0-17.596,0-17.596c-1.57-8.945-12.006-17.105-12.006-17.105
	C22.809-226.921,0-226.375,0-226.375s-22.816-0.546-32.917,12.637C-32.917-213.738-43.347-205.577-44.916-196.632z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-43.028-191.696c0,0-1.618,9.871,0,16.786
	c0,0-2.196,1.139-3.384,3.369c0,0-1.455,3.408-1.03,6.255c0,0,0.589,5.474,1.324,8.122c0,0,0.894,6.902,1.607,8.874
	c0,0,1.091,3.543,2.896,3.669c0,0,1.426,0.923,2.601,0.503c0,0,1.175,6.614,3.273,10.6c0,0,3.315,7.372,5.748,9.847
	c0,0,0.126,1.064,0.042,2.071l0.042,2.935c0,0-0.084,3.244-2.643,4.293c0,0-6.84,5.703-12.756,8.095c0,0-7.678,8.516-17.707,18.461
	c0,0-5.622,10.306-9.567,17.188c0,0-4.993,15.303-7.049,21.597c0,0-3.44,17.169-5.329,25.687c0,0-1.007,6.359-1.636,9.128
	c0,0-1.972,8.773-3.441,12.255c0,0-2.937,9.65-3.147,11.539c0,0-0.545,6.943,0,9.671c0,0,0.21,5.282,1.679,6.541
	c0,0,0.881,1.055,1.468,1.013c0,0,0.126,5.253,1.889,6.889c0,0,1.258,2.108,2.853,1.647c0,0,0.671,3.683,3.357,3.767
	c0,0,2.559,1.017,3.063-0.662c0,0,0.904,3.996,3.668,3.996c0,0,3.352,1.708,3.525-1.299c0,0,0.138,0.474-1.313-3.432
	c0,0-1.106-0.952-1.037-5.099c0,0,0.139-1.668,1.279-3.811c0,0,0.864-0.639,2.592-0.535c0,0,2.108,0.91,2.177,2.915
	c0,0,0.138,3.975,0.242,5.392c0,0,0.38,4.837,2.419,5.424c0,0,1.589,1.164,2.557,0.817c0,0,0.967,0.309,0.656-1.869
	c0,0-0.483-1.549-0.034-6.007c0,0,0.242-1.293,0-2.398c0,0-0.83-1.605-2.765-4.162c0,0-2.073-1.452-2.108-4.424
	c0,0-0.138-0.925,0.415-1.686c0,0,4.514-3.567,6.68-8.628c0,0,2.339-2.748,2.961-5.375c0,0,0.933-2.825,1.002-4.69
	c0,0,2.661-1.323,3.767-2.29c0,0,2.937-0.301,4.804-2.546c0,0,2.591-1.296,2.971-3.508c0,0,0.795,9.659,0.864,17.71
	c0,0,0.588,15.443-0.311,24.429c0,0-2.384,25.584-4.008,32.806c0,0-4.112,27.045-4.596,34.751c0,0-0.726,15.519-0.484,23.709
	c0,0,0.069,3.949,0.587,8.337c0,0,2.419,17.539,5.426,27.077c0,0,4.078,16.086,5.08,18.954c0,0,1.624,6.908,1.313,10.709
	c0,0-0.795,7.441-0.795,9.135c0,0-0.415,9.723,0.691,12.729c0,0,1.567,3.317,3.917,3.56c0,0,1.777,0.069,2.157-0.691
	c0,0,0.953,1.141,2.612,1.141c0,0,2.308-0.276,2.653-1.244c0,0,0.594,0.76,2.529,0.795c0,0,2.656,0.104,3.139-1.486
	c0,0,0.462,0.898,2.017,0.761c0,0,2.434-0.449,3.056-1.486c0,0,1.347,1.175,2.971,1.002c0,0,3.386-0.172,3.663-2.419
	c0,0,0.671-1.451-0.469-3.594c0,0-2.261-5.599-3.954-8.915c0,0-3.188-5.737-3.395-6.566c0,0-0.518-0.726-0.449-2.868
	c0,0,2.153-10.333,1.911-14.929c0,0,0.367-4.976-0.6-10.54c0,0-0.592-5.667-1.352-8.259c0,0-0.377-2.453,0.107-5.114
	c0,0,0.966-3.594,2.176-7.257c0,0,2.999-5.287,3.967-11.507c0,0,2.989-8.45,1.917-12.631c0,0,2.765,0.968,6.03,1.571
	c0,0,3.009,0.52,5.722,0.415c2.712,0.104,5.707-0.415,5.707-0.415c3.267-0.604,6.023-1.571,6.023-1.571
	c-1.072,4.181,1.942,12.631,1.942,12.631c0.969,6.22,3.983,11.507,3.983,11.507c1.21,3.663,2.179,7.257,2.179,7.257
	c0.484,2.661,0.131,5.114,0.131,5.114c-0.76,2.592-1.331,8.259-1.331,8.259c-0.968,5.564-0.565,10.54-0.565,10.54
	c-0.242,4.596,1.957,14.929,1.957,14.929c0.069,2.143-0.438,2.868-0.438,2.868c-0.208,0.829-3.351,6.566-3.351,6.566
	c-1.693,3.316-3.899,8.915-3.899,8.915c-1.141,2.143-0.447,3.594-0.447,3.594c0.276,2.247,3.694,2.419,3.694,2.419
	c1.624,0.173,3.002-1.002,3.002-1.002c0.622,1.037,3.095,1.486,3.095,1.486c1.556,0.138,2.044-0.761,2.044-0.761
	c0.483,1.59,3.175,1.486,3.175,1.486c1.936-0.035,2.554-0.795,2.554-0.795c0.346,0.968,2.697,1.244,2.697,1.244
	c1.659,0,2.662-1.141,2.662-1.141c0.38,0.761,2.205,0.691,2.205,0.691c2.35-0.242,3.955-3.56,3.955-3.56
	c1.105-3.007,0.69-12.669,0.69-12.669c0-1.693-0.795-9.07-0.795-9.07c-0.311-3.801,1.313-10.65,1.313-10.65
	c1.003-2.868,5.08-18.86,5.08-18.86c3.007-9.538,5.426-26.978,5.426-26.978c0.518-4.389,0.587-8.315,0.587-8.315
	c0.242-8.19-0.484-23.591-0.484-23.591c-0.482-7.706-4.596-34.656-4.596-34.656c-1.624-7.224-4.008-32.687-4.008-32.687
	c-0.899-8.984-0.312-24.346-0.312-24.346c0.069-8.051,0.864-17.663,0.864-17.663c0.38,2.212,2.971,3.533,2.971,3.533
	c1.866,2.246,4.805,2.568,4.805,2.568c1.105,0.968,3.767,2.319,3.767,2.319c0.069,1.866,1.002,4.718,1.002,4.718
	c0.622,2.626,2.961,5.398,2.961,5.398c2.166,5.06,6.68,8.674,6.68,8.674c0.554,0.76,0.415,1.689,0.415,1.689
	c-0.034,2.972-2.107,4.439-2.107,4.439c-1.936,2.559-2.765,4.175-2.765,4.175c-0.242,1.106,0,2.404,0,2.404
	c0.448,4.458-0.034,6.01-0.034,6.01c-0.312,2.178,0.655,1.867,0.655,1.867c0.969,0.346,2.558-0.812,2.558-0.812
	c2.039-0.588,2.419-5.419,2.419-5.419c0.104-1.418,0.242-5.391,0.242-5.391c0.068-2.005,2.177-2.918,2.177-2.918
	c1.728-0.104,2.592,0.531,2.592,0.531c1.14,2.143,1.279,3.802,1.279,3.802c0.069,4.147-1.037,5.085-1.037,5.085
	c-1.451,3.905-1.313,3.428-1.313,3.428c0.174,3.008,3.525,1.291,3.525,1.291c2.764,0,3.668-4.007,3.668-4.007
	c0.504,1.679,3.064,0.66,3.064,0.66c2.685-0.084,3.355-3.772,3.355-3.772c1.595,0.462,2.854-1.656,2.854-1.656
	c1.763-1.636,1.889-6.901,1.889-6.901c0.587,0.042,1.468-1.019,1.468-1.019c1.469-1.258,1.679-6.56,1.679-6.56
	c0.546-2.727,0-9.695,0-9.695c-0.21-1.889-3.146-11.573-3.146-11.573c-1.469-3.482-3.441-12.279-3.441-12.279
	c-0.629-2.769-1.636-9.145-1.636-9.145C83.07-30.984,79.63-48.22,79.63-48.22c-2.056-6.294-7.049-21.655-7.049-21.655
	c-3.945-6.881-9.567-17.257-9.567-17.257c-10.028-9.944-17.707-18.544-17.707-18.544c-5.916-2.391-12.756-8.163-12.756-8.163
	c-2.559-1.049-2.643-4.303-2.643-4.303l0.042-2.938c-0.084-1.007,0.042-2.083,0.042-2.083c2.433-2.476,5.748-9.906,5.748-9.906
	c2.098-3.986,3.272-10.66,3.272-10.66c1.176,0.42,2.602-0.529,2.602-0.529c1.805-0.126,2.896-3.707,2.896-3.707
	c0.713-1.972,1.607-8.904,1.607-8.904c0.735-2.648,1.324-8.186,1.324-8.186c0.425-2.847-1.03-6.345-1.03-6.345
	c-1.188-2.229-3.384-3.416-3.384-3.416c1.618-6.915,0-16.88,0-16.88c-1.472-8.386-11.607-16.037-11.607-16.037
	C21.95-220.092,0-219.581,0-219.581s-21.959-0.511-31.428,11.848C-31.428-207.733-41.557-200.082-43.028-191.696z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-41.14-186.759c0,0-1.51,9.613,0,16.067
	c0,0-2.05,1.189-3.158,3.27c0,0-1.359,3.332-0.962,5.99c0,0,0.55,5.303,1.236,7.775c0,0,0.834,6.655,1.5,8.496
	c0,0,1.018,3.428,2.702,3.545c0,0,1.332,0.938,2.428,0.547c0,0,1.097,6.439,3.055,10.16c0,0,3.094,7.16,5.365,9.471
	c0,0,0.118,1.04,0.04,1.979l0.039,2.807c0,0-0.079,3.157-2.468,4.136c0,0-6.383,5.732-11.905,7.964c0,0-7.167,8.612-16.526,17.894
	c0,0-5.248,10.104-8.929,16.526c0,0-4.661,14.831-6.58,20.705c0,0-3.211,16.653-4.973,24.603c0,0-0.94,6.156-1.527,8.741
	c0,0-1.841,8.492-3.212,11.743c0,0-2.741,9.293-2.937,11.055c0,0-0.509,6.712,0,9.258c0,0,0.196,5.093,1.567,6.267
	c0,0,0.822,1.032,1.37,0.992c0,0,0.118,5.076,1.763,6.603c0,0,1.174,2.061,2.663,1.629c0,0,0.626,3.573,3.133,3.651
	c0,0,2.388,1.061,2.858-0.506c0,0,0.844,3.875,3.425,3.875c0,0,3.128,1.745,3.289-1.062c0,0,0.129,0.594-1.225-3.051
	c0,0-1.032-0.669-0.968-4.54c0,0,0.129-1.388,1.194-3.388c0,0,0.806-0.505,2.419-0.409c0,0,1.967,0.949,2.032,2.82
	c0,0,0.128,3.836,0.225,5.159c0,0,0.355,4.664,2.258,5.212c0,0,1.484,1.164,2.387,0.841c0,0,0.903,0.373,0.612-1.659
	c0,0-0.451-1.189-0.032-5.351c0,0,0.226-1.108,0-2.141c0,0-0.774-1.294-2.58-3.68c0,0-1.935-1.149-1.967-3.923
	c0,0-0.129-0.791,0.387-1.5c0,0,4.213-2.89,6.235-7.613c0,0,2.183-2.31,2.763-4.762c0,0,0.871-2.434,0.936-4.175
	c0,0,2.483-1.071,3.515-1.975c0,0,2.742-0.08,4.483-2.177c0,0,2.419-1.023,2.774-3.088c0,0,0.742,9.44,0.806,16.955
	c0,0,0.549,15.001-0.29,23.387c0,0-2.225,24.677-3.741,31.418c0,0-3.838,26.086-4.29,33.279c0,0-0.677,15.057-0.451,22.701
	c0,0,0.064,3.885,0.548,7.98c0,0,2.258,17.038,5.064,25.94c0,0,3.805,15.491,4.741,18.168c0,0,1.516,6.708,1.225,10.256
	c0,0-0.741,7.168-0.741,8.748c0,0-0.388,9.384,0.645,12.189c0,0,1.497,3.097,3.69,3.322c0,0,1.672,0.064,2.027-0.645
	c0,0,0.906,1.063,2.454,1.063c0,0,2.172-0.258,2.495-1.161c0,0,0.569,0.709,2.376,0.742c0,0,2.5,0.096,2.952-1.387
	c0,0,0.443,0.838,1.895,0.709c0,0,2.292-0.419,2.872-1.387c0,0,1.275,1.097,2.791,0.936c0,0,3.191-0.161,3.449-2.258
	c0,0,0.65-1.355-0.414-3.354c0,0-2.04-5.225-3.621-8.32c0,0-2.923-5.354-3.116-6.129c0,0-0.465-0.678-0.401-2.678
	c0,0,2.115-9.643,1.89-13.933c0,0,0.416-4.644-0.487-9.837c0,0-0.493-5.289-1.202-7.708c0,0-0.318-2.29,0.133-4.774
	c0,0,0.954-3.354,2.083-6.772c0,0,2.885-4.936,3.789-10.74c0,0,2.879-7.886,1.879-11.789c0,0,2.621,0.903,5.669,1.468
	c0,0,2.846,0.484,5.377,0.388c2.532,0.097,5.363-0.388,5.363-0.388c3.048-0.564,5.661-1.468,5.661-1.468
	c-0.999,3.903,1.907,11.789,1.907,11.789c0.902,5.805,3.804,10.74,3.804,10.74c1.129,3.419,2.087,6.772,2.087,6.772
	c0.451,2.484,0.159,4.774,0.159,4.774c-0.71,2.419-1.181,7.708-1.181,7.708c-0.903,5.193-0.451,9.837-0.451,9.837
	c-0.227,4.29,1.937,13.933,1.937,13.933c0.065,2-0.388,2.678-0.388,2.678c-0.193,0.774-3.071,6.129-3.071,6.129
	c-1.58,3.096-3.563,8.32-3.563,8.32c-1.064,1.999-0.392,3.354-0.392,3.354c0.259,2.097,3.482,2.258,3.482,2.258
	c1.516,0.161,2.824-0.936,2.824-0.936c0.581,0.968,2.912,1.387,2.912,1.387c1.451,0.129,1.924-0.709,1.924-0.709
	c0.451,1.482,2.988,1.387,2.988,1.387c1.807-0.033,2.402-0.742,2.402-0.742c0.322,0.903,2.539,1.161,2.539,1.161
	c1.549,0,2.508-1.063,2.508-1.063c0.354,0.709,2.075,0.645,2.075,0.645c2.193-0.226,3.731-3.322,3.731-3.322
	c1.031-2.806,0.645-12.127,0.645-12.127c0-1.58-0.742-8.681-0.742-8.681c-0.29-3.547,1.227-10.195,1.227-10.195
	c0.935-2.677,4.74-18.07,4.74-18.07c2.807-8.901,5.063-25.836,5.063-25.836c0.484-4.097,0.549-7.959,0.549-7.959
	c0.227-7.645-0.452-22.577-0.452-22.577c-0.45-7.192-4.289-33.182-4.289-33.182c-1.516-6.74-3.741-31.293-3.741-31.293
	c-0.839-8.386-0.29-23.301-0.29-23.301c0.063-7.515,0.806-16.905,0.806-16.905c0.354,2.064,2.773,3.115,2.773,3.115
	c1.742,2.097,4.483,2.2,4.483,2.2c1.032,0.903,3.517,2.004,3.517,2.004c0.063,1.742,0.935,4.203,0.935,4.203
	c0.581,2.451,2.764,4.787,2.764,4.787c2.022,4.723,6.235,7.659,6.235,7.659c0.516,0.71,0.387,1.505,0.387,1.505
	c-0.033,2.773-1.968,3.939-1.968,3.939c-1.806,2.388-2.58,3.694-2.58,3.694c-0.226,1.032,0,2.146,0,2.146
	c0.419,4.159-0.032,5.354-0.032,5.354c-0.291,2.032,0.613,1.657,0.613,1.657c0.903,0.321,2.386-0.836,2.386-0.836
	c1.903-0.548,2.258-5.207,2.258-5.207c0.098-1.323,0.227-5.158,0.227-5.158c0.063-1.871,2.032-2.822,2.032-2.822
	c1.611-0.097,2.419,0.403,2.419,0.403c1.063,2,1.192,3.381,1.192,3.381c0.065,3.87-0.968,4.525-0.968,4.525
	c-1.354,3.644-1.225,3.047-1.225,3.047c0.161,2.806,3.29,1.053,3.29,1.053c2.58,0,3.424-3.887,3.424-3.887
	c0.47,1.566,2.858,0.505,2.858,0.505c2.507-0.079,3.134-3.658,3.134-3.658c1.487,0.431,2.663-1.638,2.663-1.638
	c1.645-1.527,1.762-6.616,1.762-6.616c0.548,0.039,1.371-0.998,1.371-0.998c1.37-1.175,1.565-6.287,1.565-6.287
	c0.51-2.545,0-9.281,0-9.281c-0.195-1.763-2.937-11.092-2.937-11.092c-1.371-3.25-3.211-11.768-3.211-11.768
	c-0.588-2.584-1.528-8.758-1.528-8.758c-1.762-7.95-4.973-24.673-4.973-24.673c-1.919-5.874-6.579-20.765-6.579-20.765
	c-3.683-6.423-8.929-16.599-8.929-16.599c-9.36-9.282-16.527-17.98-16.527-17.98c-5.522-2.233-11.905-8.036-11.905-8.036
	c-2.389-0.979-2.467-4.146-2.467-4.146l0.039-2.809c-0.079-0.94,0.039-1.994,0.039-1.994c2.271-2.31,5.365-9.532,5.365-9.532
	c1.958-3.72,3.055-10.222,3.055-10.222c1.096,0.392,2.428-0.574,2.428-0.574c1.685-0.118,2.702-3.584,2.702-3.584
	c0.666-1.841,1.5-8.528,1.5-8.528c0.688-2.472,1.236-7.842,1.236-7.842c0.396-2.657-0.961-6.083-0.961-6.083
	c-1.109-2.081-3.159-3.319-3.159-3.319c1.511-6.454,0-16.165,0-16.165c-1.373-7.827-11.208-14.968-11.208-14.968
	c-8.838-11.535-29.93-11.058-29.93-11.058s-21.102-0.477-29.939,11.058C-29.938-201.727-39.767-194.586-41.14-186.759z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-39.251-181.823c0,0-1.403,9.354,0,15.347
	c0,0-1.903,1.24-2.933,3.172c0,0-1.261,3.257-0.892,5.724c0,0,0.51,5.134,1.147,7.429c0,0,0.775,6.409,1.393,8.119
	c0,0,0.946,3.311,2.509,3.42c0,0,1.237,0.954,2.255,0.591c0,0,1.018,6.265,2.836,9.719c0,0,2.873,6.95,4.982,9.095
	c0,0,0.109,1.016,0.037,1.889l0.036,2.679c0,0-0.073,3.069-2.291,3.978c0,0-5.927,5.761-11.055,7.833c0,0-6.655,8.708-15.346,17.327
	c0,0-4.873,9.901-8.291,15.865c0,0-4.327,14.359-6.109,19.814c0,0-2.982,16.137-4.619,23.519c0,0-0.873,5.953-1.418,8.353
	c0,0-1.709,8.212-2.982,11.23c0,0-2.545,8.937-2.727,10.573c0,0-0.473,6.478,0,8.841c0,0,0.182,4.904,1.454,5.995
	c0,0,0.764,1.007,1.273,0.971c0,0,0.109,4.898,1.637,6.317c0,0,1.091,2.011,2.472,1.611c0,0,0.582,3.462,2.91,3.535
	c0,0,2.218,1.104,2.654-0.352c0,0,0.784,3.754,3.18,3.754c0,0,2.905,1.783,3.055-0.822c0,0,0.119,0.714-1.138-2.67
	c0,0-0.959-0.388-0.899-3.981c0,0,0.12-1.11,1.108-2.967c0,0,0.749-0.371,2.246-0.281c0,0,1.827,0.987,1.887,2.724
	c0,0,0.12,3.699,0.21,4.928c0,0,0.329,4.49,2.096,5c0,0,1.378,1.164,2.217,0.863c0,0,0.838,0.438,0.569-1.448
	c0,0-0.42-0.831-0.03-4.695c0,0,0.209-0.922,0-1.88c0,0-0.719-0.983-2.396-3.199c0,0-1.797-0.846-1.827-3.422
	c0,0-0.12-0.657,0.359-1.316c0,0,3.912-2.21,5.79-6.596c0,0,2.027-1.873,2.566-4.149c0,0,0.809-2.042,0.869-3.659
	c0,0,2.306-0.819,3.264-1.657c0,0,2.546,0.139,4.163-1.809c0,0,2.246-0.752,2.576-2.669c0,0,0.688,9.222,0.748,16.199
	c0,0,0.509,14.56-0.269,22.347c0,0-2.067,23.77-3.474,30.028c0,0-3.564,25.129-3.984,31.808c0,0-0.629,14.596-0.419,21.693
	c0,0,0.06,3.821,0.509,7.625c0,0,2.097,16.537,4.702,24.803c0,0,3.534,14.896,4.403,17.382c0,0,1.407,6.51,1.138,9.805
	c0,0-0.689,6.893-0.689,8.361c0,0-0.359,9.043,0.599,11.648c0,0,1.428,2.875,3.465,3.085c0,0,1.565,0.061,1.895-0.599
	c0,0,0.86,0.988,2.298,0.988c0,0,2.036-0.24,2.335-1.078c0,0,0.546,0.659,2.223,0.688c0,0,2.345,0.09,2.765-1.288
	c0,0,0.425,0.779,1.773,0.659c0,0,2.15-0.39,2.689-1.288c0,0,1.204,1.019,2.611,0.868c0,0,2.995-0.149,3.235-2.096
	c0,0,0.63-1.258-0.359-3.115c0,0-1.82-4.852-3.287-7.727c0,0-2.66-4.972-2.839-5.69c0,0-0.412-0.629-0.352-2.486
	c0,0,2.078-8.955,1.868-12.938c0,0,0.465-4.313-0.373-9.134c0,0-0.394-4.912-1.053-7.158c0,0-0.258-2.127,0.161-4.434
	c0,0,0.942-3.113,1.99-6.289c0,0,2.771-4.582,3.609-9.973c0,0,2.77-7.323,1.842-10.947c0,0,2.478,0.84,5.308,1.363
	c0,0,2.683,0.449,5.034,0.36c2.352,0.089,5.02-0.36,5.02-0.36c2.83-0.523,5.3-1.363,5.3-1.363c-0.929,3.624,1.87,10.947,1.87,10.947
	c0.838,5.391,3.625,9.973,3.625,9.973c1.049,3.176,1.994,6.289,1.994,6.289c0.419,2.307,0.187,4.434,0.187,4.434
	c-0.657,2.246-1.029,7.158-1.029,7.158c-0.84,4.82-0.337,9.134-0.337,9.134c-0.209,3.982,1.918,12.938,1.918,12.938
	c0.06,1.857-0.339,2.486-0.339,2.486c-0.18,0.719-2.792,5.69-2.792,5.69c-1.467,2.875-3.228,7.727-3.228,7.727
	c-0.989,1.857-0.335,3.115-0.335,3.115c0.239,1.946,3.269,2.096,3.269,2.096c1.407,0.15,2.646-0.868,2.646-0.868
	c0.539,0.898,2.729,1.288,2.729,1.288c1.349,0.12,1.804-0.659,1.804-0.659c0.419,1.378,2.803,1.288,2.803,1.288
	c1.677-0.029,2.25-0.688,2.25-0.688c0.3,0.838,2.383,1.078,2.383,1.078c1.438,0,2.353-0.988,2.353-0.988
	c0.328,0.659,1.945,0.599,1.945,0.599c2.037-0.21,3.506-3.085,3.506-3.085c0.959-2.605,0.6-11.584,0.6-11.584
	c0-1.467-0.688-8.291-0.688-8.291c-0.27-3.294,1.139-9.74,1.139-9.74c0.867-2.485,4.401-17.28,4.401-17.28
	c2.606-8.267,4.702-24.696,4.702-24.696c0.449-3.803,0.509-7.601,0.509-7.601c0.21-7.099-0.419-21.565-0.419-21.565
	c-0.419-6.678-3.982-31.705-3.982-31.705c-1.408-6.259-3.475-29.899-3.475-29.899c-0.778-7.786-0.27-22.256-0.27-22.256
	c0.06-6.979,0.749-16.147,0.749-16.147C40.783,3.669,43.03,4.45,43.03,4.45c1.616,1.945,4.162,1.83,4.162,1.83
	c0.959,0.84,3.265,1.689,3.265,1.689c0.06,1.617,0.868,3.689,0.868,3.689c0.54,2.275,2.566,4.175,2.566,4.175
	c1.877,4.386,5.789,6.645,5.789,6.645c0.479,0.659,0.36,1.32,0.36,1.32c-0.03,2.576-1.827,3.441-1.827,3.441
	c-1.677,2.216-2.396,3.212-2.396,3.212c-0.21,0.958,0,1.885,0,1.885c0.39,3.864-0.029,4.699-0.029,4.699
	c-0.271,1.887,0.568,1.446,0.568,1.446c0.839,0.299,2.217-0.858,2.217-0.858c1.767-0.509,2.097-4.995,2.097-4.995
	c0.089-1.229,0.209-4.926,0.209-4.926c0.06-1.737,1.887-2.727,1.887-2.727c1.497-0.09,2.246,0.276,2.246,0.276
	c0.989,1.856,1.108,2.958,1.108,2.958c0.06,3.594-0.898,3.966-0.898,3.966c-1.258,3.384-1.138,2.666-1.138,2.666
	c0.149,2.606,3.055,0.815,3.055,0.815c2.396,0,3.179-3.767,3.179-3.767c0.438,1.454,2.655,0.349,2.655,0.349
	c2.327-0.072,2.909-3.541,2.909-3.541c1.382,0.399,2.473-1.621,2.473-1.621c1.527-1.419,1.637-6.331,1.637-6.331
	c0.509,0.036,1.272-0.978,1.272-0.978c1.273-1.091,1.455-6.014,1.455-6.014c0.472-2.364,0-8.868,0-8.868
	c-0.182-1.636-2.728-10.61-2.728-10.61c-1.272-3.018-2.982-11.257-2.982-11.257c-0.545-2.4-1.418-8.371-1.418-8.371
	c-1.636-7.382-4.618-23.591-4.618-23.591c-1.782-5.455-6.108-19.877-6.108-19.877c-3.419-5.964-8.292-15.941-8.292-15.941
	c-8.691-8.618-15.347-17.416-15.347-17.416c-5.127-2.073-11.055-7.908-11.055-7.908c-2.218-0.909-2.291-3.988-2.291-3.988
	l0.037-2.682c-0.073-0.873,0.036-1.903,0.036-1.903c2.108-2.146,4.981-9.159,4.981-9.159c1.818-3.454,2.837-9.784,2.837-9.784
	c1.019,0.363,2.255-0.619,2.255-0.619c1.563-0.109,2.509-3.461,2.509-3.461c0.619-1.71,1.393-8.152,1.393-8.152
	c0.638-2.295,1.148-7.497,1.148-7.497c0.369-2.468-0.894-5.822-0.894-5.822c-1.028-1.932-2.933-3.222-2.933-3.222
	c1.403-5.993,0-15.45,0-15.45c-1.275-7.268-10.81-13.899-10.81-13.899C20.233-206.433,0-205.99,0-205.99s-20.243-0.443-28.45,10.268
	C-28.45-195.722-37.976-189.091-39.251-181.823z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-37.363-176.886c0,0-1.295,9.096,0,14.628
	c0,0-1.757,1.289-2.707,3.073c0,0-1.165,3.182-0.824,5.459c0,0,0.471,4.963,1.059,7.082c0,0,0.715,6.163,1.286,7.741
	c0,0,0.873,3.195,2.316,3.296c0,0,1.141,0.97,2.081,0.634c0,0,0.94,6.091,2.619,9.28c0,0,2.651,6.738,4.598,8.719
	c0,0,0.101,0.992,0.034,1.797l0.033,2.552c0,0-0.067,2.981-2.114,3.82c0,0-5.472,5.789-10.205,7.703c0,0-6.143,8.803-14.165,16.759
	c0,0-4.498,9.699-7.654,15.204c0,0-3.994,13.888-5.639,18.923c0,0-2.753,15.62-4.263,22.434c0,0-0.806,5.75-1.309,7.965
	c0,0-1.578,7.933-2.753,10.719c0,0-2.35,8.579-2.518,10.09c0,0-0.436,6.243,0,8.425c0,0,0.168,4.715,1.343,5.722
	c0,0,0.705,0.983,1.175,0.949c0,0,0.101,4.724,1.511,6.032c0,0,1.007,1.963,2.282,1.593c0,0,0.537,3.354,2.686,3.42
	c0,0,2.047,1.147,2.45-0.194c0,0,0.723,3.632,2.935,3.632c0,0,2.682,1.82,2.82-0.585c0,0,0.111,0.835-1.051-2.289
	c0,0-0.884-0.104-0.829-3.422c0,0,0.111-0.831,1.023-2.545c0,0,0.691-0.237,2.073-0.154c0,0,1.687,1.025,1.742,2.628
	c0,0,0.111,3.561,0.194,4.695c0,0,0.304,4.318,1.935,4.788c0,0,1.271,1.163,2.045,0.887c0,0,0.775,0.503,0.526-1.239
	c0,0-0.387-0.472-0.028-4.039c0,0,0.194-0.735,0-1.621c0,0-0.663-0.671-2.212-2.717c0,0-1.658-0.543-1.686-2.921
	c0,0-0.111-0.523,0.332-1.132c0,0,3.611-1.531,5.344-5.579c0,0,1.871-1.437,2.369-3.537c0,0,0.746-1.651,0.802-3.144
	c0,0,2.128-0.567,3.013-1.342c0,0,2.35,0.359,3.843-1.438c0,0,2.073-0.48,2.377-2.25c0,0,0.636,9.002,0.691,15.444
	c0,0,0.47,14.115-0.249,21.304c0,0-1.907,22.863-3.206,28.641c0,0-3.29,24.17-3.677,30.335c0,0-0.581,14.134-0.387,20.687
	c0,0,0.055,3.757,0.47,7.268c0,0,1.935,16.036,4.34,23.667c0,0,3.262,14.3,4.064,16.595c0,0,1.299,6.312,1.05,9.353
	c0,0-0.635,6.62-0.635,7.974c0,0-0.332,8.704,0.552,11.109c0,0,1.359,2.654,3.239,2.848c0,0,1.46,0.056,1.764-0.553
	c0,0,0.814,0.912,2.141,0.912c0,0,1.9-0.221,2.176-0.995c0,0,0.522,0.608,2.07,0.636c0,0,2.191,0.083,2.578-1.188
	c0,0,0.407,0.719,1.651,0.607c0,0,2.008-0.358,2.506-1.188c0,0,1.132,0.939,2.432,0.802c0,0,2.799-0.138,3.02-1.935
	c0,0,0.609-1.161-0.303-2.875c0,0-1.6-4.479-2.955-7.134c0,0-2.395-4.589-2.561-5.252c0,0-0.358-0.581-0.303-2.295
	c0,0,2.04-8.266,1.847-11.942c0,0,0.514-3.981-0.26-8.433c0,0-0.295-4.534-0.903-6.606c0,0-0.2-1.963,0.187-4.092
	c0,0,0.93-2.876,1.898-5.806c0,0,2.656-4.229,3.43-9.206c0,0,2.66-6.759,1.803-10.104c0,0,2.335,0.773,4.948,1.258
	c0,0,2.52,0.414,4.689,0.331c2.171,0.083,4.675-0.331,4.675-0.331c2.612-0.484,4.939-1.258,4.939-1.258
	c-0.857,3.345,1.832,10.104,1.832,10.104c0.775,4.977,3.448,9.206,3.448,9.206c0.967,2.93,1.901,5.806,1.901,5.806
	c0.387,2.129,0.215,4.092,0.215,4.092c-0.608,2.072-0.88,6.606-0.88,6.606c-0.774,4.451-0.223,8.433-0.223,8.433
	c-0.192,3.677,1.899,11.942,1.899,11.942c0.055,1.714-0.29,2.295-0.29,2.295c-0.166,0.663-2.511,5.252-2.511,5.252
	c-1.355,2.654-2.895,7.134-2.895,7.134c-0.912,1.714-0.277,2.875-0.277,2.875c0.221,1.797,3.055,1.935,3.055,1.935
	c1.3,0.138,2.469-0.802,2.469-0.802c0.497,0.83,2.548,1.188,2.548,1.188c1.244,0.111,1.683-0.607,1.683-0.607
	c0.387,1.271,2.616,1.188,2.616,1.188c1.549-0.027,2.1-0.636,2.1-0.636c0.275,0.774,2.225,0.995,2.225,0.995
	c1.327,0,2.197-0.912,2.197-0.912c0.304,0.608,1.818,0.553,1.818,0.553c1.88-0.193,3.28-2.848,3.28-2.848
	c0.886-2.405,0.554-11.041,0.554-11.041c0-1.354-0.637-7.901-0.637-7.901c-0.249-3.041,1.052-9.286,1.052-9.286
	c0.801-2.295,4.063-16.49,4.063-16.49c2.405-7.63,4.34-23.555,4.34-23.555c0.415-3.511,0.471-7.244,0.471-7.244
	c0.192-6.552-0.388-20.552-0.388-20.552c-0.387-6.165-3.677-30.229-3.677-30.229c-1.299-5.778-3.207-28.506-3.207-28.506
	c-0.719-7.188-0.249-21.211-0.249-21.211c0.056-6.442,0.692-15.391,0.692-15.391c0.304,1.77,2.377,2.279,2.377,2.279
	c1.493,1.796,3.843,1.463,3.843,1.463c0.884,0.774,3.013,1.373,3.013,1.373c0.056,1.493,0.803,3.174,0.803,3.174
	c0.496,2.102,2.368,3.564,2.368,3.564c1.733,4.048,5.345,5.63,5.345,5.63c0.441,0.607,0.332,1.137,0.332,1.137
	c-0.028,2.377-1.688,2.94-1.688,2.94c-1.548,2.045-2.211,2.73-2.211,2.73c-0.194,0.885,0,1.626,0,1.626
	c0.359,3.566-0.028,4.043-0.028,4.043c-0.249,1.742,0.525,1.236,0.525,1.236c0.774,0.276,2.046-0.881,2.046-0.881
	c1.631-0.471,1.936-4.783,1.936-4.783c0.082-1.133,0.193-4.693,0.193-4.693c0.055-1.604,1.741-2.631,1.741-2.631
	c1.383-0.083,2.074,0.148,2.074,0.148c0.912,1.714,1.022,2.537,1.022,2.537c0.056,3.316-0.83,3.405-0.83,3.405
	c-1.16,3.124-1.05,2.285-1.05,2.285c0.138,2.405,2.82,0.576,2.82,0.576c2.211,0,2.935-3.645,2.935-3.645
	c0.402,1.343,2.45,0.192,2.45,0.192c2.148-0.066,2.687-3.426,2.687-3.426c1.274,0.369,2.281-1.604,2.281-1.604
	c1.41-1.309,1.512-6.045,1.512-6.045c0.47,0.033,1.175-0.956,1.175-0.956c1.174-1.007,1.342-5.741,1.342-5.741
	c0.437-2.183,0-8.454,0-8.454C77.318,0.554,74.97-8.063,74.97-8.063c-1.176-2.786-2.754-10.746-2.754-10.746
	c-0.503-2.215-1.309-7.983-1.309-7.983c-1.511-6.815-4.263-22.51-4.263-22.51c-1.646-5.036-5.64-18.989-5.64-18.989
	c-3.155-5.505-7.653-15.282-7.653-15.282c-8.023-7.956-14.165-16.853-14.165-16.853c-4.733-1.913-10.205-7.779-10.205-7.779
	c-2.048-0.84-2.115-3.832-2.115-3.832l0.034-2.554c-0.067-0.806,0.033-1.813,0.033-1.813c1.946-1.98,4.599-8.784,4.599-8.784
	c1.679-3.189,2.618-9.347,2.618-9.347c0.94,0.335,2.082-0.664,2.082-0.664c1.442-0.101,2.315-3.338,2.315-3.338
	c0.57-1.578,1.285-7.776,1.285-7.776c0.589-2.118,1.061-7.153,1.061-7.153c0.34-2.277-0.824-5.56-0.824-5.56
	c-0.951-1.784-2.707-3.125-2.707-3.125c1.294-5.532,0-14.735,0-14.735c-1.177-6.709-10.411-12.83-10.411-12.83
	C19.375-199.604,0-199.194,0-199.194s-19.385-0.409-26.961,9.478C-26.961-189.716-36.186-183.595-37.363-176.886z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-35.474-171.95c0,0-1.187,8.838,0,13.909
	c0,0-1.61,1.339-2.482,2.974c0,0-1.067,3.106-0.755,5.194c0,0,0.432,4.793,0.971,6.735c0,0,0.656,5.917,1.179,7.363
	c0,0,0.8,3.08,2.123,3.172c0,0,1.046,0.986,1.908,0.678c0,0,0.861,5.916,2.4,8.839c0,0,2.431,6.528,4.215,8.343
	c0,0,0.093,0.968,0.031,1.707l0.031,2.424c0,0-0.062,2.893-1.939,3.662c0,0-5.015,5.818-9.354,7.572c0,0-5.631,8.899-12.985,16.192
	c0,0-4.123,9.497-7.016,14.543c0,0-3.661,13.416-5.169,18.032c0,0-2.523,15.104-3.908,21.35c0,0-0.738,5.546-1.2,7.577
	c0,0-1.446,7.652-2.523,10.206c0,0-2.154,8.223-2.308,9.607c0,0-0.4,6.011,0,8.011c0,0,0.154,4.526,1.231,5.449
	c0,0,0.646,0.958,1.077,0.927c0,0,0.092,4.546,1.385,5.746c0,0,0.923,1.915,2.092,1.576c0,0,0.492,3.241,2.462,3.304
	c0,0,1.877,1.191,2.246-0.04c0,0,0.663,3.511,2.69,3.511c0,0,2.458,1.858,2.585-0.347c0,0,0.102,0.956-0.963-1.908
	c0,0-0.811,0.178-0.76-2.863c0,0,0.101-0.553,0.938-2.124c0,0,0.633-0.102,1.9-0.025c0,0,1.546,1.062,1.597,2.533
	c0,0,0.101,3.423,0.177,4.462c0,0,0.279,4.146,1.774,4.577c0,0,1.166,1.161,1.875,0.908c0,0,0.71,0.568,0.482-1.027
	c0,0-0.355-0.115-0.026-3.385c0,0,0.178-0.55,0-1.36c0,0-0.608-0.361-2.027-2.236c0,0-1.52-0.241-1.546-2.42
	c0,0-0.101-0.39,0.304-0.947c0,0,3.311-0.852,4.899-4.562c0,0,1.716-0.999,2.172-2.925c0,0,0.684-1.26,0.735-2.627
	c0,0,1.951-0.316,2.762-1.025c0,0,2.154,0.578,3.522-1.069c0,0,1.901-0.209,2.18-1.83c0,0,0.583,8.782,0.633,14.688
	c0,0,0.431,13.674-0.228,20.263c0,0-1.748,21.956-2.939,27.253c0,0-3.016,23.211-3.371,28.863c0,0-0.532,13.673-0.355,19.679
	c0,0,0.051,3.693,0.431,6.911c0,0,1.774,15.535,3.979,22.53c0,0,2.99,13.705,3.725,15.809c0,0,1.191,6.112,0.963,8.899
	c0,0-0.583,6.346-0.583,7.588c0,0-0.304,8.364,0.507,10.568c0,0,1.289,2.433,3.012,2.61c0,0,1.355,0.05,1.634-0.507
	c0,0,0.767,0.836,1.984,0.836c0,0,1.763-0.203,2.017-0.912c0,0,0.498,0.558,1.917,0.583c0,0,2.035,0.076,2.39-1.09
	c0,0,0.389,0.659,1.529,0.557c0,0,1.866-0.328,2.322-1.089c0,0,1.062,0.861,2.253,0.735c0,0,2.603-0.127,2.806-1.774
	c0,0,0.588-1.064-0.248-2.636c0,0-1.379-4.104-2.621-6.538c0,0-2.131-4.207-2.283-4.814c0,0-0.305-0.532-0.255-2.104
	c0,0,2.003-7.577,1.825-10.948c0,0,0.563-3.648-0.146-7.729c0,0-0.196-4.156-0.753-6.057c0,0-0.141-1.8,0.214-3.75
	c0,0,0.918-2.637,1.805-5.322c0,0,2.541-3.877,3.251-8.439c0,0,2.551-6.195,1.765-9.262c0,0,2.192,0.709,4.586,1.153
	c0,0,2.358,0.38,4.347,0.304c1.988,0.076,4.33-0.304,4.33-0.304c2.395-0.444,4.577-1.153,4.577-1.153
	c-0.784,3.066,1.797,9.262,1.797,9.262c0.71,4.562,3.269,8.439,3.269,8.439c0.887,2.686,1.808,5.322,1.808,5.322
	c0.355,1.95,0.243,3.75,0.243,3.75c-0.557,1.9-0.729,6.057-0.729,6.057c-0.71,4.08-0.107,7.729-0.107,7.729
	c-0.177,3.371,1.879,10.948,1.879,10.948c0.051,1.571-0.239,2.104-0.239,2.104c-0.153,0.607-2.232,4.814-2.232,4.814
	c-1.242,2.434-2.559,6.538-2.559,6.538c-0.836,1.571-0.222,2.636-0.222,2.636c0.202,1.647,2.842,1.774,2.842,1.774
	c1.191,0.126,2.29-0.735,2.29-0.735c0.456,0.761,2.367,1.089,2.367,1.089c1.142,0.103,1.562-0.557,1.562-0.557
	c0.354,1.166,2.432,1.09,2.432,1.09c1.419-0.025,1.946-0.583,1.946-0.583c0.254,0.709,2.067,0.912,2.067,0.912
	c1.216,0,2.043-0.836,2.043-0.836c0.278,0.557,1.688,0.507,1.688,0.507c1.723-0.178,3.057-2.61,3.057-2.61
	c0.812-2.204,0.507-10.498,0.507-10.498c0-1.241-0.583-7.513-0.583-7.513c-0.228-2.787,0.964-8.831,0.964-8.831
	c0.734-2.103,3.725-15.699,3.725-15.699c2.205-6.994,3.979-22.414,3.979-22.414c0.381-3.219,0.432-6.888,0.432-6.888
	c0.177-6.005-0.355-19.539-0.355-19.539c-0.354-5.65-3.371-28.754-3.371-28.754c-1.19-5.296-2.938-27.111-2.938-27.111
	c-0.659-6.589-0.229-20.167-0.229-20.167c0.051-5.905,0.634-14.632,0.634-14.632c0.278,1.621,2.18,1.859,2.18,1.859
	c1.368,1.648,3.521,1.095,3.521,1.095c0.812,0.71,2.763,1.06,2.763,1.06c0.051,1.368,0.734,2.659,0.734,2.659
	c0.456,1.926,2.172,2.952,2.172,2.952c1.589,3.711,4.899,4.614,4.899,4.614c0.405,0.559,0.304,0.953,0.304,0.953
	c-0.025,2.179-1.546,2.44-1.546,2.44c-1.419,1.875-2.027,2.25-2.027,2.25c-0.178,0.811,0,1.367,0,1.367
	c0.329,3.269-0.025,3.388-0.025,3.388c-0.229,1.596,0.481,1.024,0.481,1.024c0.709,0.254,1.875-0.903,1.875-0.903
	c1.495-0.431,1.774-4.571,1.774-4.571c0.076-1.039,0.177-4.461,0.177-4.461c0.052-1.47,1.598-2.535,1.598-2.535
	c1.267-0.076,1.899,0.021,1.899,0.021c0.837,1.571,0.938,2.114,0.938,2.114c0.051,3.041-0.76,2.848-0.76,2.848
	c-1.065,2.863-0.964,1.903-0.964,1.903c0.126,2.204,2.585,0.339,2.585,0.339c2.027,0,2.69-3.525,2.69-3.525
	c0.369,1.23,2.246,0.038,2.246,0.038c1.97-0.062,2.462-3.312,2.462-3.312c1.169,0.338,2.092-1.586,2.092-1.586
	c1.293-1.199,1.385-5.76,1.385-5.76c0.432,0.03,1.077-0.935,1.077-0.935c1.077-0.924,1.231-5.471,1.231-5.471
	c0.399-2,0-8.039,0-8.039c-0.154-1.385-2.309-9.647-2.309-9.647c-1.076-2.554-2.522-10.235-2.522-10.235
	c-0.462-2.031-1.2-7.596-1.2-7.596c-1.385-6.247-3.908-21.429-3.908-21.429c-1.508-4.615-5.169-18.099-5.169-18.099
	c-2.893-5.047-7.016-14.624-7.016-14.624c-7.354-7.293-12.985-16.289-12.985-16.289c-4.339-1.754-9.354-7.652-9.354-7.652
	c-1.877-0.769-1.939-3.674-1.939-3.674l0.031-2.427c-0.062-0.739,0.031-1.722,0.031-1.722c1.783-1.815,4.215-8.411,4.215-8.411
	c1.539-2.923,2.399-8.909,2.399-8.909c0.862,0.307,1.908-0.709,1.908-0.709c1.323-0.092,2.123-3.216,2.123-3.216
	c0.523-1.446,1.179-7.398,1.179-7.398c0.539-1.943,0.972-6.809,0.972-6.809c0.312-2.088-0.755-5.299-0.755-5.299
	c-0.872-1.635-2.482-3.029-2.482-3.029c1.188-5.071,0-14.019,0-14.019c-1.079-6.15-10.012-11.76-10.012-11.76
	c-6.944-9.064-25.461-8.689-25.461-8.689s-18.527-0.375-25.472,8.689C-25.471-183.71-34.396-178.1-35.474-171.95z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-33.586-167.014c0,0-1.079,8.58,0,13.19
	c0,0-1.464,1.389-2.256,2.875c0,0-0.97,3.031-0.688,4.929c0,0,0.393,4.622,0.883,6.388c0,0,0.596,5.671,1.072,6.986
	c0,0,0.727,2.963,1.93,3.047c0,0,0.951,1.002,1.734,0.722c0,0,0.783,5.741,2.182,8.399c0,0,2.21,6.316,3.832,7.967
	c0,0,0.084,0.944,0.028,1.615l0.028,2.296c0,0-0.056,2.806-1.762,3.506c0,0-4.56,5.846-8.504,7.44c0,0-5.119,8.996-11.804,15.625
	c0,0-3.749,9.295-6.378,13.882c0,0-3.329,12.945-4.7,17.141c0,0-2.294,14.587-3.552,20.265c0,0-0.672,5.343-1.091,7.19
	c0,0-1.315,7.372-2.294,9.694c0,0-1.958,7.865-2.098,9.124c0,0-0.364,5.777,0,7.595c0,0,0.14,4.337,1.119,5.176
	c0,0,0.587,0.934,0.979,0.906c0,0,0.084,4.369,1.259,5.461c0,0,0.839,1.864,1.902,1.558c0,0,0.447,3.132,2.238,3.188
	c0,0,1.706,1.233,2.042,0.114c0,0,0.603,3.391,2.446,3.391c0,0,2.234,1.896,2.349-0.109c0,0,0.093,1.077-0.875-1.527
	c0,0-0.737,0.462-0.691-2.304c0,0,0.092-0.273,0.852-1.702c0,0,0.576,0.032,1.728,0.102c0,0,1.405,1.101,1.451,2.437
	c0,0,0.093,3.286,0.162,4.23c0,0,0.253,3.973,1.612,4.365c0,0,1.06,1.161,1.705,0.932c0,0,0.645,0.634,0.438-0.818
	c0,0-0.323,0.244-0.023-2.728c0,0,0.161-0.365,0-1.103c0,0-0.553-0.049-1.843-1.754c0,0-1.382,0.062-1.405-1.919
	c0,0-0.093-0.256,0.276-0.763c0,0,3.009-0.173,4.454-3.547c0,0,1.559-0.561,1.974-2.312c0,0,0.622-0.868,0.668-2.111
	c0,0,1.774-0.064,2.511-0.709c0,0,1.958,0.798,3.202-0.699c0,0,1.728,0.062,1.981-1.411c0,0,0.53,8.562,0.576,13.931
	c0,0,0.392,13.232-0.207,19.223c0,0-1.59,21.05-2.672,25.864c0,0-2.742,22.253-3.065,27.391c0,0-0.483,13.212-0.322,18.672
	c0,0,0.046,3.629,0.392,6.555c0,0,1.612,15.034,3.617,21.394c0,0,2.718,13.109,3.386,15.021c0,0,1.083,5.914,0.876,8.448
	c0,0-0.53,6.072-0.53,7.201c0,0-0.277,8.022,0.46,10.027c0,0,1.22,2.211,2.786,2.373c0,0,1.25,0.046,1.503-0.461
	c0,0,0.721,0.76,1.827,0.76c0,0,1.628-0.184,1.858-0.828c0,0,0.474,0.507,1.764,0.529c0,0,1.88,0.069,2.203-0.99
	c0,0,0.37,0.599,1.407,0.507c0,0,1.724-0.3,2.139-0.991c0,0,0.991,0.783,2.073,0.668c0,0,2.408-0.115,2.592-1.612
	c0,0,0.568-0.968-0.193-2.396c0,0-1.159-3.732-2.288-5.944c0,0-1.867-3.824-2.005-4.377c0,0-0.252-0.484-0.206-1.912
	c0,0,1.965-6.889,1.804-9.953c0,0,0.612-3.316-0.033-7.025c0,0-0.097-3.779-0.603-5.507c0,0-0.082-1.636,0.241-3.409
	c0,0,0.905-2.396,1.712-4.838c0,0,2.426-3.525,3.071-7.673c0,0,2.442-5.632,1.728-8.42c0,0,2.048,0.646,4.225,1.049
	c0,0,2.195,0.346,4.003,0.276c1.809,0.069,3.985-0.276,3.985-0.276c2.177-0.403,4.217-1.049,4.217-1.049
	c-0.714,2.788,1.76,8.42,1.76,8.42c0.645,4.147,3.09,7.673,3.09,7.673c0.806,2.441,1.716,4.838,1.716,4.838
	c0.322,1.773,0.271,3.409,0.271,3.409c-0.507,1.728-0.578,5.507-0.578,5.507c-0.646,3.709,0.008,7.025,0.008,7.025
	c-0.161,3.064,1.858,9.953,1.858,9.953c0.046,1.428-0.19,1.912-0.19,1.912c-0.139,0.553-1.952,4.377-1.952,4.377
	c-1.129,2.212-2.222,5.944-2.222,5.944c-0.762,1.428-0.167,2.396-0.167,2.396c0.185,1.497,2.63,1.612,2.63,1.612
	c1.083,0.115,2.111-0.668,2.111-0.668c0.415,0.691,2.186,0.991,2.186,0.991c1.037,0.092,1.439-0.507,1.439-0.507
	c0.323,1.06,2.246,0.99,2.246,0.99c1.29-0.022,1.795-0.529,1.795-0.529c0.23,0.645,1.91,0.828,1.91,0.828
	c1.106,0,1.889-0.76,1.889-0.76c0.253,0.507,1.559,0.461,1.559,0.461c1.567-0.162,2.833-2.373,2.833-2.373
	c0.737-2.005,0.461-9.956,0.461-9.956c0-1.128-0.53-7.122-0.53-7.122c-0.208-2.533,0.875-8.377,0.875-8.377
	c0.668-1.911,3.388-14.909,3.388-14.909c2.004-6.358,3.616-21.273,3.616-21.273c0.346-2.925,0.392-6.529,0.392-6.529
	c0.162-5.46-0.322-18.526-0.322-18.526c-0.323-5.139-3.063-27.278-3.063-27.278c-1.083-4.813-2.674-25.719-2.674-25.719
	c-0.599-5.989-0.207-19.122-0.207-19.122c0.047-5.368,0.576-13.874,0.576-13.874c0.253,1.474,1.981,1.441,1.981,1.441
	c1.244,1.498,3.202,0.727,3.202,0.727c0.737,0.646,2.512,0.744,2.512,0.744c0.046,1.244,0.668,2.144,0.668,2.144
	c0.414,1.751,1.974,2.341,1.974,2.341c1.444,3.373,4.453,3.602,4.453,3.602c0.369,0.507,0.277,0.768,0.277,0.768
	c-0.023,1.981-1.406,1.94-1.406,1.94c-1.29,1.705-1.843,1.769-1.843,1.769c-0.161,0.737,0,1.107,0,1.107
	c0.3,2.972-0.023,2.732-0.023,2.732c-0.207,1.451,0.438,0.815,0.438,0.815c0.645,0.23,1.705-0.927,1.705-0.927
	c1.358-0.392,1.611-4.358,1.611-4.358c0.07-0.945,0.162-4.229,0.162-4.229c0.046-1.336,1.451-2.439,1.451-2.439
	c1.152-0.069,1.729-0.106,1.729-0.106c0.76,1.428,0.852,1.692,0.852,1.692c0.046,2.765-0.69,2.287-0.69,2.287
	c-0.968,2.604-0.875,1.523-0.875,1.523c0.114,2.004,2.35,0.099,2.35,0.099c1.843,0,2.446-3.403,2.446-3.403
	c0.335,1.119,2.042-0.119,2.042-0.119c1.79-0.055,2.236-3.194,2.236-3.194c1.063,0.308,1.903-1.569,1.903-1.569
	c1.174-1.091,1.258-5.474,1.258-5.474c0.393,0.026,0.979-0.914,0.979-0.914c0.979-0.839,1.119-5.198,1.119-5.198
	c0.363-1.818,0-7.625,0-7.625c-0.141-1.259-2.099-9.165-2.099-9.165c-0.979-2.322-2.293-9.724-2.293-9.724
	c-0.42-1.846-1.091-7.209-1.091-7.209c-1.259-5.679-3.553-20.347-3.553-20.347c-1.371-4.196-4.699-17.211-4.699-17.211
	c-2.63-4.588-6.378-13.966-6.378-13.966c-6.687-6.629-11.806-15.725-11.806-15.725c-3.943-1.594-8.504-7.523-8.504-7.523
	c-1.706-0.7-1.762-3.518-1.762-3.518l0.028-2.299c-0.057-0.671,0.027-1.631,0.027-1.631c1.622-1.651,3.832-8.038,3.832-8.038
	c1.399-2.657,2.183-8.471,2.183-8.471c0.783,0.279,1.733-0.754,1.733-0.754c1.203-0.083,1.932-3.093,1.932-3.093
	c0.475-1.314,1.07-7.022,1.07-7.022c0.49-1.766,0.884-6.465,0.884-6.465c0.282-1.898-0.688-5.037-0.688-5.037
	c-0.792-1.486-2.256-2.932-2.256-2.932c1.079-4.61,0-13.304,0-13.304c-0.98-5.591-9.613-10.691-9.613-10.691
	C17.659-185.943,0-185.604,0-185.604s-17.669-0.34-23.982,7.899C-23.982-177.705-32.605-172.604-33.586-167.014z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-31.697-162.077c0,0-0.971,8.322,0,12.471
	c0,0-1.318,1.439-2.03,2.777c0,0-0.874,2.954-0.618,4.663c0,0,0.353,4.451,0.794,6.04c0,0,0.536,5.426,0.964,6.609
	c0,0,0.655,2.848,1.738,2.923c0,0,0.855,1.017,1.56,0.765c0,0,0.705,5.568,1.964,7.959c0,0,1.989,6.106,3.449,7.591
	c0,0,0.076,0.92,0.025,1.525l0.026,2.168c0,0-0.051,2.718-1.587,3.348c0,0-4.103,5.875-7.653,7.31c0,0-4.607,9.091-10.624,15.057
	c0,0-3.374,9.092-5.74,13.221c0,0-2.996,12.473-4.23,16.249c0,0-2.064,14.071-3.197,19.182c0,0-0.604,5.14-0.982,6.801
	c0,0-1.183,7.093-2.064,9.182c0,0-1.763,7.509-1.888,8.641c0,0-0.328,5.544,0,7.181c0,0,0.125,4.147,1.007,4.903
	c0,0,0.528,0.91,0.881,0.884c0,0,0.075,4.193,1.133,5.176c0,0,0.755,1.816,1.712,1.539c0,0,0.402,3.022,2.014,3.072
	c0,0,1.535,1.279,1.838,0.272c0,0,0.542,3.269,2.201,3.269c0,0,2.011,1.933,2.115,0.128c0,0,0.083,1.197-0.788-1.146
	c0,0-0.664,0.743-0.622-1.745c0,0,0.083,0.005,0.767-1.281c0,0,0.518,0.166,1.555,0.229c0,0,1.265,1.138,1.306,2.341
	c0,0,0.083,3.147,0.145,3.998c0,0,0.228,3.8,1.452,4.152c0,0,0.953,1.162,1.534,0.955c0,0,0.581,0.699,0.394-0.607
	c0,0-0.29,0.603-0.021-2.072c0,0,0.145-0.179,0-0.843c0,0-0.497,0.263-1.658-1.272c0,0-1.244,0.365-1.265-1.418
	c0,0-0.083-0.123,0.249-0.579c0,0,2.708,0.506,4.008-2.529c0,0,1.403-0.123,1.776-1.699c0,0,0.56-0.477,0.602-1.596
	c0,0,1.596,0.188,2.26-0.393c0,0,1.762,1.018,2.882-0.33c0,0,1.555,0.335,1.783-0.992c0,0,0.477,8.345,0.518,13.176
	c0,0,0.353,12.79-0.186,18.181c0,0-1.431,20.143-2.406,24.476c0,0-2.467,21.295-2.757,25.919c0,0-0.436,12.75-0.29,17.664
	c0,0,0.041,3.565,0.352,6.198c0,0,1.451,14.534,3.255,20.256c0,0,2.447,12.517,3.048,14.237c0,0,0.975,5.714,0.788,7.995
	c0,0-0.477,5.798-0.477,6.813c0,0-0.249,7.685,0.415,9.488c0,0,1.15,1.99,2.56,2.135c0,0,1.143,0.042,1.371-0.414
	c0,0,0.675,0.685,1.67,0.685c0,0,1.492-0.166,1.7-0.746c0,0,0.449,0.456,1.611,0.476c0,0,1.724,0.063,2.015-0.891
	c0,0,0.353,0.539,1.285,0.456c0,0,1.583-0.27,1.956-0.892c0,0,0.919,0.704,1.894,0.602c0,0,2.211-0.104,2.377-1.452
	c0,0,0.547-0.87-0.137-2.156c0,0-0.938-3.358-1.955-5.349c0,0-1.603-3.442-1.728-3.94c0,0-0.198-0.435-0.157-1.721
	c0,0,1.928-6.199,1.783-8.957c0,0,0.661-2.986,0.08-6.324c0,0,0.002-3.399-0.454-4.955c0,0-0.022-1.472,0.268-3.068
	c0,0,0.894-2.156,1.619-4.354c0,0,2.312-3.172,2.893-6.903c0,0,2.332-5.07,1.689-7.579c0,0,1.906,0.581,3.865,0.943
	c0,0,2.032,0.312,3.659,0.249c1.628,0.062,3.642-0.249,3.642-0.249c1.959-0.362,3.855-0.943,3.855-0.943
	c-0.643,2.509,1.722,7.579,1.722,7.579c0.581,3.731,2.912,6.903,2.912,6.903c0.726,2.198,1.623,4.354,1.623,4.354
	c0.291,1.597,0.299,3.068,0.299,3.068c-0.456,1.556-0.428,4.955-0.428,4.955c-0.581,3.338,0.123,6.324,0.123,6.324
	c-0.146,2.758,1.84,8.957,1.84,8.957c0.041,1.286-0.144,1.721-0.144,1.721c-0.123,0.498-1.672,3.94-1.672,3.94
	c-1.016,1.99-1.887,5.349-1.887,5.349c-0.684,1.286-0.11,2.156-0.11,2.156c0.166,1.348,2.417,1.452,2.417,1.452
	c0.975,0.103,1.935-0.602,1.935-0.602c0.373,0.622,2.003,0.892,2.003,0.892c0.933,0.083,1.319-0.456,1.319-0.456
	c0.29,0.954,2.06,0.891,2.06,0.891c1.161-0.02,1.643-0.476,1.643-0.476c0.207,0.58,1.754,0.746,1.754,0.746
	c0.995,0,1.732-0.685,1.732-0.685c0.229,0.456,1.431,0.414,1.431,0.414c1.41-0.145,2.608-2.135,2.608-2.135
	c0.663-1.804,0.414-9.412,0.414-9.412c0-1.016-0.477-6.733-0.477-6.733c-0.187-2.28,0.787-7.922,0.787-7.922
	c0.602-1.721,3.049-14.119,3.049-14.119c1.804-5.724,3.255-20.133,3.255-20.133c0.311-2.633,0.353-6.172,0.353-6.172
	c0.146-4.914-0.29-17.515-0.29-17.515c-0.291-4.624-2.758-25.801-2.758-25.801c-0.975-4.334-2.405-24.326-2.405-24.326
	c-0.539-5.392-0.187-18.078-0.187-18.078c0.042-4.831,0.519-13.116,0.519-13.116c0.229,1.326,1.783,1.024,1.783,1.024
	c1.119,1.348,2.882,0.357,2.882,0.357c0.663,0.58,2.26,0.429,2.26,0.429c0.041,1.12,0.602,1.63,0.602,1.63
	c0.373,1.575,1.776,1.729,1.776,1.729c1.3,3.036,4.009,2.586,4.009,2.586c0.332,0.456,0.249,0.584,0.249,0.584
	c-0.021,1.783-1.266,1.44-1.266,1.44c-1.16,1.534-1.658,1.288-1.658,1.288c-0.146,0.663,0,0.848,0,0.848
	c0.27,2.675-0.021,2.077-0.021,2.077c-0.186,1.306,0.395,0.604,0.395,0.604c0.58,0.208,1.534-0.949,1.534-0.949
	c1.224-0.353,1.451-4.146,1.451-4.146c0.062-0.85,0.146-3.997,0.146-3.997c0.042-1.203,1.306-2.344,1.306-2.344
	c1.037-0.062,1.555-0.235,1.555-0.235c0.686,1.286,0.769,1.271,0.769,1.271c0.041,2.488-0.622,1.728-0.622,1.728
	c-0.871,2.344-0.788,1.142-0.788,1.142c0.103,1.804,2.115-0.139,2.115-0.139c1.657,0,2.2-3.282,2.2-3.282
	c0.303,1.007,1.839-0.274,1.839-0.274c1.61-0.05,2.014-3.08,2.014-3.08c0.956,0.277,1.712-1.551,1.712-1.551
	c1.057-0.982,1.133-5.19,1.133-5.19c0.353,0.025,0.881-0.892,0.881-0.892c0.882-0.755,1.007-4.926,1.007-4.926
	c0.327-1.636,0-7.21,0-7.21c-0.125-1.133-1.888-8.685-1.888-8.685c-0.882-2.089-2.064-9.212-2.064-9.212
	c-0.377-1.661-0.982-6.822-0.982-6.822c-1.133-5.111-3.197-19.265-3.197-19.265c-1.233-3.777-4.229-16.323-4.229-16.323
	c-2.367-4.129-5.741-13.307-5.741-13.307c-6.017-5.967-10.624-15.162-10.624-15.162c-3.549-1.435-7.653-7.395-7.653-7.395
	c-1.535-0.629-1.586-3.36-1.586-3.36l0.025-2.172c-0.05-0.604,0.025-1.541,0.025-1.541c1.46-1.485,3.448-7.664,3.448-7.664
	c1.259-2.391,1.964-8.034,1.964-8.034c0.705,0.252,1.562-0.797,1.562-0.797c1.082-0.076,1.737-2.971,1.737-2.971
	c0.428-1.183,0.964-6.646,0.964-6.646c0.441-1.589,0.795-6.12,0.795-6.12c0.255-1.709-0.618-4.776-0.618-4.776
	c-0.713-1.337-2.031-2.835-2.031-2.835c0.972-4.149,0-12.589,0-12.589c-0.882-5.032-9.214-9.622-9.214-9.622
	c-5.682-7.415-22.481-7.109-22.481-7.109s-16.812-0.306-22.494,7.109C-22.493-171.699-30.814-167.109-31.697-162.077z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-29.809-157.141c0,0-0.863,8.064,0,11.752
	c0,0-1.171,1.489-1.805,2.678c0,0-0.776,2.879-0.549,4.397c0,0,0.314,4.282,0.706,5.694c0,0,0.477,5.18,0.857,6.232
	c0,0,0.582,2.731,1.544,2.798c0,0,0.761,1.033,1.388,0.809c0,0,0.626,5.393,1.745,7.519c0,0,1.768,5.894,3.066,7.214
	c0,0,0.067,0.897,0.023,1.434l0.022,2.041c0,0-0.045,2.63-1.41,3.19c0,0-3.648,5.903-6.803,7.179c0,0-4.095,9.187-9.444,14.49
	c0,0-2.998,8.89-5.102,12.56c0,0-2.663,12.001-3.759,15.358c0,0-1.836,13.555-2.843,18.097c0,0-0.537,4.937-0.872,6.414
	c0,0-1.052,6.812-1.835,8.67c0,0-1.567,7.151-1.679,8.158c0,0-0.291,5.31,0,6.765c0,0,0.112,3.959,0.895,4.63
	c0,0,0.47,0.887,0.784,0.863c0,0,0.067,4.016,1.007,4.889c0,0,0.671,1.77,1.521,1.523c0,0,0.358,2.911,1.791,2.956
	c0,0,1.365,1.322,1.633,0.427c0,0,0.483,3.148,1.957,3.148c0,0,1.788,1.97,1.88,0.365c0,0,0.074,1.318-0.7-0.764
	c0,0-0.59,1.025-0.553-1.187c0,0,0.073,0.282,0.682-0.86c0,0,0.46,0.301,1.382,0.356c0,0,1.124,1.177,1.161,2.245
	c0,0,0.074,3.012,0.129,3.767c0,0,0.203,3.628,1.29,3.94c0,0,0.848,1.162,1.364,0.979c0,0,0.516,0.764,0.35-0.397
	c0,0-0.258,0.961-0.018-1.417c0,0,0.129,0.008,0-0.583c0,0-0.443,0.573-1.475-0.791c0,0-1.106,0.668-1.124-0.917
	c0,0-0.074,0.012,0.221-0.395c0,0,2.408,1.186,3.563-1.513c0,0,1.247,0.313,1.579-1.088c0,0,0.498-0.085,0.535-1.079
	c0,0,1.419,0.439,2.009-0.076c0,0,1.566,1.236,2.561,0.039c0,0,1.383,0.606,1.585-0.572c0,0,0.424,8.125,0.461,12.42
	c0,0,0.314,12.347-0.166,17.139c0,0-1.271,19.236-2.138,23.089c0,0-2.193,20.336-2.451,24.445c0,0-0.387,12.289-0.258,16.657
	c0,0,0.037,3.501,0.313,5.842c0,0,1.291,14.033,2.894,19.119c0,0,2.175,11.921,2.709,13.451c0,0,0.867,5.515,0.701,7.542
	c0,0-0.424,5.523-0.424,6.428c0,0-0.221,7.344,0.368,8.947c0,0,1.081,1.769,2.334,1.897c0,0,1.038,0.037,1.241-0.367
	c0,0,0.628,0.607,1.513,0.607c0,0,1.356-0.146,1.54-0.663c0,0,0.426,0.405,1.458,0.423c0,0,1.57,0.057,1.828-0.792
	c0,0,0.334,0.479,1.163,0.405c0,0,1.441-0.239,1.773-0.792c0,0,0.848,0.627,1.714,0.534c0,0,2.015-0.092,2.163-1.29
	c0,0,0.526-0.774-0.082-1.917c0,0-0.719-2.985-1.622-4.755c0,0-1.339-3.06-1.449-3.501c0,0-0.145-0.387-0.109-1.53
	c0,0,1.89-5.511,1.761-7.962c0,0,0.71-2.654,0.194-5.621c0,0,0.101-3.022-0.304-4.405c0,0,0.037-1.309,0.295-2.728
	c0,0,0.881-1.916,1.526-3.87c0,0,2.198-2.82,2.714-6.137c0,0,2.222-4.506,1.651-6.737c0,0,1.762,0.517,3.504,0.839
	c0,0,1.869,0.276,3.315,0.221c1.446,0.056,3.297-0.221,3.297-0.221c1.742-0.322,3.495-0.839,3.495-0.839
	c-0.571,2.231,1.685,6.737,1.685,6.737c0.517,3.316,2.733,6.137,2.733,6.137c0.646,1.954,1.531,3.87,1.531,3.87
	c0.258,1.419,0.326,2.728,0.326,2.728c-0.405,1.383-0.278,4.405-0.278,4.405c-0.517,2.967,0.238,5.621,0.238,5.621
	c-0.129,2.451,1.82,7.962,1.82,7.962c0.037,1.144-0.093,1.53-0.093,1.53c-0.111,0.441-1.394,3.501-1.394,3.501
	c-0.902,1.77-1.551,4.755-1.551,4.755c-0.608,1.143-0.054,1.917-0.054,1.917c0.146,1.198,2.204,1.29,2.204,1.29
	c0.866,0.093,1.756-0.534,1.756-0.534c0.331,0.553,1.821,0.792,1.821,0.792c0.83,0.074,1.198-0.405,1.198-0.405
	c0.259,0.849,1.873,0.792,1.873,0.792c1.033-0.018,1.491-0.423,1.491-0.423c0.186,0.517,1.598,0.663,1.598,0.663
	c0.884,0,1.577-0.607,1.577-0.607c0.202,0.404,1.302,0.367,1.302,0.367c1.253-0.129,2.383-1.897,2.383-1.897
	c0.59-1.604,0.369-8.869,0.369-8.869c0-0.904-0.425-6.344-0.425-6.344c-0.165-2.028,0.7-7.467,0.7-7.467
	c0.535-1.53,2.71-13.33,2.71-13.33c1.604-5.086,2.894-18.991,2.894-18.991c0.276-2.34,0.312-5.815,0.312-5.815
	c0.129-4.368-0.258-16.502-0.258-16.502c-0.258-4.109-2.451-24.325-2.451-24.325C31.525,64.381,30.254,45.3,30.254,45.3
	c-0.479-4.791-0.166-17.033-0.166-17.033c0.037-4.294,0.461-12.358,0.461-12.358c0.203,1.18,1.585,0.606,1.585,0.606
	c0.995,1.198,2.562-0.011,2.562-0.011c0.59,0.516,2.009,0.113,2.009,0.113c0.037,0.995,0.534,1.114,0.534,1.114
	c0.332,1.401,1.58,1.118,1.58,1.118c1.154,2.699,3.562,1.572,3.562,1.572c0.295,0.405,0.222,0.399,0.222,0.399
	c-0.019,1.585-1.125,0.939-1.125,0.939c-1.031,1.364-1.474,0.806-1.474,0.806c-0.129,0.591,0,0.591,0,0.591
	c0.24,2.377-0.02,1.421-0.02,1.421c-0.165,1.161,0.352,0.394,0.352,0.394C40.852,25.157,41.7,24,41.7,24
	c1.087-0.313,1.29-3.935,1.29-3.935c0.055-0.756,0.129-3.765,0.129-3.765c0.037-1.069,1.161-2.248,1.161-2.248
	c0.921-0.056,1.382-0.363,1.382-0.363c0.607,1.144,0.682,0.85,0.682,0.85c0.037,2.212-0.553,1.169-0.553,1.169
	c-0.774,2.083-0.7,0.76-0.7,0.76c0.092,1.604,1.88-0.376,1.88-0.376c1.474,0,1.956-3.163,1.956-3.163
	c0.27,0.896,1.634-0.429,1.634-0.429c1.433-0.045,1.79-2.964,1.79-2.964c0.852,0.246,1.522-1.535,1.522-1.535
	c0.939-0.872,1.007-4.904,1.007-4.904c0.312,0.022,0.783-0.871,0.783-0.871c0.783-0.671,0.895-4.654,0.895-4.654
	c0.291-1.454,0-6.796,0-6.796c-0.111-1.007-1.678-8.203-1.678-8.203c-0.783-1.857-1.835-8.701-1.835-8.701
	c-0.336-1.477-0.873-6.435-0.873-6.435c-1.007-4.543-2.842-18.184-2.842-18.184c-1.097-3.357-3.759-15.433-3.759-15.433
	c-2.104-3.67-5.104-12.65-5.104-12.65c-5.348-5.303-9.443-14.597-9.443-14.597c-3.155-1.276-6.803-7.268-6.803-7.268
	c-1.366-0.559-1.41-3.203-1.41-3.203l0.022-2.044c-0.045-0.537,0.021-1.45,0.021-1.45c1.298-1.321,3.066-7.291,3.066-7.291
	c1.119-2.125,1.746-7.596,1.746-7.596c0.626,0.224,1.387-0.842,1.387-0.842c0.963-0.067,1.544-2.848,1.544-2.848
	c0.381-1.052,0.858-6.27,0.858-6.27c0.392-1.413,0.706-5.776,0.706-5.776c0.227-1.519-0.55-4.514-0.55-4.514
	c-0.634-1.189-1.805-2.738-1.805-2.738c0.863-3.688,0-11.874,0-11.874c-0.785-4.473-8.815-8.553-8.815-8.553
	C15.942-172.285,0-172.013,0-172.013s-15.953-0.272-21.003,6.319C-21.003-165.694-29.024-161.614-29.809-157.141z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-27.921-152.204c0,0-0.755,7.806,0,11.033
	c0,0-1.025,1.538-1.579,2.579c0,0-0.679,2.804-0.481,4.132c0,0,0.275,4.111,0.618,5.347c0,0,0.417,4.934,0.75,5.854
	c0,0,0.509,2.615,1.351,2.674c0,0,0.666,1.049,1.214,0.853c0,0,0.549,5.218,1.528,7.078c0,0,1.546,5.684,2.682,6.839
	c0,0,0.059,0.873,0.02,1.343l0.019,1.912c0,0-0.039,2.544-1.233,3.033c0,0-3.192,5.932-5.953,7.048c0,0-3.583,9.283-8.263,13.923
	c0,0-2.624,8.688-4.465,11.899c0,0-2.33,11.53-3.289,14.467c0,0-1.606,13.038-2.487,17.013c0,0-0.47,4.733-0.764,6.025
	c0,0-0.92,6.533-1.605,8.158c0,0-1.371,6.795-1.469,7.676c0,0-0.255,5.076,0,6.349c0,0,0.098,3.77,0.783,4.357
	c0,0,0.412,0.862,0.686,0.842c0,0,0.058,3.84,0.881,4.603c0,0,0.587,1.722,1.331,1.505c0,0,0.314,2.803,1.567,2.842
	c0,0,1.194,1.364,1.429,0.581c0,0,0.422,3.027,1.712,3.027c0,0,1.565,2.008,1.645,0.605c0,0,0.065,1.438-0.613-0.385
	c0,0-0.516,1.308-0.483-0.628c0,0,0.064,0.562,0.596-0.438c0,0,0.403,0.435,1.21,0.482c0,0,0.983,1.216,1.016,2.15
	c0,0,0.064,2.873,0.113,3.534c0,0,0.177,3.455,1.128,3.729c0,0,0.742,1.162,1.194,1.001c0,0,0.451,0.829,0.306-0.187
	c0,0-0.225,1.32-0.016-0.761c0,0,0.113,0.191,0-0.324c0,0-0.387,0.885-1.29-0.309c0,0-0.968,0.971-0.984-0.417
	c0,0-0.064,0.146,0.194-0.21c0,0,2.106,1.864,3.117-0.497c0,0,1.092,0.751,1.382-0.474c0,0,0.436,0.306,0.468-0.564
	c0,0,1.242,0.691,1.758,0.24c0,0,1.37,1.457,2.241,0.408c0,0,1.21,0.879,1.387-0.153c0,0,0.371,7.906,0.403,11.664
	c0,0,0.274,11.905-0.145,16.099c0,0-1.113,18.329-1.871,21.7c0,0-1.919,19.378-2.144,22.974c0,0-0.339,11.827-0.226,15.648
	c0,0,0.032,3.438,0.274,5.486c0,0,1.129,13.531,2.532,17.982c0,0,1.903,11.326,2.37,12.664c0,0,0.758,5.316,0.613,7.091
	c0,0-0.371,5.25-0.371,6.04c0,0-0.193,7.004,0.323,8.407c0,0,1.011,1.548,2.107,1.66c0,0,0.933,0.033,1.11-0.321
	c0,0,0.582,0.531,1.356,0.531c0,0,1.22-0.129,1.381-0.58c0,0,0.402,0.354,1.305,0.37c0,0,1.415,0.05,1.641-0.692
	c0,0,0.316,0.419,1.042,0.354c0,0,1.298-0.21,1.588-0.693c0,0,0.777,0.549,1.535,0.468c0,0,1.82-0.081,1.949-1.129
	c0,0,0.506-0.677-0.027-1.677c0,0-0.498-2.613-1.288-4.161c0,0-1.075-2.678-1.172-3.064c0,0-0.092-0.338-0.059-1.338
	c0,0,1.852-4.822,1.739-6.967c0,0,0.759-2.322,0.307-4.918c0,0,0.2-2.646-0.154-3.855c0,0,0.096-1.145,0.321-2.386
	c0,0,0.87-1.678,1.434-3.387c0,0,2.083-2.468,2.534-5.37c0,0,2.113-3.943,1.614-5.895c0,0,1.619,0.451,3.143,0.733
	c0,0,1.705,0.242,2.971,0.194c1.266,0.048,2.953-0.194,2.953-0.194c1.523-0.282,3.134-0.733,3.134-0.733
	c-0.5,1.951,1.647,5.895,1.647,5.895c0.451,2.902,2.556,5.37,2.556,5.37c0.563,1.709,1.437,3.387,1.437,3.387
	c0.227,1.241,0.355,2.386,0.355,2.386c-0.354,1.21-0.128,3.855-0.128,3.855c-0.451,2.596,0.354,4.918,0.354,4.918
	c-0.113,2.145,1.8,6.967,1.8,6.967c0.032,1-0.044,1.338-0.044,1.338c-0.096,0.387-1.112,3.064-1.112,3.064
	c-0.79,1.548-1.217,4.161-1.217,4.161c-0.531,1,0.003,1.677,0.003,1.677c0.13,1.048,1.991,1.129,1.991,1.129
	c0.759,0.081,1.577-0.468,1.577-0.468c0.291,0.483,1.641,0.693,1.641,0.693c0.726,0.064,1.077-0.354,1.077-0.354
	c0.227,0.742,1.688,0.692,1.688,0.692c0.903-0.016,1.339-0.37,1.339-0.37c0.161,0.451,1.439,0.58,1.439,0.58
	c0.773,0,1.423-0.531,1.423-0.531c0.177,0.354,1.172,0.321,1.172,0.321c1.097-0.112,2.159-1.66,2.159-1.66
	c0.516-1.403,0.322-8.326,0.322-8.326c0-0.791-0.37-5.955-0.37-5.955c-0.146-1.774,0.612-7.012,0.612-7.012
	c0.467-1.339,2.37-12.539,2.37-12.539c1.403-4.451,2.532-17.851,2.532-17.851c0.242-2.049,0.273-5.458,0.273-5.458
	c0.113-3.822-0.226-15.49-0.226-15.49c-0.225-3.596-2.144-22.849-2.144-22.849c-0.759-3.371-1.871-21.539-1.871-21.539
	c-0.419-4.193-0.146-15.989-0.146-15.989c0.032-3.757,0.403-11.601,0.403-11.601c0.177,1.032,1.387,0.189,1.387,0.189
	c0.871,1.048,2.241-0.38,2.241-0.38c0.516,0.451,1.758-0.202,1.758-0.202c0.032,0.87,0.468,0.601,0.468,0.601
	c0.29,1.225,1.382,0.506,1.382,0.506c1.012,2.361,3.117,0.557,3.117,0.557c0.258,0.355,0.194,0.216,0.194,0.216
	c-0.017,1.387-0.984,0.439-0.984,0.439c-0.902,1.193-1.29,0.325-1.29,0.325c-0.112,0.516,0,0.33,0,0.33
	c0.209,2.081-0.016,0.766-0.016,0.766c-0.145,1.017,0.306,0.184,0.306,0.184c0.452,0.162,1.193-0.994,1.193-0.994
	c0.952-0.274,1.129-3.722,1.129-3.722c0.049-0.661,0.113-3.533,0.113-3.533c0.032-0.936,1.016-2.153,1.016-2.153
	c0.806-0.048,1.21-0.489,1.21-0.489c0.532,0.999,0.596,0.428,0.596,0.428c0.033,1.935-0.482,0.609-0.482,0.609
	c-0.678,1.822-0.613,0.378-0.613,0.378c0.08,1.403,1.646-0.614,1.646-0.614c1.29,0,1.712-3.041,1.712-3.041
	c0.234,0.782,1.429-0.586,1.429-0.586c1.253-0.039,1.567-2.849,1.567-2.849c0.744,0.215,1.331-1.517,1.331-1.517
	c0.822-0.765,0.881-4.619,0.881-4.619c0.273,0.019,0.686-0.85,0.686-0.85c0.686-0.587,0.783-4.381,0.783-4.381
	c0.254-1.273,0-6.383,0-6.383c-0.098-0.881-1.469-7.721-1.469-7.721c-0.686-1.625-1.605-8.19-1.605-8.19
	c-0.294-1.292-0.764-6.048-0.764-6.048c-0.881-3.975-2.487-17.102-2.487-17.102c-0.959-2.937-3.289-14.545-3.289-14.545
	c-1.841-3.211-4.465-11.991-4.465-11.991c-4.68-4.641-8.263-14.034-8.263-14.034c-2.761-1.116-5.953-7.139-5.953-7.139
	c-1.194-0.49-1.233-3.046-1.233-3.046l0.02-1.917c-0.039-0.47,0.02-1.36,0.02-1.36c1.135-1.155,2.683-6.916,2.683-6.916
	c0.979-1.86,1.527-7.159,1.527-7.159c0.548,0.196,1.214-0.887,1.214-0.887c0.843-0.059,1.352-2.725,1.352-2.725
	c0.333-0.92,0.75-5.894,0.75-5.894c0.343-1.236,0.618-5.432,0.618-5.432c0.198-1.328-0.481-4.252-0.481-4.252
	c-0.554-1.04-1.579-2.641-1.579-2.641c0.755-3.227,0-11.159,0-11.159c-0.687-3.914-8.417-7.484-8.417-7.484
	C15.084-165.455,0-165.217,0-165.217s-15.095-0.238-19.514,5.529C-19.514-159.688-27.234-156.118-27.921-152.204z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-26.032-147.268c0,0-0.647,7.547,0,10.313
	c0,0-0.878,1.589-1.354,2.48c0,0-0.582,2.729-0.412,3.867c0,0,0.236,3.941,0.53,5c0,0,0.358,4.688,0.643,5.476
	c0,0,0.436,2.5,1.158,2.55c0,0,0.571,1.064,1.041,0.897c0,0,0.47,5.043,1.309,6.638c0,0,1.326,5.472,2.299,6.462
	c0,0,0.051,0.849,0.017,1.252l0.017,1.785c0,0-0.034,2.456-1.058,2.875c0,0-2.735,5.961-5.102,6.918c0,0-3.071,9.378-7.083,13.355
	c0,0-2.249,8.485-3.826,11.238c0,0-1.998,11.058-2.82,13.576c0,0-1.376,12.521-2.132,15.928c0,0-0.402,4.53-0.654,5.638
	c0,0-0.789,6.253-1.376,7.646c0,0-1.175,6.437-1.259,7.192c0,0-0.218,4.844,0,5.935c0,0,0.084,3.58,0.671,4.084
	c0,0,0.353,0.837,0.588,0.82c0,0,0.05,3.663,0.755,4.318c0,0,0.503,1.671,1.141,1.487c0,0,0.269,2.69,1.343,2.725
	c0,0,1.024,1.409,1.225,0.738c0,0,0.362,2.905,1.468,2.905c0,0,1.34,2.045,1.41,0.843c0,0,0.055,1.559-0.526-0.003
	c0,0-0.442,1.589-0.414-0.069c0,0,0.055,0.84,0.511-0.017c0,0,0.346,0.569,1.037,0.61c0,0,0.843,1.253,0.871,2.055
	c0,0,0.055,2.735,0.096,3.302c0,0,0.152,3.282,0.968,3.517c0,0,0.636,1.162,1.023,1.024c0,0,0.387,0.894,0.262,0.022
	c0,0-0.193,1.68-0.013-0.104c0,0,0.096,0.378,0-0.064c0,0-0.332,1.196-1.106,0.174c0,0-0.83,1.271-0.843,0.084
	c0,0-0.056,0.277,0.165-0.026c0,0,1.806,2.544,2.673,0.519c0,0,0.935,1.19,1.184,0.14c0,0,0.373,0.697,0.401-0.05
	c0,0,1.064,0.944,1.506,0.558c0,0,1.175,1.677,1.922,0.778c0,0,1.037,1.149,1.189,0.266c0,0,0.318,7.687,0.345,10.908
	c0,0,0.235,11.463-0.124,15.057c0,0-0.954,17.422-1.604,20.312c0,0-1.645,18.42-1.838,21.502c0,0-0.29,11.365-0.194,14.642
	c0,0,0.028,3.374,0.235,5.129c0,0,0.968,13.031,2.171,16.846c0,0,1.631,10.731,2.031,11.878c0,0,0.65,5.118,0.526,6.639
	c0,0-0.318,4.976-0.318,5.653c0,0-0.166,6.664,0.276,7.867c0,0,0.942,1.327,1.882,1.423c0,0,0.826,0.028,0.978-0.275
	c0,0,0.536,0.456,1.199,0.456c0,0,1.084-0.111,1.223-0.498c0,0,0.378,0.305,1.152,0.317c0,0,1.259,0.042,1.453-0.594
	c0,0,0.298,0.359,0.92,0.304c0,0,1.156-0.18,1.405-0.594c0,0,0.706,0.471,1.356,0.401c0,0,1.623-0.07,1.734-0.968
	c0,0,0.485-0.581,0.029-1.438c0,0-0.278-2.239-0.956-3.565c0,0-0.811-2.295-0.894-2.627c0,0-0.038-0.289-0.01-1.146
	c0,0,1.814-4.133,1.717-5.972c0,0,0.808-1.99,0.421-4.217c0,0,0.299-2.267-0.005-3.303c0,0,0.155-0.981,0.349-2.046
	c0,0,0.857-1.438,1.341-2.903c0,0,1.968-2.114,2.354-4.603c0,0,2.004-3.38,1.575-5.052c0,0,1.476,0.387,2.783,0.629
	c0,0,1.542,0.207,2.628,0.166c1.085,0.041,2.607-0.166,2.607-0.166c1.307-0.242,2.772-0.629,2.772-0.629
	c-0.428,1.672,1.612,5.052,1.612,5.052c0.387,2.488,2.376,4.603,2.376,4.603c0.483,1.466,1.345,2.903,1.345,2.903
	c0.193,1.064,0.383,2.046,0.383,2.046c-0.304,1.036,0.022,3.303,0.022,3.303c-0.388,2.227,0.469,4.217,0.469,4.217
	c-0.097,1.839,1.78,5.972,1.78,5.972c0.027,0.857,0.006,1.146,0.006,1.146c-0.083,0.332-0.833,2.627-0.833,2.627
	c-0.678,1.326-0.881,3.565-0.881,3.565c-0.456,0.857,0.059,1.438,0.059,1.438c0.11,0.897,1.778,0.968,1.778,0.968
	c0.648,0.069,1.398-0.401,1.398-0.401c0.249,0.414,1.458,0.594,1.458,0.594c0.622,0.056,0.957-0.304,0.957-0.304
	c0.194,0.636,1.502,0.594,1.502,0.594c0.774-0.013,1.188-0.317,1.188-0.317c0.138,0.387,1.282,0.498,1.282,0.498
	c0.664,0,1.268-0.456,1.268-0.456c0.152,0.304,1.044,0.275,1.044,0.275c0.94-0.096,1.935-1.423,1.935-1.423
	c0.441-1.203,0.275-7.784,0.275-7.784c0-0.678-0.317-5.564-0.317-5.564c-0.124-1.521,0.525-6.557,0.525-6.557
	c0.401-1.148,2.032-11.75,2.032-11.75c1.202-3.815,2.17-16.709,2.17-16.709c0.207-1.757,0.235-5.101,0.235-5.101
	c0.097-3.275-0.194-14.478-0.194-14.478c-0.193-3.082-1.838-21.373-1.838-21.373c-0.65-2.89-1.604-20.146-1.604-20.146
	c-0.358-3.593-0.124-14.943-0.124-14.943c0.028-3.221,0.347-10.844,0.347-10.844c0.151,0.886,1.188-0.229,1.188-0.229
	c0.747,0.898,1.922-0.747,1.922-0.747c0.442,0.387,1.507-0.518,1.507-0.518c0.027,0.746,0.4,0.085,0.4,0.085
	c0.249,1.052,1.186-0.105,1.186-0.105c0.865,2.025,2.672-0.457,2.672-0.457c0.221,0.304,0.166,0.032,0.166,0.032
	c-0.015,1.188-0.845-0.062-0.845-0.062c-0.773,1.023-1.104-0.155-1.104-0.155c-0.097,0.442,0,0.07,0,0.07
	c0.179,1.783-0.014,0.11-0.014,0.11c-0.125,0.871,0.262-0.027,0.262-0.027c0.387,0.139,1.022-1.017,1.022-1.017
	c0.816-0.235,0.969-3.509,0.969-3.509c0.041-0.567,0.097-3.302,0.097-3.302c0.027-0.802,0.87-2.058,0.87-2.058
	c0.691-0.041,1.037-0.617,1.037-0.617c0.456,0.857,0.512,0.005,0.512,0.005c0.027,1.659-0.415,0.052-0.415,0.052
	c-0.581,1.562-0.525-0.004-0.525-0.004c0.069,1.202,1.41-0.853,1.41-0.853c1.105,0,1.467-2.921,1.467-2.921
	c0.202,0.671,1.226-0.741,1.226-0.741c1.075-0.033,1.343-2.732,1.343-2.732c0.638,0.185,1.142-1.5,1.142-1.5
	c0.704-0.655,0.756-4.334,0.756-4.334c0.234,0.017,0.587-0.829,0.587-0.829C46.01-5.294,46.094-8.9,46.094-8.9
	c0.219-1.091,0-5.968,0-5.968c-0.084-0.756-1.258-7.24-1.258-7.24c-0.588-1.393-1.377-7.679-1.377-7.679
	c-0.251-1.108-0.654-5.661-0.654-5.661c-0.756-3.407-2.132-16.021-2.132-16.021c-0.822-2.517-2.819-13.656-2.819-13.656
	c-1.578-2.752-3.827-11.332-3.827-11.332c-4.011-3.978-7.083-13.47-7.083-13.47c-2.366-0.957-5.102-7.012-5.102-7.012
	c-1.024-0.419-1.059-2.889-1.059-2.889l0.018-1.789c-0.033-0.402,0.017-1.269,0.017-1.269c0.974-0.99,2.299-6.543,2.299-6.543
	c0.841-1.594,1.311-6.721,1.311-6.721c0.469,0.168,1.04-0.932,1.04-0.932c0.722-0.05,1.158-2.602,1.158-2.602
	c0.286-0.789,0.643-5.518,0.643-5.518c0.294-1.059,0.53-5.087,0.53-5.087c0.17-1.139-0.412-3.99-0.412-3.99
	c-0.475-0.892-1.354-2.546-1.354-2.546c0.647-2.766,0-10.443,0-10.443c-0.588-3.355-8.018-6.415-8.018-6.415
	c-3.787-4.943-18.013-4.739-18.013-4.739s-14.238-0.204-18.025,4.739C-18.024-153.683-25.443-150.623-26.032-147.268z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-24.144-142.332c0,0-0.539,7.289,0,9.594
	c0,0-0.732,1.639-1.128,2.382c0,0-0.485,2.653-0.343,3.602c0,0,0.196,3.77,0.441,4.653c0,0,0.298,4.441,0.536,5.099
	c0,0,0.363,2.383,0.965,2.425c0,0,0.475,1.08,0.867,0.94c0,0,0.392,4.87,1.091,6.198c0,0,1.105,5.262,1.916,6.087
	c0,0,0.042,0.825,0.014,1.16l0.014,1.658c0,0-0.028,2.368-0.881,2.718c0,0-2.28,5.989-4.252,6.786c0,0-2.56,9.474-5.902,12.789
	c0,0-1.874,8.282-3.189,10.576c0,0-1.665,10.587-2.35,12.685c0,0-1.147,12.005-1.776,14.844c0,0-0.336,4.327-0.546,5.25
	c0,0-0.657,5.972-1.147,7.133c0,0-0.979,6.08-1.049,6.71c0,0-0.181,4.61,0,5.519c0,0,0.07,3.392,0.56,3.811
	c0,0,0.294,0.813,0.489,0.799c0,0,0.042,3.486,0.63,4.032c0,0,0.419,1.623,0.951,1.469c0,0,0.224,2.581,1.119,2.609
	c0,0,0.854,1.453,1.021,0.894c0,0,0.301,2.784,1.223,2.784c0,0,1.117,2.083,1.175,1.081c0,0,0.046,1.68-0.438,0.378
	c0,0-0.369,1.872-0.346,0.49c0,0,0.046,1.119,0.427,0.404c0,0,0.288,0.703,0.864,0.738c0,0,0.702,1.291,0.725,1.959
	c0,0,0.046,2.598,0.081,3.069c0,0,0.127,3.108,0.806,3.305c0,0,0.53,1.162,0.853,1.047c0,0,0.322,0.959,0.218,0.234
	c0,0-0.161,2.036-0.011,0.55c0,0,0.081,0.564,0,0.195c0,0-0.277,1.507-0.922,0.655c0,0-0.691,1.574-0.702,0.585
	c0,0-0.046,0.412,0.138,0.157c0,0,1.505,3.224,2.227,1.536c0,0,0.779,1.627,0.987,0.751c0,0,0.311,1.089,0.334,0.468
	c0,0,0.887,1.195,1.255,0.873c0,0,0.979,1.896,1.602,1.147c0,0,0.863,1.422,0.99,0.685c0,0,0.265,7.469,0.288,10.152
	c0,0,0.196,11.021-0.104,14.016c0,0-0.794,16.516-1.336,18.924c0,0-1.371,17.461-1.532,20.029c0,0-0.242,10.904-0.161,13.635
	c0,0,0.023,3.31,0.196,4.772c0,0,0.806,12.53,1.808,15.709c0,0,1.359,10.135,1.694,11.091c0,0,0.541,4.92,0.437,6.188
	c0,0-0.265,4.702-0.265,5.266c0,0-0.138,6.325,0.231,7.327c0,0,0.872,1.106,1.655,1.186c0,0,0.721,0.023,0.848-0.229
	c0,0,0.489,0.38,1.042,0.38c0,0,0.948-0.092,1.063-0.415c0,0,0.354,0.254,0.999,0.265c0,0,1.104,0.035,1.266-0.494
	c0,0,0.28,0.299,0.798,0.253c0,0,1.015-0.149,1.222-0.495c0,0,0.634,0.392,1.176,0.334c0,0,1.428-0.058,1.52-0.807
	c0,0,0.464-0.483,0.084-1.197c0,0-0.058-1.866-0.622-2.973c0,0-0.547-1.911-0.616-2.188c0,0,0.015-0.242,0.038-0.956
	c0,0,1.777-3.444,1.696-4.977c0,0,0.857-1.658,0.534-3.513c0,0,0.398-1.889,0.145-2.753c0,0,0.214-0.818,0.376-1.705
	c0,0,0.844-1.198,1.248-2.419c0,0,1.853-1.762,2.176-3.836c0,0,1.894-2.816,1.537-4.21c0,0,1.333,0.323,2.421,0.524
	c0,0,1.38,0.173,2.285,0.138c0.904,0.035,2.264-0.138,2.264-0.138c1.088-0.201,2.411-0.524,2.411-0.524
	c-0.356,1.394,1.574,4.21,1.574,4.21c0.323,2.074,2.198,3.836,2.198,3.836c0.402,1.221,1.252,2.419,1.252,2.419
	c0.162,0.887,0.411,1.705,0.411,1.705c-0.253,0.864,0.173,2.753,0.173,2.753c-0.322,1.854,0.583,3.513,0.583,3.513
	c-0.08,1.532,1.762,4.977,1.762,4.977c0.023,0.714,0.054,0.956,0.054,0.956c-0.068,0.277-0.553,2.188-0.553,2.188
	c-0.564,1.106-0.546,2.973-0.546,2.973c-0.38,0.714,0.115,1.197,0.115,1.197c0.093,0.749,1.565,0.807,1.565,0.807
	c0.541,0.058,1.222-0.334,1.222-0.334c0.207,0.346,1.275,0.495,1.275,0.495c0.519,0.046,0.836-0.253,0.836-0.253
	c0.162,0.529,1.316,0.494,1.316,0.494c0.645-0.011,1.035-0.265,1.035-0.265c0.116,0.323,1.125,0.415,1.125,0.415
	c0.553,0,1.113-0.38,1.113-0.38c0.126,0.253,0.914,0.229,0.914,0.229c0.783-0.079,1.71-1.186,1.71-1.186
	c0.368-1.002,0.23-7.241,0.23-7.241c0-0.564-0.265-5.175-0.265-5.175c-0.104-1.268,0.438-6.103,0.438-6.103
	c0.334-0.956,1.693-10.959,1.693-10.959c1.002-3.18,1.809-15.569,1.809-15.569c0.172-1.463,0.195-4.743,0.195-4.743
	c0.081-2.729-0.161-13.465-0.161-13.465c-0.161-2.568-1.532-19.897-1.532-19.897c-0.541-2.406-1.336-18.752-1.336-18.752
	c-0.3-2.995-0.104-13.898-0.104-13.898c0.022-2.685,0.288-10.086,0.288-10.086c0.127,0.736,0.99-0.648,0.99-0.648
	c0.622,0.749,1.602-1.116,1.602-1.116c0.369,0.323,1.256-0.832,1.256-0.832c0.022,0.622,0.334-0.429,0.334-0.429
	c0.207,0.875,0.987-0.718,0.987-0.718c0.722,1.687,2.226-1.471,2.226-1.471c0.185,0.253,0.139-0.153,0.139-0.153
	c-0.012,0.99-0.703-0.562-0.703-0.562c-0.645,0.854-0.922-0.637-0.922-0.637c-0.08,0.369,0-0.188,0-0.188
	c0.15,1.485-0.011-0.547-0.011-0.547c-0.104,0.727,0.219-0.236,0.219-0.236c0.322,0.115,0.853-1.04,0.853-1.04
	c0.68-0.195,0.806-3.297,0.806-3.297c0.035-0.474,0.081-3.069,0.081-3.069c0.023-0.668,0.727-1.962,0.727-1.962
	c0.575-0.034,0.863-0.745,0.863-0.745c0.38,0.714,0.426-0.416,0.426-0.416c0.023,1.382-0.346-0.509-0.346-0.509
	c-0.482,1.301-0.437-0.384-0.437-0.384c0.057,1.002,1.175-1.092,1.175-1.092c0.921,0,1.223-2.801,1.223-2.801
	c0.167,0.561,1.021-0.896,1.021-0.896c0.895-0.028,1.118-2.618,1.118-2.618c0.531,0.154,0.951-1.482,0.951-1.482
	c0.587-0.545,0.63-4.048,0.63-4.048c0.195,0.014,0.488-0.808,0.488-0.808c0.49-0.419,0.561-3.837,0.561-3.837
	c0.182-0.909,0-5.554,0-5.554c-0.07-0.629-1.049-6.758-1.049-6.758c-0.49-1.161-1.147-7.168-1.147-7.168
	c-0.21-0.923-0.545-5.274-0.545-5.274c-0.63-2.839-1.777-14.939-1.777-14.939c-0.685-2.098-2.35-12.767-2.35-12.767
	c-1.314-2.294-3.188-10.675-3.188-10.675c-3.343-3.315-5.902-12.906-5.902-12.906c-1.973-0.797-4.252-6.883-4.252-6.883
	c-0.854-0.35-0.881-2.732-0.881-2.732l0.014-1.661c-0.028-0.336,0.014-1.18,0.014-1.18c0.812-0.825,1.916-6.169,1.916-6.169
	c0.7-1.328,1.091-6.283,1.091-6.283c0.393,0.14,0.867-0.977,0.867-0.977c0.603-0.042,0.966-2.479,0.966-2.479
	c0.237-0.657,0.535-5.142,0.535-5.142c0.245-0.883,0.442-4.743,0.442-4.743c0.141-0.949-0.345-3.728-0.345-3.728
	c-0.396-0.744-1.128-2.449-1.128-2.449c0.54-2.305,0-9.728,0-9.728c-0.489-2.795-7.618-5.346-7.618-5.346
	C13.368-151.796,0-151.626,0-151.626s-13.379-0.17-16.536,3.949C-16.536-147.677-23.654-145.126-24.144-142.332z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-22.255-137.395c0,0-0.432,7.031,0,8.875
	c0,0-0.586,1.689-0.902,2.283c0,0-0.389,2.577-0.275,3.337c0,0,0.157,3.599,0.353,4.306c0,0,0.238,4.195,0.429,4.721
	c0,0,0.291,2.268,0.772,2.301c0,0,0.38,1.096,0.693,0.984c0,0,0.314,4.695,0.873,5.758c0,0,0.884,5.05,1.533,5.71
	c0,0,0.034,0.801,0.011,1.07l0.011,1.53c0,0-0.022,2.28-0.704,2.56c0,0-1.824,6.017-3.402,6.655c0,0-2.048,9.57-4.722,12.222
	c0,0-1.499,8.08-2.551,9.915c0,0-1.331,10.115-1.88,11.793c0,0-0.917,11.489-1.421,13.76c0,0-0.268,4.124-0.436,4.862
	c0,0-0.526,5.693-0.918,6.622c0,0-0.783,5.723-0.839,6.227c0,0-0.145,4.376,0,5.103c0,0,0.056,3.203,0.448,3.539
	c0,0,0.235,0.789,0.391,0.777c0,0,0.034,3.31,0.504,3.746c0,0,0.336,1.575,0.761,1.452c0,0,0.179,2.471,0.895,2.493
	c0,0,0.682,1.497,0.817,1.049c0,0,0.241,2.663,0.978,2.663c0,0,0.894,2.12,0.94,1.319c0,0,0.037,1.801-0.35,0.759
	c0,0-0.295,2.154-0.277,1.049c0,0,0.037,1.398,0.341,0.826c0,0,0.231,0.838,0.691,0.866c0,0,0.563,1.328,0.581,1.863
	c0,0,0.037,2.46,0.064,2.838c0,0,0.102,2.936,0.646,3.092c0,0,0.423,1.162,0.681,1.07c0,0,0.259,1.024,0.176,0.443
	c0,0-0.129,2.396-0.01,1.207c0,0,0.065,0.748,0,0.454c0,0-0.221,1.818-0.737,1.137c0,0-0.553,1.878-0.562,1.086
	c0,0-0.037,0.545,0.111,0.343c0,0,1.203,3.901,1.781,2.552c0,0,0.624,2.064,0.79,1.364c0,0,0.248,1.479,0.267,0.982
	c0,0,0.709,1.447,1.004,1.189c0,0,0.784,2.116,1.281,1.517c0,0,0.691,1.694,0.793,1.104c0,0,0.212,7.249,0.23,9.396
	c0,0,0.157,10.578-0.083,12.975c0,0-0.636,15.608-1.069,17.535c0,0-1.096,16.503-1.225,18.558c0,0-0.194,10.442-0.129,12.626
	c0,0,0.018,3.246,0.156,4.417c0,0,0.645,12.029,1.447,14.572c0,0,1.087,9.54,1.355,10.305c0,0,0.433,4.72,0.35,5.734
	c0,0-0.212,4.428-0.212,4.88c0,0-0.111,5.983,0.184,6.786c0,0,0.803,0.885,1.429,0.949c0,0,0.616,0.019,0.717-0.185
	c0,0,0.443,0.304,0.885,0.304c0,0,0.812-0.073,0.904-0.332c0,0,0.331,0.203,0.847,0.213c0,0,0.949,0.027,1.078-0.396
	c0,0,0.261,0.24,0.676,0.203c0,0,0.873-0.12,1.039-0.396c0,0,0.563,0.313,0.996,0.268c0,0,1.232-0.046,1.306-0.646
	c0,0,0.444-0.387,0.14-0.959c0,0,0.162-1.493-0.29-2.377c0,0-0.283-1.53-0.338-1.751c0,0,0.068-0.193,0.087-0.765
	c0,0,1.739-2.755,1.675-3.981c0,0,0.906-1.327,0.648-2.81c0,0,0.496-1.512,0.294-2.203c0,0,0.273-0.654,0.402-1.364
	c0,0,0.833-0.958,1.155-1.935c0,0,1.739-1.41,1.997-3.069c0,0,1.785-2.253,1.5-3.368c0,0,1.189,0.259,2.06,0.42
	c0,0,1.217,0.139,1.941,0.11c0.723,0.028,1.919-0.11,1.919-0.11c0.871-0.161,2.05-0.42,2.05-0.42
	c-0.285,1.115,1.538,3.368,1.538,3.368c0.258,1.659,2.02,3.069,2.02,3.069c0.322,0.977,1.159,1.935,1.159,1.935
	c0.13,0.71,0.439,1.364,0.439,1.364c-0.203,0.691,0.323,2.203,0.323,2.203c-0.258,1.482,0.698,2.81,0.698,2.81
	c-0.064,1.227,1.741,3.981,1.741,3.981c0.019,0.571,0.104,0.765,0.104,0.765c-0.055,0.221-0.274,1.751-0.274,1.751
	c-0.452,0.884-0.21,2.377-0.21,2.377c-0.304,0.572,0.171,0.959,0.171,0.959c0.074,0.6,1.353,0.646,1.353,0.646
	c0.434,0.046,1.044-0.268,1.044-0.268c0.165,0.276,1.094,0.396,1.094,0.396c0.415,0.037,0.716-0.203,0.716-0.203
	c0.129,0.424,1.13,0.396,1.13,0.396c0.517-0.01,0.884-0.213,0.884-0.213c0.092,0.259,0.968,0.332,0.968,0.332
	c0.441,0,0.958-0.304,0.958-0.304c0.101,0.203,0.785,0.185,0.785,0.185c0.627-0.064,1.484-0.949,1.484-0.949
	c0.295-0.803,0.186-6.698,0.186-6.698c0-0.452-0.212-4.786-0.212-4.786c-0.083-1.014,0.35-5.647,0.35-5.647
	c0.267-0.766,1.355-10.169,1.355-10.169c0.801-2.544,1.445-14.428,1.445-14.428c0.14-1.171,0.157-4.386,0.157-4.386
	c0.064-2.184-0.129-12.452-0.129-12.452c-0.129-2.055-1.227-18.422-1.227-18.422c-0.433-1.926-1.068-17.358-1.068-17.358
	c-0.239-2.396-0.082-12.854-0.082-12.854c0.018-2.147,0.229-9.328,0.229-9.328c0.102,0.59,0.792-1.066,0.792-1.066
	c0.498,0.6,1.281-1.483,1.281-1.483c0.295,0.258,1.005-1.148,1.005-1.148c0.019,0.498,0.268-0.943,0.268-0.943
	c0.166,0.699,0.79-1.329,0.79-1.329c0.576,1.35,1.78-2.486,1.78-2.486c0.147,0.203,0.111-0.337,0.111-0.337
	c-0.01,0.792-0.562-1.061-0.562-1.061c-0.517,0.682-0.737-1.118-0.737-1.118c-0.064,0.295,0-0.448,0-0.448
	c0.12,1.188-0.009-1.201-0.009-1.201c-0.083,0.581,0.175-0.447,0.175-0.447c0.258,0.093,0.682-1.062,0.682-1.062
	c0.544-0.156,0.646-3.085,0.646-3.085C28.873,9.639,28.91,7.18,28.91,7.18c0.019-0.534,0.58-1.866,0.58-1.866
	c0.461-0.027,0.691-0.873,0.691-0.873c0.304,0.572,0.341-0.838,0.341-0.838c0.019,1.105-0.276-1.068-0.276-1.068
	c-0.387,1.041-0.35-0.765-0.35-0.765c0.046,0.801,0.94-1.33,0.94-1.33c0.736,0,0.978-2.679,0.978-2.679
	c0.134,0.447,0.817-1.052,0.817-1.052c0.716-0.023,0.895-2.502,0.895-2.502c0.425,0.123,0.761-1.465,0.761-1.465
	c0.471-0.436,0.503-3.764,0.503-3.764c0.157,0.012,0.393-0.786,0.393-0.786c0.391-0.335,0.447-3.565,0.447-3.565
	c0.146-0.727,0-5.14,0-5.14c-0.057-0.503-0.84-6.276-0.84-6.276c-0.391-0.929-0.917-6.657-0.917-6.657
	c-0.168-0.738-0.437-4.886-0.437-4.886c-0.503-2.272-1.421-13.858-1.421-13.858c-0.548-1.679-1.879-11.879-1.879-11.879
	c-1.053-1.835-2.553-10.016-2.553-10.016c-2.674-2.652-4.721-12.343-4.721-12.343c-1.578-0.638-3.401-6.755-3.401-6.755
	c-0.684-0.28-0.705-2.575-0.705-2.575l0.011-1.533c-0.022-0.269,0.011-1.089,0.011-1.089c0.649-0.66,1.533-5.796,1.533-5.796
	c0.56-1.063,0.873-5.845,0.873-5.845c0.312,0.112,0.693-1.022,0.693-1.022c0.481-0.033,0.772-2.356,0.772-2.356
	c0.19-0.526,0.429-4.766,0.429-4.766c0.196-0.706,0.354-4.398,0.354-4.398c0.113-0.76-0.275-3.467-0.275-3.467
	c-0.316-0.595-0.901-2.353-0.901-2.353c0.431-1.844,0-9.013,0-9.013c-0.394-2.236-7.222-4.276-7.222-4.276
	C12.51-144.967,0-144.831,0-144.831s-12.521-0.136-15.046,3.16C-15.046-141.671-21.864-139.631-22.255-137.395z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-20.367-132.458c0,0-0.324,6.773,0,8.156
	c0,0-0.439,1.738-0.677,2.184c0,0-0.291,2.502-0.206,3.071c0,0,0.118,3.43,0.265,3.959c0,0,0.179,3.95,0.321,4.345
	c0,0,0.219,2.151,0.58,2.176c0,0,0.285,1.112,0.52,1.028c0,0,0.235,4.52,0.654,5.317c0,0,0.663,4.84,1.15,5.335
	c0,0,0.025,0.777,0.008,0.978l0.009,1.402c0,0-0.017,2.193-0.529,2.403c0,0-1.368,6.046-2.551,6.524c0,0-1.536,9.666-3.541,11.655
	c0,0-1.125,7.877-1.914,9.254c0,0-0.998,9.643-1.41,10.902c0,0-0.688,10.972-1.065,12.676c0,0-0.202,3.92-0.328,4.474
	c0,0-0.394,5.413-0.688,6.109c0,0-0.587,5.366-0.629,5.744c0,0-0.109,4.143,0,4.689c0,0,0.042,3.013,0.336,3.265
	c0,0,0.176,0.765,0.293,0.756c0,0,0.025,3.133,0.378,3.46c0,0,0.252,1.527,0.571,1.434c0,0,0.134,2.361,0.671,2.378
	c0,0,0.512,1.54,0.613,1.204c0,0,0.18,2.542,0.733,2.542c0,0,0.671,2.158,0.705,1.557c0,0,0.028,1.921-0.262,1.14
	c0,0-0.222,2.437-0.208,1.607c0,0,0.028,1.677,0.256,1.249c0,0,0.173,0.972,0.518,0.993c0,0,0.422,1.366,0.436,1.767
	c0,0,0.027,2.322,0.048,2.606c0,0,0.076,2.763,0.484,2.88c0,0,0.318,1.162,0.511,1.092c0,0,0.194,1.091,0.132,0.655
	c0,0-0.097,2.754-0.007,1.862c0,0,0.048,0.935,0,0.714c0,0-0.166,2.13-0.553,1.618c0,0-0.415,2.181-0.422,1.586
	c0,0-0.027,0.68,0.083,0.527c0,0,0.903,4.581,1.336,3.569c0,0,0.468,2.501,0.593,1.976c0,0,0.186,1.872,0.2,1.499
	c0,0,0.532,1.699,0.753,1.507c0,0,0.588,2.335,0.961,1.886c0,0,0.518,1.965,0.594,1.522c0,0,0.159,7.03,0.173,8.642
	c0,0,0.118,10.136-0.062,11.933c0,0-0.477,14.702-0.802,16.146c0,0-0.822,15.545-0.919,17.086c0,0-0.145,9.98-0.097,11.619
	c0,0,0.014,3.183,0.118,4.06c0,0,0.484,11.529,1.085,13.437c0,0,0.815,8.944,1.016,9.519c0,0,0.325,4.521,0.262,5.281
	c0,0-0.159,4.154-0.159,4.493c0,0-0.083,5.645,0.139,6.245c0,0,0.733,0.664,1.203,0.713c0,0,0.509,0.014,0.585-0.139
	c0,0,0.397,0.229,0.728,0.229c0,0,0.677-0.056,0.746-0.249c0,0,0.306,0.151,0.693,0.159c0,0,0.794,0.021,0.891-0.298
	c0,0,0.243,0.181,0.554,0.152c0,0,0.731-0.09,0.855-0.297c0,0,0.493,0.235,0.817,0.2c0,0,1.037-0.034,1.092-0.483
	c0,0,0.423-0.291,0.195-0.719c0,0,0.383-1.12,0.044-1.783c0,0-0.019-1.147-0.06-1.313c0,0,0.121-0.146,0.135-0.573
	c0,0,1.702-2.067,1.653-2.986c0,0,0.955-0.995,0.762-2.107c0,0,0.595-1.134,0.443-1.652c0,0,0.333-0.49,0.43-1.023
	c0,0,0.82-0.718,1.062-1.45c0,0,1.625-1.058,1.818-2.302c0,0,1.675-1.689,1.461-2.526c0,0,1.047,0.193,1.7,0.314
	c0,0,1.054,0.104,1.597,0.083c0.542,0.021,1.575-0.083,1.575-0.083c0.653-0.121,1.688-0.314,1.688-0.314
	c-0.214,0.837,1.501,2.526,1.501,2.526c0.193,1.244,1.841,2.302,1.841,2.302c0.241,0.732,1.067,1.45,1.067,1.45
	c0.097,0.533,0.466,1.023,0.466,1.023c-0.151,0.519,0.475,1.652,0.475,1.652c-0.194,1.112,0.812,2.107,0.812,2.107
	c-0.048,0.919,1.723,2.986,1.723,2.986c0.014,0.428,0.152,0.573,0.152,0.573c-0.041,0.166,0.006,1.313,0.006,1.313
	c-0.339,0.663,0.126,1.783,0.126,1.783c-0.228,0.428,0.228,0.719,0.228,0.719c0.055,0.449,1.139,0.483,1.139,0.483
	c0.325,0.035,0.865-0.2,0.865-0.2c0.125,0.207,0.913,0.297,0.913,0.297c0.311,0.028,0.595-0.152,0.595-0.152
	c0.096,0.318,0.944,0.298,0.944,0.298c0.387-0.008,0.73-0.159,0.73-0.159c0.069,0.193,0.812,0.249,0.812,0.249
	c0.332,0,0.803-0.229,0.803-0.229c0.076,0.152,0.657,0.139,0.657,0.139c0.47-0.049,1.26-0.713,1.26-0.713
	c0.221-0.601,0.138-6.154,0.138-6.154c0-0.339-0.158-4.396-0.158-4.396c-0.062-0.761,0.263-5.193,0.263-5.193
	c0.201-0.573,1.016-9.379,1.016-9.379c0.602-1.907,1.085-13.286,1.085-13.286c0.104-0.878,0.118-4.028,0.118-4.028
	c0.048-1.638-0.097-11.44-0.097-11.44c-0.098-1.542-0.919-16.945-0.919-16.945c-0.325-1.444-0.802-15.965-0.802-15.965
	c-0.181-1.798-0.062-11.811-0.062-11.811c0.014-1.61,0.173-8.57,0.173-8.57c0.076,0.442,0.594-1.483,0.594-1.483
	c0.373,0.449,0.962-1.854,0.962-1.854c0.221,0.194,0.753-1.463,0.753-1.463c0.014,0.373,0.199-1.459,0.199-1.459
	c0.125,0.526,0.594-1.939,0.594-1.939c0.433,1.012,1.336-3.501,1.336-3.501c0.109,0.151,0.083-0.521,0.083-0.521
	c-0.008,0.594-0.422-1.561-0.422-1.561c-0.388,0.512-0.554-1.6-0.554-1.6c-0.048,0.222,0-0.707,0-0.707
	c0.09,0.892-0.007-1.856-0.007-1.856c-0.062,0.436,0.131-0.658,0.131-0.658c0.194,0.069,0.513-1.085,0.513-1.085
	c0.407-0.117,0.483-2.873,0.483-2.873C25.33,7.221,25.357,4.9,25.357,4.9c0.015-0.4,0.437-1.771,0.437-1.771
	c0.345-0.021,0.518-1,0.518-1c0.229,0.428,0.256-1.26,0.256-1.26c0.014,0.829-0.208-1.628-0.208-1.628
	c-0.29,0.781-0.262-1.147-0.262-1.147c0.034,0.602,0.705-1.567,0.705-1.567c0.552,0,0.733-2.559,0.733-2.559
	c0.101,0.336,0.612-1.208,0.612-1.208c0.537-0.017,0.671-2.386,0.671-2.386c0.319,0.092,0.571-1.448,0.571-1.448
	c0.353-0.327,0.378-3.478,0.378-3.478c0.117,0.008,0.293-0.765,0.293-0.765c0.294-0.252,0.336-3.293,0.336-3.293
	c0.109-0.545,0-4.725,0-4.725c-0.042-0.378-0.629-5.796-0.629-5.796c-0.294-0.696-0.688-6.145-0.688-6.145
	c-0.125-0.554-0.327-4.499-0.327-4.499c-0.378-1.704-1.066-12.777-1.066-12.777c-0.411-1.258-1.409-10.99-1.409-10.99
	c-0.789-1.376-1.914-9.358-1.914-9.358c-2.005-1.988-3.541-11.778-3.541-11.778c-1.183-0.479-2.551-6.628-2.551-6.628
	c-0.512-0.209-0.528-2.417-0.528-2.417l0.008-1.406c-0.017-0.202,0.009-0.998,0.009-0.998c0.487-0.496,1.149-5.422,1.149-5.422
	c0.42-0.798,0.654-5.408,0.654-5.408c0.235,0.084,0.521-1.067,0.521-1.067c0.36-0.025,0.579-2.233,0.579-2.233
	c0.143-0.394,0.321-4.39,0.321-4.39c0.147-0.529,0.266-4.054,0.266-4.054c0.085-0.57-0.206-3.205-0.206-3.205
	c-0.238-0.446-0.678-2.255-0.678-2.255c0.323-1.383,0-8.298,0-8.298c-0.294-1.677-6.82-3.207-6.82-3.207
	c-1.895-2.472-13.545-2.37-13.545-2.37s-11.664-0.102-13.558,2.37C-13.557-135.666-20.073-134.136-20.367-132.458z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-18.479-127.522c0,0-0.216,6.515,0,7.437
	c0,0-0.293,1.788-0.451,2.086c0,0-0.194,2.425-0.138,2.805c0,0,0.079,3.259,0.177,3.612c0,0,0.119,3.704,0.214,3.967
	c0,0,0.146,2.036,0.386,2.052c0,0,0.191,1.127,0.347,1.071c0,0,0.157,4.346,0.437,4.878c0,0,0.442,4.628,0.766,4.958
	c0,0,0.017,0.753,0.006,0.888l0.005,1.274c0,0-0.011,2.105-0.352,2.245c0,0-0.912,6.075-1.701,6.395c0,0-1.024,9.761-2.361,11.087
	c0,0-0.75,7.675-1.275,8.593c0,0-0.666,9.172-0.94,10.011c0,0-0.459,10.456-0.711,11.591c0,0-0.134,3.717-0.218,4.087
	c0,0-0.263,5.132-0.459,5.597c0,0-0.391,5.009-0.419,5.261c0,0-0.073,3.909,0,4.273c0,0,0.028,2.825,0.223,2.993
	c0,0,0.118,0.74,0.196,0.734c0,0,0.017,2.957,0.252,3.175c0,0,0.168,1.477,0.38,1.416c0,0,0.09,2.25,0.448,2.262
	c0,0,0.341,1.584,0.408,1.36c0,0,0.121,2.421,0.489,2.421c0,0,0.447,2.195,0.47,1.794c0,0,0.019,2.042-0.175,1.521
	c0,0-0.147,2.719-0.138,2.166c0,0,0.019,1.956,0.171,1.67c0,0,0.115,1.107,0.345,1.12c0,0,0.281,1.405,0.29,1.672
	c0,0,0.019,2.185,0.033,2.374c0,0,0.05,2.59,0.322,2.668c0,0,0.212,1.162,0.341,1.115c0,0,0.129,1.155,0.088,0.866
	c0,0-0.065,3.111-0.005,2.518c0,0,0.032,1.12,0,0.972c0,0-0.11,2.441-0.368,2.101c0,0-0.277,2.483-0.282,2.087
	c0,0-0.018,0.813,0.056,0.712c0,0,0.602,5.26,0.89,4.585c0,0,0.312,2.938,0.395,2.589c0,0,0.125,2.264,0.134,2.015
	c0,0,0.355,1.951,0.502,1.822c0,0,0.392,2.555,0.641,2.256c0,0,0.345,2.237,0.396,1.942c0,0,0.106,6.811,0.115,7.885
	c0,0,0.078,9.694-0.041,10.893c0,0-0.318,13.795-0.535,14.758c0,0-0.548,14.586-0.613,15.613c0,0-0.096,9.52-0.064,10.611
	c0,0,0.009,3.119,0.078,3.704c0,0,0.323,11.027,0.723,12.299c0,0,0.544,8.351,0.678,8.732c0,0,0.216,4.323,0.175,4.83
	c0,0-0.106,3.88-0.106,4.105c0,0-0.055,5.306,0.092,5.706c0,0,0.664,0.442,0.977,0.475c0,0,0.404,0.009,0.455-0.093
	c0,0,0.35,0.152,0.571,0.152c0,0,0.54-0.037,0.586-0.166c0,0,0.282,0.102,0.541,0.106c0,0,0.638,0.014,0.703-0.198
	c0,0,0.225,0.12,0.432,0.101c0,0,0.589-0.059,0.672-0.198c0,0,0.421,0.157,0.638,0.135c0,0,0.84-0.023,0.877-0.323
	c0,0,0.402-0.193,0.25-0.479c0,0,0.603-0.745,0.377-1.188c0,0,0.246-0.764,0.218-0.875c0,0,0.175-0.097,0.184-0.382
	c0,0,1.664-1.378,1.632-1.991c0,0,1.004-0.663,0.875-1.405c0,0,0.694-0.756,0.593-1.101c0,0,0.392-0.328,0.456-0.683
	c0,0,0.809-0.479,0.97-0.968c0,0,1.51-0.705,1.639-1.534c0,0,1.566-1.127,1.423-1.684c0,0,0.903,0.129,1.339,0.209
	c0,0,0.891,0.069,1.253,0.056c0.361,0.014,1.231-0.056,1.231-0.056c0.435-0.08,1.327-0.209,1.327-0.209
	c-0.143,0.557,1.464,1.684,1.464,1.684c0.129,0.829,1.663,1.534,1.663,1.534c0.16,0.488,0.974,0.968,0.974,0.968
	c0.064,0.354,0.495,0.683,0.495,0.683c-0.103,0.345,0.624,1.101,0.624,1.101c-0.129,0.742,0.928,1.405,0.928,1.405
	c-0.032,0.613,1.703,1.991,1.703,1.991c0.009,0.285,0.202,0.382,0.202,0.382c-0.028,0.111,0.285,0.875,0.285,0.875
	c-0.227,0.443,0.461,1.188,0.461,1.188c-0.152,0.286,0.283,0.479,0.283,0.479c0.037,0.3,0.927,0.323,0.927,0.323
	c0.217,0.022,0.687-0.135,0.687-0.135c0.083,0.14,0.731,0.198,0.731,0.198c0.207,0.02,0.474-0.101,0.474-0.101
	c0.064,0.212,0.758,0.198,0.758,0.198c0.258-0.005,0.58-0.106,0.58-0.106c0.046,0.129,0.653,0.166,0.653,0.166
	c0.221,0,0.648-0.152,0.648-0.152c0.051,0.102,0.527,0.093,0.527,0.093c0.313-0.032,1.036-0.475,1.036-0.475
	c0.146-0.4,0.092-5.613,0.092-5.613c0-0.226-0.105-4.007-0.105-4.007c-0.041-0.507,0.175-4.737,0.175-4.737
	c0.134-0.384,0.678-8.59,0.678-8.59c0.4-1.271,0.723-12.146,0.723-12.146c0.069-0.585,0.078-3.671,0.078-3.671
	c0.033-1.092-0.063-10.427-0.063-10.427c-0.065-1.028-0.613-15.471-0.613-15.471c-0.217-0.963-0.535-14.57-0.535-14.57
	c-0.119-1.198-0.041-10.767-0.041-10.767c0.009-1.074,0.115-7.812,0.115-7.812c0.051,0.295,0.396-1.902,0.396-1.902
	c0.248,0.299,0.641-2.222,0.641-2.222c0.146,0.129,0.502-1.778,0.502-1.778c0.009,0.249,0.134-1.973,0.134-1.973
	c0.083,0.35,0.396-2.552,0.396-2.552c0.288,0.675,0.89-4.516,0.89-4.516c0.074,0.102,0.056-0.706,0.056-0.706
	c-0.005,0.397-0.281-2.06-0.281-2.06c-0.259,0.34-0.368-2.081-0.368-2.081c-0.032,0.146,0-0.966,0-0.966
	c0.06,0.594-0.005-2.513-0.005-2.513c-0.041,0.29,0.088-0.868,0.088-0.868c0.129,0.046,0.341-1.108,0.341-1.108
	c0.271-0.078,0.322-2.661,0.322-2.661c0.014-0.189,0.032-2.372,0.032-2.372c0.01-0.267,0.29-1.675,0.29-1.675
	c0.23-0.014,0.346-1.128,0.346-1.128c0.151,0.286,0.171-1.682,0.171-1.682c0.009,0.553-0.139-2.187-0.139-2.187
	C22.28-3.531,22.299-5.58,22.299-5.58c0.023,0.401,0.47-1.805,0.47-1.805c0.368,0,0.489-2.439,0.489-2.439
	c0.067,0.224,0.408-1.363,0.408-1.363c0.358-0.011,0.448-2.271,0.448-2.271c0.212,0.061,0.38-1.43,0.38-1.43
	c0.235-0.218,0.252-3.193,0.252-3.193c0.078,0.006,0.196-0.744,0.196-0.744c0.194-0.168,0.223-3.021,0.223-3.021
	c0.073-0.363,0-4.311,0-4.311c-0.028-0.252-0.419-5.314-0.419-5.314c-0.196-0.464-0.459-5.634-0.459-5.634
	c-0.084-0.369-0.218-4.112-0.218-4.112c-0.252-1.136-0.711-11.695-0.711-11.695c-0.274-0.839-0.939-10.101-0.939-10.101
	c-0.525-0.918-1.275-8.7-1.275-8.7c-1.338-1.326-2.361-11.215-2.361-11.215c-0.789-0.319-1.701-6.499-1.701-6.499
	c-0.341-0.14-0.352-2.261-0.352-2.261l0.005-1.278c-0.012-0.134,0.006-0.908,0.006-0.908c0.324-0.33,0.766-5.048,0.766-5.048
	c0.28-0.532,0.438-4.97,0.438-4.97c0.155,0.056,0.347-1.112,0.347-1.112c0.24-0.016,0.386-2.11,0.386-2.11
	c0.096-0.263,0.214-4.013,0.214-4.013c0.099-0.354,0.178-3.711,0.178-3.711c0.056-0.379-0.139-2.943-0.139-2.943
	c-0.157-0.298-0.45-2.158-0.45-2.158c0.216-0.922,0-7.583,0-7.583c-0.196-1.118-6.423-2.138-6.423-2.138
	C10.793-131.308,0-131.24,0-131.24s-10.805-0.068-12.068,1.58C-12.068-129.66-18.283-128.64-18.479-127.522z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-16.59-122.586c0,0-0.108,6.257,0,6.718
	c0,0-0.146,1.838-0.226,1.987c0,0-0.097,2.35-0.068,2.54c0,0,0.039,3.089,0.088,3.265c0,0,0.06,3.458,0.107,3.589
	c0,0,0.073,1.92,0.193,1.928c0,0,0.095,1.143,0.174,1.115c0,0,0.078,4.172,0.218,4.438c0,0,0.221,4.416,0.383,4.581
	c0,0,0.008,0.73,0.003,0.797l0.003,1.147c0,0-0.006,2.017-0.177,2.087c0,0-0.456,6.104-0.85,6.263c0,0-0.512,9.857-1.18,10.52
	c0,0-0.375,7.473-0.638,7.932c0,0-0.333,8.7-0.47,9.12c0,0-0.23,9.939-0.355,10.507c0,0-0.068,3.514-0.11,3.698
	c0,0-0.131,4.853-0.229,5.085c0,0-0.196,4.652-0.21,4.778c0,0-0.036,3.677,0,3.858c0,0,0.014,2.636,0.112,2.72
	c0,0,0.059,0.716,0.098,0.713c0,0,0.008,2.78,0.126,2.889c0,0,0.084,1.429,0.19,1.398c0,0,0.045,2.141,0.224,2.146
	c0,0,0.171,1.628,0.204,1.516c0,0,0.06,2.3,0.245,2.3c0,0,0.223,2.232,0.235,2.032c0,0,0.009,2.163-0.088,1.903
	c0,0-0.074,3.001-0.069,2.724c0,0,0.009,2.234,0.085,2.092c0,0,0.058,1.24,0.173,1.247c0,0,0.141,1.443,0.145,1.576
	c0,0,0.009,2.047,0.016,2.142c0,0,0.026,2.417,0.162,2.457c0,0,0.106,1.16,0.17,1.137c0,0,0.065,1.222,0.044,1.076
	c0,0-0.032,3.471-0.002,3.174c0,0,0.016,1.307,0,1.232c0,0-0.056,2.752-0.185,2.581c0,0-0.138,2.786-0.14,2.588
	c0,0-0.009,0.947,0.027,0.896c0,0,0.301,5.94,0.446,5.603c0,0,0.156,3.377,0.197,3.202c0,0,0.062,2.654,0.067,2.53
	c0,0,0.177,2.202,0.251,2.139c0,0,0.196,2.773,0.32,2.625c0,0,0.173,2.508,0.198,2.361c0,0,0.053,6.593,0.058,7.129
	c0,0,0.039,9.252-0.021,9.851c0,0-0.159,12.888-0.267,13.37c0,0-0.274,13.628-0.306,14.141c0,0-0.049,9.059-0.033,9.604
	c0,0,0.005,3.055,0.04,3.348c0,0,0.161,10.526,0.361,11.162c0,0,0.272,7.755,0.339,7.946c0,0,0.108,4.124,0.087,4.377
	c0,0-0.053,3.605-0.053,3.719c0,0-0.027,4.965,0.047,5.166c0,0,0.594,0.221,0.75,0.237c0,0,0.299,0.005,0.324-0.046
	c0,0,0.303,0.075,0.414,0.075c0,0,0.404-0.018,0.427-0.083c0,0,0.259,0.052,0.388,0.054c0,0,0.484,0.007,0.516-0.1
	c0,0,0.207,0.061,0.311,0.052c0,0,0.446-0.03,0.488-0.1c0,0,0.35,0.078,0.458,0.067c0,0,0.645-0.012,0.663-0.162
	c0,0,0.382-0.097,0.306-0.239c0,0,0.823-0.374,0.71-0.595c0,0,0.509-0.382,0.495-0.438c0,0,0.228-0.049,0.233-0.191
	c0,0,1.626-0.688,1.61-0.995c0,0,1.053-0.332,0.989-0.703c0,0,0.793-0.377,0.743-0.55c0,0,0.451-0.164,0.483-0.341
	c0,0,0.796-0.24,0.877-0.484c0,0,1.395-0.352,1.46-0.767c0,0,1.456-0.563,1.385-0.843c0,0,0.76,0.064,0.978,0.105
	c0,0,0.728,0.034,0.909,0.027c0.182,0.007,0.887-0.027,0.887-0.027c0.218-0.041,0.967-0.105,0.967-0.105
	c-0.071,0.279,1.427,0.843,1.427,0.843c0.063,0.415,1.483,0.767,1.483,0.767c0.081,0.244,0.883,0.484,0.883,0.484
	c0.031,0.177,0.521,0.341,0.521,0.341c-0.05,0.173,0.775,0.55,0.775,0.55c-0.065,0.371,1.043,0.703,1.043,0.703
	c-0.017,0.307,1.683,0.995,1.683,0.995c0.005,0.143,0.251,0.191,0.251,0.191c-0.014,0.056,0.565,0.438,0.565,0.438
	c-0.113,0.221,0.797,0.595,0.797,0.595c-0.076,0.143,0.34,0.239,0.34,0.239c0.019,0.15,0.713,0.162,0.713,0.162
	c0.108,0.011,0.509-0.067,0.509-0.067c0.041,0.069,0.55,0.1,0.55,0.1c0.103,0.009,0.353-0.052,0.353-0.052
	c0.032,0.106,0.573,0.1,0.573,0.1c0.128-0.002,0.427-0.054,0.427-0.054c0.023,0.065,0.496,0.083,0.496,0.083
	c0.111,0,0.494-0.075,0.494-0.075c0.024,0.051,0.397,0.046,0.397,0.046c0.157-0.017,0.812-0.237,0.812-0.237
	c0.073-0.201,0.046-5.07,0.046-5.07c0-0.112-0.053-3.616-0.053-3.616c-0.021-0.255,0.087-4.284,0.087-4.284
	c0.066-0.191,0.339-7.798,0.339-7.798c0.2-0.637,0.362-11.006,0.362-11.006c0.033-0.293,0.039-3.313,0.039-3.313
	c0.016-0.546-0.032-9.415-0.032-9.415c-0.033-0.514-0.308-13.994-0.308-13.994c-0.107-0.48-0.267-13.178-0.267-13.178
	c-0.06-0.6-0.021-9.721-0.021-9.721c0.006-0.537,0.059-7.055,0.059-7.055c0.025,0.147,0.198-2.32,0.198-2.32
	c0.124,0.149,0.319-2.59,0.319-2.59c0.074,0.064,0.251-2.093,0.251-2.093c0.005,0.124,0.067-2.489,0.067-2.489
	c0.042,0.177,0.198-3.162,0.198-3.162c0.144,0.338,0.444-5.53,0.444-5.53c0.037,0.051,0.028-0.891,0.028-0.891
	c-0.003,0.199-0.141-2.56-0.141-2.56c-0.129,0.17-0.185-2.562-0.185-2.562c-0.016,0.073,0-1.226,0-1.226
	c0.03,0.297-0.003-3.167-0.003-3.167c-0.02,0.146,0.044-1.08,0.044-1.08c0.065,0.023,0.171-1.13,0.171-1.13
	c0.137-0.039,0.161-2.448,0.161-2.448c0.007-0.095,0.017-2.141,0.017-2.141c0.005-0.133,0.145-1.579,0.145-1.579
	c0.115-0.007,0.173-1.256,0.173-1.256c0.076,0.143,0.085-2.103,0.085-2.103c0.005,0.276-0.068-2.747-0.068-2.747
	c-0.098,0.261-0.087-1.909-0.087-1.909c0.011,0.201,0.234-2.044,0.234-2.044c0.185,0,0.244-2.317,0.244-2.317
	c0.034,0.112,0.204-1.519,0.204-1.519c0.179-0.006,0.224-2.156,0.224-2.156c0.106,0.031,0.19-1.412,0.19-1.412
	c0.118-0.109,0.126-2.908,0.126-2.908c0.039,0.003,0.098-0.723,0.098-0.723c0.099-0.084,0.112-2.749,0.112-2.749
	c0.036-0.181,0-3.897,0-3.897c-0.014-0.125-0.21-4.832-0.21-4.832c-0.098-0.232-0.229-5.123-0.229-5.123
	c-0.042-0.185-0.108-3.725-0.108-3.725c-0.126-0.568-0.356-10.613-0.356-10.613c-0.137-0.42-0.469-9.213-0.469-9.213
	c-0.263-0.459-0.638-8.041-0.638-8.041c-0.669-0.663-1.182-10.652-1.182-10.652c-0.394-0.159-0.85-6.371-0.85-6.371
	c-0.171-0.07-0.176-2.103-0.176-2.103l0.002-1.151c-0.005-0.067,0.003-0.817,0.003-0.817c0.163-0.165,0.383-4.675,0.383-4.675
	c0.14-0.266,0.219-4.532,0.219-4.532c0.078,0.028,0.173-1.156,0.173-1.156c0.12-0.009,0.193-1.988,0.193-1.988
	c0.048-0.132,0.107-3.637,0.107-3.637c0.049-0.177,0.089-3.366,0.089-3.366c0.027-0.19-0.069-2.682-0.069-2.682
	c-0.079-0.149-0.226-2.062-0.226-2.062c0.107-0.461,0-6.867,0-6.867c-0.099-0.559-6.023-1.069-6.023-1.069
	c-0.632-0.824-10.565-0.79-10.565-0.79s-9.948-0.034-10.58,0.79C-10.579-123.655-16.493-123.145-16.59-122.586z"/>
<rect x="-14.703" y="-117.649" fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" width="29.404" height="235.299"/>
</svg>
`
},{}],139:[function(require,module,exports){
module.exports = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="1207.561px" height="858.898px" viewBox="0 0 1207.561 858.898" enable-background="new 0 0 1207.561 858.898"
	 xml:space="preserve">
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M0,137.573c7.053,0.271,13.971-1.078,13.971-1.078
	c8.491-1.573,14.69-4.088,14.69-4.088c-2.785,10.871,2.831,32.839,2.831,32.839c2.515,16.173,8.266,29.919,8.266,29.919
	c3.144,9.524,4.402,18.868,4.402,18.868c1.258,6.919-0.539,13.298-0.539,13.298c-1.978,6.738-4.942,21.474-4.942,21.474
	c-2.515,14.466-3.324,27.403-3.324,27.403c-0.629,11.95,2.427,38.814,2.427,38.814c0.18,5.57-1.617,7.457-1.617,7.457
	c-0.539,2.157-10.063,17.07-10.063,17.07c-4.402,8.626-11.95,23.182-11.95,23.182c-2.965,5.571-1.797,9.344-1.797,9.344
	c0.72,5.84,8.806,6.29,8.806,6.29c4.223,0.449,7.277-2.606,7.277-2.606c1.617,2.695,7.457,3.863,7.457,3.863
	c4.043,0.36,4.942-1.976,4.942-1.976c1.258,4.133,7.637,3.862,7.637,3.862c5.031-0.09,6.199-2.065,6.199-2.065
	c0.899,2.515,6.469,3.234,6.469,3.234c4.313,0,6.379-2.966,6.379-2.966c0.989,1.978,5.302,1.797,5.302,1.797
	c6.109-0.629,9.345-9.254,9.345-9.254c2.875-7.816,1.797-25.695,1.797-25.695c0-4.403-2.067-18.419-2.067-18.419
	c-0.809-9.884,3.414-21.564,3.414-21.564c2.606-7.457,13.208-37.825,13.208-37.825c7.817-24.798,14.106-54.357,14.106-54.357
	c1.348-11.411,1.527-16.893,1.527-16.893c0.629-21.294-1.259-47.888-1.259-47.888c-1.257-20.036-11.948-70.082-11.948-70.082
	c-4.224-18.778-10.424-66.127-10.424-66.127c-2.336-23.361-0.808-49.417-0.808-49.417c0.179-20.934,2.246-35.849,2.246-35.849
	c0.988,5.75,7.727,13.567,7.727,13.567c4.853,5.84,12.489,11.411,12.489,11.411c2.875,2.516,9.793,9.883,9.793,9.883
	c0.18,4.852,2.606,17.071,2.606,17.071c1.616,6.829,7.697,20.076,7.697,20.076c5.634,13.157,17.369,33.023,17.369,33.023
	c1.438,1.978,1.078,6.11,1.078,6.11c-0.09,7.727-5.479,16.442-5.479,16.442c-5.032,6.648-7.188,15.723-7.188,15.723
	c-0.629,2.875,0,8.626,0,8.626c1.168,11.59-0.09,21.743-0.09,21.743c-0.81,5.66,1.707,6.918,1.707,6.918
	c2.516,0.897,6.648-0.271,6.648-0.271c5.302-1.526,6.289-10.512,6.289-10.512c0.271-3.684,0.63-10.961,0.63-10.961
	c0.18-5.211,5.659-5.211,5.659-5.211c4.493-0.271,6.739,3.594,6.739,3.594c2.965,5.57,3.324,13.926,3.324,13.926
	c0.18,10.782-2.695,18.51-2.695,18.51c-3.773,10.151-3.414,12.577-3.414,12.577c0.449,7.817,9.164,7.009,9.164,7.009
	c7.188,0,9.539-6.904,9.539-6.904c1.309,4.364,7.964,4.396,7.964,4.396c6.982-0.218,8.729-6.546,8.729-6.546
	c4.145,1.2,7.418-2.071,7.418-2.071c4.582-4.255,4.909-13.746,4.909-13.746c1.527,0.108,3.818-1.528,3.818-1.528
	c3.818-3.272,4.363-13.091,4.363-13.091c1.419-7.091,0-19.637,0-19.637c-0.545-4.909-8.182-23.128-8.182-23.128
	c-3.818-9.056-8.946-24.547-8.946-24.547c-1.636-7.2-4.254-18.437-4.254-18.437c-4.909-22.147-13.855-51.711-13.855-51.711
	c-5.346-16.364-18.328-42.984-18.328-42.984c-10.255-17.891-24.874-33.055-24.874-33.055
	c-26.072-25.856-46.037-32.074-46.037-32.074c-15.383-6.218-33.164-11.237-33.164-11.237c-6.655-2.727-6.873-8.072-6.873-8.072
	l0.108-6c-0.218-2.618,0.109-4.256,0.109-4.256c6.327-6.436,14.946-18.873,14.946-18.873c5.454-10.363,8.509-21.163,8.509-21.163
	c3.055,1.091,6.764,0.545,6.764,0.545c4.691-0.327,7.528-6.655,7.528-6.655c1.854-5.127,4.178-17.932,4.178-17.932
	c1.913-6.886,3.443-16.448,3.443-16.448c1.105-7.403-2.679-12.624-2.679-12.624c-3.089-5.798-8.798-5.738-8.798-5.738
	c4.208-17.979,0-34.046,0-34.046c-3.826-21.804-21.179-41.696-21.179-41.696C42.549-384,0-382.669,0-382.669
	s-42.549-1.33-67.17,30.803c0,0-17.353,19.893-21.179,41.696c0,0-4.208,16.067,0,34.046c0,0-5.709-0.06-8.798,5.738
	c0,0-3.784,5.221-2.678,12.624c0,0,1.53,9.562,3.443,16.448c0,0,2.324,12.805,4.178,17.932c0,0,2.837,6.328,7.528,6.655
	c0,0,3.709,0.546,6.764-0.545c0,0,3.055,10.8,8.509,21.163c0,0,8.619,12.438,14.946,18.873c0,0,0.327,1.638,0.109,4.256l0.109,6
	c0,0-0.218,5.346-6.873,8.072c0,0-17.782,5.02-33.164,11.237c0,0-19.965,6.218-46.038,32.074c0,0-14.619,15.164-24.874,33.055
	c0,0-12.982,26.62-18.328,42.984c0,0-8.945,29.564-13.855,51.711c0,0-2.618,11.236-4.254,18.437c0,0-5.128,15.491-8.946,24.547
	c0,0-7.637,18.219-8.182,23.128c0,0-1.419,12.546,0,19.637c0,0,0.545,9.818,4.364,13.091c0,0,2.29,1.637,3.818,1.528
	c0,0,0.327,9.491,4.909,13.746c0,0,3.273,3.271,7.419,2.071c0,0,1.745,6.328,8.727,6.546c0,0,6.655-0.031,7.964-4.396
	c0,0,2.351,6.904,9.539,6.904c0,0,8.715,0.809,9.164-7.009c0,0,0.36-2.426-3.414-12.577c0,0-2.875-7.728-2.695-18.51
	c0,0,0.359-8.355,3.324-13.926c0,0,2.246-3.864,6.739-3.594c0,0,5.48,0,5.66,5.211c0,0,0.359,7.277,0.629,10.961
	c0,0,0.988,8.985,6.289,10.512c0,0,4.133,1.168,6.649,0.271c0,0,2.516-1.258,1.707-6.918c0,0-1.258-10.153-0.09-21.743
	c0,0,0.629-5.751,0-8.626c0,0-2.156-9.074-7.188-15.723c0,0-5.39-8.716-5.48-16.442c0,0-0.36-4.133,1.078-6.11
	c0,0,11.736-19.866,17.369-33.023c0,0,6.081-13.247,7.698-20.076c0,0,2.426-12.219,2.606-17.071c0,0,6.918-7.367,9.793-9.883
	c0,0,7.637-5.571,12.489-11.411c0,0,6.739-7.817,7.727-13.567c0,0,2.067,14.915,2.246,35.849c0,0,1.528,26.056-0.808,49.417
	c0,0-6.2,47.349-10.423,66.127c0,0-10.692,50.046-11.949,70.082c0,0-1.887,26.594-1.258,47.888c0,0,0.179,5.481,1.527,16.893
	c0,0,6.289,29.56,14.106,54.357c0,0,10.602,30.368,13.208,37.825c0,0,4.223,11.681,3.414,21.564c0,0-2.066,14.016-2.066,18.419
	c0,0-1.079,17.879,1.796,25.695c0,0,3.235,8.625,9.345,9.254c0,0,4.312,0.181,5.301-1.797c0,0,2.066,2.966,6.379,2.966
	c0,0,5.57-0.72,6.469-3.234c0,0,1.168,1.976,6.199,2.065c0,0,6.379,0.271,7.637-3.862c0,0,0.899,2.336,4.942,1.976
	c0,0,5.84-1.168,7.457-3.863c0,0,3.055,3.056,7.278,2.606c0,0,8.086-0.45,8.805-6.29c0,0,1.168-3.772-1.797-9.344
	c0,0-7.547-14.556-11.95-23.182c0,0-9.523-14.913-10.063-17.07c0,0-1.797-1.887-1.617-7.457c0,0,3.055-26.864,2.426-38.814
	c0,0-0.809-12.938-3.324-27.403c0,0-2.965-14.735-4.942-21.474c0,0-1.797-6.379-0.539-13.298c0,0,1.258-9.344,4.403-18.868
	c0,0,5.75-13.746,8.265-29.919c0,0,5.616-21.968,2.831-32.839c0,0,6.199,2.515,14.69,4.088C-13.971,136.495-7.053,137.843,0,137.573
	z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-86.712-304.584c0,0-4.114,15.776,0,33.355
	c0,0-5.583-0.038-8.603,5.631c0,0-3.7,5.13-2.618,12.368c0,0,1.496,9.383,3.366,16.116c0,0,2.272,12.555,4.086,17.567
	c0,0,2.773,6.207,7.36,6.527c0,0,3.627,0.545,6.614-0.521c0,0,2.986,10.604,8.32,20.737c0,0,8.427,12.206,14.614,18.5
	c0,0,0.32,1.607,0.106,4.168l0.107,5.877c0,0-0.213,5.248-6.72,7.915c0,0-17.387,4.976-32.428,11.056c0,0-19.521,6.19-45.015,31.472
	c0,0-14.294,14.908-24.321,32.402c0,0-12.693,26.119-17.92,42.119c0,0-8.747,29.012-13.547,50.666c0,0-2.56,11.023-4.16,18.064
	c0,0-5.014,15.196-8.747,24.051c0,0-7.467,17.861-8.001,22.661c0,0-1.386,12.305,0,19.239c0,0,0.534,9.627,4.267,12.826
	c0,0,2.24,1.608,3.734,1.501c0,0,0.32,9.31,4.8,13.47c0,0,3.2,3.215,7.253,2.042c0,0,1.707,6.209,8.534,6.422
	c0,0,6.507-0.014,7.787-4.28c0,0,2.299,6.775,9.327,6.775c0,0,8.521,0.815,8.961-6.827c0,0,0.351-2.347-3.339-12.274
	c0,0-2.811-7.519-2.635-18.061c0,0,0.351-8.144,3.25-13.589c0,0,2.196-3.764,6.589-3.499c0,0,5.359,0.016,5.535,5.11
	c0,0,0.351,7.138,0.615,10.739c0,0,0.966,8.811,6.149,10.303c0,0,4.041,1.155,6.501,0.276c0,0,2.46-1.216,1.669-6.75
	c0,0-1.23-9.885-0.088-21.218c0,0,0.615-5.606,0-8.417c0,0-2.108-8.839-7.028-15.34c0,0-5.271-8.487-5.359-16.042
	c0,0-0.351-4.03,1.055-5.964c0,0,11.475-19.351,16.982-32.216c0,0,5.947-12.91,7.528-19.587c0,0,2.372-11.914,2.548-16.658
	c0,0,6.764-7.176,9.576-9.636c0,0,7.467-5.413,12.211-11.124c0,0,6.589-7.612,7.555-13.234c0,0,2.021,14.655,2.196,35.124
	c0,0,1.494,25.576-0.79,48.417c0,0-6.062,46.432-10.191,64.793c0,0-10.454,49.075-11.684,68.667c0,0-1.845,26.1-1.23,46.921
	c0,0,0.176,5.392,1.493,16.55c0,0,6.15,29.015,13.793,53.262c0,0,10.366,29.774,12.914,37.066c0,0,4.129,11.465,3.338,21.128
	c0,0-2.021,13.743-2.021,18.047c0,0-1.055,17.535,1.757,25.178c0,0,3.174,8.434,9.148,9.048c0,0,4.221,0.177,5.187-1.757
	c0,0,2.027,2.899,6.244,2.899c0,0,5.452-0.702,6.331-3.162c0,0,1.147,1.933,6.067,2.02c0,0,6.244,0.265,7.474-3.776
	c0,0,0.883,2.284,4.836,1.933c0,0,5.717-1.143,7.299-3.778c0,0,2.993,2.987,7.122,2.549c0,0,7.916-0.44,8.619-6.15
	c0,0,1.15-3.69-1.749-9.136c0,0-7.356-14.232-11.661-22.666c0,0-9.295-14.583-9.822-16.692c0,0-1.751-1.845-1.575-7.291
	c0,0,3.022-26.268,2.407-37.952c0,0-0.766-12.649-3.226-26.794c0,0-2.879-14.408-4.811-20.997c0,0-1.746-6.236-0.516-13.002
	c0,0,1.247-9.136,4.322-18.449c0,0,5.651-13.44,8.111-29.254c0,0,5.52-21.479,2.797-32.108c0,0,6.075,2.459,14.377,3.997
	c0,0,6.777,1.317,13.673,1.054c6.896,0.264,13.672-1.054,13.672-1.054c8.303-1.538,14.378-3.997,14.378-3.997
	c-2.724,10.63,2.799,32.108,2.799,32.108c2.46,15.813,8.11,29.254,8.11,29.254c3.075,9.313,4.322,18.449,4.322,18.449
	c1.229,6.766-0.515,13.002-0.515,13.002c-1.933,6.589-4.812,20.997-4.812,20.997c-2.46,14.145-3.224,26.794-3.224,26.794
	c-0.615,11.685,2.408,37.952,2.408,37.952c0.176,5.446-1.574,7.291-1.574,7.291c-0.527,2.109-9.821,16.692-9.821,16.692
	c-4.304,8.434-11.659,22.666-11.659,22.666c-2.898,5.445-1.748,9.136-1.748,9.136c0.703,5.71,8.621,6.15,8.621,6.15
	c4.129,0.438,7.123-2.549,7.123-2.549c1.581,2.636,7.3,3.778,7.3,3.778c3.953,0.352,4.837-1.933,4.837-1.933
	c1.23,4.041,7.477,3.776,7.477,3.776c4.919-0.087,6.066-2.02,6.066-2.02c0.88,2.46,6.333,3.162,6.333,3.162
	c4.218,0,6.245-2.899,6.245-2.899c0.967,1.934,5.189,1.757,5.189,1.757c5.974-0.614,9.149-9.048,9.149-9.048
	c2.812-7.643,1.758-25.175,1.758-25.175c0-4.305-2.021-18.045-2.021-18.045c-0.79-9.664,3.339-21.126,3.339-21.126
	c2.547-7.292,12.914-37.063,12.914-37.063c7.644-24.246,13.792-53.259,13.792-53.259c1.318-11.157,1.494-16.548,1.494-16.548
	c0.615-20.821-1.229-46.918-1.229-46.918c-1.23-19.591-11.685-68.662-11.685-68.662c-4.129-18.361-10.19-64.789-10.19-64.789
	C86.553-9.137,88.046-34.71,88.046-34.71c0.176-20.469,2.196-35.122,2.196-35.122c0.966,5.622,7.556,13.235,7.556,13.235
	c4.743,5.711,12.211,11.125,12.211,11.125c2.811,2.46,9.576,9.637,9.576,9.637c0.176,4.744,2.548,16.659,2.548,16.659
	c1.581,6.676,7.526,19.588,7.526,19.588c5.508,12.865,16.983,32.217,16.983,32.217c1.406,1.934,1.054,5.963,1.054,5.963
	c-0.088,7.556-5.358,16.043-5.358,16.043c-4.919,6.502-7.028,15.341-7.028,15.341c-0.615,2.811,0,8.417,0,8.417
	c1.142,11.333-0.088,21.218-0.088,21.218c-0.79,5.534,1.67,6.75,1.67,6.75c2.459,0.879,6.501-0.275,6.501-0.275
	c5.183-1.494,6.148-10.304,6.148-10.304c0.265-3.602,0.615-10.738,0.615-10.738c0.176-5.096,5.535-5.111,5.535-5.111
	c4.392-0.264,6.589,3.5,6.589,3.5c2.899,5.445,3.25,13.588,3.25,13.588c0.176,10.543-2.636,18.061-2.636,18.061
	c-3.689,9.927-3.338,12.274-3.338,12.274c0.438,7.643,8.961,6.827,8.961,6.827c7.028,0,9.327-6.774,9.327-6.774
	c1.279,4.267,7.787,4.28,7.787,4.28c6.826-0.214,8.532-6.423,8.532-6.423c4.055,1.174,7.255-2.042,7.255-2.042
	c4.479-4.16,4.8-13.47,4.8-13.47c1.494,0.106,3.733-1.501,3.733-1.501c3.733-3.199,4.267-12.828,4.267-12.828
	c1.387-6.934,0-19.239,0-19.239c-0.533-4.801-8-22.662-8-22.662c-3.733-8.854-8.747-24.053-8.747-24.053
	c-1.601-7.04-4.16-18.064-4.16-18.064c-4.8-21.654-13.547-50.669-13.547-50.669c-5.228-16.001-17.921-42.122-17.921-42.122
	c-10.027-17.494-24.321-32.402-24.321-32.402c-25.494-25.281-45.014-31.476-45.014-31.476
	c-15.041-6.081-32.429-11.058-32.429-11.058c-6.507-2.667-6.72-7.915-6.72-7.915l0.106-5.879c-0.213-2.561,0.106-4.168,0.106-4.168
	c6.188-6.293,14.614-18.502,14.614-18.502c5.333-10.135,8.32-20.741,8.32-20.741c2.986,1.066,6.613,0.521,6.613,0.521
	c4.586-0.319,7.36-6.527,7.36-6.527c1.812-5.015,4.085-17.57,4.085-17.57c1.871-6.733,3.367-16.119,3.367-16.119
	c1.082-7.238-2.619-12.37-2.619-12.37c-3.021-5.669-8.602-5.634-8.602-5.634c4.113-17.579,0-33.357,0-33.357
	c-3.741-21.319-20.833-40.77-20.833-40.77c-24.074-31.418-65.881-30.119-65.881-30.119s-41.804-1.299-65.878,30.119
	C-65.879-345.354-82.972-325.904-86.712-304.584z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-85.076-298.998c0,0-4.021,15.485,0,32.665
	c0,0-5.456-0.016-8.407,5.524c0,0-3.616,5.039-2.559,12.112c0,0,1.462,9.203,3.29,15.782c0,0,2.22,12.306,3.992,17.206
	c0,0,2.711,6.085,7.193,6.398c0,0,3.545,0.546,6.464-0.497c0,0,2.919,10.408,8.131,20.312c0,0,8.235,11.977,14.282,18.127
	c0,0,0.312,1.579,0.104,4.081l0.104,5.755c0,0-0.208,5.15-6.567,7.756c0,0-16.993,4.932-31.691,10.874
	c0,0-19.077,6.163-43.992,30.869c0,0-13.969,14.652-23.768,31.749c0,0-12.405,25.618-17.513,41.255c0,0-8.549,28.459-13.24,49.622
	c0,0-2.502,10.81-4.065,17.689c0,0-4.9,14.904-8.548,23.557c0,0-7.298,17.504-7.819,22.194c0,0-1.355,12.065,0,18.842
	c0,0,0.521,9.436,4.17,12.562c0,0,2.189,1.578,3.649,1.475c0,0,0.312,9.127,4.691,13.191c0,0,3.127,3.157,7.088,2.011
	c0,0,1.668,6.091,8.34,6.3c0,0,6.359,0.006,7.61-4.164c0,0,2.247,6.645,9.115,6.645c0,0,8.328,0.823,8.757-6.646
	c0,0,0.344-2.269-3.262-11.97c0,0-2.748-7.311-2.576-17.613c0,0,0.343-7.93,3.177-13.252c0,0,2.146-3.661,6.439-3.404
	c0,0,5.237,0.032,5.409,5.012c0,0,0.343,6.996,0.601,10.517c0,0,0.944,8.635,6.009,10.095c0,0,3.95,1.141,6.354,0.282
	c0,0,2.403-1.175,1.631-6.583c0,0-1.202-9.616-0.086-20.692c0,0,0.601-5.462,0-8.209c0,0-2.061-8.603-6.868-14.956
	c0,0-5.152-8.26-5.238-15.643c0,0-0.343-3.927,1.031-5.815c0,0,11.214-18.835,16.596-31.408c0,0,5.812-12.573,7.357-19.098
	c0,0,2.318-11.609,2.49-16.245c0,0,6.611-6.985,9.358-9.389c0,0,7.298-5.257,11.934-10.837c0,0,6.439-7.408,7.383-12.903
	c0,0,1.975,14.396,2.147,34.4c0,0,1.459,25.096-0.773,47.419c0,0-5.924,45.515-9.959,63.458c0,0-10.217,48.105-11.419,67.252
	c0,0-1.803,25.605-1.202,45.954c0,0,0.172,5.304,1.46,16.207c0,0,6.01,28.472,13.479,52.168c0,0,10.131,29.18,12.62,36.306
	c0,0,4.036,11.249,3.263,20.692c0,0-1.975,13.47-1.975,17.677c0,0-1.03,17.188,1.717,24.657c0,0,3.114,8.242,8.953,8.844
	c0,0,4.129,0.172,5.074-1.717c0,0,1.986,2.832,6.107,2.832c0,0,5.335-0.687,6.193-3.091c0,0,1.127,1.89,5.934,1.976
	c0,0,6.111,0.258,7.313-3.692c0,0,0.867,2.233,4.73,1.889c0,0,5.594-1.115,7.14-3.691c0,0,2.931,2.919,6.966,2.49
	c0,0,7.747-0.43,8.434-6.011c0,0,1.132-3.605-1.701-8.928c0,0-7.166-13.909-11.372-22.15c0,0-9.067-14.253-9.582-16.312
	c0,0-1.704-1.803-1.533-7.126c0,0,2.99-25.671,2.389-37.089c0,0-0.724-12.363-3.127-26.187c0,0-2.794-14.08-4.683-20.519
	c0,0-1.694-6.096-0.492-12.706c0,0,1.237-8.929,4.242-18.03c0,0,5.551-13.136,7.955-28.589c0,0,5.426-20.992,2.764-31.38
	c0,0,5.952,2.404,14.065,3.906c0,0,6.636,1.288,13.375,1.029c6.739,0.259,13.374-1.029,13.374-1.029
	c8.113-1.502,14.064-3.906,14.064-3.906c-2.661,10.388,2.766,31.38,2.766,31.38c2.404,15.453,7.957,28.589,7.957,28.589
	c3.005,9.102,4.242,18.03,4.242,18.03c1.202,6.61-0.491,12.706-0.491,12.706c-1.889,6.438-4.681,20.519-4.681,20.519
	c-2.404,13.823-3.125,26.187-3.125,26.187c-0.602,11.418,2.392,37.089,2.392,37.089c0.172,5.323-1.532,7.126-1.532,7.126
	c-0.515,2.06-9.577,16.312-9.577,16.312c-4.207,8.241-11.368,22.15-11.368,22.15c-2.833,5.322-1.7,8.928-1.7,8.928
	c0.687,5.581,8.437,6.011,8.437,6.011c4.035,0.429,6.969-2.49,6.969-2.49c1.546,2.576,7.143,3.691,7.143,3.691
	c3.863,0.345,4.732-1.889,4.732-1.889c1.202,3.95,7.314,3.692,7.314,3.692c4.809-0.086,5.937-1.976,5.937-1.976
	c0.858,2.404,6.196,3.091,6.196,3.091c4.121,0,6.11-2.832,6.11-2.832c0.945,1.889,5.078,1.717,5.078,1.717
	c5.838-0.602,8.955-8.844,8.955-8.844c2.747-7.469,1.717-24.653,1.717-24.653c0-4.206-1.975-17.67-1.975-17.67
	c-0.773-9.444,3.263-20.69,3.263-20.69c2.489-7.126,12.62-36.299,12.62-36.299c7.47-23.696,13.479-52.16,13.479-52.16
	c1.288-10.904,1.46-16.206,1.46-16.206c0.602-20.347-1.201-45.946-1.201-45.946c-1.202-19.145-11.42-67.243-11.42-67.243
	c-4.034-17.943-9.959-63.45-9.959-63.45c-2.231-22.323-0.772-47.414-0.772-47.414c0.172-20.004,2.147-34.395,2.147-34.395
	c0.943,5.495,7.383,12.904,7.383,12.904c4.636,5.58,11.934,10.839,11.934,10.839c2.747,2.404,9.358,9.391,9.358,9.391
	c0.172,4.636,2.489,16.246,2.489,16.246c1.545,6.525,7.357,19.102,7.357,19.102c5.382,12.572,16.596,31.41,16.596,31.41
	c1.374,1.889,1.031,5.814,1.031,5.814c-0.086,7.385-5.238,15.645-5.238,15.645c-4.807,6.353-6.867,14.957-6.867,14.957
	c-0.602,2.747,0,8.209,0,8.209c1.115,11.076-0.087,20.692-0.087,20.692c-0.771,5.408,1.632,6.582,1.632,6.582
	c2.403,0.859,6.354-0.281,6.354-0.281c5.065-1.459,6.01-10.095,6.01-10.095c0.258-3.52,0.601-10.516,0.601-10.516
	c0.172-4.979,5.409-5.011,5.409-5.011c4.293-0.258,6.438,3.403,6.438,3.403c2.834,5.323,3.177,13.253,3.177,13.253
	c0.172,10.302-2.576,17.611-2.576,17.611c-3.605,9.702-3.262,11.969-3.262,11.969c0.43,7.47,8.757,6.647,8.757,6.647
	c6.868,0,9.115-6.646,9.115-6.646c1.251,4.171,7.61,4.164,7.61,4.164c6.672-0.209,8.34-6.3,8.34-6.3
	c3.961,1.147,7.088-2.01,7.088-2.01c4.379-4.066,4.691-13.194,4.691-13.194c1.46,0.105,3.648-1.474,3.648-1.474
	c3.649-3.127,4.17-12.565,4.17-12.565c1.355-6.775,0-18.841,0-18.841c-0.521-4.691-7.818-22.198-7.818-22.198
	c-3.648-8.651-8.549-23.559-8.549-23.559c-1.562-6.88-4.064-17.691-4.064-17.691c-4.691-21.162-13.24-49.628-13.24-49.628
	c-5.107-15.637-17.513-41.26-17.513-41.26c-9.799-17.097-23.769-31.751-23.769-31.751c-24.914-24.706-43.991-30.876-43.991-30.876
	c-14.698-5.942-31.691-10.878-31.691-10.878c-6.359-2.606-6.567-7.758-6.567-7.758l0.104-5.757
	c-0.208-2.502,0.104-4.081,0.104-4.081c6.048-6.151,14.282-18.132,14.282-18.132c5.212-9.903,8.131-20.316,8.131-20.316
	c2.919,1.042,6.465,0.495,6.465,0.495c4.481-0.313,7.192-6.401,7.192-6.401c1.772-4.9,3.992-17.209,3.992-17.209
	c1.828-6.58,3.29-15.788,3.29-15.788c1.057-7.073-2.56-12.117-2.56-12.117c-2.95-5.54-8.406-5.529-8.406-5.529
	c4.021-17.18,0-32.669,0-32.669c-3.655-20.835-20.487-39.843-20.487-39.843C41.062-369.546,0-368.276,0-368.276
	s-41.062-1.27-64.589,29.435C-64.589-338.841-81.421-319.833-85.076-298.998z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-83.439-293.413c0,0-3.927,15.194,0,31.974
	c0,0-5.329,0.006-8.212,5.417c0,0-3.532,4.948-2.499,11.857c0,0,1.428,9.023,3.213,15.449c0,0,2.169,12.056,3.9,16.842
	c0,0,2.647,5.964,7.026,6.271c0,0,3.462,0.546,6.313-0.472c0,0,2.851,10.212,7.942,19.885c0,0,8.044,11.747,13.949,17.754
	c0,0,0.306,1.55,0.102,3.994l0.102,5.632c0,0-0.204,5.053-6.415,7.598c0,0-16.597,4.889-30.953,10.693
	c0,0-18.634,6.135-42.969,30.267c0,0-13.644,14.396-23.216,31.095c0,0-12.116,25.118-17.106,40.391c0,0-8.349,27.906-12.931,48.576
	c0,0-2.444,10.596-3.971,17.315c0,0-4.786,14.611-8.349,23.062c0,0-7.128,17.146-7.637,21.728c0,0-1.324,11.824,0,18.442
	c0,0,0.509,9.245,4.073,12.3c0,0,2.138,1.549,3.564,1.447c0,0,0.305,8.944,4.582,12.916c0,0,3.054,3.099,6.923,1.979
	c0,0,1.63,5.973,8.146,6.175c0,0,6.211,0.026,7.433-4.047c0,0,2.195,6.517,8.903,6.517c0,0,8.134,0.83,8.554-6.467
	c0,0,0.335-2.188-3.187-11.663c0,0-2.683-7.104-2.516-17.166c0,0,0.336-7.717,3.103-12.915c0,0,2.097-3.561,6.289-3.31
	c0,0,5.116,0.048,5.283,4.912c0,0,0.336,6.855,0.587,10.294c0,0,0.923,8.46,5.87,9.885c0,0,3.858,1.128,6.206,0.29
	c0,0,2.348-1.133,1.593-6.416c0,0-1.174-9.349-0.084-20.167c0,0,0.587-5.316,0-8.001c0,0-2.012-8.367-6.708-14.572
	c0,0-5.032-8.031-5.116-15.243c0,0-0.335-3.822,1.007-5.667c0,0,10.954-18.32,16.21-30.601c0,0,5.677-12.236,7.186-18.61
	c0,0,2.264-11.303,2.432-15.831c0,0,6.457-6.795,9.14-9.143c0,0,7.128-5.099,11.657-10.55c0,0,6.289-7.203,7.211-12.57
	c0,0,1.929,14.136,2.097,33.675c0,0,1.425,24.616-0.755,46.419c0,0-5.786,44.597-9.727,62.124c0,0-9.979,47.136-11.153,65.836
	c0,0-1.761,25.111-1.174,44.986c0,0,0.167,5.217,1.425,15.866c0,0,5.87,27.928,13.166,51.072c0,0,9.895,28.586,12.327,35.546
	c0,0,3.941,11.034,3.187,20.259c0,0-1.929,13.194-1.929,17.304c0,0-1.007,16.844,1.677,24.139c0,0,3.054,8.051,8.756,8.638
	c0,0,4.038,0.167,4.961-1.677c0,0,1.945,2.767,5.971,2.767c0,0,5.217-0.671,6.055-3.019c0,0,1.106,1.845,5.802,1.929
	c0,0,5.976,0.251,7.15-3.605c0,0,0.851,2.18,4.625,1.845c0,0,5.471-1.09,6.98-3.606c0,0,2.87,2.852,6.811,2.433
	c0,0,7.578-0.42,8.248-5.87c0,0,1.115-3.522-1.653-8.722c0,0-6.974-13.586-11.083-21.636c0,0-8.837-13.92-9.341-15.933
	c0,0-1.658-1.761-1.49-6.96c0,0,2.957-25.074,2.37-36.228c0,0-0.681-12.074-3.029-25.575c0,0-2.708-13.753-4.553-20.042
	c0,0-1.643-5.954-0.469-12.411c0,0,1.226-8.722,4.161-17.61c0,0,5.453-12.831,7.801-27.925c0,0,5.331-20.503,2.731-30.65
	c0,0,5.827,2.349,13.752,3.816c0,0,6.495,1.257,13.077,1.006c6.583,0.251,13.076-1.006,13.076-1.006
	c7.925-1.468,13.752-3.816,13.752-3.816c-2.6,10.147,2.734,30.65,2.734,30.65c2.348,15.094,7.802,27.925,7.802,27.925
	c2.936,8.889,4.162,17.61,4.162,17.61c1.174,6.457-0.467,12.411-0.467,12.411c-1.845,6.289-4.55,20.042-4.55,20.042
	c-2.349,13.501-3.026,25.575-3.026,25.575c-0.587,11.153,2.375,36.228,2.375,36.228c0.168,5.199-1.489,6.96-1.489,6.96
	c-0.503,2.013-9.336,15.933-9.336,15.933c-4.108,8.05-11.077,21.636-11.077,21.636c-2.768,5.199-1.65,8.722-1.65,8.722
	c0.671,5.45,8.251,5.87,8.251,5.87c3.941,0.419,6.814-2.433,6.814-2.433c1.51,2.517,6.985,3.606,6.985,3.606
	c3.772,0.335,4.627-1.845,4.627-1.845c1.174,3.856,7.154,3.605,7.154,3.605c4.695-0.084,5.805-1.929,5.805-1.929
	c0.838,2.348,6.06,3.019,6.06,3.019c4.025,0,5.977-2.767,5.977-2.767c0.923,1.844,4.966,1.677,4.966,1.677
	c5.702-0.587,8.76-8.638,8.76-8.638c2.685-7.295,1.679-24.132,1.679-24.132c0-4.109-1.93-17.296-1.93-17.296
	c-0.755-9.226,3.187-20.254,3.187-20.254c2.432-6.96,12.327-35.535,12.327-35.535c7.296-23.146,13.166-51.062,13.166-51.062
	c1.258-10.649,1.426-15.862,1.426-15.862c0.587-19.874-1.174-44.975-1.174-44.975c-1.175-18.7-11.153-65.825-11.153-65.825
	c-3.942-17.525-9.728-62.111-9.728-62.111c-2.181-21.803-0.756-46.412-0.756-46.412c0.168-19.539,2.098-33.668,2.098-33.668
	c0.922,5.367,7.212,12.572,7.212,12.572c4.527,5.451,11.656,10.553,11.656,10.553c2.683,2.348,9.14,9.145,9.14,9.145
	c0.168,4.529,2.432,15.834,2.432,15.834c1.51,6.373,7.187,18.613,7.187,18.613c5.257,12.28,16.211,30.604,16.211,30.604
	c1.341,1.846,1.006,5.668,1.006,5.668c-0.084,7.212-5.115,15.244-5.115,15.244c-4.696,6.206-6.709,14.574-6.709,14.574
	c-0.587,2.684,0,8.002,0,8.002c1.09,10.817-0.084,20.166-0.084,20.166c-0.755,5.283,1.593,6.415,1.593,6.415
	c2.349,0.839,6.206-0.288,6.206-0.288c4.947-1.426,5.87-9.885,5.87-9.885C143.664,88.004,144,81.151,144,81.151
	c0.168-4.864,5.283-4.912,5.283-4.912c4.193-0.252,6.289,3.31,6.289,3.31c2.768,5.199,3.103,12.914,3.103,12.914
	c0.168,10.062-2.516,17.164-2.516,17.164c-3.521,9.477-3.186,11.664-3.186,11.664c0.419,7.296,8.553,6.467,8.553,6.467
	c6.709,0,8.903-6.516,8.903-6.516c1.222,4.073,7.433,4.048,7.433,4.048c6.517-0.204,8.146-6.176,8.146-6.176
	c3.868,1.12,6.924-1.98,6.924-1.98c4.275-3.971,4.582-12.917,4.582-12.917c1.425,0.103,3.562-1.447,3.562-1.447
	c3.564-3.055,4.073-12.302,4.073-12.302c1.324-6.617,0-18.443,0-18.443c-0.509-4.582-7.636-21.732-7.636-21.732
	c-3.564-8.451-8.351-23.065-8.351-23.065c-1.526-6.721-3.971-17.319-3.971-17.319c-4.582-20.67-12.931-48.585-12.931-48.585
	c-4.989-15.274-17.106-40.399-17.106-40.399c-9.571-16.699-23.216-31.099-23.216-31.099c-24.335-24.132-42.968-30.277-42.968-30.277
	c-14.357-5.804-30.954-10.699-30.954-10.699c-6.211-2.545-6.415-7.601-6.415-7.601l0.102-5.634
	c-0.204-2.444,0.103-3.995,0.103-3.995c5.905-6.007,13.948-17.761,13.948-17.761c5.093-9.673,7.943-19.892,7.943-19.892
	c2.851,1.018,6.312,0.47,6.312,0.47c4.379-0.305,7.025-6.274,7.025-6.274c1.731-4.786,3.9-16.847,3.9-16.847
	c1.785-6.427,3.213-15.457,3.213-15.457c1.033-6.909-2.499-11.864-2.499-11.864c-2.883-5.411-8.212-5.425-8.212-5.425
	c3.928-16.78,0-31.981,0-31.981c-3.57-20.351-20.142-38.916-20.142-38.916C40.318-362.32,0-361.079,0-361.079
	s-40.319-1.241-63.299,28.75C-63.299-332.329-79.87-313.764-83.439-293.413z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-81.803-287.828c0,0-3.834,14.903,0,31.284
	c0,0-5.202,0.028-8.016,5.31c0,0-3.448,4.857-2.44,11.601c0,0,1.394,8.842,3.137,15.116c0,0,2.117,11.807,3.807,16.478
	c0,0,2.584,5.844,6.858,6.142c0,0,3.38,0.547,6.163-0.447c0,0,2.783,10.015,7.753,19.458c0,0,7.852,11.517,13.617,17.382
	c0,0,0.298,1.52,0.1,3.906l0.099,5.51c0,0-0.199,4.955-6.262,7.44c0,0-16.202,4.845-30.217,10.511c0,0-18.189,6.107-41.945,29.664
	c0,0-13.32,14.14-22.663,30.441c0,0-11.828,24.618-16.699,39.528c0,0-8.15,27.353-12.623,47.532c0,0-2.386,10.383-3.877,16.942
	c0,0-4.671,14.316-8.15,22.566c0,0-6.958,16.789-7.455,21.262c0,0-1.292,11.583,0,18.044c0,0,0.497,9.054,3.976,12.035
	c0,0,2.087,1.52,3.479,1.421c0,0,0.298,8.762,4.473,12.639c0,0,2.981,3.041,6.759,1.948c0,0,1.59,5.854,7.951,6.052
	c0,0,6.064,0.044,7.256-3.932c0,0,2.142,6.387,8.691,6.387c0,0,7.941,0.837,8.35-6.285c0,0,0.328-2.108-3.11-11.358
	c0,0-2.62-6.896-2.456-16.719c0,0,0.327-7.502,3.029-12.577c0,0,2.046-3.46,6.139-3.214c0,0,4.994,0.063,5.157,4.812
	c0,0,0.328,6.715,0.573,10.071c0,0,0.901,8.285,5.731,9.677c0,0,3.765,1.114,6.057,0.296c0,0,2.293-1.091,1.556-6.249
	c0,0-1.146-9.08-0.082-19.64c0,0,0.573-5.174,0-7.793c0,0-1.965-8.132-6.549-14.19c0,0-4.912-7.803-4.994-14.843
	c0,0-0.327-3.72,0.983-5.521c0,0,10.693-17.803,15.825-29.791c0,0,5.541-11.9,7.014-18.121c0,0,2.21-10.998,2.374-15.419
	c0,0,6.303-6.603,8.923-8.895c0,0,6.958-4.942,11.379-10.263c0,0,6.139-6.999,7.04-12.238c0,0,1.882,13.876,2.046,32.949
	c0,0,1.392,24.137-0.737,45.421c0,0-5.648,43.68-9.495,60.789c0,0-9.742,46.167-10.888,64.422c0,0-1.719,24.618-1.146,44.019
	c0,0,0.164,5.128,1.392,15.524c0,0,5.73,27.384,12.852,49.977c0,0,9.659,27.992,12.033,34.786c0,0,3.848,10.819,3.111,19.824
	c0,0-1.883,12.92-1.883,16.931c0,0-0.982,16.499,1.638,23.621c0,0,2.993,7.858,8.56,8.432c0,0,3.946,0.164,4.847-1.638
	c0,0,1.905,2.702,5.835,2.702c0,0,5.099-0.654,5.918-2.947c0,0,1.085,1.802,5.669,1.883c0,0,5.841,0.246,6.987-3.521
	c0,0,0.836,2.129,4.519,1.801c0,0,5.349-1.063,6.822-3.52c0,0,2.808,2.784,6.656,2.374c0,0,7.407-0.409,8.062-5.73
	c0,0,1.096-3.438-1.605-8.514c0,0-6.784-13.261-10.795-21.12c0,0-8.608-13.589-9.1-15.553c0,0-1.612-1.72-1.448-6.795
	c0,0,2.925-24.477,2.352-35.364c0,0-0.639-11.788-2.931-24.968c0,0-2.622-13.425-4.423-19.564c0,0-1.592-5.812-0.446-12.115
	c0,0,1.216-8.514,4.081-17.191c0,0,5.353-12.524,7.645-27.259c0,0,5.236-20.016,2.698-29.921c0,0,5.704,2.292,13.44,3.725
	c0,0,6.353,1.228,12.778,0.982c6.427,0.245,12.778-0.982,12.778-0.982c7.736-1.433,13.438-3.725,13.438-3.725
	c-2.538,9.905,2.701,29.921,2.701,29.921c2.293,14.734,7.648,27.259,7.648,27.259c2.865,8.678,4.081,17.191,4.081,17.191
	c1.146,6.303-0.442,12.115-0.442,12.115c-1.801,6.14-4.42,19.564-4.42,19.564c-2.292,13.18-2.926,24.968-2.926,24.968
	c-0.573,10.888,2.358,35.364,2.358,35.364c0.164,5.075-1.447,6.795-1.447,6.795c-0.491,1.964-9.093,15.553-9.093,15.553
	c-4.012,7.859-10.787,21.12-10.787,21.12c-2.701,5.076-1.603,8.514-1.603,8.514c0.655,5.321,8.067,5.73,8.067,5.73
	c3.848,0.41,6.66-2.374,6.66-2.374c1.474,2.456,6.828,3.52,6.828,3.52c3.683,0.328,4.522-1.801,4.522-1.801
	c1.146,3.767,6.992,3.521,6.992,3.521c4.584-0.081,5.673-1.883,5.673-1.883c0.819,2.293,5.924,2.947,5.924,2.947
	c3.931,0,5.844-2.702,5.844-2.702c0.899,1.802,4.853,1.638,4.853,1.638c5.567-0.573,8.566-8.432,8.566-8.432
	c2.62-7.122,1.637-23.61,1.637-23.61c0-4.012-1.883-16.923-1.883-16.923c-0.736-9.005,3.11-19.815,3.11-19.815
	c2.374-6.795,12.034-34.773,12.034-34.773c7.122-22.594,12.853-49.963,12.853-49.963c1.228-10.396,1.392-15.519,1.392-15.519
	c0.573-19.401-1.146-44.003-1.146-44.003c-1.146-18.255-10.889-64.407-10.889-64.407c-3.847-17.109-9.496-60.773-9.496-60.773
	c-2.128-21.284-0.736-45.41-0.736-45.41c0.164-19.074,2.047-32.941,2.047-32.941c0.899,5.239,7.04,12.241,7.04,12.241
	c4.421,5.321,11.379,10.267,11.379,10.267c2.619,2.292,8.923,8.899,8.923,8.899c0.163,4.42,2.374,15.421,2.374,15.421
	c1.473,6.222,7.014,18.126,7.014,18.126c5.132,11.988,15.825,29.797,15.825,29.797c1.311,1.801,0.982,5.521,0.982,5.521
	c-0.082,7.039-4.993,14.846-4.993,14.846c-4.585,6.057-6.549,14.19-6.549,14.19c-0.573,2.619,0,7.793,0,7.793
	c1.063,10.561-0.082,19.642-0.082,19.642c-0.737,5.157,1.555,6.248,1.555,6.248c2.292,0.817,6.058-0.296,6.058-0.296
	c4.83-1.392,5.73-9.677,5.73-9.677c0.246-3.355,0.573-10.069,0.573-10.069c0.164-4.747,5.157-4.812,5.157-4.812
	c4.094-0.245,6.14,3.215,6.14,3.215c2.702,5.075,3.028,12.577,3.028,12.577c0.164,9.823-2.455,16.716-2.455,16.716
	c-3.438,9.25-3.111,11.359-3.111,11.359c0.41,7.122,8.35,6.286,8.35,6.286c6.549,0,8.691-6.386,8.691-6.386
	c1.193,3.976,7.256,3.932,7.256,3.932c6.362-0.199,7.952-6.053,7.952-6.053c3.777,1.093,6.759-1.949,6.759-1.949
	c4.175-3.876,4.473-12.64,4.473-12.64c1.392,0.099,3.479-1.422,3.479-1.422c3.479-2.982,3.976-12.038,3.976-12.038
	c1.292-6.46,0-18.047,0-18.047c-0.497-4.473-7.455-21.267-7.455-21.267c-3.479-8.25-8.15-22.572-8.15-22.572
	c-1.491-6.56-3.876-16.945-3.876-16.945c-4.474-20.179-12.624-47.545-12.624-47.545c-4.87-14.909-16.698-39.537-16.698-39.537
	c-9.344-16.302-22.663-30.447-22.663-30.447c-23.756-23.557-41.946-29.678-41.946-29.678c-14.015-5.665-30.216-10.519-30.216-10.519
	c-6.063-2.485-6.262-7.444-6.262-7.444l0.099-5.513c-0.198-2.385,0.1-3.908,0.1-3.908c5.765-5.864,13.618-17.39,13.618-17.39
	c4.97-9.442,7.753-19.468,7.753-19.468c2.782,0.994,6.161,0.445,6.161,0.445c4.274-0.298,6.859-6.147,6.859-6.147
	c1.69-4.672,3.807-16.486,3.807-16.486c1.742-6.274,3.138-15.126,3.138-15.126c1.008-6.745-2.44-11.611-2.44-11.611
	c-2.813-5.282-8.016-5.32-8.016-5.32c3.833-16.38,0-31.293,0-31.293c-3.486-19.866-19.797-37.99-19.797-37.99
	C39.574-355.094,0-353.883,0-353.883s-39.575-1.211-62.008,28.065C-62.008-325.818-78.318-307.694-81.803-287.828z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-80.167-282.242c0,0-3.74,14.612,0,30.594
	c0,0-5.075,0.049-7.821,5.202c0,0-3.363,4.767-2.38,11.347c0,0,1.36,8.661,3.06,14.782c0,0,2.066,11.557,3.714,16.115
	c0,0,2.521,5.722,6.692,6.013c0,0,3.297,0.547,6.012-0.423c0,0,2.715,9.82,7.564,19.032c0,0,7.661,11.287,13.285,17.009
	c0,0,0.291,1.491,0.097,3.819l0.097,5.387c0,0-0.194,4.857-6.109,7.282c0,0-15.807,4.802-29.48,10.329
	c0,0-17.746,6.08-40.923,29.063c0,0-12.994,13.884-22.109,29.787c0,0-11.54,24.118-16.292,38.664c0,0-7.952,26.801-12.316,46.486
	c0,0-2.327,10.169-3.781,16.569c0,0-4.558,14.022-7.952,22.072c0,0-6.788,16.431-7.273,20.795c0,0-1.261,11.342,0,17.645
	c0,0,0.485,8.863,3.879,11.772c0,0,2.036,1.49,3.394,1.393c0,0,0.291,8.581,4.364,12.363c0,0,2.909,2.982,6.594,1.917
	c0,0,1.551,5.735,7.758,5.929c0,0,5.915,0.063,7.079-3.815c0,0,2.089,6.257,8.479,6.257c0,0,7.746,0.845,8.146-6.104
	c0,0,0.319-2.029-3.035-11.054c0,0-2.556-6.688-2.396-16.271c0,0,0.319-7.288,2.955-12.24c0,0,1.997-3.358,5.99-3.119
	c0,0,4.872,0.08,5.031,4.712c0,0,0.32,6.575,0.559,9.849c0,0,0.879,8.111,5.591,9.469c0,0,3.674,1.101,5.91,0.303
	c0,0,2.236-1.049,1.517-6.081c0,0-1.118-8.813-0.08-19.115c0,0,0.559-5.029,0-7.585c0,0-1.916-7.896-6.389-13.806
	c0,0-4.792-7.576-4.872-14.444c0,0-0.319-3.616,0.959-5.373c0,0,10.432-17.288,15.439-28.982c0,0,5.405-11.563,6.843-17.633
	c0,0,2.156-10.692,2.316-15.005c0,0,6.15-6.412,8.705-8.649c0,0,6.789-4.785,11.102-9.976c0,0,5.989-6.794,6.868-11.905
	c0,0,1.837,13.616,1.996,32.224c0,0,1.358,23.657-0.718,44.422c0,0-5.511,42.762-9.265,59.454c0,0-9.503,45.197-10.622,63.007
	c0,0-1.677,24.124-1.118,43.052c0,0,0.16,5.04,1.358,15.183c0,0,5.591,26.84,12.539,48.883c0,0,9.424,27.396,11.74,34.024
	c0,0,3.753,10.604,3.035,19.39c0,0-1.837,12.646-1.837,16.559c0,0-0.959,16.154,1.597,23.103c0,0,2.934,7.667,8.364,8.226
	c0,0,3.855,0.16,4.734-1.597c0,0,1.865,2.635,5.699,2.635c0,0,4.981-0.639,5.78-2.875c0,0,1.063,1.757,5.537,1.837
	c0,0,5.707,0.24,6.825-3.434c0,0,0.819,2.075,4.413,1.757c0,0,5.225-1.038,6.663-3.435c0,0,2.746,2.716,6.5,2.316
	c0,0,7.238-0.4,7.876-5.591c0,0,1.079-3.354-1.557-8.307c0,0-6.592-12.938-10.506-20.604c0,0-8.379-13.257-8.858-15.174
	c0,0-1.567-1.677-1.407-6.629c0,0,2.892-23.879,2.333-34.501c0,0-0.596-11.501-2.832-24.359c0,0-2.537-13.098-4.294-19.088
	c0,0-1.54-5.67-0.422-11.819c0,0,1.205-8.306,4.001-16.771c0,0,5.253-12.22,7.49-26.596c0,0,5.141-19.526,2.665-29.189
	c0,0,5.579,2.236,13.127,3.633c0,0,6.212,1.198,12.481,0.959c6.27,0.239,12.479-0.959,12.479-0.959
	c7.548-1.396,13.126-3.633,13.126-3.633c-2.476,9.663,2.67,29.189,2.67,29.189c2.236,14.376,7.493,26.596,7.493,26.596
	c2.795,8.466,4.001,16.771,4.001,16.771c1.118,6.149-0.418,11.819-0.418,11.819c-1.757,5.99-4.29,19.088-4.29,19.088
	c-2.236,12.858-2.826,24.359-2.826,24.359c-0.559,10.622,2.341,34.501,2.341,34.501c0.16,4.952-1.403,6.629-1.403,6.629
	c-0.479,1.917-8.852,15.174-8.852,15.174c-3.913,7.667-10.496,20.604-10.496,20.604c-2.636,4.952-1.553,8.307-1.553,8.307
	c0.639,5.19,7.882,5.591,7.882,5.591c3.754,0.399,6.506-2.316,6.506-2.316c1.438,2.396,6.67,3.435,6.67,3.435
	c3.594,0.318,4.418-1.757,4.418-1.757c1.118,3.674,6.831,3.434,6.831,3.434c4.474-0.08,5.542-1.837,5.542-1.837
	c0.799,2.236,5.788,2.875,5.788,2.875c3.833,0,5.708-2.635,5.708-2.635c0.878,1.757,4.742,1.597,4.742,1.597
	c5.43-0.559,8.371-8.226,8.371-8.226c2.555-6.948,1.597-23.09,1.597-23.09c0-3.913-1.837-16.549-1.837-16.549
	c-0.719-8.785,3.035-19.379,3.035-19.379c2.316-6.628,11.74-34.009,11.74-34.009c6.948-22.043,12.539-48.864,12.539-48.864
	c1.198-10.143,1.357-15.176,1.357-15.176c0.56-18.928-1.118-43.032-1.118-43.032c-1.118-17.81-10.622-62.988-10.622-62.988
	c-3.753-16.691-9.265-59.435-9.265-59.435C80.022-5.856,81.379-29.5,81.379-29.5c0.16-18.609,1.997-32.214,1.997-32.214
	c0.879,5.112,6.868,11.909,6.868,11.909c4.312,5.191,11.102,9.982,11.102,9.982c2.556,2.236,8.705,8.652,8.705,8.652
	c0.16,4.313,2.316,15.009,2.316,15.009c1.437,6.07,6.843,17.639,6.843,17.639c5.007,11.694,15.439,28.99,15.439,28.99
	c1.277,1.757,0.958,5.373,0.958,5.373c-0.079,6.867-4.871,14.445-4.871,14.445c-4.474,5.91-6.39,13.809-6.39,13.809
	c-0.56,2.555,0,7.585,0,7.585c1.038,10.303-0.08,19.115-0.08,19.115c-0.719,5.031,1.518,6.08,1.518,6.08
	c2.235,0.799,5.91-0.302,5.91-0.302c4.712-1.357,5.591-9.467,5.591-9.467c0.239-3.275,0.559-9.847,0.559-9.847
	c0.159-4.633,5.031-4.713,5.031-4.713c3.993-0.239,5.99,3.12,5.99,3.12c2.635,4.951,2.955,12.239,2.955,12.239
	c0.159,9.583-2.396,16.269-2.396,16.269c-3.354,9.024-3.035,11.054-3.035,11.054c0.399,6.949,8.146,6.105,8.146,6.105
	c6.389,0,8.479-6.257,8.479-6.257c1.164,3.879,7.079,3.815,7.079,3.815c6.207-0.193,7.758-5.93,7.758-5.93
	c3.686,1.067,6.595-1.917,6.595-1.917c4.072-3.781,4.363-12.364,4.363-12.364c1.358,0.097,3.395-1.396,3.395-1.396
	c3.394-2.909,3.879-11.773,3.879-11.773c1.261-6.304,0-17.649,0-17.649c-0.485-4.364-7.273-20.801-7.273-20.801
	c-3.394-8.049-7.951-22.079-7.951-22.079c-1.454-6.4-3.782-16.573-3.782-16.573c-4.363-19.686-12.315-46.502-12.315-46.502
	c-4.752-14.546-16.292-38.677-16.292-38.677c-9.115-15.903-22.108-29.793-22.108-29.793c-23.178-22.983-40.924-29.079-40.924-29.079
	c-13.673-5.528-29.479-10.341-29.479-10.341c-5.915-2.424-6.109-7.286-6.109-7.286l0.098-5.391
	c-0.194-2.327,0.097-3.821,0.097-3.821c5.624-5.721,13.285-17.019,13.285-17.019c4.849-9.213,7.563-19.044,7.563-19.044
	c2.715,0.969,6.013,0.42,6.013,0.42c4.17-0.291,6.69-6.021,6.69-6.021c1.649-4.558,3.715-16.124,3.715-16.124
	c1.7-6.121,3.061-14.796,3.061-14.796c0.982-6.58-2.38-11.358-2.38-11.358c-2.746-5.153-7.821-5.215-7.821-5.215
	c3.74-15.981,0-30.605,0-30.605c-3.4-19.382-19.451-37.063-19.451-37.063C38.831-347.868,0-346.686,0-346.686
	s-38.832-1.182-60.718,27.381C-60.718-319.305-76.767-301.624-80.167-282.242z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-78.531-276.657c0,0-3.647,14.321,0,29.903
	c0,0-4.948,0.07-7.625,5.096c0,0-3.28,4.675-2.321,11.091c0,0,1.326,8.481,2.984,14.448c0,0,2.014,11.308,3.621,15.752
	c0,0,2.458,5.601,6.524,5.885c0,0,3.215,0.548,5.862-0.397c0,0,2.647,9.622,7.375,18.604c0,0,7.469,11.058,12.953,16.636
	c0,0,0.284,1.463,0.095,3.732l0.094,5.265c0,0-0.189,4.759-5.957,7.123c0,0-15.411,4.759-28.742,10.148c0,0-17.303,6.052-39.9,28.46
	c0,0-12.669,13.628-21.557,29.134c0,0-11.251,23.617-15.884,37.8c0,0-7.753,26.248-12.008,45.441c0,0-2.269,9.956-3.687,16.196
	c0,0-4.444,13.729-7.753,21.575c0,0-6.619,16.074-7.091,20.329c0,0-1.229,11.102,0,17.247c0,0,0.472,8.671,3.782,11.508
	c0,0,1.985,1.462,3.309,1.366c0,0,0.283,8.399,4.254,12.086c0,0,2.837,2.927,6.43,1.887c0,0,1.513,5.615,7.564,5.805
	c0,0,5.767,0.083,6.902-3.699c0,0,2.037,6.128,8.267,6.128c0,0,7.553,0.852,7.942-5.924c0,0,0.312-1.95-2.959-10.75
	c0,0-2.491-6.479-2.336-15.823c0,0,0.312-7.075,2.881-11.902c0,0,1.947-3.259,5.84-3.024c0,0,4.75,0.096,4.906,4.612
	c0,0,0.312,6.434,0.545,9.627c0,0,0.857,7.935,5.451,9.259c0,0,3.582,1.087,5.762,0.309c0,0,2.181-1.008,1.48-5.912
	c0,0-1.09-8.546-0.078-18.591c0,0,0.545-4.885,0-7.377c0,0-1.869-7.66-6.23-13.423c0,0-4.672-7.347-4.75-14.043
	c0,0-0.311-3.513,0.935-5.226c0,0,10.171-16.772,15.053-28.175c0,0,5.27-11.227,6.672-17.145c0,0,2.102-10.387,2.258-14.592
	c0,0,5.996-6.223,8.488-8.402c0,0,6.619-4.628,10.823-9.69c0,0,5.841-6.589,6.697-11.571c0,0,1.791,13.355,1.947,31.499
	c0,0,1.324,23.177-0.701,43.422c0,0-5.373,41.846-9.033,58.12c0,0-9.266,44.228-10.356,61.593c0,0-1.635,23.629-1.09,42.084
	c0,0,0.155,4.951,1.323,14.841c0,0,5.451,26.295,12.226,47.787c0,0,9.188,26.802,11.446,33.266c0,0,3.66,10.388,2.959,18.953
	c0,0-1.791,12.372-1.791,16.188c0,0-0.934,15.808,1.558,22.582c0,0,2.873,7.476,8.168,8.021c0,0,3.763,0.155,4.62-1.558
	c0,0,1.825,2.57,5.563,2.57c0,0,4.863-0.623,5.642-2.804c0,0,1.044,1.714,5.404,1.791c0,0,5.573,0.233,6.663-3.349
	c0,0,0.804,2.025,4.308,1.713c0,0,5.102-1.012,6.504-3.348c0,0,2.684,2.647,6.344,2.258c0,0,7.068-0.389,7.691-5.45
	c0,0,1.06-3.271-1.509-8.099c0,0-6.402-12.614-10.217-20.09c0,0-8.151-12.927-8.618-14.795c0,0-1.52-1.636-1.365-6.464
	c0,0,2.86-23.281,2.315-33.639c0,0-0.554-11.212-2.734-23.749c0,0-2.451-12.771-4.164-18.61c0,0-1.489-5.528-0.399-11.524
	c0,0,1.195-8.098,3.92-16.353c0,0,5.155-11.913,7.335-25.93c0,0,5.046-19.039,2.633-28.461c0,0,5.455,2.18,12.813,3.543
	c0,0,6.072,1.168,12.185,0.935c6.112,0.233,12.181-0.935,12.181-0.935c7.357-1.363,12.812-3.543,12.812-3.543
	c-2.413,9.422,2.639,28.461,2.639,28.461c2.181,14.017,7.339,25.93,7.339,25.93c2.725,8.255,3.92,16.353,3.92,16.353
	c1.09,5.996-0.393,11.524-0.393,11.524c-1.715,5.84-4.16,18.61-4.16,18.61c-2.181,12.537-2.727,23.749-2.727,23.749
	c-0.545,10.357,2.324,33.639,2.324,33.639c0.156,4.828-1.361,6.464-1.361,6.464c-0.468,1.868-8.608,14.795-8.608,14.795
	c-3.816,7.476-10.205,20.09-10.205,20.09c-2.57,4.828-1.505,8.099-1.505,8.099c0.623,5.062,7.697,5.45,7.697,5.45
	c3.66,0.39,6.352-2.258,6.352-2.258c1.402,2.336,6.512,3.348,6.512,3.348c3.504,0.312,4.314-1.713,4.314-1.713
	c1.09,3.582,6.671,3.349,6.671,3.349c4.359-0.077,5.409-1.791,5.409-1.791c0.778,2.181,5.651,2.804,5.651,2.804
	c3.738,0,5.574-2.57,5.574-2.57c0.856,1.713,4.63,1.558,4.63,1.558c5.295-0.545,8.177-8.021,8.177-8.021
	c2.491-6.774,1.558-22.568,1.558-22.568c0-3.814-1.791-16.174-1.791-16.174c-0.701-8.565,2.959-18.942,2.959-18.942
	c2.258-6.463,11.445-33.245,11.445-33.245c6.775-21.492,12.227-47.766,12.227-47.766c1.168-9.89,1.323-14.834,1.323-14.834
	c0.546-18.454-1.091-42.06-1.091-42.06c-1.09-17.365-10.355-61.57-10.355-61.57c-3.66-16.273-9.033-58.095-9.033-58.095
	c-2.023-20.246-0.701-43.407-0.701-43.407c0.156-18.144,1.947-31.486,1.947-31.486c0.857,4.983,6.697,11.576,6.697,11.576
	c4.205,5.062,10.823,9.696,10.823,9.696c2.491,2.181,8.487,8.406,8.487,8.406c0.156,4.205,2.258,14.597,2.258,14.597
	c1.402,5.918,6.673,17.151,6.673,17.151c4.882,11.402,15.053,28.184,15.053,28.184c1.246,1.713,0.935,5.225,0.935,5.225
	c-0.078,6.697-4.75,14.048-4.75,14.048c-4.36,5.762-6.229,13.425-6.229,13.425c-0.545,2.492,0,7.377,0,7.377
	c1.013,10.045-0.078,18.59-0.078,18.59c-0.7,4.906,1.479,5.913,1.479,5.913c2.181,0.778,5.763-0.309,5.763-0.309
	c4.594-1.323,5.451-9.259,5.451-9.259c0.233-3.191,0.545-9.623,0.545-9.623c0.155-4.517,4.905-4.612,4.905-4.612
	c3.894-0.234,5.841,3.024,5.841,3.024c2.568,4.828,2.881,11.902,2.881,11.902c0.155,9.344-2.336,15.82-2.336,15.82
	c-3.271,8.799-2.959,10.749-2.959,10.749c0.389,6.774,7.941,5.925,7.941,5.925c6.23,0,8.268-6.127,8.268-6.127
	c1.135,3.781,6.902,3.698,6.902,3.698c6.052-0.188,7.563-5.805,7.563-5.805c3.593,1.04,6.43-1.887,6.43-1.887
	c3.971-3.688,4.254-12.088,4.254-12.088c1.324,0.095,3.311-1.368,3.311-1.368c3.309-2.837,3.781-11.512,3.781-11.512
	c1.229-6.146,0-17.251,0-17.251c-0.473-4.256-7.092-20.336-7.092-20.336c-3.309-7.848-7.753-21.586-7.753-21.586
	c-1.418-6.239-3.687-16.2-3.687-16.2C168.762-11.533,161.009-37.8,161.009-37.8c-4.634-14.182-15.885-37.814-15.885-37.814
	c-8.887-15.506-21.557-29.142-21.557-29.142c-22.597-22.407-39.9-28.479-39.9-28.479c-13.331-5.39-28.742-10.161-28.742-10.161
	c-5.768-2.364-5.957-7.129-5.957-7.129l0.096-5.269c-0.189-2.27,0.094-3.735,0.094-3.735c5.484-5.578,12.953-16.648,12.953-16.648
	c4.728-8.981,7.375-18.62,7.375-18.62c2.648,0.945,5.862,0.396,5.862,0.396c4.065-0.284,6.523-5.896,6.523-5.896
	c1.607-4.442,3.621-15.762,3.621-15.762c1.658-5.968,2.984-14.465,2.984-14.465c0.959-6.416-2.321-11.104-2.321-11.104
	c-2.677-5.025-7.625-5.111-7.625-5.111c3.646-15.581,0-29.917,0-29.917c-3.315-18.897-19.105-36.137-19.105-36.137
	C38.087-340.642,0-339.49,0-339.49s-38.089-1.152-59.427,26.696C-59.427-312.793-75.216-295.554-78.531-276.657z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-76.895-271.072c0,0-3.553,14.031,0,29.213
	c0,0-4.821,0.093-7.43,4.989c0,0-3.195,4.584-2.261,10.835c0,0,1.292,8.301,2.907,14.115c0,0,1.963,11.059,3.529,15.388
	c0,0,2.395,5.48,6.356,5.757c0,0,3.133,0.548,5.712-0.373c0,0,2.58,9.427,7.186,18.179c0,0,7.278,10.827,12.621,16.262
	c0,0,0.276,1.434,0.092,3.645l0.092,5.142c0,0-0.184,4.662-5.804,6.965c0,0-15.016,4.716-28.006,9.967
	c0,0-16.858,6.024-38.876,27.858c0,0-12.345,13.372-21.004,28.48c0,0-10.963,23.117-15.477,36.935c0,0-7.555,25.696-11.7,44.397
	c0,0-2.211,9.742-3.593,15.821c0,0-4.33,13.436-7.554,21.082c0,0-6.449,15.717-6.909,19.862c0,0-1.198,10.861,0,16.849
	c0,0,0.46,8.48,3.685,11.243c0,0,1.934,1.433,3.224,1.34c0,0,0.276,8.217,4.145,11.81c0,0,2.764,2.868,6.265,1.854
	c0,0,1.474,5.497,7.37,5.683c0,0,5.619,0.101,6.725-3.584c0,0,1.985,5.999,8.055,5.999c0,0,7.36,0.857,7.739-5.742
	c0,0,0.303-1.872-2.883-10.446c0,0-2.428-6.271-2.276-15.375c0,0,0.303-6.861,2.807-11.565c0,0,1.897-3.157,5.69-2.93
	c0,0,4.628,0.111,4.78,4.513c0,0,0.304,6.293,0.531,9.403c0,0,0.835,7.761,5.311,9.051c0,0,3.49,1.073,5.615,0.315
	c0,0,2.124-0.966,1.441-5.746c0,0-1.062-8.276-0.076-18.063c0,0,0.531-4.741,0-7.169c0,0-1.821-7.426-6.069-13.039
	c0,0-4.553-7.119-4.629-13.645c0,0-0.303-3.409,0.911-5.078c0,0,9.911-16.257,14.667-27.366c0,0,5.135-10.889,6.501-16.656
	c0,0,2.049-10.082,2.2-14.179c0,0,5.842-6.03,8.27-8.154c0,0,6.449-4.471,10.546-9.403c0,0,5.691-6.385,6.525-11.241
	c0,0,1.745,13.097,1.897,30.775c0,0,1.29,22.697-0.683,42.422c0,0-5.235,40.928-8.801,56.785c0,0-9.028,43.259-10.091,60.178
	c0,0-1.593,23.135-1.062,41.117c0,0,0.152,4.863,1.29,14.499c0,0,5.311,25.751,11.912,46.692c0,0,8.953,26.208,11.153,32.506
	c0,0,3.566,10.172,2.883,18.518c0,0-1.745,12.099-1.745,15.816c0,0-0.911,15.463,1.517,22.063c0,0,2.813,7.283,7.973,7.814
	c0,0,3.671,0.151,4.506-1.518c0,0,1.785,2.505,5.427,2.505c0,0,4.746-0.607,5.504-2.732c0,0,1.023,1.669,5.272,1.745
	c0,0,5.438,0.228,6.5-3.262c0,0,0.788,1.972,4.203,1.669c0,0,4.979-0.986,6.344-3.263c0,0,2.623,2.579,6.189,2.2
	c0,0,6.899-0.38,7.506-5.311c0,0,1.042-3.188-1.462-7.892c0,0-6.21-12.291-9.928-19.575c0,0-7.922-12.594-8.377-14.414
	c0,0-1.474-1.594-1.322-6.298c0,0,2.827-22.686,2.296-32.776c0,0-0.512-10.925-2.636-23.142c0,0-2.365-12.442-4.034-18.133
	c0,0-1.438-5.387-0.376-11.229c0,0,1.184-7.891,3.84-15.934c0,0,5.055-11.607,7.179-25.265c0,0,4.952-18.55,2.6-27.731
	c0,0,5.331,2.125,12.501,3.452c0,0,5.93,1.139,11.887,0.911c5.956,0.228,11.882-0.911,11.882-0.911
	c7.17-1.327,12.5-3.452,12.5-3.452c-2.353,9.182,2.605,27.731,2.605,27.731c2.124,13.657,7.184,25.265,7.184,25.265
	c2.656,8.043,3.841,15.934,3.841,15.934c1.062,5.842-0.37,11.229-0.37,11.229c-1.669,5.69-4.029,18.133-4.029,18.133
	c-2.124,12.217-2.627,23.142-2.627,23.142c-0.53,10.091,2.309,32.776,2.309,32.776c0.151,4.704-1.319,6.298-1.319,6.298
	c-0.455,1.82-8.366,14.414-8.366,14.414c-3.718,7.284-9.915,19.575-9.915,19.575c-2.503,4.704-1.455,7.892-1.455,7.892
	c0.607,4.931,7.514,5.311,7.514,5.311c3.565,0.379,6.196-2.2,6.196-2.2c1.366,2.276,6.354,3.263,6.354,3.263
	c3.415,0.303,4.21-1.669,4.21-1.669c1.062,3.489,6.509,3.262,6.509,3.262c4.249-0.076,5.278-1.745,5.278-1.745
	c0.758,2.125,5.515,2.732,5.515,2.732c3.643,0,5.44-2.505,5.44-2.505c0.834,1.669,4.518,1.518,4.518,1.518
	c5.159-0.531,7.982-7.814,7.982-7.814c2.428-6.601,1.518-22.047,1.518-22.047c0-3.718-1.745-15.8-1.745-15.8
	c-0.683-8.346,2.884-18.505,2.884-18.505c2.199-6.298,11.152-32.484,11.152-32.484c6.602-20.939,11.912-46.666,11.912-46.666
	c1.138-9.635,1.289-14.489,1.289-14.489c0.531-17.981-1.062-41.09-1.062-41.09c-1.062-16.919-10.092-60.15-10.092-60.15
	c-3.565-15.857-8.801-56.757-8.801-56.757c-1.972-19.726-0.683-42.405-0.683-42.405c0.151-17.678,1.896-30.759,1.896-30.759
	c0.835,4.855,6.525,11.245,6.525,11.245C90.564-41.478,97.014-37,97.014-37c2.428,2.124,8.271,8.16,8.271,8.16
	c0.151,4.097,2.199,14.185,2.199,14.185c1.366,5.766,6.502,16.663,6.502,16.663c4.756,11.11,14.667,27.376,14.667,27.376
	c1.213,1.67,0.91,5.078,0.91,5.078c-0.076,6.525-4.628,13.647-4.628,13.647c-4.249,5.615-6.07,13.042-6.07,13.042
	c-0.53,2.428,0,7.17,0,7.17c0.986,9.787-0.075,18.064-0.075,18.064c-0.684,4.779,1.441,5.745,1.441,5.745
	c2.124,0.758,5.614-0.315,5.614-0.315c4.477-1.29,5.311-9.049,5.311-9.049c0.229-3.111,0.531-9.401,0.531-9.401
	c0.152-4.399,4.78-4.513,4.78-4.513c3.794-0.228,5.69,2.931,5.69,2.931c2.504,4.704,2.808,11.564,2.808,11.564
	c0.151,9.104-2.276,15.372-2.276,15.372c-3.187,8.573-2.883,10.444-2.883,10.444c0.379,6.601,7.738,5.744,7.738,5.744
	c6.069,0,8.056-5.998,8.056-5.998c1.105,3.686,6.726,3.583,6.726,3.583c5.896-0.184,7.369-5.682,7.369-5.682
	c3.5,1.013,6.265-1.856,6.265-1.856c3.869-3.592,4.146-11.811,4.146-11.811c1.289,0.092,3.225-1.342,3.225-1.342
	c3.224-2.765,3.685-11.248,3.685-11.248c1.198-5.988,0-16.854,0-16.854c-0.461-4.146-6.909-19.87-6.909-19.87
	c-3.225-7.646-7.555-21.092-7.555-21.092c-1.381-6.08-3.592-15.828-3.592-15.828c-4.146-18.7-11.7-44.417-11.7-44.417
	C152.744-51.326,141.78-74.46,141.78-74.46c-8.659-15.108-21.004-28.489-21.004-28.489c-22.018-21.833-38.877-27.881-38.877-27.881
	c-12.988-5.251-28.006-9.982-28.006-9.982c-5.619-2.303-5.804-6.971-5.804-6.971l0.093-5.148c-0.185-2.211,0.092-3.647,0.092-3.647
	c5.344-5.436,12.621-16.278,12.621-16.278c4.606-8.752,7.186-18.196,7.186-18.196c2.58,0.921,5.712,0.37,5.712,0.37
	c3.961-0.276,6.356-5.768,6.356-5.768c1.566-4.329,3.528-15.401,3.528-15.401c1.615-5.814,2.907-14.134,2.907-14.134
	c0.935-6.251-2.262-10.851-2.262-10.851c-2.607-4.895-7.429-5.006-7.429-5.006c3.553-15.182,0-29.229,0-29.229
	c-3.23-18.413-18.76-35.21-18.76-35.21C37.344-333.416,0-332.293,0-332.293s-37.346-1.122-58.137,26.012
	C-58.137-306.282-73.665-289.484-76.895-271.072z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-75.258-265.485c0,0-3.46,13.74,0,28.522
	c0,0-4.694,0.115-7.234,4.882c0,0-3.111,4.493-2.201,10.58c0,0,1.258,8.12,2.83,13.782c0,0,1.911,10.809,3.436,15.025
	c0,0,2.333,5.359,6.189,5.628c0,0,3.051,0.548,5.562-0.349c0,0,2.512,9.231,6.997,17.753c0,0,7.086,10.597,12.289,15.889
	c0,0,0.269,1.405,0.089,3.558l0.09,5.02c0,0-0.179,4.564-5.651,6.806c0,0-14.62,4.673-27.269,9.786c0,0-16.415,5.996-37.853,27.255
	c0,0-12.021,13.116-20.452,27.827c0,0-10.674,22.616-15.069,36.071c0,0-7.355,25.143-11.392,43.352c0,0-2.153,9.528-3.499,15.448
	c0,0-4.216,13.142-7.355,20.586c0,0-6.279,15.359-6.728,19.396c0,0-1.166,10.62,0,16.45c0,0,0.448,8.289,3.588,10.979
	c0,0,1.884,1.403,3.14,1.313c0,0,0.27,8.034,4.036,11.532c0,0,2.691,2.81,6.1,1.823c0,0,1.436,5.379,7.177,5.559
	c0,0,5.472,0.121,6.548-3.467c0,0,1.933,5.868,7.843,5.868c0,0,7.166,0.866,7.535-5.561c0,0,0.296-1.793-2.807-10.142
	c0,0-2.364-6.062-2.217-14.928c0,0,0.295-6.648,2.733-11.229c0,0,1.847-3.056,5.541-2.834c0,0,4.506,0.128,4.654,4.413
	c0,0,0.296,6.151,0.517,9.181c0,0,0.813,7.586,5.171,8.842c0,0,3.399,1.061,5.467,0.322c0,0,2.069-0.924,1.404-5.578
	c0,0-1.035-8.009-0.074-17.539c0,0,0.518-4.597,0-6.96c0,0-1.772-7.19-5.91-12.656c0,0-4.433-6.892-4.507-13.245
	c0,0-0.295-3.305,0.888-4.931c0,0,9.649-15.74,14.28-26.558c0,0,5-10.553,6.33-16.167c0,0,1.995-9.777,2.143-13.766
	c0,0,5.688-5.839,8.053-7.908c0,0,6.279-4.314,10.268-9.116c0,0,5.541-6.18,6.354-10.908c0,0,1.699,12.837,1.846,30.05
	c0,0,1.256,22.217-0.664,41.423c0,0-5.098,40.012-8.57,55.45c0,0-8.79,42.289-9.824,58.763c0,0-1.553,22.642-1.034,40.149
	c0,0,0.146,4.776,1.255,14.158c0,0,5.172,25.207,11.599,45.597c0,0,8.718,25.614,10.859,31.746c0,0,3.472,9.957,2.808,18.083
	c0,0-1.699,11.824-1.699,15.444c0,0-0.887,15.118,1.478,21.545c0,0,2.753,7.092,7.776,7.608c0,0,3.58,0.148,4.393-1.478
	c0,0,1.745,2.438,5.291,2.438c0,0,4.628-0.591,5.367-2.658c0,0,1.002,1.625,5.139,1.698c0,0,5.303,0.222,6.338-3.177
	c0,0,0.772,1.921,4.097,1.626c0,0,4.855-0.961,6.186-3.177c0,0,2.562,2.512,6.034,2.142c0,0,6.728-0.369,7.319-5.171
	c0,0,1.024-3.103-1.413-7.683c0,0-6.021-11.968-9.641-19.061c0,0-7.692-12.263-8.136-14.035c0,0-1.428-1.552-1.28-6.132
	c0,0,2.794-22.089,2.277-31.914c0,0-0.468-10.638-2.537-22.531c0,0-2.279-12.115-3.904-17.656c0,0-1.387-5.245-0.353-10.935
	c0,0,1.174-7.683,3.76-15.513c0,0,4.955-11.303,7.024-24.601c0,0,4.856-18.062,2.566-27.001c0,0,5.207,2.068,12.188,3.361
	c0,0,5.789,1.108,11.588,0.887c5.799,0.222,11.584-0.887,11.584-0.887c6.98-1.293,12.186-3.361,12.186-3.361
	c-2.29,8.938,2.574,27.001,2.574,27.001c2.069,13.298,7.029,24.601,7.029,24.601c2.586,7.83,3.76,15.513,3.76,15.513
	c1.035,5.689-0.345,10.935-0.345,10.935c-1.625,5.541-3.898,17.656-3.898,17.656c-2.069,11.894-2.528,22.531-2.528,22.531
	c-0.517,9.825,2.291,31.914,2.291,31.914c0.148,4.58-1.275,6.132-1.275,6.132c-0.444,1.772-8.124,14.035-8.124,14.035
	c-3.62,7.093-9.624,19.061-9.624,19.061c-2.438,4.58-1.407,7.683-1.407,7.683c0.591,4.802,7.329,5.171,7.329,5.171
	c3.472,0.37,6.042-2.142,6.042-2.142c1.33,2.216,6.197,3.177,6.197,3.177c3.324,0.295,4.104-1.626,4.104-1.626
	c1.034,3.398,6.349,3.177,6.349,3.177c4.137-0.073,5.146-1.698,5.146-1.698c0.739,2.067,5.38,2.658,5.38,2.658
	c3.546,0,5.305-2.438,5.305-2.438c0.813,1.626,4.406,1.478,4.406,1.478c5.024-0.517,7.788-7.608,7.788-7.608
	c2.364-6.427,1.478-21.525,1.478-21.525c0-3.62-1.699-15.427-1.699-15.427c-0.665-8.126,2.808-18.068,2.808-18.068
	c2.143-6.131,10.859-31.72,10.859-31.72c6.427-20.389,11.598-45.567,11.598-45.567c1.109-9.382,1.256-14.146,1.256-14.146
	c0.518-17.508-1.034-40.118-1.034-40.118c-1.033-16.474-9.824-58.733-9.824-58.733c-3.473-15.438-8.57-55.417-8.57-55.417
	c-1.921-19.207-0.665-41.403-0.665-41.403c0.148-17.213,1.847-30.032,1.847-30.032c0.813,4.728,6.354,10.913,6.354,10.913
	c3.99,4.802,10.269,9.125,10.269,9.125c2.364,2.068,8.053,7.914,8.053,7.914c0.147,3.989,2.143,13.772,2.143,13.772
	c1.329,5.614,6.33,16.176,6.33,16.176c4.631,10.817,14.281,26.568,14.281,26.568c1.182,1.625,0.886,4.932,0.886,4.932
	c-0.074,6.353-4.506,13.249-4.506,13.249c-4.137,5.466-5.91,12.657-5.91,12.657c-0.517,2.364,0,6.962,0,6.962
	c0.96,9.53-0.074,17.539-0.074,17.539c-0.665,4.654,1.404,5.577,1.404,5.577c2.068,0.738,5.466-0.321,5.466-0.321
	c4.359-1.256,5.172-8.841,5.172-8.841c0.222-3.027,0.518-9.177,0.518-9.177c0.147-4.285,4.653-4.414,4.653-4.414
	c3.694-0.221,5.54,2.836,5.54,2.836c2.438,4.58,2.734,11.228,2.734,11.228c0.147,8.864-2.216,14.924-2.216,14.924
	c-3.104,8.348-2.809,10.14-2.809,10.14c0.37,6.427,7.536,5.563,7.536,5.563c5.91,0,7.843-5.867,7.843-5.867
	c1.076,3.588,6.549,3.466,6.549,3.466c5.74-0.179,7.176-5.559,7.176-5.559c3.408,0.986,6.099-1.824,6.099-1.824
	c3.769-3.499,4.037-11.536,4.037-11.536c1.256,0.09,3.139-1.315,3.139-1.315c3.141-2.69,3.589-10.984,3.589-10.984
	c1.166-5.83,0-16.456,0-16.456c-0.448-4.037-6.728-19.405-6.728-19.405c-3.14-7.445-7.356-20.598-7.356-20.598
	c-1.345-5.92-3.497-15.455-3.497-15.455c-4.036-18.208-11.393-43.376-11.393-43.376c-4.395-13.455-15.069-36.092-15.069-36.092
	c-8.432-14.711-20.451-27.836-20.451-27.836c-21.438-21.259-37.854-27.283-37.854-27.283c-12.647-5.113-27.269-9.803-27.269-9.803
	c-5.473-2.242-5.651-6.813-5.651-6.813l0.089-5.026c-0.179-2.153,0.09-3.561,0.09-3.561c5.203-5.292,12.289-15.907,12.289-15.907
	c4.485-8.521,6.997-17.772,6.997-17.772c2.512,0.897,5.562,0.345,5.562,0.345c3.856-0.269,6.188-5.641,6.188-5.641
	c1.525-4.216,3.437-15.039,3.437-15.039c1.572-5.662,2.831-13.804,2.831-13.804c0.908-6.086-2.202-10.597-2.202-10.597
	c-2.54-4.767-7.234-4.902-7.234-4.902c3.46-14.782,0-28.541,0-28.541c-3.145-17.928-18.414-34.284-18.414-34.284
	C36.6-326.189,0-325.096,0-325.096s-36.602-1.093-56.846,25.327C-56.846-299.769-72.113-283.413-75.258-265.485z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-73.621-259.9c0,0-3.366,13.449,0,27.832
	c0,0-4.568,0.137-7.039,4.775c0,0-3.027,4.402-2.143,10.324c0,0,1.225,7.94,2.754,13.449c0,0,1.859,10.559,3.344,14.661
	c0,0,2.269,5.238,6.021,5.5c0,0,2.968,0.549,5.411-0.324c0,0,2.444,9.035,6.808,17.326c0,0,6.896,10.367,11.957,15.517
	c0,0,0.262,1.375,0.087,3.47l0.087,4.897c0,0-0.174,4.467-5.497,6.648c0,0-14.227,4.63-26.532,9.604c0,0-15.973,5.969-36.83,26.654
	c0,0-11.695,12.86-19.899,27.173c0,0-10.386,22.116-14.663,35.207c0,0-7.155,24.59-11.084,42.307c0,0-2.094,9.315-3.402,15.075
	c0,0-4.103,12.848-7.157,20.092c0,0-6.109,15.001-6.546,18.93c0,0-1.134,10.379,0,16.052c0,0,0.437,8.097,3.491,10.716
	c0,0,1.833,1.373,3.055,1.286c0,0,0.262,7.852,3.927,11.256c0,0,2.619,2.751,5.936,1.791c0,0,1.396,5.261,6.981,5.437
	c0,0,5.324,0.14,6.371-3.352c0,0,1.881,5.739,7.631,5.739c0,0,6.974,0.873,7.332-5.38c0,0,0.288-1.714-2.73-9.836
	c0,0-2.301-5.855-2.157-14.481c0,0,0.288-6.435,2.66-10.891c0,0,1.797-2.955,5.391-2.739c0,0,4.384,0.144,4.528,4.312
	c0,0,0.288,6.012,0.503,8.96c0,0,0.791,7.409,5.032,8.632c0,0,3.306,1.047,5.318,0.329c0,0,2.013-0.883,1.365-5.411
	c0,0-1.006-7.741-0.072-17.014c0,0,0.504-4.451,0-6.752c0,0-1.725-6.954-5.75-12.272c0,0-4.312-6.663-4.384-12.844
	c0,0-0.288-3.203,0.862-4.784c0,0,9.389-15.226,13.895-25.751c0,0,4.865-10.215,6.159-15.677c0,0,1.941-9.472,2.085-13.353
	c0,0,5.534-5.649,7.834-7.661c0,0,6.11-4.157,9.991-8.829c0,0,5.391-5.976,6.182-10.576c0,0,1.653,12.577,1.797,29.325
	c0,0,1.223,21.737-0.646,40.425c0,0-4.96,39.094-8.338,54.116c0,0-8.554,41.319-9.561,57.349c0,0-1.509,22.146-1.006,39.181
	c0,0,0.145,4.688,1.223,13.815c0,0,5.03,24.664,11.284,44.503c0,0,8.481,25.02,10.566,30.985c0,0,3.378,9.741,2.73,17.648
	c0,0-1.652,11.551-1.652,15.072c0,0-0.863,14.772,1.438,21.025c0,0,2.692,6.9,7.58,7.404c0,0,3.489,0.143,4.279-1.438
	c0,0,1.705,2.372,5.155,2.372c0,0,4.51-0.575,5.229-2.588c0,0,0.981,1.582,5.007,1.654c0,0,5.169,0.215,6.175-3.091
	c0,0,0.757,1.868,3.991,1.581c0,0,4.733-0.935,6.027-3.092c0,0,2.5,2.444,5.878,2.085c0,0,6.559-0.359,7.134-5.031
	c0,0,1.006-3.02-1.366-7.476c0,0-5.828-11.644-9.351-18.544c0,0-7.464-11.932-7.895-13.657c0,0-1.382-1.51-1.238-5.966
	c0,0,2.762-21.492,2.259-31.052c0,0-0.426-10.35-2.439-21.922c0,0-2.192-11.788-3.774-17.179c0,0-1.335-5.104-0.329-10.639
	c0,0,1.164-7.476,3.679-15.095c0,0,4.857-10.997,6.869-23.935c0,0,4.762-17.574,2.534-26.271c0,0,5.083,2.012,11.876,3.271
	c0,0,5.648,1.077,11.29,0.862c5.642,0.215,11.286-0.862,11.286-0.862c6.792-1.259,11.873-3.271,11.873-3.271
	c-2.229,8.697,2.542,26.271,2.542,26.271c2.013,12.938,6.874,23.935,6.874,23.935c2.516,7.619,3.68,15.095,3.68,15.095
	c1.006,5.534-0.321,10.639-0.321,10.639c-1.581,5.391-3.768,17.179-3.768,17.179c-2.014,11.572-2.429,21.922-2.429,21.922
	c-0.503,9.56,2.274,31.052,2.274,31.052c0.144,4.456-1.234,5.966-1.234,5.966c-0.431,1.726-7.881,13.657-7.881,13.657
	c-3.521,6.9-9.333,18.544-9.333,18.544c-2.372,4.456-1.358,7.476-1.358,7.476c0.574,4.672,7.145,5.031,7.145,5.031
	c3.378,0.359,5.888-2.085,5.888-2.085c1.295,2.157,6.039,3.092,6.039,3.092c3.235,0.287,4-1.581,4-1.581
	c1.006,3.306,6.188,3.091,6.188,3.091c4.024-0.072,5.015-1.654,5.015-1.654c0.72,2.013,5.243,2.588,5.243,2.588
	c3.45,0,5.171-2.372,5.171-2.372c0.791,1.581,4.295,1.438,4.295,1.438c4.889-0.504,7.593-7.404,7.593-7.404
	c2.301-6.253,1.438-21.004,1.438-21.004c0-3.521-1.653-15.052-1.653-15.052c-0.646-7.907,2.731-17.631,2.731-17.631
	c2.085-5.967,10.565-30.957,10.565-30.957c6.255-19.838,11.285-44.469,11.285-44.469c1.079-9.129,1.223-13.804,1.223-13.804
	c0.503-17.035-1.007-39.146-1.007-39.146c-1.006-16.029-9.56-57.314-9.56-57.314c-3.378-15.023-8.338-54.079-8.338-54.079
	C73.49-2.576,74.712-24.29,74.712-24.29c0.145-16.748,1.797-29.305,1.797-29.305c0.791,4.6,6.183,10.582,6.183,10.582
	c3.881,4.672,9.991,8.838,9.991,8.838c2.3,2.013,7.835,7.668,7.835,7.668c0.143,3.882,2.084,13.36,2.084,13.36
	c1.294,5.462,6.159,15.688,6.159,15.688c4.506,10.525,13.895,25.763,13.895,25.763c1.15,1.581,0.863,4.784,0.863,4.784
	c-0.072,6.181-4.385,12.849-4.385,12.849c-4.025,5.319-5.75,12.276-5.75,12.276c-0.504,2.3,0,6.753,0,6.753
	c0.934,9.271-0.072,17.013-0.072,17.013c-0.647,4.529,1.365,5.41,1.365,5.41c2.013,0.718,5.319-0.328,5.319-0.328
	c4.24-1.222,5.031-8.631,5.031-8.631c0.216-2.947,0.503-8.955,0.503-8.955c0.144-4.169,4.529-4.313,4.529-4.313
	c3.593-0.216,5.39,2.741,5.39,2.741c2.372,4.456,2.66,10.889,2.66,10.889c0.144,8.625-2.156,14.477-2.156,14.477
	c-3.019,8.122-2.731,9.835-2.731,9.835c0.359,6.253,7.332,5.383,7.332,5.383c5.75,0,7.631-5.738,7.631-5.738
	c1.047,3.491,6.371,3.351,6.371,3.351c5.586-0.174,6.981-5.436,6.981-5.436c3.317,0.96,5.936-1.794,5.936-1.794
	c3.665-3.403,3.927-11.259,3.927-11.259c1.222,0.087,3.055-1.289,3.055-1.289c3.055-2.618,3.491-10.721,3.491-10.721
	c1.134-5.673,0-16.06,0-16.06c-0.437-3.928-6.546-18.938-6.546-18.938c-3.054-7.244-7.156-20.105-7.156-20.105
	c-1.31-5.76-3.404-15.083-3.404-15.083c-3.928-17.717-11.084-42.334-11.084-42.334c-4.276-13.091-14.662-35.23-14.662-35.23
	c-8.203-14.313-19.898-27.184-19.898-27.184c-20.859-20.684-36.831-26.684-36.831-26.684c-12.306-4.974-26.532-9.623-26.532-9.623
	c-5.323-2.182-5.498-6.656-5.498-6.656l0.087-4.904c-0.174-2.095,0.088-3.474,0.088-3.474c5.062-5.15,11.956-15.536,11.956-15.536
	c4.364-8.292,6.809-17.348,6.809-17.348c2.443,0.872,5.411,0.319,5.411,0.319c3.753-0.262,6.021-5.514,6.021-5.514
	c1.484-4.102,3.343-14.678,3.343-14.678c1.53-5.508,2.754-13.473,2.754-13.473c0.886-5.922-2.142-10.344-2.142-10.344
	c-2.471-4.638-7.039-4.797-7.039-4.797c3.366-14.383,0-27.853,0-27.853c-3.06-17.444-18.067-33.357-18.067-33.357
	C35.856-318.963,0-317.9,0-317.9s-35.858-1.063-55.556,24.643C-55.556-293.257-70.562-277.344-73.621-259.9z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-71.985-254.314c0,0-3.273,13.158,0,27.142
	c0,0-4.441,0.158-6.843,4.667c0,0-2.943,4.311-2.083,10.069c0,0,1.19,7.76,2.678,13.115c0,0,1.807,10.31,3.25,14.298
	c0,0,2.206,5.117,5.855,5.372c0,0,2.885,0.549,5.26-0.299c0,0,2.376,8.838,6.619,16.899c0,0,6.703,10.138,11.624,15.144
	c0,0,0.255,1.346,0.085,3.383l0.085,4.775c0,0-0.17,4.368-5.346,6.49c0,0-13.83,4.586-25.794,9.422c0,0-15.528,5.941-35.808,26.051
	c0,0-11.37,12.604-19.346,26.52c0,0-10.097,21.615-14.255,34.343c0,0-6.958,24.037-10.776,41.262c0,0-2.036,9.103-3.309,14.702
	c0,0-3.988,12.554-6.958,19.596c0,0-5.94,14.645-6.364,18.463c0,0-1.103,10.139,0,15.653c0,0,0.424,7.907,3.394,10.452
	c0,0,1.782,1.344,2.97,1.26c0,0,0.255,7.669,3.818,10.979c0,0,2.546,2.693,5.77,1.76c0,0,1.358,5.143,6.788,5.312
	c0,0,5.176,0.16,6.195-3.234c0,0,1.828,5.61,7.419,5.61c0,0,6.778,0.88,7.128-5.199c0,0,0.279-1.635-2.656-9.531
	c0,0-2.236-5.647-2.096-14.033c0,0,0.279-6.222,2.585-10.554c0,0,1.747-2.854,5.241-2.645c0,0,4.263,0.159,4.403,4.212
	c0,0,0.279,5.872,0.489,8.737c0,0,0.769,7.236,4.892,8.424c0,0,3.214,1.034,5.171,0.335c0,0,1.957-0.841,1.328-5.243
	c0,0-0.979-7.473-0.07-16.487c0,0,0.489-4.309,0-6.544c0,0-1.677-6.719-5.591-11.89c0,0-4.193-6.435-4.262-12.444
	c0,0-0.28-3.1,0.838-4.637c0,0,9.128-14.709,13.509-24.942c0,0,4.73-9.878,5.988-15.189c0,0,1.887-9.166,2.027-12.94
	c0,0,5.381-5.457,7.617-7.414c0,0,5.94-4,9.713-8.542c0,0,5.241-5.771,6.01-10.243c0,0,1.607,12.317,1.747,28.6
	c0,0,1.188,21.257-0.629,39.426c0,0-4.822,38.177-8.106,52.781c0,0-8.316,40.351-9.294,55.934c0,0-1.468,21.651-0.979,38.214
	c0,0,0.14,4.6,1.188,13.475c0,0,4.892,24.119,10.972,43.406c0,0,8.246,24.426,10.272,30.226c0,0,3.285,9.526,2.656,17.213
	c0,0-1.608,11.277-1.608,14.701c0,0-0.838,14.427,1.398,20.506c0,0,2.633,6.709,7.384,7.198c0,0,3.398,0.141,4.166-1.396
	c0,0,1.665,2.306,5.019,2.306c0,0,4.392-0.559,5.091-2.516c0,0,0.961,1.536,4.874,1.606c0,0,5.035,0.21,6.013-3.005
	c0,0,0.741,1.817,3.886,1.538c0,0,4.61-0.909,5.868-3.005c0,0,2.438,2.376,5.722,2.025c0,0,6.389-0.349,6.948-4.891
	c0,0,0.989-2.935-1.317-7.268c0,0-5.638-11.321-9.062-18.029c0,0-7.236-11.601-7.655-13.278c0,0-1.335-1.467-1.195-5.8
	c0,0,2.729-20.895,2.24-30.188c0,0-0.384-10.063-2.341-21.314c0,0-2.107-11.46-3.645-16.701c0,0-1.284-4.962-0.306-10.343
	c0,0,1.153-7.269,3.599-14.675c0,0,4.757-10.692,6.714-23.271c0,0,4.667-17.086,2.501-25.541c0,0,4.959,1.957,11.563,3.18
	c0,0,5.506,1.049,10.992,0.839c5.485,0.21,10.987-0.839,10.987-0.839c6.604-1.223,11.56-3.18,11.56-3.18
	c-2.166,8.455,2.511,25.541,2.511,25.541c1.956,12.579,6.719,23.271,6.719,23.271c2.446,7.406,3.601,14.675,3.601,14.675
	c0.978,5.381-0.297,10.343-0.297,10.343c-1.537,5.241-3.638,16.701-3.638,16.701c-1.957,11.251-2.328,21.314-2.328,21.314
	c-0.489,9.294,2.257,30.188,2.257,30.188c0.14,4.333-1.191,5.8-1.191,5.8c-0.42,1.678-7.639,13.278-7.639,13.278
	c-3.424,6.708-9.043,18.029-9.043,18.029c-2.306,4.333-1.31,7.268-1.31,7.268c0.56,4.542,6.96,4.891,6.96,4.891
	c3.284,0.351,5.733-2.025,5.733-2.025c1.258,2.096,5.882,3.005,5.882,3.005c3.146,0.279,3.896-1.538,3.896-1.538
	c0.979,3.215,6.025,3.005,6.025,3.005c3.914-0.07,4.883-1.606,4.883-1.606c0.699,1.957,5.107,2.516,5.107,2.516
	c3.355,0,5.037-2.306,5.037-2.306c0.769,1.537,4.183,1.396,4.183,1.396c4.752-0.489,7.398-7.198,7.398-7.198
	c2.237-6.079,1.397-20.481,1.397-20.481c0-3.424-1.606-14.678-1.606-14.678c-0.629-7.688,2.655-17.194,2.655-17.194
	c2.026-5.801,10.272-30.194,10.272-30.194c6.079-19.287,10.971-43.37,10.971-43.37c1.049-8.875,1.188-13.461,1.188-13.461
	c0.489-16.561-0.979-38.175-0.979-38.175c-0.979-15.583-9.294-55.895-9.294-55.895c-3.284-14.606-8.106-52.74-8.106-52.74
	c-1.817-18.17-0.629-39.401-0.629-39.401c0.14-16.283,1.747-28.578,1.747-28.578c0.769,4.472,6.01,10.25,6.01,10.25
	c3.774,4.542,9.714,8.553,9.714,8.553c2.236,1.957,7.617,7.422,7.617,7.422c0.14,3.774,2.025,12.947,2.025,12.947
	c1.259,5.311,5.988,15.201,5.988,15.201c4.381,10.234,13.509,24.956,13.509,24.956c1.118,1.537,0.84,4.637,0.84,4.637
	c-0.07,6.01-4.264,12.449-4.264,12.449c-3.913,5.171-5.59,11.894-5.59,11.894c-0.49,2.235,0,6.545,0,6.545
	c0.908,9.015-0.07,16.488-0.07,16.488c-0.629,4.402,1.327,5.241,1.327,5.241c1.957,0.698,5.172-0.334,5.172-0.334
	c4.123-1.188,4.892-8.422,4.892-8.422c0.21-2.866,0.49-8.731,0.49-8.731c0.139-4.054,4.401-4.214,4.401-4.214
	c3.494-0.211,5.241,2.646,5.241,2.646c2.306,4.333,2.586,10.552,2.586,10.552c0.14,8.385-2.097,14.028-2.097,14.028
	c-2.936,7.896-2.655,9.53-2.655,9.53c0.349,6.08,7.128,5.201,7.128,5.201c5.59,0,7.419-5.607,7.419-5.607
	c1.019,3.394,6.194,3.234,6.194,3.234c5.431-0.17,6.788-5.312,6.788-5.312c3.225,0.933,5.77-1.763,5.77-1.763
	c3.564-3.31,3.818-10.982,3.818-10.982c1.188,0.084,2.97-1.263,2.97-1.263c2.97-2.546,3.395-10.458,3.395-10.458
	c1.103-5.516,0-15.661,0-15.661c-0.425-3.819-6.364-18.474-6.364-18.474c-2.969-7.043-6.957-19.611-6.957-19.611
	c-1.273-5.6-3.311-14.71-3.311-14.71c-3.817-17.225-10.775-41.293-10.775-41.293c-4.157-12.728-14.255-34.369-14.255-34.369
	c-7.977-13.916-19.347-26.532-19.347-26.532c-20.278-20.11-35.807-26.084-35.807-26.084c-11.964-4.837-25.795-9.445-25.795-9.445
	c-5.176-2.121-5.346-6.498-5.346-6.498l0.085-4.783c-0.169-2.036,0.085-3.387,0.085-3.387c4.921-5.006,11.625-15.165,11.625-15.165
	c4.241-8.061,6.618-16.924,6.618-16.924c2.376,0.848,5.261,0.294,5.261,0.294c3.648-0.254,5.854-5.387,5.854-5.387
	c1.442-3.988,3.25-14.316,3.25-14.316c1.487-5.356,2.678-13.142,2.678-13.142c0.86-5.758-2.082-10.092-2.082-10.092
	c-2.403-4.509-6.845-4.692-6.845-4.692c3.273-13.983,0-27.165,0-27.165c-2.975-16.959-17.723-32.43-17.723-32.43
	C35.112-311.738,0-310.704,0-310.704s-35.115-1.034-54.265,23.959C-54.265-286.745-69.01-271.273-71.985-254.314z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-70.349-248.729c0,0-3.179,12.867,0,26.451
	c0,0-4.314,0.18-6.648,4.561c0,0-2.859,4.22-2.023,9.813c0,0,1.156,7.58,2.601,12.782c0,0,1.756,10.061,3.157,13.935
	c0,0,2.144,4.996,5.688,5.243c0,0,2.802,0.55,5.11-0.275c0,0,2.308,8.643,6.43,16.473c0,0,6.511,9.908,11.292,14.771
	c0,0,0.247,1.318,0.083,3.296l0.082,4.652c0,0-0.165,4.271-5.193,6.332c0,0-13.435,4.543-25.058,9.241
	c0,0-15.084,5.913-34.784,25.449c0,0-11.045,12.348-18.793,25.866c0,0-9.809,21.115-13.848,33.479c0,0-6.759,23.484-10.468,40.217
	c0,0-1.978,8.888-3.215,14.328c0,0-3.874,12.26-6.759,19.102c0,0-5.77,14.286-6.182,17.996c0,0-1.071,9.897,0,15.255
	c0,0,0.412,7.715,3.297,10.188c0,0,1.731,1.314,2.885,1.231c0,0,0.247,7.488,3.709,10.703c0,0,2.473,2.636,5.605,1.729
	c0,0,1.319,5.023,6.595,5.188c0,0,5.028,0.178,6.017-3.119c0,0,1.776,5.481,7.207,5.481c0,0,6.585,0.887,6.924-5.02
	c0,0,0.272-1.555-2.579-9.226c0,0-2.173-5.44-2.037-13.586c0,0,0.272-6.008,2.512-10.217c0,0,1.697-2.752,5.091-2.549
	c0,0,4.141,0.176,4.277,4.112c0,0,0.271,5.731,0.475,8.515c0,0,0.747,7.061,4.752,8.215c0,0,3.123,1.021,5.023,0.342
	c0,0,1.901-0.799,1.29-5.076c0,0-0.95-7.204-0.068-15.962c0,0,0.476-4.164,0-6.336c0,0-1.629-6.482-5.43-11.506
	c0,0-4.074-6.207-4.141-12.045c0,0-0.272-2.995,0.814-4.489c0,0,8.868-14.193,13.123-24.134c0,0,4.595-9.541,5.817-14.7
	c0,0,1.833-8.861,1.969-12.527c0,0,5.227-5.266,7.399-7.167c0,0,5.77-3.843,9.436-8.255c0,0,5.092-5.567,5.838-9.911
	c0,0,1.562,12.057,1.697,27.875c0,0,1.154,20.777-0.611,38.427c0,0-4.684,37.258-7.874,51.445c0,0-8.078,39.38-9.029,54.52
	c0,0-1.425,21.157-0.95,37.246c0,0,0.136,4.512,1.154,13.133c0,0,4.752,23.575,10.658,42.311c0,0,8.01,23.832,9.979,29.466
	c0,0,3.19,9.312,2.579,16.778c0,0-1.561,11.003-1.561,14.329c0,0-0.815,14.082,1.358,19.988c0,0,2.572,6.517,7.188,6.992
	c0,0,3.306,0.136,4.052-1.358c0,0,1.625,2.24,4.883,2.24c0,0,4.275-0.543,4.954-2.444c0,0,0.939,1.494,4.741,1.562
	c0,0,4.9,0.202,5.851-2.92c0,0,0.725,1.766,3.779,1.493c0,0,4.488-0.882,5.709-2.919c0,0,2.377,2.309,5.567,1.969
	c0,0,6.22-0.34,6.763-4.752c0,0,0.971-2.851-1.27-7.06c0,0-5.447-10.997-8.773-17.514c0,0-7.007-11.27-7.414-12.899
	c0,0-1.289-1.425-1.153-5.634c0,0,2.697-20.298,2.222-29.326c0,0-0.342-9.776-2.243-20.705c0,0-2.021-11.133-3.515-16.225
	c0,0-1.233-4.819-0.283-10.047c0,0,1.143-7.061,3.519-14.255c0,0,4.658-10.388,6.558-22.606c0,0,4.573-16.598,2.468-24.812
	c0,0,4.835,1.9,11.25,3.089c0,0,5.366,1.018,10.695,0.813c5.329,0.204,10.688-0.813,10.688-0.813
	c6.415-1.188,11.247-3.089,11.247-3.089c-2.104,8.214,2.479,24.812,2.479,24.812c1.9,12.219,6.564,22.606,6.564,22.606
	c2.376,7.194,3.52,14.255,3.52,14.255c0.951,5.228-0.272,10.047-0.272,10.047c-1.494,5.092-3.508,16.225-3.508,16.225
	c-1.9,10.929-2.228,20.705-2.228,20.705c-0.476,9.028,2.239,29.326,2.239,29.326c0.136,4.209-1.148,5.634-1.148,5.634
	c-0.407,1.63-7.396,12.899-7.396,12.899c-3.326,6.517-8.752,17.514-8.752,17.514c-2.24,4.209-1.261,7.06-1.261,7.06
	c0.543,4.412,6.775,4.752,6.775,4.752c3.19,0.34,5.579-1.969,5.579-1.969c1.223,2.037,5.725,2.919,5.725,2.919
	c3.055,0.272,3.791-1.493,3.791-1.493c0.95,3.122,5.865,2.92,5.865,2.92c3.801-0.068,4.751-1.562,4.751-1.562
	c0.679,1.901,4.971,2.444,4.971,2.444c3.258,0,4.902-2.24,4.902-2.24c0.747,1.494,4.07,1.358,4.07,1.358
	c4.617-0.476,7.204-6.992,7.204-6.992c2.172-5.906,1.358-19.961,1.358-19.961c0-3.327-1.562-14.305-1.562-14.305
	c-0.61-7.468,2.58-16.758,2.58-16.758c1.97-5.634,9.979-29.43,9.979-29.43c5.906-18.736,10.658-42.271,10.658-42.271
	c1.018-8.621,1.153-13.117,1.153-13.117c0.476-16.089-0.95-37.204-0.95-37.204c-0.95-15.139-9.028-54.478-9.028-54.478
	c-3.191-14.188-7.875-51.4-7.875-51.4c-1.766-17.65-0.611-38.399-0.611-38.399c0.136-15.817,1.698-27.851,1.698-27.851
	c0.746,4.345,5.838,9.919,5.838,9.919c3.665,4.412,9.436,8.267,9.436,8.267c2.172,1.9,7.399,7.175,7.399,7.175
	c0.136,3.666,1.969,12.535,1.969,12.535c1.223,5.159,5.817,14.714,5.817,14.714c4.255,9.941,13.123,24.149,13.123,24.149
	c1.086,1.493,0.813,4.489,0.813,4.489c-0.067,5.838-4.141,12.05-4.141,12.05c-3.801,5.023-5.431,11.51-5.431,11.51
	c-0.476,2.172,0,6.337,0,6.337c0.883,8.758-0.067,15.963-0.067,15.963c-0.611,4.277,1.289,5.074,1.289,5.074
	c1.901,0.678,5.024-0.34,5.024-0.34c4.005-1.154,4.752-8.214,4.752-8.214c0.202-2.783,0.475-8.51,0.475-8.51
	c0.136-3.937,4.277-4.113,4.277-4.113c3.394-0.203,5.091,2.552,5.091,2.552c2.24,4.208,2.512,10.214,2.512,10.214
	c0.136,8.146-2.037,13.58-2.037,13.58c-2.851,7.671-2.579,9.225-2.579,9.225c0.339,5.906,6.924,5.022,6.924,5.022
	c5.432,0,7.207-5.479,7.207-5.479c0.989,3.298,6.018,3.118,6.018,3.118c5.275-0.164,6.594-5.188,6.594-5.188
	c3.133,0.907,5.605-1.731,5.605-1.731c3.462-3.215,3.71-10.707,3.71-10.707c1.153,0.083,2.885-1.235,2.885-1.235
	c2.885-2.474,3.297-10.194,3.297-10.194c1.071-5.358,0-15.264,0-15.264c-0.412-3.709-6.182-18.009-6.182-18.009
	c-2.886-6.842-6.76-19.117-6.76-19.117c-1.236-5.44-3.215-14.338-3.215-14.338c-3.709-16.732-10.468-40.251-10.468-40.251
	c-4.039-12.364-13.848-33.507-13.848-33.507c-7.748-13.518-18.793-25.88-18.793-25.88c-19.7-19.535-34.785-25.485-34.785-25.485
	c-11.622-4.699-25.058-9.265-25.058-9.265c-5.027-2.061-5.192-6.341-5.192-6.341l0.082-4.661c-0.165-1.978,0.083-3.301,0.083-3.301
	c4.78-4.863,11.292-14.794,11.292-14.794c4.121-7.831,6.429-16.5,6.429-16.5c2.308,0.824,5.111,0.27,5.111,0.27
	c3.544-0.248,5.687-5.261,5.687-5.261c1.402-3.874,3.157-13.955,3.157-13.955c1.445-5.202,2.602-12.811,2.602-12.811
	c0.835-5.593-2.023-9.838-2.023-9.838c-2.333-4.38-6.647-4.588-6.647-4.588c3.18-13.584,0-26.477,0-26.477
	c-2.891-16.474-17.378-31.504-17.378-31.504C34.369-304.511,0-303.507,0-303.507s-34.372-1.004-52.974,23.274
	C-52.974-280.233-67.459-265.203-70.349-248.729z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-68.712-243.144c0,0-3.086,12.576,0,25.761
	c0,0-4.187,0.202-6.452,4.453c0,0-2.775,4.13-1.964,9.558c0,0,1.122,7.399,2.525,12.449c0,0,1.704,9.811,3.064,13.571
	c0,0,2.08,4.875,5.52,5.115c0,0,2.72,0.55,4.961-0.25c0,0,2.24,8.446,6.24,16.046c0,0,6.32,9.678,10.96,14.398
	c0,0,0.24,1.289,0.08,3.209l0.08,4.53c0,0-0.16,4.173-5.04,6.173c0,0-13.041,4.5-24.321,9.06c0,0-14.64,5.885-33.761,24.846
	c0,0-10.72,12.092-18.241,25.212c0,0-9.52,20.615-13.44,32.616c0,0-6.56,22.932-10.16,39.172c0,0-1.921,8.674-3.121,13.954
	c0,0-3.76,11.967-6.56,18.606c0,0-5.6,13.929-6,17.529c0,0-1.04,9.656,0,14.856c0,0,0.4,7.525,3.2,9.925c0,0,1.68,1.285,2.8,1.205
	c0,0,0.24,7.307,3.6,10.427c0,0,2.4,2.578,5.44,1.697c0,0,1.281,4.906,6.401,5.066c0,0,4.88,0.197,5.84-3.003
	c0,0,1.724,5.351,6.995,5.351c0,0,6.391,0.895,6.721-4.838c0,0,0.263-1.476-2.504-8.921c0,0-2.108-5.231-1.977-13.138
	c0,0,0.264-5.795,2.438-9.88c0,0,1.647-2.652,4.942-2.454c0,0,4.019,0.19,4.151,4.013c0,0,0.263,5.59,0.461,8.291
	c0,0,0.725,6.886,4.612,8.007c0,0,3.031,1.007,4.876,0.349c0,0,1.845-0.758,1.252-4.908c0,0-0.923-6.938-0.066-15.438
	c0,0,0.461-4.019,0-6.128c0,0-1.581-6.246-5.271-11.122c0,0-3.954-5.979-4.019-11.645c0,0-0.264-2.893,0.79-4.342
	c0,0,8.607-13.678,12.737-23.326c0,0,4.46-9.204,5.646-14.212c0,0,1.779-8.555,1.911-12.113c0,0,5.073-5.075,7.182-6.92
	c0,0,5.6-3.686,9.158-7.969c0,0,4.942-5.362,5.667-9.579c0,0,1.515,11.798,1.647,27.15c0,0,1.12,20.298-0.593,37.429
	c0,0-4.547,36.341-7.643,50.11c0,0-7.841,38.411-8.763,53.104c0,0-1.384,20.664-0.923,36.279c0,0,0.132,4.423,1.12,12.791
	c0,0,4.612,23.03,10.345,41.216c0,0,7.775,23.236,9.685,28.706c0,0,3.097,9.096,2.504,16.343c0,0-1.515,10.729-1.515,13.957
	c0,0-0.791,13.737,1.317,19.469c0,0,2.512,6.325,6.993,6.786c0,0,3.214,0.132,3.939-1.317c0,0,1.584,2.175,4.746,2.175
	c0,0,4.157-0.527,4.816-2.372c0,0,0.919,1.449,4.609,1.515c0,0,4.765,0.198,5.688-2.833c0,0,0.709,1.713,3.674,1.45
	c0,0,4.364-0.857,5.55-2.833c0,0,2.315,2.239,5.412,1.91c0,0,6.049-0.329,6.576-4.612c0,0,0.953-2.768-1.221-6.853
	c0,0-5.256-10.674-8.485-16.999c0,0-6.778-10.938-7.173-12.519c0,0-1.243-1.384-1.111-5.469c0,0,2.664-19.7,2.203-28.464
	c0,0-0.299-9.487-2.144-20.096c0,0-1.936-10.806-3.385-15.748c0,0-1.182-4.678-0.259-9.751c0,0,1.131-6.853,3.437-13.837
	c0,0,4.559-10.081,6.404-21.94c0,0,4.477-16.109,2.435-24.082c0,0,4.711,1.845,10.937,2.998c0,0,5.225,0.988,10.397,0.791
	c5.172,0.197,10.39-0.791,10.39-0.791c6.227-1.153,10.935-2.998,10.935-2.998c-2.042,7.973,2.446,24.082,2.446,24.082
	c1.846,11.859,6.41,21.94,6.41,21.94c2.307,6.984,3.439,13.837,3.439,13.837c0.922,5.073-0.248,9.751-0.248,9.751
	c-1.45,4.942-3.377,15.748-3.377,15.748c-1.845,10.608-2.129,20.096-2.129,20.096c-0.462,8.764,2.223,28.464,2.223,28.464
	c0.131,4.085-1.105,5.469-1.105,5.469c-0.396,1.581-7.154,12.519-7.154,12.519c-3.229,6.325-8.461,16.999-8.461,16.999
	c-2.175,4.085-1.212,6.853-1.212,6.853c0.526,4.283,6.59,4.612,6.59,4.612c3.097,0.329,5.425-1.91,5.425-1.91
	c1.187,1.976,5.567,2.833,5.567,2.833c2.965,0.263,3.686-1.45,3.686-1.45c0.923,3.031,5.704,2.833,5.704,2.833
	c3.689-0.065,4.62-1.515,4.62-1.515c0.658,1.845,4.834,2.372,4.834,2.372c3.163,0,4.768-2.175,4.768-2.175
	c0.726,1.449,3.96,1.317,3.96,1.317c4.48-0.461,7.01-6.786,7.01-6.786c2.107-5.731,1.317-19.44,1.317-19.44
	c0-3.228-1.516-13.93-1.516-13.93c-0.593-7.247,2.504-16.319,2.504-16.319c1.911-5.47,9.685-28.667,9.685-28.667
	c5.733-18.186,10.346-41.173,10.346-41.173c0.987-8.367,1.12-12.774,1.12-12.774c0.461-15.616-0.923-36.232-0.923-36.232
	c-0.923-14.692-8.764-53.059-8.764-53.059c-3.096-13.771-7.643-50.062-7.643-50.062c-1.713-17.131-0.594-37.397-0.594-37.397
	c0.133-15.352,1.648-27.124,1.648-27.124c0.724,4.217,5.666,9.587,5.666,9.587c3.558,4.283,9.158,7.981,9.158,7.981
	c2.108,1.845,7.182,6.93,7.182,6.93c0.132,3.558,1.911,12.122,1.911,12.122c1.187,5.008,5.646,14.227,5.646,14.227
	c4.13,9.648,12.736,23.341,12.736,23.341c1.055,1.45,0.791,4.342,0.791,4.342c-0.065,5.668-4.02,11.652-4.02,11.652
	c-3.689,4.875-5.271,11.126-5.271,11.126c-0.461,2.109,0,6.13,0,6.13c0.857,8.499-0.065,15.438-0.065,15.438
	c-0.594,4.15,1.252,4.906,1.252,4.906c1.845,0.657,4.876-0.348,4.876-0.348c3.887-1.12,4.611-8.004,4.611-8.004
	c0.198-2.702,0.462-8.286,0.462-8.286c0.132-3.821,4.15-4.014,4.15-4.014c3.295-0.198,4.942,2.456,4.942,2.456
	c2.174,4.085,2.438,9.877,2.438,9.877c0.132,7.906-1.977,13.132-1.977,13.132c-2.768,7.446-2.504,8.92-2.504,8.92
	c0.33,5.732,6.721,4.842,6.721,4.842c5.271,0,6.995-5.35,6.995-5.35c0.96,3.2,5.84,3.002,5.84,3.002
	c5.121-0.16,6.401-5.065,6.401-5.065c3.04,0.881,5.439-1.7,5.439-1.7c3.36-3.12,3.601-10.431,3.601-10.431
	c1.119,0.08,2.8-1.21,2.8-1.21c2.8-2.399,3.2-9.931,3.2-9.931c1.04-5.2,0-14.866,0-14.866c-0.4-3.6-6-17.543-6-17.543
	c-2.801-6.64-6.561-18.624-6.561-18.624c-1.2-5.28-3.12-13.964-3.12-13.964c-3.601-16.241-10.161-39.21-10.161-39.21
	c-3.92-12.001-13.439-32.646-13.439-32.646c-7.521-13.121-18.241-25.227-18.241-25.227C87.7-112.875,73.06-118.801,73.06-118.801
	c-11.28-4.56-24.321-9.086-24.321-9.086c-4.88-2-5.04-6.183-5.04-6.183l0.08-4.539c-0.16-1.92,0.08-3.214,0.08-3.214
	c4.64-4.72,10.96-14.424,10.96-14.424c4.001-7.6,6.241-16.075,6.241-16.075c2.24,0.8,4.96,0.244,4.96,0.244
	c3.439-0.24,5.52-5.134,5.52-5.134c1.36-3.76,3.064-13.593,3.064-13.593c1.403-5.05,2.524-12.481,2.524-12.481
	c0.812-5.429-1.964-9.585-1.964-9.585c-2.265-4.251-6.452-4.483-6.452-4.483c3.087-13.184,0-25.789,0-25.789
	c-2.805-15.99-17.031-30.577-17.031-30.577C33.625-297.285,0-296.311,0-296.311s-33.628-0.974-51.684,22.59
	C-51.684-273.721-65.908-259.133-68.712-243.144z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-67.076-237.558c0,0-2.992,12.285,0,25.071
	c0,0-4.06,0.223-6.257,4.346c0,0-2.691,4.038-1.904,9.302c0,0,1.088,7.219,2.449,12.115c0,0,1.652,9.562,2.971,13.208
	c0,0,2.017,4.754,5.353,4.987c0,0,2.637,0.55,4.81-0.226c0,0,2.172,8.25,6.051,15.62c0,0,6.128,9.447,10.628,14.024
	c0,0,0.233,1.26,0.077,3.122l0.078,4.407c0,0-0.155,4.075-4.887,6.015c0,0-12.646,4.457-23.584,8.878
	c0,0-14.197,5.857-32.738,24.244c0,0-10.396,11.836-17.688,24.558c0,0-9.232,20.115-13.033,31.752c0,0-6.362,22.379-9.853,38.127
	c0,0-1.862,8.461-3.025,13.581c0,0-3.647,11.673-6.362,18.112c0,0-5.43,13.571-5.818,17.062c0,0-1.009,9.417,0,14.459
	c0,0,0.388,7.333,3.103,9.66c0,0,1.629,1.257,2.715,1.18c0,0,0.233,7.124,3.491,10.148c0,0,2.328,2.521,5.276,1.667
	c0,0,1.241,4.787,6.206,4.942c0,0,4.732,0.217,5.663-2.886c0,0,1.672,5.222,6.783,5.222c0,0,6.198,0.9,6.517-4.658
	c0,0,0.256-1.396-2.428-8.616c0,0-2.044-5.023-1.916-12.69c0,0,0.255-5.581,2.364-9.542c0,0,1.597-2.552,4.791-2.36
	c0,0,3.898,0.208,4.026,3.914c0,0,0.255,5.449,0.447,8.069c0,0,0.703,6.711,4.472,7.797c0,0,2.939,0.994,4.728,0.354
	c0,0,1.789-0.715,1.214-4.739c0,0-0.894-6.67-0.064-14.911c0,0,0.448-3.876,0-5.92c0,0-1.533-6.012-5.111-10.739
	c0,0-3.834-5.751-3.897-11.246c0,0-0.256-2.789,0.766-4.194c0,0,8.346-13.162,12.351-22.518c0,0,4.325-8.869,5.475-13.724
	c0,0,1.725-8.251,1.853-11.701c0,0,4.92-4.884,6.964-6.673c0,0,5.431-3.529,8.881-7.682c0,0,4.792-5.157,5.495-9.246
	c0,0,1.469,11.539,1.597,26.425c0,0,1.086,19.818-0.575,36.43c0,0-4.409,35.424-7.411,48.776c0,0-7.604,37.442-8.498,51.689
	c0,0-1.342,20.17-0.895,35.312c0,0,0.128,4.335,1.087,12.449c0,0,4.472,22.487,10.031,40.121c0,0,7.539,22.644,9.392,27.946
	c0,0,3.003,8.88,2.428,15.908c0,0-1.47,10.454-1.47,13.586c0,0-0.767,13.391,1.278,18.948c0,0,2.452,6.135,6.796,6.581
	c0,0,3.123,0.128,3.826-1.277c0,0,1.543,2.108,4.61,2.108c0,0,4.039-0.511,4.678-2.3c0,0,0.899,1.405,4.476,1.469
	c0,0,4.632,0.192,5.526-2.747c0,0,0.694,1.661,3.569,1.405c0,0,4.241-0.83,5.391-2.747c0,0,2.253,2.172,5.256,1.854
	c0,0,5.88-0.32,6.391-4.473c0,0,0.935-2.684-1.174-6.645c0,0-5.065-10.352-8.195-16.484c0,0-6.55-10.605-6.933-12.14
	c0,0-1.196-1.341-1.069-5.303c0,0,2.632-19.104,2.185-27.602c0,0-0.257-9.2-2.045-19.486c0,0-1.851-10.479-3.257-15.271
	c0,0-1.13-4.536-0.235-9.456c0,0,1.121-6.645,3.357-13.417c0,0,4.459-9.776,6.248-21.276c0,0,4.383-15.621,2.402-23.352
	c0,0,4.587,1.789,10.625,2.907c0,0,5.083,0.958,10.099,0.766c5.015,0.192,10.092-0.766,10.092-0.766
	c6.037-1.118,10.621-2.907,10.621-2.907c-1.98,7.73,2.414,23.352,2.414,23.352c1.789,11.5,6.256,21.276,6.256,21.276
	c2.236,6.772,3.359,13.417,3.359,13.417c0.894,4.92-0.226,9.456-0.226,9.456c-1.404,4.792-3.246,15.271-3.246,15.271
	c-1.788,10.286-2.029,19.486-2.029,19.486c-0.447,8.498,2.207,27.602,2.207,27.602c0.127,3.962-1.064,5.303-1.064,5.303
	c-0.383,1.534-6.911,12.14-6.911,12.14c-3.131,6.133-8.171,16.484-8.171,16.484c-2.107,3.961-1.163,6.645-1.163,6.645
	c0.512,4.152,6.406,4.473,6.406,4.473c3.003,0.318,5.271-1.854,5.271-1.854c1.149,1.917,5.408,2.747,5.408,2.747
	c2.875,0.256,3.581-1.405,3.581-1.405c0.896,2.939,5.543,2.747,5.543,2.747c3.578-0.063,4.488-1.469,4.488-1.469
	c0.639,1.789,4.698,2.3,4.698,2.3c3.067,0,4.635-2.108,4.635-2.108c0.702,1.405,3.847,1.277,3.847,1.277
	c4.346-0.446,6.814-6.581,6.814-6.581c2.045-5.558,1.278-18.918,1.278-18.918c0-3.131-1.47-13.556-1.47-13.556
	c-0.574-7.028,2.429-15.883,2.429-15.883c1.853-5.303,9.392-27.904,9.392-27.904c5.558-17.634,10.031-40.073,10.031-40.073
	c0.958-8.114,1.086-12.432,1.086-12.432c0.447-15.143-0.896-35.261-0.896-35.261c-0.894-14.248-8.497-51.641-8.497-51.641
	c-3.003-13.354-7.411-48.724-7.411-48.724c-1.661-16.612-0.575-36.396-0.575-36.396c0.128-14.887,1.598-26.397,1.598-26.397
	c0.702,4.089,5.494,9.256,5.494,9.256c3.45,4.152,8.881,7.695,8.881,7.695c2.045,1.789,6.964,6.684,6.964,6.684
	c0.128,3.45,1.854,11.709,1.854,11.709c1.149,4.856,5.475,13.739,5.475,13.739c4.005,9.357,12.352,22.535,12.352,22.535
	c1.021,1.406,0.767,4.195,0.767,4.195c-0.064,5.493-3.898,11.252-3.898,11.252c-3.577,4.728-5.11,10.742-5.11,10.742
	c-0.447,2.045,0,5.923,0,5.923c0.831,8.241-0.064,14.91-0.064,14.91c-0.575,4.025,1.214,4.739,1.214,4.739
	c1.789,0.639,4.729-0.353,4.729-0.353c3.77-1.086,4.472-7.796,4.472-7.796c0.192-2.619,0.448-8.063,0.448-8.063
	c0.128-3.705,4.025-3.914,4.025-3.914c3.193-0.191,4.791,2.362,4.791,2.362c2.108,3.961,2.364,9.539,2.364,9.539
	c0.128,7.667-1.917,12.684-1.917,12.684c-2.683,7.22-2.428,8.615-2.428,8.615c0.32,5.559,6.517,4.661,6.517,4.661
	c5.111,0,6.783-5.221,6.783-5.221c0.931,3.104,5.664,2.887,5.664,2.887c4.965-0.155,6.206-4.942,6.206-4.942
	c2.948,0.854,5.275-1.67,5.275-1.67c3.258-3.025,3.49-10.154,3.49-10.154c1.086,0.078,2.716-1.183,2.716-1.183
	c2.716-2.327,3.104-9.667,3.104-9.667c1.008-5.043,0-14.469,0-14.469c-0.388-3.491-5.819-17.077-5.819-17.077
	c-2.715-6.439-6.36-18.131-6.36-18.131c-1.164-5.12-3.026-13.592-3.026-13.592c-3.491-15.749-9.852-38.169-9.852-38.169
	c-3.803-11.636-13.033-31.784-13.033-31.784c-7.293-12.723-17.688-24.574-17.688-24.574c-18.542-18.387-32.737-24.288-32.737-24.288
	c-10.939-4.422-23.584-8.906-23.584-8.906c-4.733-1.94-4.889-6.027-4.889-6.027l0.078-4.416c-0.154-1.861,0.077-3.128,0.077-3.128
	c4.5-4.577,10.629-14.053,10.629-14.053c3.879-7.369,6.051-15.651,6.051-15.651c2.173,0.776,4.811,0.22,4.811,0.22
	c3.336-0.233,5.353-5.007,5.353-5.007c1.318-3.646,2.972-13.232,2.972-13.232c1.359-4.896,2.447-12.15,2.447-12.15
	c0.787-5.264-1.903-9.331-1.903-9.331c-2.197-4.123-6.258-4.379-6.258-4.379c2.993-12.785,0-25.101,0-25.101
	c-2.72-15.505-16.686-29.651-16.686-29.651C32.882-290.059,0-289.113,0-289.113s-32.885-0.946-50.394,21.903
	C-50.394-267.209-64.356-253.063-67.076-237.558z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-65.44-231.973c0,0-2.899,11.995,0,24.38
	c0,0-3.933,0.246-6.061,4.24c0,0-2.607,3.947-1.845,9.046c0,0,1.054,7.039,2.372,11.782c0,0,1.601,9.313,2.878,12.845
	c0,0,1.954,4.633,5.186,4.858c0,0,2.555,0.551,4.66-0.201c0,0,2.104,8.054,5.862,15.194c0,0,5.937,9.217,10.296,13.652
	c0,0,0.225,1.229,0.075,3.034l0.075,4.285c0,0-0.15,3.978-4.735,5.856c0,0-12.25,4.413-22.846,8.697c0,0-13.754,5.83-31.715,23.642
	c0,0-10.071,11.58-17.136,23.905c0,0-8.943,19.615-12.626,30.888c0,0-6.162,21.826-9.544,37.082c0,0-1.804,8.247-2.931,13.208
	c0,0-3.532,11.378-6.163,17.616c0,0-5.26,13.214-5.636,16.596c0,0-0.977,9.176,0,14.062c0,0,0.376,7.141,3.006,9.396
	c0,0,1.578,1.228,2.63,1.152c0,0,0.226,6.94,3.382,9.872c0,0,2.255,2.463,5.111,1.636c0,0,1.202,4.668,6.012,4.819
	c0,0,4.584,0.234,5.486-2.771c0,0,1.62,5.093,6.572,5.093c0,0,6.003,0.908,6.313-4.477c0,0,0.247-1.317-2.352-8.312
	c0,0-1.981-4.815-1.857-12.242c0,0,0.248-5.368,2.29-9.206c0,0,1.547-2.45,4.642-2.265c0,0,3.776,0.225,3.9,3.814
	c0,0,0.247,5.308,0.433,7.846c0,0,0.681,6.536,4.332,7.589c0,0,2.848,0.98,4.581,0.361c0,0,1.733-0.673,1.176-4.573
	c0,0-0.867-6.4-0.062-14.385c0,0,0.433-3.731,0-5.712c0,0-1.486-5.775-4.952-10.356c0,0-3.713-5.522-3.775-10.846
	c0,0-0.248-2.685,0.742-4.046c0,0,8.085-12.646,11.965-21.71c0,0,4.19-8.531,5.304-13.235c0,0,1.671-7.945,1.795-11.287
	c0,0,4.766-4.693,6.747-6.426c0,0,5.261-3.372,8.603-7.395c0,0,4.642-4.953,5.323-8.914c0,0,1.424,11.279,1.547,25.7
	c0,0,1.053,19.338-0.557,35.43c0,0-4.27,34.507-7.18,47.442c0,0-7.365,36.472-8.232,50.274c0,0-1.299,19.675-0.866,34.344
	c0,0,0.124,4.247,1.052,12.108c0,0,4.333,21.943,9.718,39.025c0,0,7.303,22.049,9.098,27.186c0,0,2.909,8.665,2.352,15.473
	c0,0-1.423,10.182-1.423,13.214c0,0-0.743,13.047,1.238,18.432c0,0,2.391,5.94,6.6,6.375c0,0,3.031,0.124,3.712-1.238
	c0,0,1.503,2.042,4.474,2.042c0,0,3.921-0.495,4.54-2.228c0,0,0.878,1.361,4.344,1.424c0,0,4.497,0.186,5.363-2.662
	c0,0,0.678,1.61,3.463,1.362c0,0,4.119-0.806,5.233-2.661c0,0,2.191,2.104,5.1,1.794c0,0,5.71-0.31,6.205-4.332
	c0,0,0.917-2.601-1.125-6.438c0,0-4.874-10.026-7.907-15.969c0,0-6.32-10.275-6.692-11.76c0,0-1.15-1.3-1.026-5.139
	c0,0,2.599-18.506,2.166-26.737c0,0-0.214-8.913-1.947-18.878c0,0-1.765-10.151-3.127-14.793c0,0-1.079-4.396-0.212-9.161
	c0,0,1.11-6.438,3.277-12.997c0,0,4.36-9.47,6.093-20.612c0,0,4.288-15.133,2.369-22.622c0,0,4.463,1.733,10.312,2.816
	c0,0,4.942,0.928,9.801,0.743c4.858,0.185,9.793-0.743,9.793-0.743c5.849-1.083,10.308-2.816,10.308-2.816
	c-1.918,7.489,2.384,22.622,2.384,22.622c1.732,11.143,6.101,20.612,6.101,20.612c2.166,6.56,3.278,12.997,3.278,12.997
	c0.867,4.766-0.2,9.161-0.2,9.161c-1.361,4.642-3.116,14.793-3.116,14.793c-1.732,9.965-1.93,18.878-1.93,18.878
	c-0.433,8.231,2.188,26.737,2.188,26.737c0.124,3.839-1.02,5.139-1.02,5.139c-0.372,1.484-6.669,11.76-6.669,11.76
	c-3.033,5.942-7.88,15.969-7.88,15.969c-2.042,3.837-1.115,6.438-1.115,6.438c0.496,4.022,6.222,4.332,6.222,4.332
	c2.909,0.31,5.116-1.794,5.116-1.794c1.115,1.855,5.252,2.661,5.252,2.661c2.785,0.248,3.478-1.362,3.478-1.362
	c0.865,2.848,5.381,2.662,5.381,2.662c3.466-0.062,4.356-1.424,4.356-1.424c0.619,1.732,4.562,2.228,4.562,2.228
	c2.971,0,4.5-2.042,4.5-2.042c0.681,1.362,3.734,1.238,3.734,1.238c4.209-0.435,6.62-6.375,6.62-6.375
	c1.981-5.385,1.238-18.397,1.238-18.397c0-3.033-1.423-13.182-1.423-13.182c-0.559-6.81,2.351-15.447,2.351-15.447
	c1.795-5.137,9.1-27.14,9.1-27.14c5.385-17.083,9.718-38.976,9.718-38.976c0.928-7.859,1.052-12.088,1.052-12.088
	c0.434-14.67-0.867-34.29-0.867-34.29c-0.865-13.803-8.231-50.222-8.231-50.222c-2.909-12.936-7.18-47.385-7.18-47.385
	c-1.609-16.092-0.558-35.394-0.558-35.394c0.124-14.422,1.548-25.67,1.548-25.67c0.682,3.962,5.323,8.924,5.323,8.924
	c3.342,4.023,8.603,7.41,8.603,7.41c1.981,1.733,6.747,6.438,6.747,6.438c0.123,3.342,1.796,11.297,1.796,11.297
	c1.113,4.704,5.303,13.252,5.303,13.252c3.88,9.063,11.965,21.728,11.965,21.728c0.991,1.362,0.743,4.048,0.743,4.048
	C108.344,34.97,104.63,40.5,104.63,40.5c-3.466,4.581-4.951,10.361-4.951,10.361c-0.433,1.979,0,5.713,0,5.713
	c0.806,7.984-0.062,14.386-0.062,14.386c-0.558,3.899,1.176,4.571,1.176,4.571c1.733,0.619,4.58-0.36,4.58-0.36
	c3.652-1.052,4.333-7.586,4.333-7.586c0.186-2.538,0.433-7.84,0.433-7.84c0.124-3.59,3.9-3.815,3.9-3.815
	c3.094-0.186,4.642,2.268,4.642,2.268c2.042,3.838,2.29,9.202,2.29,9.202c0.124,7.427-1.856,12.235-1.856,12.235
	c-2.601,6.995-2.353,8.311-2.353,8.311c0.31,5.385,6.313,4.48,6.313,4.48c4.952,0,6.571-5.091,6.571-5.091
	c0.901,3.006,5.486,2.77,5.486,2.77c4.811-0.149,6.013-4.818,6.013-4.818c2.855,0.827,5.109-1.638,5.109-1.638
	c3.157-2.932,3.382-9.879,3.382-9.879c1.054,0.075,2.631-1.156,2.631-1.156c2.631-2.254,3.007-9.404,3.007-9.404
	c0.977-4.885,0-14.071,0-14.071c-0.376-3.382-5.638-16.611-5.638-16.611c-2.63-6.238-6.162-17.637-6.162-17.637
	c-1.128-4.961-2.931-13.22-2.931-13.22c-3.382-15.256-9.545-37.126-9.545-37.126c-3.682-11.273-12.626-30.924-12.626-30.924
	c-7.064-12.325-17.135-23.922-17.135-23.922c-17.962-17.811-31.715-23.689-31.715-23.689c-10.598-4.283-22.848-8.727-22.848-8.727
	c-4.584-1.879-4.733-5.869-4.733-5.869l0.074-4.295c-0.15-1.803,0.075-3.04,0.075-3.04c4.359-4.434,10.296-13.682,10.296-13.682
	c3.759-7.14,5.862-15.228,5.862-15.228c2.104,0.752,4.66,0.194,4.66,0.194c3.23-0.225,5.185-4.88,5.185-4.88
	c1.278-3.532,2.879-12.87,2.879-12.87c1.317-4.744,2.371-11.82,2.371-11.82c0.764-5.099-1.844-9.078-1.844-9.078
	c-2.128-3.994-6.061-4.274-6.061-4.274c2.897-12.385,0-24.413,0-24.413c-2.637-15.021-16.342-28.724-16.342-28.724
	C32.138-282.833,0-281.917,0-281.917s-32.142-0.916-49.103,21.22C-49.103-260.697-62.805-246.994-65.44-231.973z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-63.804-226.387c0,0-2.805,11.704,0,23.69
	c0,0-3.806,0.267-5.866,4.132c0,0-2.522,3.856-1.785,8.791c0,0,1.02,6.858,2.296,11.449c0,0,1.549,9.063,2.785,12.481
	c0,0,1.891,4.512,5.018,4.73c0,0,2.473,0.551,4.51-0.176c0,0,2.036,7.858,5.673,14.767c0,0,5.745,8.988,9.964,13.279
	c0,0,0.218,1.201,0.072,2.947l0.073,4.163c0,0-0.145,3.879-4.582,5.698c0,0-11.855,4.369-22.11,8.515
	c0,0-13.309,5.802-30.692,23.039c0,0-9.745,11.324-16.582,23.252c0,0-8.655,19.114-12.219,30.024c0,0-5.964,21.273-9.236,36.037
	c0,0-1.746,8.034-2.837,12.834c0,0-3.418,11.085-5.964,17.122c0,0-5.091,12.855-5.454,16.129c0,0-0.946,8.935,0,13.662
	c0,0,0.363,6.951,2.909,9.133c0,0,1.527,1.198,2.545,1.125c0,0,0.219,6.759,3.273,9.596c0,0,2.182,2.404,4.946,1.604
	c0,0,1.163,4.55,5.818,4.694c0,0,4.437,0.256,5.309-2.653c0,0,1.568,4.963,6.36,4.963c0,0,5.81,0.916,6.109-4.296
	c0,0,0.24-1.238-2.276-8.006c0,0-1.917-4.608-1.797-11.797c0,0,0.24-5.153,2.217-8.867c0,0,1.497-2.35,4.492-2.169
	c0,0,3.654,0.238,3.773,3.713c0,0,0.24,5.169,0.42,7.624c0,0,0.659,6.361,4.193,7.38c0,0,2.755,0.967,4.432,0.368
	c0,0,1.677-0.633,1.138-4.405c0,0-0.838-6.133-0.06-13.86c0,0,0.42-3.587,0-5.504c0,0-1.437-5.539-4.792-9.972
	c0,0-3.593-5.295-3.653-10.446c0,0-0.24-2.582,0.718-3.899c0,0,7.825-12.131,11.579-20.901c0,0,4.055-8.194,5.133-12.746
	c0,0,1.617-7.64,1.737-10.874c0,0,4.612-4.502,6.529-6.18c0,0,5.091-3.214,8.326-7.108c0,0,4.492-4.748,5.151-8.581
	c0,0,1.378,11.019,1.498,24.975c0,0,1.018,18.858-0.539,34.431c0,0-4.133,33.589-6.949,46.108c0,0-7.128,35.502-7.966,48.858
	c0,0-1.258,19.181-0.839,33.377c0,0,0.12,4.159,1.019,11.767c0,0,4.192,21.398,9.404,37.931c0,0,7.068,21.454,8.805,26.425
	c0,0,2.815,8.45,2.276,15.039c0,0-1.378,9.906-1.378,12.841c0,0-0.719,12.701,1.198,17.912c0,0,2.331,5.75,6.405,6.169
	c0,0,2.938,0.12,3.598-1.198c0,0,1.463,1.978,4.338,1.978c0,0,3.804-0.479,4.403-2.156c0,0,0.857,1.318,4.211,1.377
	c0,0,4.362,0.181,5.201-2.575c0,0,0.662,1.558,3.357,1.318c0,0,3.995-0.779,5.073-2.576c0,0,2.13,2.036,4.945,1.737
	c0,0,5.541-0.3,6.02-4.193c0,0,0.899-2.516-1.078-6.229c0,0-4.683-9.704-7.618-15.454c0,0-6.091-9.943-6.451-11.381
	c0,0-1.104-1.258-0.984-4.972c0,0,2.567-17.909,2.147-25.876c0,0-0.171-8.626-1.848-18.269c0,0-1.679-9.824-2.997-14.316
	c0,0-1.028-4.253-0.189-8.864c0,0,1.1-6.23,3.196-12.579c0,0,4.261-9.164,5.938-19.946c0,0,4.193-14.645,2.336-21.893
	c0,0,4.339,1.677,10,2.726c0,0,4.8,0.898,9.502,0.718c4.702,0.181,9.495-0.718,9.495-0.718c5.661-1.049,9.996-2.726,9.996-2.726
	c-1.857,7.248,2.35,21.893,2.35,21.893c1.678,10.782,5.946,19.946,5.946,19.946c2.097,6.349,3.199,12.579,3.199,12.579
	c0.838,4.611-0.176,8.864-0.176,8.864c-1.318,4.492-2.986,14.316-2.986,14.316c-1.677,9.643-1.83,18.269-1.83,18.269
	c-0.419,7.967,2.172,25.876,2.172,25.876c0.12,3.714-0.978,4.972-0.978,4.972c-0.359,1.438-6.427,11.381-6.427,11.381
	c-2.935,5.75-7.589,15.454-7.589,15.454c-1.977,3.713-1.065,6.229-1.065,6.229c0.479,3.894,6.037,4.193,6.037,4.193
	c2.814,0.299,4.962-1.737,4.962-1.737c1.078,1.797,5.094,2.576,5.094,2.576c2.695,0.239,3.372-1.318,3.372-1.318
	c0.839,2.756,5.22,2.575,5.22,2.575c3.355-0.059,4.226-1.377,4.226-1.377c0.599,1.677,4.426,2.156,4.426,2.156
	c2.875,0,4.366-1.978,4.366-1.978c0.658,1.318,3.624,1.198,3.624,1.198c4.072-0.419,6.425-6.169,6.425-6.169
	c1.917-5.211,1.198-17.876,1.198-17.876c0-2.935-1.379-12.807-1.379-12.807c-0.539-6.589,2.276-15.011,2.276-15.011
	c1.737-4.972,8.805-26.377,8.805-26.377c5.212-16.531,9.404-37.876,9.404-37.876c0.899-7.606,1.019-11.745,1.019-11.745
	c0.42-14.196-0.839-33.318-0.839-33.318C79.328,99.41,72.2,63.964,72.2,63.964c-2.815-12.52-6.949-46.047-6.949-46.047
	c-1.557-15.573-0.539-34.393-0.539-34.393c0.12-13.957,1.498-24.942,1.498-24.942c0.659,3.833,5.151,8.591,5.151,8.591
	c3.235,3.894,8.326,7.124,8.326,7.124c1.917,1.677,6.529,6.192,6.529,6.192c0.119,3.234,1.736,10.884,1.736,10.884
	c1.078,4.553,5.132,12.765,5.132,12.765c3.756,8.771,11.58,20.921,11.58,20.921c0.958,1.318,0.719,3.9,0.719,3.9
	c-0.061,5.15-3.653,10.453-3.653,10.453c-3.355,4.433-4.792,9.978-4.792,9.978c-0.42,1.917,0,5.505,0,5.505
	c0.778,7.727-0.061,13.861-0.061,13.861c-0.538,3.772,1.139,4.402,1.139,4.402c1.677,0.6,4.432-0.365,4.432-0.365
	c3.534-1.019,4.193-7.378,4.193-7.378c0.18-2.455,0.42-7.617,0.42-7.617c0.119-3.475,3.772-3.716,3.772-3.716
	c2.995-0.179,4.492,2.174,4.492,2.174c1.978,3.713,2.217,8.863,2.217,8.863c0.12,7.188-1.797,11.788-1.797,11.788
	c-2.516,6.77-2.275,8.006-2.275,8.006c0.299,5.212,6.108,4.3,6.108,4.3c4.792,0,6.36-4.961,6.36-4.961
	c0.872,2.909,5.309,2.653,5.309,2.653c4.654-0.145,5.818-4.695,5.818-4.695c2.764,0.8,4.946-1.607,4.946-1.607
	c3.054-2.836,3.272-9.601,3.272-9.601c1.019,0.071,2.545-1.131,2.545-1.131c2.546-2.182,2.909-9.141,2.909-9.141
	c0.946-4.727,0-13.674,0-13.674c-0.363-3.273-5.454-16.147-5.454-16.147c-2.546-6.036-5.964-17.142-5.964-17.142
	c-1.091-4.801-2.837-12.847-2.837-12.847c-3.272-14.764-9.236-36.085-9.236-36.085c-3.563-10.909-12.219-30.062-12.219-30.062
	c-6.837-11.927-16.582-23.269-16.582-23.269c-17.383-17.237-30.692-23.09-30.692-23.09c-10.255-4.146-22.109-8.548-22.109-8.548
	c-4.438-1.819-4.582-5.712-4.582-5.712l0.073-4.173c-0.146-1.746,0.071-2.954,0.071-2.954c4.22-4.291,9.965-13.311,9.965-13.311
	c3.637-6.909,5.673-14.804,5.673-14.804c2.037,0.728,4.51,0.17,4.51,0.17c3.127-0.219,5.018-4.754,5.018-4.754
	c1.236-3.418,2.785-12.509,2.785-12.509c1.276-4.59,2.296-11.489,2.296-11.489c0.737-4.935-1.786-8.825-1.786-8.825
	c-2.059-3.865-5.864-4.169-5.864-4.169c2.805-11.986,0-23.725,0-23.725c-2.551-14.536-15.995-27.797-15.995-27.797
	C31.395-275.606,0-274.72,0-274.72s-31.398-0.886-47.812,20.536C-47.812-254.184-61.253-240.923-63.804-226.387z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-62.167-220.802c0,0-2.712,11.413,0,22.999
	c0,0-3.679,0.289-5.67,4.026c0,0-2.439,3.765-1.726,8.535c0,0,0.986,6.678,2.219,11.116c0,0,1.498,8.813,2.693,12.118
	c0,0,1.828,4.39,4.851,4.601c0,0,2.39,0.552,4.359-0.151c0,0,1.968,7.661,5.484,14.34c0,0,5.554,8.758,9.631,12.906
	c0,0,0.211,1.173,0.071,2.86l0.07,4.04c0,0-0.141,3.782-4.429,5.54c0,0-11.46,4.326-21.373,8.334c0,0-12.866,5.774-29.669,22.437
	c0,0-9.421,11.068-16.03,22.598c0,0-8.366,18.614-11.811,29.159c0,0-5.765,20.721-8.929,34.993c0,0-1.687,7.82-2.742,12.461
	c0,0-3.304,10.792-5.765,16.627c0,0-4.921,12.499-5.273,15.663c0,0-0.913,8.693,0,13.264c0,0,0.352,6.759,2.813,8.868
	c0,0,1.476,1.169,2.46,1.099c0,0,0.211,6.577,3.164,9.319c0,0,2.109,2.347,4.781,1.573c0,0,1.125,4.431,5.624,4.571
	c0,0,4.289,0.274,5.133-2.539c0,0,1.515,4.834,6.147,4.834c0,0,5.616,0.924,5.906-4.113c0,0,0.231-1.16-2.2-7.703
	c0,0-1.853-4.399-1.737-11.349c0,0,0.231-4.94,2.142-8.53c0,0,1.447-2.247,4.343-2.074c0,0,3.532,0.256,3.647,3.614
	c0,0,0.232,5.027,0.406,7.401c0,0,0.637,6.187,4.053,7.17c0,0,2.663,0.954,4.285,0.375c0,0,1.621-0.59,1.1-4.237
	c0,0-0.811-5.865-0.058-13.334c0,0,0.405-3.443,0-5.296c0,0-1.39-5.305-4.632-9.589c0,0-3.474-5.066-3.532-10.047
	c0,0-0.232-2.478,0.694-3.752c0,0,7.564-11.613,11.194-20.093c0,0,3.919-7.857,4.961-12.258c0,0,1.563-7.334,1.679-10.461
	c0,0,4.459-4.311,6.312-5.932c0,0,4.921-3.058,8.048-6.821c0,0,4.342-4.544,4.979-8.25c0,0,1.332,10.76,1.448,24.251
	c0,0,0.984,18.379-0.521,33.433c0,0-3.995,32.671-6.717,44.773c0,0-6.89,34.531-7.701,47.444c0,0-1.216,18.687-0.81,32.409
	c0,0,0.115,4.071,0.984,11.424c0,0,4.053,20.855,9.091,36.836c0,0,6.832,20.86,8.511,25.665c0,0,2.722,8.234,2.2,14.604
	c0,0-1.331,9.632-1.331,12.469c0,0-0.695,12.356,1.158,17.394c0,0,2.271,5.559,6.208,5.964c0,0,2.848,0.115,3.485-1.158
	c0,0,1.423,1.911,4.202,1.911c0,0,3.686-0.463,4.265-2.085c0,0,0.836,1.273,4.079,1.332c0,0,4.227,0.174,5.038-2.49
	c0,0,0.646,1.506,3.252,1.273c0,0,3.872-0.753,4.914-2.489c0,0,2.068,1.969,4.789,1.679c0,0,5.371-0.289,5.835-4.053
	c0,0,0.881-2.433-1.03-6.021c0,0-4.493-9.381-7.33-14.938c0,0-5.862-9.612-6.21-11.001c0,0-1.058-1.216-0.942-4.807
	c0,0,2.534-17.312,2.129-25.014c0,0-0.129-8.338-1.75-17.66c0,0-1.593-9.496-2.867-13.838c0,0-0.977-4.111-0.166-8.57
	c0,0,1.089-6.021,3.116-12.158c0,0,4.161-8.859,5.783-19.282c0,0,4.098-14.157,2.303-21.163c0,0,4.215,1.622,9.686,2.635
	c0,0,4.66,0.868,9.205,0.695c4.546,0.173,9.197-0.695,9.197-0.695c5.472-1.013,9.682-2.635,9.682-2.635
	c-1.795,7.006,2.319,21.163,2.319,21.163c1.621,10.423,5.791,19.282,5.791,19.282c2.027,6.137,3.118,12.158,3.118,12.158
	c0.811,4.459-0.151,8.57-0.151,8.57c-1.273,4.342-2.855,13.838-2.855,13.838c-1.621,9.322-1.73,17.66-1.73,17.66
	c-0.405,7.701,2.155,25.014,2.155,25.014c0.116,3.591-0.936,4.807-0.936,4.807c-0.347,1.389-6.184,11.001-6.184,11.001
	c-2.838,5.558-7.299,14.938-7.299,14.938c-1.91,3.589-1.018,6.021-1.018,6.021c0.463,3.764,5.854,4.053,5.854,4.053
	c2.721,0.29,4.807-1.679,4.807-1.679c1.043,1.736,4.938,2.489,4.938,2.489c2.604,0.232,3.267-1.273,3.267-1.273
	c0.812,2.664,5.06,2.49,5.06,2.49c3.242-0.059,4.094-1.332,4.094-1.332c0.579,1.622,4.289,2.085,4.289,2.085
	c2.779,0,4.231-1.911,4.231-1.911c0.638,1.273,3.513,1.158,3.513,1.158c3.937-0.405,6.23-5.964,6.23-5.964
	c1.853-5.037,1.158-17.354,1.158-17.354c0-2.837-1.332-12.434-1.332-12.434c-0.521-6.369,2.2-14.572,2.2-14.572
	c1.679-4.806,8.512-25.614,8.512-25.614c5.037-15.98,9.09-36.777,9.09-36.777c0.869-7.354,0.985-11.402,0.985-11.402
	c0.405-13.724-0.812-32.348-0.812-32.348c-0.811-12.911-7.7-47.384-7.7-47.384c-2.722-12.102-6.718-44.708-6.718-44.708
	c-1.505-15.054-0.521-33.391-0.521-33.391c0.116-13.492,1.448-24.215,1.448-24.215c0.637,3.705,4.979,8.26,4.979,8.26
	c3.127,3.763,8.049,6.838,8.049,6.838c1.854,1.621,6.312,5.945,6.312,5.945c0.115,3.127,1.679,10.472,1.679,10.472
	c1.042,4.401,4.962,12.278,4.962,12.278c3.629,8.479,11.193,20.115,11.193,20.115c0.926,1.272,0.694,3.752,0.694,3.752
	c-0.058,4.979-3.531,10.055-3.531,10.055c-3.243,4.285-4.632,9.594-4.632,9.594c-0.406,1.854,0,5.297,0,5.297
	c0.752,7.471-0.059,13.335-0.059,13.335c-0.521,3.648,1.1,4.236,1.1,4.236c1.621,0.579,4.284-0.372,4.284-0.372
	c3.417-0.985,4.055-7.169,4.055-7.169c0.173-2.374,0.404-7.394,0.404-7.394c0.116-3.358,3.648-3.615,3.648-3.615
	c2.895-0.174,4.342,2.077,4.342,2.077c1.911,3.59,2.144,8.526,2.144,8.526c0.114,6.948-1.737,11.34-1.737,11.34
	c-2.433,6.543-2.201,7.701-2.201,7.701c0.29,5.037,5.906,4.119,5.906,4.119c4.632,0,6.147-4.832,6.147-4.832
	c0.844,2.813,5.133,2.538,5.133,2.538c4.5-0.14,5.623-4.572,5.623-4.572c2.673,0.773,4.781-1.577,4.781-1.577
	c2.953-2.741,3.164-9.324,3.164-9.324c0.984,0.07,2.461-1.104,2.461-1.104c2.46-2.109,2.812-8.878,2.812-8.878
	c0.914-4.569,0-13.275,0-13.275c-0.353-3.164-5.273-15.682-5.273-15.682c-2.461-5.835-5.765-16.648-5.765-16.648
	c-1.056-4.642-2.742-12.476-2.742-12.476c-3.164-14.272-8.929-35.042-8.929-35.042c-3.445-10.546-11.812-29.201-11.812-29.201
	c-6.608-11.53-16.03-22.617-16.03-22.617c-16.803-16.663-29.669-22.491-29.669-22.491c-9.913-4.008-21.373-8.369-21.373-8.369
	c-4.287-1.758-4.429-5.554-4.429-5.554l0.071-4.051c-0.142-1.688,0.07-2.868,0.07-2.868c4.077-4.148,9.632-12.94,9.632-12.94
	c3.515-6.679,5.483-14.379,5.483-14.379c1.969,0.703,4.358,0.144,4.358,0.144c3.023-0.211,4.851-4.627,4.851-4.627
	c1.196-3.304,2.693-12.147,2.693-12.147c1.233-4.438,2.219-11.159,2.219-11.159c0.713-4.77-1.726-8.571-1.726-8.571
	c-1.99-3.736-5.67-4.065-5.67-4.065c2.712-11.586,0-23.037,0-23.037c-2.465-14.052-15.649-26.871-15.649-26.871
	C30.65-268.381,0-267.524,0-267.524s-30.655-0.857-46.522,19.851C-46.522-247.673-59.703-234.854-62.167-220.802z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-60.53-215.216c0,0-2.618,11.122,0,22.309
	c0,0-3.554,0.311-5.475,3.918c0,0-2.354,3.674-1.667,8.281c0,0,0.952,6.497,2.144,10.781c0,0,1.444,8.564,2.599,11.755
	c0,0,1.765,4.269,4.684,4.473c0,0,2.309,0.552,4.209-0.127c0,0,1.901,7.465,5.295,13.914c0,0,5.362,8.528,9.3,12.533
	c0,0,0.204,1.144,0.067,2.773l0.068,3.918c0,0-0.136,3.684-4.276,5.381c0,0-11.064,4.283-20.636,8.153
	c0,0-12.423,5.746-28.646,21.834c0,0-9.097,10.812-15.478,21.945c0,0-8.078,18.113-11.404,28.295c0,0-5.565,20.168-8.62,33.948
	c0,0-1.63,7.607-2.647,12.086c0,0-3.191,10.497-5.567,16.133c0,0-4.751,12.141-5.091,15.195c0,0-0.882,8.453,0,12.865
	c0,0,0.34,6.568,2.716,8.605c0,0,1.426,1.139,2.375,1.071c0,0,0.204,6.395,3.056,9.042c0,0,2.037,2.289,4.616,1.542
	c0,0,1.086,4.313,5.43,4.449c0,0,4.141,0.292,4.956-2.423c0,0,1.463,4.705,5.935,4.705c0,0,5.423,0.929,5.702-3.934
	c0,0,0.224-1.08-2.124-7.398c0,0-1.789-4.192-1.677-10.9c0,0,0.223-4.728,2.067-8.193c0,0,1.398-2.147,4.193-1.979
	c0,0,3.41,0.271,3.522,3.515c0,0,0.224,4.887,0.392,7.179c0,0,0.615,6.012,3.913,6.962c0,0,2.572,0.939,4.137,0.381
	c0,0,1.565-0.548,1.062-4.07c0,0-0.782-5.597-0.057-12.809c0,0,0.393-3.299,0-5.087c0,0-1.341-5.069-4.472-9.206
	c0,0-3.354-4.839-3.41-9.646c0,0-0.224-2.375,0.67-3.604c0,0,7.304-11.098,10.809-19.285c0,0,3.783-7.52,4.79-11.769
	c0,0,1.509-7.029,1.621-10.048c0,0,4.305-4.12,6.094-5.685c0,0,4.752-2.901,7.771-6.535c0,0,4.193-4.339,4.809-7.917
	c0,0,1.284,10.5,1.396,23.526c0,0,0.951,17.897-0.503,32.433c0,0-3.856,31.754-6.485,43.438c0,0-6.652,33.562-7.435,46.029
	c0,0-1.174,18.192-0.783,31.442c0,0,0.112,3.982,0.95,11.082c0,0,3.914,20.311,8.778,35.741c0,0,6.596,20.265,8.218,24.906
	c0,0,2.627,8.018,2.124,14.168c0,0-1.286,9.357-1.286,12.098c0,0-0.671,12.01,1.118,16.873c0,0,2.211,5.367,6.013,5.759
	c0,0,2.756,0.111,3.371-1.118c0,0,1.383,1.845,4.067,1.845c0,0,3.566-0.447,4.126-2.013c0,0,0.815,1.23,3.945,1.286
	c0,0,4.095,0.167,4.876-2.404c0,0,0.632,1.453,3.147,1.23c0,0,3.749-0.728,4.755-2.404c0,0,2.006,1.901,4.634,1.621
	c0,0,5.201-0.28,5.648-3.913c0,0,0.863-2.348-0.982-5.813c0,0-4.301-9.058-7.04-14.424c0,0-5.634-9.28-5.97-10.622
	c0,0-1.011-1.175-0.9-4.641c0,0,2.503-16.716,2.111-24.15c0,0-0.087-8.052-1.652-17.052c0,0-1.508-9.169-2.737-13.361
	c0,0-0.925-3.97-0.143-8.274c0,0,1.079-5.813,3.036-11.74c0,0,4.062-8.553,5.627-18.615c0,0,4.003-13.669,2.271-20.434
	c0,0,4.091,1.565,9.374,2.543c0,0,4.519,0.839,8.906,0.671c4.39,0.168,8.899-0.671,8.899-0.671c5.283-0.978,9.369-2.543,9.369-2.543
	c-1.733,6.765,2.286,20.434,2.286,20.434c1.565,10.062,5.637,18.615,5.637,18.615c1.957,5.927,3.038,11.74,3.038,11.74
	c0.783,4.305-0.127,8.274-0.127,8.274c-1.23,4.192-2.726,13.361-2.726,13.361c-1.565,9-1.631,17.052-1.631,17.052
	c-0.392,7.435,2.139,24.15,2.139,24.15c0.111,3.466-0.893,4.641-0.893,4.641c-0.336,1.342-5.941,10.622-5.941,10.622
	c-2.74,5.366-7.009,14.424-7.009,14.424c-1.845,3.466-0.968,5.813-0.968,5.813c0.447,3.633,5.668,3.913,5.668,3.913
	c2.627,0.28,4.653-1.621,4.653-1.621c1.006,1.677,4.778,2.404,4.778,2.404c2.517,0.223,3.163-1.23,3.163-1.23
	c0.782,2.571,4.898,2.404,4.898,2.404c3.13-0.056,3.961-1.286,3.961-1.286c0.559,1.565,4.154,2.013,4.154,2.013
	c2.683,0,4.097-1.845,4.097-1.845c0.615,1.229,3.4,1.118,3.4,1.118c3.802-0.392,6.035-5.759,6.035-5.759
	c1.789-4.863,1.118-16.832,1.118-16.832c0-2.74-1.284-12.061-1.284-12.061c-0.505-6.148,2.123-14.136,2.123-14.136
	c1.621-4.64,8.219-24.85,8.219-24.85c4.863-15.431,8.776-35.68,8.776-35.68c0.839-7.099,0.951-11.059,0.951-11.059
	c0.392-13.25-0.783-31.376-0.783-31.376c-0.782-12.467-7.436-45.966-7.436-45.966C65.74,50.204,61.882,18.52,61.882,18.52
	c-1.453-14.536-0.503-32.39-0.503-32.39c0.112-13.026,1.398-23.488,1.398-23.488c0.614,3.578,4.808,7.928,4.808,7.928
	c3.02,3.634,7.771,6.553,7.771,6.553c1.789,1.565,6.093,5.699,6.093,5.699c0.112,3.018,1.622,10.06,1.622,10.06
	c1.006,4.248,4.79,11.789,4.79,11.789c3.504,8.187,10.807,19.307,10.807,19.307c0.896,1.23,0.671,3.606,0.671,3.606
	c-0.056,4.808-3.41,9.654-3.41,9.654c-3.131,4.138-4.473,9.211-4.473,9.211c-0.391,1.789,0,5.091,0,5.091
	c0.727,7.211-0.056,12.809-0.056,12.809c-0.503,3.521,1.062,4.068,1.062,4.068c1.565,0.559,4.138-0.38,4.138-0.38
	c3.298-0.949,3.912-6.959,3.912-6.959c0.168-2.292,0.392-7.172,0.392-7.172c0.112-3.241,3.521-3.515,3.521-3.515
	c2.796-0.168,4.193,1.983,4.193,1.983c1.845,3.466,2.069,8.188,2.069,8.188c0.111,6.708-1.678,10.893-1.678,10.893
	c-2.349,6.317-2.125,7.396-2.125,7.396c0.28,4.864,5.702,3.938,5.702,3.938c4.474,0,5.937-4.701,5.937-4.701
	c0.813,2.715,4.955,2.421,4.955,2.421c4.344-0.135,5.431-4.449,5.431-4.449c2.579,0.747,4.615-1.545,4.615-1.545
	c2.851-2.648,3.055-9.049,3.055-9.049c0.95,0.067,2.376-1.077,2.376-1.077c2.376-2.037,2.715-8.614,2.715-8.614
	c0.883-4.412,0-12.879,0-12.879c-0.339-3.055-5.091-15.216-5.091-15.216c-2.376-5.634-5.566-16.155-5.566-16.155
	c-1.018-4.48-2.646-12.102-2.646-12.102c-3.055-13.78-8.621-34.001-8.621-34.001c-3.327-10.182-11.404-28.339-11.404-28.339
	c-6.381-11.132-15.477-21.965-15.477-21.965c-16.224-16.088-28.646-21.892-28.646-21.892c-9.57-3.869-20.636-8.189-20.636-8.189
	c-4.141-1.697-4.276-5.397-4.276-5.397l0.067-3.93c-0.135-1.629,0.068-2.78,0.068-2.78c3.937-4.005,9.3-12.57,9.3-12.57
	c3.394-6.448,5.295-13.955,5.295-13.955c1.9,0.679,4.208,0.119,4.208,0.119c2.919-0.204,4.684-4.5,4.684-4.5
	c1.154-3.191,2.601-11.786,2.601-11.786c1.189-4.284,2.142-10.827,2.142-10.827c0.689-4.606-1.666-8.319-1.666-8.319
	c-1.922-3.607-5.474-3.96-5.474-3.96c2.618-11.187,0-22.349,0-22.349c-2.381-13.567-15.306-25.944-15.306-25.944
	C29.907-261.154,0-260.327,0-260.327s-29.911-0.827-45.23,19.167C-45.23-241.16-58.15-228.783-60.53-215.216z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-58.895-209.63c0,0-2.525,10.831,0,21.619
	c0,0-3.426,0.332-5.279,3.811c0,0-2.27,3.583-1.607,8.025c0,0,0.918,6.317,2.066,10.448c0,0,1.394,8.315,2.507,11.391
	c0,0,1.702,4.149,4.517,4.345c0,0,2.225,0.553,4.058-0.102c0,0,1.833,7.269,5.106,13.487c0,0,5.171,8.298,8.967,12.16
	c0,0,0.196,1.115,0.066,2.686l0.065,3.795c0,0-0.131,3.587-4.124,5.223c0,0-10.669,4.24-19.899,7.971
	c0,0-11.978,5.719-27.622,21.233c0,0-8.772,10.556-14.924,21.291c0,0-7.79,17.613-10.997,27.431c0,0-5.368,19.615-8.313,32.903
	c0,0-1.571,7.394-2.553,11.713c0,0-3.077,10.204-5.368,15.638c0,0-4.581,11.783-4.909,14.729c0,0-0.851,8.212,0,12.467
	c0,0,0.328,6.377,2.618,8.34c0,0,1.375,1.111,2.291,1.046c0,0,0.197,6.213,2.946,8.766c0,0,1.964,2.23,4.451,1.511
	c0,0,1.047,4.194,5.237,4.325c0,0,3.993,0.312,4.778-2.306c0,0,1.411,4.574,5.723,4.574c0,0,5.229,0.938,5.499-3.753
	c0,0,0.216-1.001-2.049-7.093c0,0-1.725-3.983-1.617-10.453c0,0,0.216-4.514,1.995-7.855c0,0,1.348-2.046,4.043-1.885
	c0,0,3.288,0.287,3.396,3.414c0,0,0.216,4.746,0.378,6.956c0,0,0.593,5.837,3.773,6.753c0,0,2.48,0.928,3.989,0.389
	c0,0,1.51-0.506,1.025-3.903c0,0-0.755-5.329-0.054-12.283c0,0,0.377-3.153,0-4.879c0,0-1.294-4.833-4.312-8.822
	c0,0-3.234-4.61-3.288-9.246c0,0-0.216-2.272,0.647-3.458c0,0,7.041-10.582,10.421-18.477c0,0,3.649-7.184,4.619-11.281
	c0,0,1.456-6.723,1.563-9.634c0,0,4.151-3.929,5.876-5.439c0,0,4.583-2.743,7.494-6.247c0,0,4.043-4.135,4.636-7.585
	c0,0,1.24,10.24,1.348,22.801c0,0,0.916,17.418-0.486,31.434c0,0-3.719,30.836-6.253,42.104c0,0-6.415,32.594-7.17,44.615
	c0,0-1.132,17.698-0.755,30.475c0,0,0.108,3.894,0.917,10.741c0,0,3.773,19.766,8.463,34.645c0,0,6.362,19.671,7.925,24.146
	c0,0,2.534,7.803,2.049,13.732c0,0-1.24,9.085-1.24,11.727c0,0-0.647,11.665,1.078,16.354c0,0,2.151,5.175,5.816,5.552
	c0,0,2.665,0.108,3.258-1.077c0,0,1.343,1.778,3.931,1.778c0,0,3.449-0.431,3.988-1.94c0,0,0.795,1.186,3.814,1.239
	c0,0,3.959,0.162,4.714-2.317c0,0,0.614,1.401,3.04,1.186c0,0,3.626-0.701,4.597-2.317c0,0,1.944,1.833,4.478,1.563
	c0,0,5.031-0.27,5.463-3.773c0,0,0.845-2.265-0.934-5.607c0,0-4.111-8.733-6.752-13.908c0,0-5.405-8.948-5.728-10.243
	c0,0-0.966-1.132-0.858-4.474c0,0,2.469-16.119,2.091-23.289c0,0-0.044-7.762-1.553-16.441c0,0-1.422-8.842-2.608-12.885
	c0,0-0.874-3.827-0.119-7.978c0,0,1.069-5.607,2.955-11.321c0,0,3.963-8.248,5.473-17.952c0,0,3.908-13.18,2.237-19.703
	c0,0,3.967,1.51,9.061,2.453c0,0,4.377,0.809,8.608,0.647c4.232,0.161,8.601-0.647,8.601-0.647c5.094-0.943,9.056-2.453,9.056-2.453
	c-1.671,6.523,2.255,19.703,2.255,19.703c1.509,9.704,5.482,17.952,5.482,17.952c1.887,5.714,2.958,11.321,2.958,11.321
	c0.754,4.15-0.104,7.978-0.104,7.978c-1.186,4.043-2.594,12.885-2.594,12.885c-1.51,8.68-1.531,16.441-1.531,16.441
	c-0.378,7.17,2.121,23.289,2.121,23.289c0.108,3.342-0.85,4.474-0.85,4.474c-0.323,1.295-5.7,10.243-5.7,10.243
	c-2.641,5.175-6.716,13.908-6.716,13.908c-1.779,3.343-0.92,5.607-0.92,5.607c0.431,3.504,5.482,3.773,5.482,3.773
	c2.534,0.27,4.499-1.563,4.499-1.563c0.972,1.616,4.622,2.317,4.622,2.317c2.426,0.216,3.059-1.186,3.059-1.186
	c0.755,2.479,4.736,2.317,4.736,2.317c3.02-0.054,3.83-1.239,3.83-1.239c0.539,1.51,4.018,1.94,4.018,1.94
	c2.588,0,3.963-1.778,3.963-1.778c0.593,1.186,3.288,1.077,3.288,1.077c3.666-0.377,5.842-5.552,5.842-5.552
	c1.725-4.689,1.078-16.312,1.078-16.312c0-2.642-1.24-11.686-1.24-11.686c-0.485-5.93,2.049-13.698,2.049-13.698
	c1.563-4.475,7.924-24.088,7.924-24.088c4.69-14.879,8.465-34.579,8.465-34.579c0.809-6.847,0.915-10.718,0.915-10.718
	c0.378-12.775-0.754-30.403-0.754-30.403c-0.755-12.021-7.17-44.548-7.17-44.548c-2.534-11.267-6.254-42.029-6.254-42.029
	c-1.4-14.017-0.484-31.388-0.484-31.388c0.107-12.561,1.348-22.761,1.348-22.761c0.593,3.45,4.636,7.597,4.636,7.597
	c2.911,3.504,7.493,6.266,7.493,6.266c1.726,1.51,5.876,5.453,5.876,5.453c0.108,2.911,1.564,9.648,1.564,9.648
	c0.97,4.097,4.618,11.302,4.618,11.302c3.38,7.894,10.421,18.5,10.421,18.5c0.863,1.186,0.647,3.458,0.647,3.458
	c-0.054,4.636-3.288,9.256-3.288,9.256c-3.019,3.989-4.312,8.828-4.312,8.828c-0.377,1.725,0,4.882,0,4.882
	c0.7,6.954-0.055,12.284-0.055,12.284c-0.484,3.396,1.024,3.899,1.024,3.899c1.51,0.539,3.99-0.385,3.99-0.385
	c3.18-0.917,3.772-6.751,3.772-6.751c0.162-2.21,0.378-6.948,0.378-6.948c0.107-3.127,3.396-3.416,3.396-3.416
	c2.694-0.162,4.043,1.888,4.043,1.888c1.778,3.343,1.995,7.853,1.995,7.853c0.106,6.469-1.618,10.444-1.618,10.444
	c-2.265,6.092-2.048,7.091-2.048,7.091c0.269,4.689,5.499,3.758,5.499,3.758c4.312,0,5.723-4.572,5.723-4.572
	c0.785,2.618,4.778,2.306,4.778,2.306c4.188-0.132,5.236-4.326,5.236-4.326c2.487,0.72,4.451-1.515,4.451-1.515
	c2.749-2.553,2.945-8.771,2.945-8.771c0.917,0.064,2.291-1.051,2.291-1.051c2.291-1.964,2.619-8.352,2.619-8.352
	c0.851-4.254,0-12.48,0-12.48c-0.328-2.946-4.91-14.75-4.91-14.75c-2.291-5.434-5.367-15.662-5.367-15.662
	c-0.982-4.321-2.553-11.729-2.553-11.729c-2.945-13.288-8.313-32.959-8.313-32.959c-3.207-9.819-10.997-27.478-10.997-27.478
	c-6.152-10.735-14.924-21.313-14.924-21.313C74.43-98.587,62.45-104.368,62.45-104.368c-9.229-3.73-19.897-8.01-19.897-8.01
	c-3.993-1.636-4.124-5.239-4.124-5.239l0.064-3.808c-0.131-1.571,0.066-2.694,0.066-2.694c3.796-3.862,8.967-12.198,8.967-12.198
	c3.273-6.219,5.106-13.532,5.106-13.532c1.833,0.655,4.058,0.094,4.058,0.094c2.815-0.196,4.517-4.373,4.517-4.373
	c1.113-3.077,2.508-11.424,2.508-11.424c1.146-4.132,2.064-10.497,2.064-10.497c0.664-4.442-1.605-8.065-1.605-8.065
	c-1.854-3.479-5.279-3.856-5.279-3.856c2.524-10.787,0-21.661,0-21.661c-2.295-13.083-14.959-25.018-14.959-25.018
	C29.162-253.927,0-253.13,0-253.13s-29.167-0.797-43.94,18.482C-43.94-234.648-56.6-222.713-58.895-209.63z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-57.258-204.045c0,0-2.432,10.54,0,20.928
	c0,0-3.299,0.354-5.083,3.704c0,0-2.188,3.493-1.548,7.77c0,0,0.884,6.136,1.989,10.115c0,0,1.343,8.065,2.414,11.028
	c0,0,1.64,4.027,4.35,4.216c0,0,2.143,0.553,3.907-0.077c0,0,1.766,7.072,4.917,13.06c0,0,4.979,8.069,8.636,11.787
	c0,0,0.188,1.086,0.062,2.599l0.063,3.673c0,0-0.126,3.489-3.972,5.063c0,0-10.273,4.197-19.161,7.79c0,0-11.535,5.692-26.601,20.63
	c0,0-8.446,10.3-14.371,20.638c0,0-7.501,17.112-10.589,26.567c0,0-5.169,19.063-8.006,31.858c0,0-1.512,7.18-2.458,11.34
	c0,0-2.962,9.91-5.168,15.141c0,0-4.413,11.428-4.728,14.265c0,0-0.819,7.971,0,12.068c0,0,0.314,6.186,2.521,8.076
	c0,0,1.324,1.081,2.207,1.019c0,0,0.189,6.03,2.836,8.488c0,0,1.891,2.174,4.286,1.48c0,0,1.009,4.076,5.043,4.202
	c0,0,3.845,0.331,4.601-2.19c0,0,1.359,4.445,5.513,4.445c0,0,5.034,0.944,5.295-3.572c0,0,0.207-0.922-1.974-6.788
	c0,0-1.66-3.775-1.557-10.005c0,0,0.207-4.301,1.92-7.52c0,0,1.298-1.944,3.895-1.789c0,0,3.166,0.304,3.27,3.313
	c0,0,0.208,4.606,0.364,6.735c0,0,0.57,5.661,3.633,6.544c0,0,2.388,0.913,3.842,0.394c0,0,1.453-0.465,0.986-3.734
	c0,0-0.728-5.062-0.052-11.758c0,0,0.363-3.011,0-4.672c0,0-1.246-4.597-4.153-8.438c0,0-3.114-4.383-3.166-8.848
	c0,0-0.208-2.168,0.623-3.311c0,0,6.781-10.065,10.035-17.668c0,0,3.514-6.847,4.447-10.792c0,0,1.402-6.418,1.507-9.222
	c0,0,3.997-3.738,5.657-5.191c0,0,4.412-2.587,7.217-5.961c0,0,3.893-3.93,4.464-7.252c0,0,1.193,9.98,1.298,22.075
	c0,0,0.882,16.938-0.467,30.436c0,0-3.582,29.919-6.022,40.77c0,0-6.178,31.623-6.904,43.2c0,0-1.091,17.203-0.727,29.507
	c0,0,0.104,3.806,0.882,10.398c0,0,3.634,19.223,8.151,33.551c0,0,6.125,19.076,7.631,23.386c0,0,2.438,7.588,1.972,13.298
	c0,0-1.193,8.811-1.193,11.354c0,0-0.623,11.32,1.037,15.836c0,0,2.092,4.984,5.621,5.348c0,0,2.573,0.104,3.145-1.038
	c0,0,1.303,1.713,3.795,1.713c0,0,3.332-0.415,3.851-1.869c0,0,0.774,1.143,3.682,1.194c0,0,3.823,0.156,4.551-2.232
	c0,0,0.599,1.35,2.935,1.143c0,0,3.503-0.676,4.438-2.232c0,0,1.882,1.765,4.322,1.505c0,0,4.861-0.259,5.276-3.634
	c0,0,0.828-2.18-0.886-5.399c0,0-3.919-8.408-6.463-13.393c0,0-5.176-8.617-5.487-9.863c0,0-0.92-1.09-0.815-4.309
	c0,0,2.436-15.522,2.072-22.426c0,0-0.001-7.476-1.455-15.833c0,0-1.336-8.515-2.478-12.407c0,0-0.823-3.687-0.096-7.683
	c0,0,1.058-5.399,2.875-10.901c0,0,3.863-7.943,5.316-17.287c0,0,3.814-12.693,2.204-18.974c0,0,3.843,1.453,8.749,2.361
	c0,0,4.236,0.779,8.311,0.623c4.075,0.156,8.303-0.623,8.303-0.623c4.904-0.908,8.742-2.361,8.742-2.361
	c-1.608,6.28,2.223,18.974,2.223,18.974c1.454,9.344,5.328,17.287,5.328,17.287c1.816,5.502,2.877,10.901,2.877,10.901
	c0.727,3.996-0.079,7.683-0.079,7.683c-1.143,3.893-2.464,12.407-2.464,12.407c-1.454,8.357-1.433,15.833-1.433,15.833
	c-0.362,6.903,2.105,22.426,2.105,22.426c0.104,3.219-0.808,4.309-0.808,4.309c-0.312,1.246-5.458,9.863-5.458,9.863
	c-2.543,4.984-6.426,13.393-6.426,13.393c-1.713,3.22-0.87,5.399-0.87,5.399c0.415,3.375,5.299,3.634,5.299,3.634
	c2.439,0.26,4.345-1.505,4.345-1.505c0.934,1.557,4.464,2.232,4.464,2.232c2.336,0.207,2.953-1.143,2.953-1.143
	c0.727,2.389,4.576,2.232,4.576,2.232c2.906-0.052,3.697-1.194,3.697-1.194c0.521,1.454,3.881,1.869,3.881,1.869
	c2.492,0,3.829-1.713,3.829-1.713c0.571,1.142,3.178,1.038,3.178,1.038c3.529-0.363,5.646-5.348,5.646-5.348
	c1.661-4.516,1.038-15.789,1.038-15.789c0-2.545-1.194-11.312-1.194-11.312c-0.467-5.711,1.974-13.262,1.974-13.262
	c1.505-4.31,7.631-23.324,7.631-23.324c4.516-14.328,8.15-33.481,8.15-33.481c0.777-6.593,0.882-10.373,0.882-10.373
	c0.363-12.304-0.727-29.434-0.727-29.434c-0.727-11.576-6.904-43.128-6.904-43.128c-2.44-10.85-6.022-40.691-6.022-40.691
	c-1.349-13.497-0.467-30.387-0.467-30.387c0.104-12.096,1.298-22.034,1.298-22.034c0.571,3.322,4.465,7.265,4.465,7.265
	c2.803,3.374,7.215,5.981,7.215,5.981c1.661,1.453,5.659,5.207,5.659,5.207c0.104,2.803,1.505,9.235,1.505,9.235
	c0.936,3.945,4.448,10.814,4.448,10.814c3.255,7.603,10.036,17.693,10.036,17.693c0.83,1.142,0.622,3.312,0.622,3.312
	c-0.051,4.464-3.166,8.856-3.166,8.856c-2.907,3.841-4.153,8.445-4.153,8.445c-0.363,1.661,0,4.673,0,4.673
	c0.675,6.697-0.052,11.758-0.052,11.758c-0.467,3.271,0.986,3.733,0.986,3.733c1.453,0.519,3.842-0.393,3.842-0.393
	c3.062-0.882,3.634-6.541,3.634-6.541c0.155-2.129,0.363-6.726,0.363-6.726c0.104-3.01,3.27-3.316,3.27-3.316
	c2.596-0.154,3.895,1.794,3.895,1.794c1.713,3.219,1.921,7.515,1.921,7.515c0.103,6.229-1.559,9.996-1.559,9.996
	c-2.18,5.865-1.972,6.785-1.972,6.785c0.259,4.517,5.295,3.578,5.295,3.578c4.153,0,5.511-4.442,5.511-4.442
	c0.756,2.521,4.602,2.188,4.602,2.188c4.034-0.126,5.043-4.202,5.043-4.202c2.395,0.693,4.286-1.483,4.286-1.483
	c2.647-2.458,2.837-8.496,2.837-8.496c0.882,0.062,2.206-1.024,2.206-1.024c2.206-1.891,2.521-8.087,2.521-8.087
	c0.819-4.097,0-12.084,0-12.084c-0.314-2.836-4.727-14.285-4.727-14.285c-2.207-5.23-5.169-15.168-5.169-15.168
	c-0.946-4.16-2.458-11.355-2.458-11.355c-2.837-12.796-8.005-31.918-8.005-31.918c-3.09-9.455-10.591-26.616-10.591-26.616
	c-5.925-10.337-14.371-20.66-14.371-20.66c-15.064-14.939-26.6-20.695-26.6-20.695c-8.888-3.592-19.162-7.831-19.162-7.831
	c-3.845-1.575-3.971-5.081-3.971-5.081l0.062-3.686c-0.126-1.513,0.063-2.607,0.063-2.607c3.656-3.719,8.636-11.828,8.636-11.828
	c3.151-5.988,4.916-13.107,4.916-13.107c1.766,0.63,3.908,0.068,3.908,0.068c2.711-0.189,4.349-4.246,4.349-4.246
	c1.072-2.963,2.415-11.063,2.415-11.063c1.105-3.978,1.989-10.166,1.989-10.166c0.639-4.277-1.547-7.812-1.547-7.812
	c-1.785-3.35-5.084-3.751-5.084-3.751c2.431-10.388,0-20.973,0-20.973c-2.21-12.598-14.613-24.091-14.613-24.091
	C28.419-246.702,0-245.934,0-245.934s-28.424-0.768-42.65,17.798C-42.65-228.136-55.048-216.643-57.258-204.045z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-55.622-198.459c0,0-2.338,10.25,0,20.238
	c0,0-3.172,0.376-4.888,3.597c0,0-2.102,3.401-1.488,7.514c0,0,0.85,5.956,1.913,9.781c0,0,1.291,7.816,2.321,10.665
	c0,0,1.576,3.906,4.182,4.088c0,0,2.061,0.553,3.758-0.053c0,0,1.697,6.877,4.728,12.635c0,0,4.788,7.838,8.303,11.414
	c0,0,0.182,1.056,0.06,2.511l0.061,3.55c0,0-0.121,3.391-3.818,4.907c0,0-9.879,4.153-18.425,7.608c0,0-11.091,5.664-25.577,20.028
	c0,0-8.121,10.044-13.818,19.983c0,0-7.213,16.613-10.183,25.704c0,0-4.969,18.51-7.697,30.813c0,0-1.454,6.966-2.364,10.966
	c0,0-2.848,9.616-4.969,14.646c0,0-4.243,11.069-4.546,13.797c0,0-0.788,7.731,0,11.671c0,0,0.303,5.993,2.424,7.812
	c0,0,1.273,1.052,2.122,0.991c0,0,0.181,5.849,2.727,8.212c0,0,1.818,2.116,4.121,1.449c0,0,0.97,3.957,4.849,4.078
	c0,0,3.697,0.351,4.424-2.074c0,0,1.307,4.316,5.3,4.316c0,0,4.842,0.951,5.091-3.392c0,0,0.2-0.842-1.897-6.483
	c0,0-1.597-3.567-1.497-9.558c0,0,0.2-4.087,1.847-7.182c0,0,1.248-1.845,3.743-1.694c0,0,3.045,0.319,3.145,3.214
	c0,0,0.2,4.465,0.349,6.512c0,0,0.55,5.487,3.495,6.335c0,0,2.296,0.9,3.693,0.401c0,0,1.398-0.423,0.949-3.567
	c0,0-0.699-4.793-0.05-11.232c0,0,0.349-2.865,0-4.463c0,0-1.198-4.361-3.993-8.056c0,0-2.995-4.154-3.045-8.446
	c0,0-0.2-2.065,0.599-3.163c0,0,6.52-9.551,9.649-16.86c0,0,3.379-6.51,4.277-10.304c0,0,1.348-6.113,1.448-8.808
	c0,0,3.843-3.547,5.44-4.945c0,0,4.243-2.429,6.939-5.673c0,0,3.743-3.726,4.292-6.92c0,0,1.148,9.72,1.248,21.35
	c0,0,0.849,16.459-0.449,29.437c0,0-3.444,29.001-5.79,39.435c0,0-5.94,30.654-6.639,41.785c0,0-1.048,16.71-0.699,28.54
	c0,0,0.1,3.718,0.849,10.057c0,0,3.494,18.679,7.836,32.455c0,0,5.89,18.483,7.338,22.626c0,0,2.346,7.372,1.896,12.863
	c0,0-1.148,8.537-1.148,10.982c0,0-0.599,10.975,0.998,15.316c0,0,2.03,4.792,5.425,5.142c0,0,2.481,0.1,3.03-0.999
	c0,0,1.263,1.648,3.659,1.648c0,0,3.214-0.4,3.713-1.797c0,0,0.753,1.098,3.548,1.147c0,0,3.69,0.149,4.389-2.146
	c0,0,0.583,1.298,2.83,1.098c0,0,3.38-0.649,4.278-2.146c0,0,1.821,1.696,4.167,1.447c0,0,4.692-0.25,5.092-3.494
	c0,0,0.809-2.097-0.838-5.191c0,0-3.729-8.086-6.175-12.878c0,0-4.947-8.286-5.246-9.484c0,0-0.874-1.048-0.774-4.143
	c0,0,2.404-14.924,2.055-21.563c0,0,0.041-7.188-1.357-15.224c0,0-1.25-8.187-2.348-11.93c0,0-0.772-3.545-0.073-7.389
	c0,0,1.048-5.19,2.795-10.481c0,0,3.764-7.638,5.162-16.622c0,0,3.718-12.204,2.171-18.244c0,0,3.719,1.397,8.436,2.271
	c0,0,4.095,0.749,8.013,0.6c3.919,0.149,8.004-0.6,8.004-0.6c4.717-0.873,8.43-2.271,8.43-2.271
	c-1.547,6.04,2.191,18.244,2.191,18.244c1.397,8.984,5.173,16.622,5.173,16.622c1.747,5.291,2.797,10.481,2.797,10.481
	c0.699,3.844-0.056,7.389-0.056,7.389c-1.098,3.743-2.334,11.93-2.334,11.93c-1.396,8.036-1.332,15.224-1.332,15.224
	c-0.349,6.64,2.089,21.563,2.089,21.563c0.1,3.095-0.766,4.143-0.766,4.143c-0.299,1.198-5.215,9.484-5.215,9.484
	c-2.446,4.792-6.135,12.878-6.135,12.878c-1.647,3.095-0.822,5.191-0.822,5.191c0.399,3.244,5.114,3.494,5.114,3.494
	c2.346,0.249,4.189-1.447,4.189-1.447c0.899,1.496,4.308,2.146,4.308,2.146c2.246,0.2,2.848-1.098,2.848-1.098
	c0.699,2.296,4.415,2.146,4.415,2.146c2.795-0.05,3.567-1.147,3.567-1.147c0.499,1.396,3.745,1.797,3.745,1.797
	c2.396,0,3.693-1.648,3.693-1.648c0.549,1.099,3.065,0.999,3.065,0.999c3.394-0.35,5.452-5.142,5.452-5.142
	c1.598-4.342,0.999-15.269,0.999-15.269c0-2.445-1.148-10.938-1.148-10.938c-0.45-5.49,1.896-12.825,1.896-12.825
	c1.447-4.143,7.338-22.561,7.338-22.561c4.343-13.776,7.837-32.381,7.837-32.381c0.748-6.341,0.848-10.031,0.848-10.031
	c0.35-11.83-0.699-28.461-0.699-28.461c-0.697-11.133-6.638-41.711-6.638-41.711c-2.346-10.433-5.79-39.353-5.79-39.353
	c-1.298-12.978-0.45-29.385-0.45-29.385c0.101-11.631,1.248-21.307,1.248-21.307c0.549,3.195,4.293,6.934,4.293,6.934
	c2.695,3.244,6.938,5.695,6.938,5.695c1.597,1.397,5.44,4.96,5.44,4.96c0.101,2.696,1.447,8.823,1.447,8.823
	c0.899,3.794,4.278,10.327,4.278,10.327c3.129,7.311,9.648,16.888,9.648,16.888c0.798,1.098,0.6,3.162,0.6,3.162
	c-0.051,4.294-3.045,8.459-3.045,8.459c-2.795,3.693-3.993,8.062-3.993,8.062c-0.351,1.597,0,4.465,0,4.465
	c0.648,6.439-0.05,11.233-0.05,11.233c-0.449,3.145,0.947,3.564,0.947,3.564c1.398,0.499,3.694-0.397,3.694-0.397
	c2.945-0.849,3.494-6.333,3.494-6.333c0.149-2.046,0.349-6.502,0.349-6.502c0.101-2.896,3.146-3.216,3.146-3.216
	c2.496-0.15,3.744,1.697,3.744,1.697c1.646,3.096,1.847,7.178,1.847,7.178c0.099,5.989-1.498,9.548-1.498,9.548
	c-2.096,5.641-1.897,6.48-1.897,6.48c0.25,4.343,5.093,3.397,5.093,3.397c3.992,0,5.299-4.313,5.299-4.313
	c0.727,2.424,4.425,2.073,4.425,2.073c3.878-0.121,4.848-4.079,4.848-4.079c2.304,0.667,4.121-1.452,4.121-1.452
	c2.546-2.364,2.729-8.22,2.729-8.22c0.848,0.061,2.121-0.998,2.121-0.998c2.12-1.818,2.424-7.824,2.424-7.824
	c0.788-3.938,0-11.686,0-11.686c-0.304-2.728-4.545-13.819-4.545-13.819c-2.121-5.031-4.971-14.675-4.971-14.675
	c-0.908-4-2.363-10.984-2.363-10.984c-2.728-12.303-7.697-30.875-7.697-30.875c-2.97-9.092-10.182-25.755-10.182-25.755
	c-5.697-9.94-13.819-20.008-13.819-20.008C70.006-93.825,58.915-99.555,58.915-99.555c-8.546-3.455-18.425-7.652-18.425-7.652
	c-3.697-1.515-3.819-4.924-3.819-4.924l0.062-3.565c-0.121-1.454,0.061-2.52,0.061-2.52c3.516-3.576,8.303-11.457,8.303-11.457
	c3.03-5.758,4.728-12.683,4.728-12.683c1.697,0.606,3.758,0.043,3.758,0.043c2.606-0.181,4.182-4.119,4.182-4.119
	c1.03-2.849,2.321-10.701,2.321-10.701c1.063-3.826,1.913-9.836,1.913-9.836c0.615-4.112-1.488-7.559-1.488-7.559
	c-1.716-3.22-4.888-3.646-4.888-3.646c2.338-9.988,0-20.285,0-20.285c-2.125-12.114-14.267-23.165-14.267-23.165
	C27.675-239.476,0-238.737,0-238.737s-27.681-0.738-41.36,17.113C-41.36-221.625-53.497-210.573-55.622-198.459z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-53.985-192.874c0,0-2.244,9.959,0,19.548
	c0,0-3.045,0.398-4.692,3.49c0,0-2.019,3.31-1.429,7.258c0,0,0.816,5.776,1.837,9.448c0,0,1.239,7.567,2.228,10.301
	c0,0,1.513,3.786,4.015,3.96c0,0,1.978,0.554,3.607-0.028c0,0,1.629,6.68,4.538,12.208c0,0,4.597,7.608,7.972,11.041
	c0,0,0.174,1.028,0.058,2.424l0.058,3.428c0,0-0.116,3.293-3.666,4.748c0,0-9.484,4.11-17.687,7.427c0,0-10.648,5.636-24.554,19.425
	c0,0-7.797,9.788-13.266,19.33c0,0-6.924,16.112-9.775,24.84c0,0-4.771,17.957-7.389,29.768c0,0-1.397,6.753-2.269,10.593
	c0,0-2.735,9.321-4.771,14.15c0,0-4.073,10.712-4.364,13.331c0,0-0.757,7.49,0,11.272c0,0,0.291,5.803,2.327,7.548
	c0,0,1.222,1.022,2.037,0.965c0,0,0.174,5.666,2.618,7.936c0,0,1.745,2.058,3.956,1.418c0,0,0.931,3.839,4.655,3.954
	c0,0,3.549,0.369,4.248-1.957c0,0,1.253,4.187,5.087,4.187c0,0,4.648,0.958,4.888-3.211c0,0,0.191-0.763-1.821-6.178
	c0,0-1.534-3.36-1.438-9.11c0,0,0.192-3.874,1.773-6.845c0,0,1.198-1.743,3.594-1.6c0,0,2.923,0.335,3.019,3.114
	c0,0,0.192,4.325,0.335,6.289c0,0,0.527,5.312,3.355,6.127c0,0,2.204,0.886,3.546,0.407c0,0,1.341-0.381,0.91-3.4
	c0,0-0.671-4.524-0.048-10.706c0,0,0.336-2.722,0-4.256c0,0-1.15-4.125-3.833-7.671c0,0-2.875-3.927-2.923-8.048
	c0,0-0.192-1.961,0.575-3.015c0,0,6.259-9.035,9.263-16.054c0,0,3.244-6.172,4.106-9.813c0,0,1.294-5.808,1.39-8.395
	c0,0,3.689-3.356,5.223-4.698c0,0,4.073-2.272,6.66-5.387c0,0,3.594-3.521,4.122-6.588c0,0,1.102,9.461,1.197,20.626
	c0,0,0.815,15.979-0.431,28.438c0,0-3.306,28.085-5.558,38.1c0,0-5.703,29.685-6.374,40.371c0,0-1.006,16.215-0.67,27.572
	c0,0,0.095,3.63,0.814,9.715c0,0,3.355,18.135,7.523,31.359c0,0,5.655,17.89,7.044,21.866c0,0,2.253,7.157,1.821,12.429
	c0,0-1.102,8.263-1.102,10.61c0,0-0.575,10.629,0.959,14.798c0,0,1.97,4.601,5.228,4.936c0,0,2.39,0.096,2.917-0.958
	c0,0,1.223,1.581,3.523,1.581c0,0,3.096-0.383,3.575-1.726c0,0,0.733,1.055,3.416,1.103c0,0,3.556,0.144,4.227-2.061
	c0,0,0.567,1.246,2.723,1.055c0,0,3.258-0.623,4.12-2.062c0,0,1.759,1.63,4.012,1.391c0,0,4.521-0.239,4.905-3.354
	c0,0,0.792-2.013-0.79-4.984c0,0-3.537-7.763-5.885-12.362c0,0-4.719-7.954-5.006-9.104c0,0-0.827-1.007-0.731-3.978
	c0,0,2.371-14.327,2.035-20.7c0,0,0.084-6.901-1.258-14.616c0,0-1.164-7.857-2.219-11.452c0,0-0.72-3.401-0.049-7.092
	c0,0,1.037-4.984,2.714-10.062c0,0,3.665-7.332,5.007-15.957c0,0,3.624-11.717,2.138-17.515c0,0,3.595,1.341,8.123,2.181
	c0,0,3.954,0.719,7.715,0.574c3.762,0.145,7.705-0.574,7.705-0.574c4.528-0.84,8.117-2.181,8.117-2.181
	c-1.484,5.798,2.158,17.515,2.158,17.515c1.342,8.625,5.02,15.957,5.02,15.957c1.677,5.078,2.716,10.062,2.716,10.062
	c0.671,3.69-0.03,7.092-0.03,7.092c-1.054,3.595-2.204,11.452-2.204,11.452c-1.341,7.715-1.231,14.616-1.231,14.616
	c-0.336,6.373,2.07,20.7,2.07,20.7c0.096,2.971-0.722,3.978-0.722,3.978c-0.288,1.15-4.974,9.104-4.974,9.104
	c-2.348,4.6-5.844,12.362-5.844,12.362c-1.582,2.972-0.773,4.984-0.773,4.984c0.384,3.115,4.93,3.354,4.93,3.354
	c2.252,0.239,4.036-1.391,4.036-1.391c0.862,1.438,4.148,2.062,4.148,2.062c2.156,0.191,2.744-1.055,2.744-1.055
	c0.671,2.204,4.253,2.061,4.253,2.061c2.685-0.048,3.437-1.103,3.437-1.103c0.479,1.343,3.607,1.726,3.607,1.726
	c2.301,0,3.561-1.581,3.561-1.581c0.528,1.054,2.953,0.958,2.953,0.958c3.259-0.335,5.258-4.936,5.258-4.936
	c1.533-4.169,0.958-14.748,0.958-14.748c0-2.348-1.102-10.562-1.102-10.562c-0.432-5.271,1.82-12.388,1.82-12.388
	c1.391-3.978,7.044-21.799,7.044-21.799c4.169-13.225,7.524-31.282,7.524-31.282c0.718-6.085,0.813-9.688,0.813-9.688
	c0.336-11.356-0.671-27.49-0.671-27.49c-0.671-10.686-6.373-40.292-6.373-40.292c-2.252-10.015-5.558-38.013-5.558-38.013
	C53.898,7.265,54.713-8.66,54.713-8.66c0.096-11.166,1.197-20.58,1.197-20.58c0.527,3.067,4.121,6.602,4.121,6.602
	c2.588,3.115,6.661,5.409,6.661,5.409c1.533,1.342,5.223,4.715,5.223,4.715c0.097,2.587,1.391,8.41,1.391,8.41
	c0.861,3.642,4.105,9.84,4.105,9.84c3.004,7.018,9.264,16.08,9.264,16.08c0.767,1.055,0.574,3.017,0.574,3.017
	c-0.048,4.121-2.923,8.058-2.923,8.058c-2.683,3.546-3.833,7.679-3.833,7.679c-0.336,1.533,0,4.259,0,4.259
	c0.623,6.181-0.048,10.707-0.048,10.707c-0.432,3.019,0.91,3.396,0.91,3.396c1.342,0.479,3.546-0.404,3.546-0.404
	c2.827-0.814,3.354-6.124,3.354-6.124c0.144-1.965,0.336-6.278,0.336-6.278c0.096-2.78,3.019-3.117,3.019-3.117
	c2.396-0.145,3.594,1.604,3.594,1.604c1.581,2.972,1.773,6.839,1.773,6.839c0.095,5.75-1.438,9.101-1.438,9.101
	c-2.013,5.415-1.82,6.176-1.82,6.176c0.239,4.169,4.888,3.217,4.888,3.217c3.833,0,5.087-4.184,5.087-4.184
	c0.698,2.327,4.248,1.957,4.248,1.957c3.723-0.116,4.654-3.956,4.654-3.956c2.211,0.64,3.957-1.421,3.957-1.421
	c2.443-2.27,2.618-7.943,2.618-7.943c0.814,0.059,2.036-0.972,2.036-0.972c2.036-1.745,2.327-7.561,2.327-7.561
	c0.756-3.781,0-11.289,0-11.289c-0.291-2.617-4.363-13.354-4.363-13.354c-2.036-4.829-4.771-14.181-4.771-14.181
	c-0.873-3.841-2.269-10.611-2.269-10.611c-2.618-11.811-7.39-29.834-7.39-29.834c-2.852-8.727-9.774-24.893-9.774-24.893
	C89.496-67.84,81.7-77.654,81.7-77.654C67.794-91.443,57.146-97.15,57.146-97.15c-8.204-3.317-17.688-7.473-17.688-7.473
	c-3.549-1.454-3.664-4.766-3.664-4.766l0.058-3.443c-0.116-1.396,0.058-2.434,0.058-2.434c3.375-3.432,7.972-11.086,7.972-11.086
	c2.908-5.527,4.538-12.259,4.538-12.259c1.63,0.582,3.607,0.019,3.607,0.019c2.502-0.175,4.015-3.993,4.015-3.993
	c0.989-2.735,2.229-10.34,2.229-10.34c1.02-3.672,1.836-9.505,1.836-9.505c0.59-3.948-1.428-7.305-1.428-7.305
	c-1.647-3.092-4.692-3.542-4.692-3.542c2.244-9.589,0-19.597,0-19.597c-2.04-11.629-13.922-22.238-13.922-22.238
	C26.932-232.249,0-231.541,0-231.541s-26.937-0.708-40.069,16.429C-40.069-215.112-51.945-204.503-53.985-192.874z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-52.349-187.289c0,0-2.151,9.668,0,18.857
	c0,0-2.918,0.42-4.497,3.383c0,0-1.934,3.219-1.369,7.003c0,0,0.783,5.596,1.76,9.115c0,0,1.188,7.317,2.136,9.938
	c0,0,1.449,3.664,3.847,3.831c0,0,1.896,0.554,3.457-0.003c0,0,1.561,6.484,4.349,11.781c0,0,4.405,7.378,7.64,10.668
	c0,0,0.167,0.999,0.055,2.337l0.056,3.305c0,0-0.111,3.196-3.513,4.59c0,0-9.089,4.067-16.951,7.245c0,0-10.204,5.609-23.53,18.824
	c0,0-7.472,9.532-12.713,18.676c0,0-6.636,15.612-9.368,23.976c0,0-4.572,17.404-7.081,28.723c0,0-1.339,6.539-2.175,10.219
	c0,0-2.621,9.029-4.572,13.657c0,0-3.903,10.354-4.182,12.864c0,0-0.725,7.249,0,10.873c0,0,0.279,5.612,2.23,7.285
	c0,0,1.171,0.994,1.952,0.938c0,0,0.167,5.484,2.509,7.659c0,0,1.673,1.999,3.792,1.386c0,0,0.892,3.721,4.46,3.831
	c0,0,3.402,0.39,4.071-1.841c0,0,1.201,4.057,4.875,4.057c0,0,4.455,0.966,4.684-3.029c0,0,0.184-0.685-1.745-5.873
	c0,0-1.469-3.152-1.378-8.663c0,0,0.184-3.66,1.7-6.508c0,0,1.148-1.643,3.444-1.504c0,0,2.801,0.351,2.893,3.015
	c0,0,0.184,4.184,0.321,6.067c0,0,0.505,5.137,3.215,5.917c0,0,2.112,0.873,3.398,0.414c0,0,1.286-0.34,0.873-3.232
	c0,0-0.643-4.257-0.046-10.181c0,0,0.321-2.578,0-4.048c0,0-1.102-3.89-3.674-7.287c0,0-2.755-3.699-2.801-7.649
	c0,0-0.184-1.857,0.551-2.868c0,0,5.998-8.519,8.877-15.244c0,0,3.108-5.834,3.935-9.325c0,0,1.24-5.503,1.332-7.983
	c0,0,3.536-3.165,5.005-4.45c0,0,3.904-2.116,6.383-5.101c0,0,3.445-3.316,3.95-6.255c0,0,1.056,9.201,1.148,19.901
	c0,0,0.78,15.499-0.414,27.438c0,0-3.168,27.167-5.326,36.765c0,0-5.465,28.715-6.108,38.956c0,0-0.964,15.721-0.643,26.605
	c0,0,0.092,3.541,0.781,9.374c0,0,3.214,17.59,7.209,30.264c0,0,5.419,17.295,6.751,21.105c0,0,2.158,6.942,1.745,11.993
	c0,0-1.056,7.989-1.056,10.239c0,0-0.551,10.284,0.918,14.279c0,0,1.91,4.407,5.033,4.729c0,0,2.298,0.092,2.804-0.919
	c0,0,1.182,1.516,3.386,1.516c0,0,2.978-0.366,3.437-1.652c0,0,0.712,1.01,3.284,1.056c0,0,3.421,0.138,4.064-1.975
	c0,0,0.552,1.193,2.618,1.011c0,0,3.134-0.597,3.961-1.975c0,0,1.698,1.561,3.856,1.332c0,0,4.352-0.23,4.72-3.216
	c0,0,0.773-1.929-0.742-4.775c0,0-3.347-7.439-5.597-11.849c0,0-4.49-7.622-4.765-8.725c0,0-0.781-0.964-0.689-3.811
	c0,0,2.339-13.731,2.017-19.84c0,0,0.126-6.612-1.16-14.006c0,0-1.079-7.53-2.089-10.975c0,0-0.669-3.261-0.026-6.797
	c0,0,1.027-4.776,2.634-9.645c0,0,3.566-7.025,4.851-15.292c0,0,3.53-11.228,2.106-16.783c0,0,3.471,1.285,7.81,2.089
	c0,0,3.813,0.688,7.418,0.551c3.604,0.138,7.405-0.551,7.405-0.551c4.341-0.804,7.806-2.089,7.806-2.089
	c-1.424,5.556,2.126,16.783,2.126,16.783c1.286,8.267,4.863,15.292,4.863,15.292c1.607,4.868,2.637,9.645,2.637,9.645
	c0.643,3.536-0.006,6.797-0.006,6.797c-1.012,3.444-2.073,10.975-2.073,10.975c-1.286,7.394-1.133,14.006-1.133,14.006
	c-0.322,6.108,2.054,19.84,2.054,19.84c0.092,2.847-0.68,3.811-0.68,3.811c-0.275,1.103-4.73,8.725-4.73,8.725
	c-2.25,4.409-5.554,11.849-5.554,11.849c-1.516,2.847-0.725,4.775-0.725,4.775c0.367,2.985,4.745,3.216,4.745,3.216
	c2.158,0.229,3.881-1.332,3.881-1.332c0.827,1.378,3.992,1.975,3.992,1.975c2.066,0.183,2.64-1.011,2.64-1.011
	c0.643,2.112,4.093,1.975,4.093,1.975c2.571-0.046,3.303-1.056,3.303-1.056c0.459,1.286,3.472,1.652,3.472,1.652
	c2.205,0,3.428-1.516,3.428-1.516c0.505,1.011,2.841,0.919,2.841,0.919c3.122-0.322,5.062-4.729,5.062-4.729
	c1.47-3.995,0.918-14.227,0.918-14.227c0-2.25-1.056-10.188-1.056-10.188c-0.413-5.052,1.745-11.951,1.745-11.951
	c1.332-3.812,6.751-21.035,6.751-21.035c3.995-12.674,7.209-30.184,7.209-30.184c0.688-5.832,0.781-9.345,0.781-9.345
	c0.321-10.884-0.644-26.519-0.644-26.519C64.251,85.332,58.786,56.7,58.786,56.7c-2.158-9.598-5.326-36.675-5.326-36.675
	c-1.194-11.94-0.414-27.382-0.414-27.382c0.092-10.7,1.148-19.853,1.148-19.853c0.505,2.939,3.949,6.271,3.949,6.271
	c2.479,2.984,6.383,5.123,6.383,5.123c1.47,1.286,5.006,4.468,5.006,4.468c0.092,2.48,1.332,7.998,1.332,7.998
	c0.826,3.49,3.935,9.353,3.935,9.353c2.879,6.726,8.877,15.273,8.877,15.273c0.735,1.01,0.551,2.868,0.551,2.868
	c-0.046,3.949-2.801,7.658-2.801,7.658c-2.572,3.399-3.674,7.297-3.674,7.297c-0.321,1.47,0,4.05,0,4.05
	c0.597,5.924-0.046,10.182-0.046,10.182c-0.413,2.894,0.873,3.229,0.873,3.229c1.286,0.459,3.397-0.411,3.397-0.411
	c2.71-0.78,3.215-5.914,3.215-5.914c0.138-1.883,0.321-6.058,0.321-6.058c0.092-2.662,2.894-3.017,2.894-3.017
	c2.296-0.137,3.443,1.509,3.443,1.509c1.517,2.848,1.7,6.502,1.7,6.502c0.091,5.512-1.378,8.653-1.378,8.653
	c-1.929,5.188-1.745,5.87-1.745,5.87c0.229,3.996,4.684,3.036,4.684,3.036c3.675,0,4.875-4.055,4.875-4.055
	c0.67,2.23,4.071,1.842,4.071,1.842c3.568-0.111,4.461-3.832,4.461-3.832c2.118,0.612,3.791-1.392,3.791-1.392
	c2.343-2.174,2.509-7.667,2.509-7.667c0.781,0.057,1.952-0.944,1.952-0.944c1.951-1.673,2.23-7.298,2.23-7.298
	c0.725-3.624,0-10.891,0-10.891c-0.279-2.509-4.183-12.888-4.183-12.888c-1.95-4.628-4.571-13.688-4.571-13.688
	c-0.836-3.68-2.175-10.238-2.175-10.238c-2.51-11.319-7.081-28.792-7.081-28.792c-2.732-8.364-9.368-24.032-9.368-24.032
	c-5.241-9.146-12.713-18.703-12.713-18.703c-13.326-13.215-23.53-18.898-23.53-18.898c-7.862-3.178-16.951-7.293-16.951-7.293
	c-3.401-1.394-3.513-4.61-3.513-4.61l0.056-3.32c-0.112-1.339,0.056-2.347,0.056-2.347c3.234-3.29,7.64-10.716,7.64-10.716
	c2.788-5.297,4.349-11.835,4.349-11.835c1.562,0.558,3.457-0.006,3.457-0.006c2.398-0.167,3.848-3.866,3.848-3.866
	c0.947-2.621,2.136-9.978,2.136-9.978c0.977-3.52,1.76-9.175,1.76-9.175c0.565-3.783-1.369-7.052-1.369-7.052
	c-1.579-2.963-4.497-3.437-4.497-3.437c2.151-9.189,0-18.909,0-18.909c-1.955-11.144-13.576-21.311-13.576-21.311
	C26.188-225.023,0-224.343,0-224.343s-26.194-0.68-38.778,15.744C-38.778-208.599-50.394-198.432-52.349-187.289z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-50.713-181.703c0,0-2.057,9.377,0,18.167
	c0,0-2.791,0.44-4.301,3.275c0,0-1.85,3.128-1.309,6.747c0,0,0.748,5.415,1.683,8.782c0,0,1.136,7.066,2.042,9.574
	c0,0,1.387,3.543,3.681,3.703c0,0,1.813,0.555,3.306,0.021c0,0,1.494,6.288,4.161,11.355c0,0,4.213,7.147,7.306,10.295
	c0,0,0.16,0.97,0.054,2.25l0.053,3.183c0,0-0.107,3.098-3.36,4.431c0,0-8.694,4.024-16.214,7.064c0,0-9.76,5.581-22.507,18.221
	c0,0-7.147,9.276-12.161,18.023c0,0-6.347,15.111-8.96,23.112c0,0-4.374,16.851-6.774,27.678c0,0-1.28,6.326-2.08,9.846
	c0,0-2.506,8.735-4.373,13.161c0,0-3.734,9.997-4,12.397c0,0-0.694,7.009,0,10.476c0,0,0.266,5.421,2.133,7.021
	c0,0,1.12,0.964,1.867,0.91c0,0,0.16,5.303,2.4,7.383c0,0,1.6,1.94,3.627,1.354c0,0,0.853,3.602,4.266,3.708
	c0,0,3.254,0.408,3.894-1.726c0,0,1.149,3.928,4.663,3.928c0,0,4.261,0.973,4.481-2.849c0,0,0.176-0.605-1.669-5.568
	c0,0-1.406-2.945-1.318-8.216c0,0,0.176-3.447,1.625-6.17c0,0,1.098-1.541,3.295-1.409c0,0,2.679,0.367,2.767,2.915
	c0,0,0.176,4.043,0.307,5.844c0,0,0.483,4.962,3.075,5.709c0,0,2.021,0.859,3.251,0.42c0,0,1.23-0.298,0.834-3.064
	c0,0-0.615-3.989-0.044-9.655c0,0,0.308-2.435,0-3.839c0,0-1.054-3.654-3.514-6.905c0,0-2.635-3.471-2.679-7.248
	c0,0-0.176-1.755,0.527-2.721c0,0,5.738-8.003,8.491-14.437c0,0,2.973-5.499,3.764-8.837c0,0,1.186-5.197,1.274-7.569
	c0,0,3.382-2.974,4.788-4.204c0,0,3.733-1.958,6.105-4.813c0,0,3.295-3.112,3.778-5.923c0,0,1.01,8.941,1.098,19.176
	c0,0,0.747,15.019-0.395,26.439c0,0-3.031,26.25-5.096,35.43c0,0-5.227,27.746-5.842,37.541c0,0-0.922,15.227-0.615,25.638
	c0,0,0.088,3.453,0.747,9.032c0,0,3.075,17.046,6.896,29.169c0,0,5.184,16.7,6.458,20.347c0,0,2.064,6.726,1.669,11.558
	c0,0-1.011,7.715-1.011,9.867c0,0-0.527,9.938,0.879,13.76c0,0,1.85,4.217,4.836,4.525c0,0,2.207,0.087,2.691-0.88
	c0,0,1.141,1.45,3.25,1.45c0,0,2.861-0.352,3.3-1.582c0,0,0.691,0.968,3.151,1.012c0,0,3.286,0.131,3.901-1.89
	c0,0,0.536,1.143,2.513,0.966c0,0,3.011-0.57,3.802-1.889c0,0,1.636,1.494,3.7,1.274c0,0,4.183-0.22,4.534-3.075
	c0,0,0.756-1.845-0.693-4.568c0,0-3.156-7.116-5.309-11.333c0,0-4.26-7.291-4.524-8.346c0,0-0.735-0.922-0.647-3.646
	c0,0,2.306-13.134,1.999-18.976c0,0,0.168-6.325-1.062-13.397c0,0-0.993-7.203-1.959-10.499c0,0-0.618-3.117-0.003-6.501
	c0,0,1.016-4.567,2.554-9.224c0,0,3.466-6.721,4.696-14.627c0,0,3.434-10.74,2.073-16.055c0,0,3.346,1.229,7.497,1.999
	c0,0,3.672,0.659,7.12,0.526c3.447,0.133,7.107-0.526,7.107-0.526c4.151-0.77,7.491-1.999,7.491-1.999
	c-1.362,5.314,2.095,16.055,2.095,16.055c1.23,7.906,4.709,14.627,4.709,14.627c1.537,4.656,2.557,9.224,2.557,9.224
	c0.613,3.384,0.018,6.501,0.018,6.501c-0.967,3.296-1.942,10.499-1.942,10.499c-1.23,7.072-1.033,13.397-1.033,13.397
	c-0.309,5.842,2.037,18.976,2.037,18.976c0.088,2.724-0.638,3.646-0.638,3.646c-0.264,1.055-4.487,8.346-4.487,8.346
	c-2.152,4.217-5.264,11.333-5.264,11.333c-1.449,2.724-0.676,4.568-0.676,4.568c0.352,2.855,4.561,3.075,4.561,3.075
	c2.064,0.22,3.728-1.274,3.728-1.274c0.791,1.318,3.834,1.889,3.834,1.889c1.976,0.177,2.534-0.966,2.534-0.966
	c0.615,2.021,3.932,1.89,3.932,1.89c2.46-0.044,3.172-1.012,3.172-1.012c0.439,1.23,3.336,1.582,3.336,1.582
	c2.108,0,3.292-1.45,3.292-1.45c0.483,0.967,2.729,0.88,2.729,0.88c2.987-0.309,4.869-4.525,4.869-4.525
	c1.404-3.821,0.878-13.704,0.878-13.704c0-2.153-1.01-9.814-1.01-9.814c-0.396-4.832,1.669-11.516,1.669-11.516
	c1.273-3.645,6.457-20.271,6.457-20.271c3.821-12.123,6.896-29.085,6.896-29.085c0.659-5.579,0.747-9.002,0.747-9.002
	c0.308-10.41-0.615-25.548-0.615-25.548c-0.615-9.796-5.842-37.454-5.842-37.454c-2.065-9.181-5.095-35.337-5.095-35.337
	c-1.143-11.42-0.396-26.38-0.396-26.38c0.088-10.234,1.099-19.125,1.099-19.125c0.483,2.812,3.777,5.939,3.777,5.939
	c2.372,2.855,6.106,4.837,6.106,4.837c1.405,1.23,4.788,4.223,4.788,4.223c0.087,2.372,1.272,7.585,1.272,7.585
	c0.791,3.338,3.765,8.865,3.765,8.865c2.754,6.433,8.491,14.466,8.491,14.466c0.702,0.967,0.527,2.723,0.527,2.723
	c-0.044,3.776-2.68,7.26-2.68,7.26c-2.46,3.25-3.515,6.912-3.515,6.912c-0.307,1.405,0,3.842,0,3.842
	c0.571,5.666-0.044,9.656-0.044,9.656c-0.395,2.767,0.835,3.062,0.835,3.062c1.23,0.439,3.25-0.417,3.25-0.417
	c2.593-0.747,3.075-5.706,3.075-5.706c0.132-1.801,0.309-5.833,0.309-5.833c0.087-2.548,2.767-2.917,2.767-2.917
	c2.196-0.132,3.294,1.413,3.294,1.413c1.45,2.724,1.626,6.165,1.626,6.165c0.087,5.271-1.318,8.204-1.318,8.204
	c-1.845,4.964-1.669,5.566-1.669,5.566c0.22,3.821,4.48,2.855,4.48,2.855c3.514,0,4.664-3.925,4.664-3.925
	c0.64,2.134,3.893,1.725,3.893,1.725c3.413-0.105,4.268-3.709,4.268-3.709c2.026,0.586,3.627-1.358,3.627-1.358
	c2.239-2.08,2.399-7.392,2.399-7.392c0.746,0.054,1.866-0.919,1.866-0.919c1.867-1.6,2.134-7.033,2.134-7.033
	c0.693-3.467,0-10.493,0-10.493c-0.267-2.4-4-12.424-4-12.424c-1.867-4.427-4.374-13.193-4.374-13.193
	c-0.8-3.521-2.08-9.866-2.08-9.866c-2.399-10.827-6.772-27.75-6.772-27.75c-2.614-8-8.961-23.171-8.961-23.171
	c-5.014-8.747-12.16-18.05-12.16-18.05C63.371-86.681,53.61-92.339,53.61-92.339c-7.521-3.04-16.214-7.113-16.214-7.113
	c-3.253-1.333-3.36-4.452-3.36-4.452l0.054-3.199c-0.106-1.28,0.054-2.26,0.054-2.26c3.094-3.146,7.307-10.345,7.307-10.345
	c2.667-5.066,4.16-11.41,4.16-11.41c1.494,0.532,3.307-0.032,3.307-0.032c2.293-0.16,3.68-3.739,3.68-3.739
	c0.907-2.507,2.043-9.617,2.043-9.617c0.936-3.366,1.684-8.843,1.684-8.843c0.541-3.619-1.309-6.799-1.309-6.799
	c-1.511-2.835-4.303-3.333-4.303-3.333c2.059-8.789,0-18.221,0-18.221c-1.87-10.66-13.23-20.386-13.23-20.386
	C25.444-217.797,0-217.147,0-217.147s-25.451-0.65-37.488,15.059C-37.488-202.088-48.843-192.363-50.713-181.703z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-49.077-176.117c0,0-1.964,9.086,0,17.476
	c0,0-2.664,0.464-4.106,3.169c0,0-1.766,3.038-1.249,6.492c0,0,0.714,5.235,1.606,8.448c0,0,1.085,6.819,1.95,9.211
	c0,0,1.324,3.423,3.513,3.575c0,0,1.73,0.555,3.156,0.046c0,0,1.426,6.092,3.971,10.928c0,0,4.022,6.919,6.975,9.922
	c0,0,0.153,0.941,0.051,2.163l0.051,3.06c0,0-0.102,3.001-3.207,4.273c0,0-8.299,3.981-15.477,6.883c0,0-9.317,5.553-21.485,17.619
	c0,0-6.822,9.02-11.607,17.369c0,0-6.059,14.611-8.553,22.248c0,0-4.175,16.298-6.466,26.633c0,0-1.222,6.112-1.985,9.472
	c0,0-2.393,8.441-4.175,12.667c0,0-3.564,9.639-3.818,11.93c0,0-0.662,6.769,0,10.077c0,0,0.254,5.23,2.036,6.757
	c0,0,1.069,0.936,1.782,0.885c0,0,0.153,5.119,2.291,7.105c0,0,1.527,1.884,3.462,1.324c0,0,0.814,3.482,4.073,3.585
	c0,0,3.105,0.426,3.716-1.61c0,0,1.097,3.799,4.452,3.799c0,0,4.067,0.979,4.276-2.669c0,0,0.168-0.524-1.593-5.263
	c0,0-1.342-2.737-1.258-7.768c0,0,0.168-3.234,1.552-5.833c0,0,1.048-1.44,3.144-1.315c0,0,2.558,0.384,2.642,2.815
	c0,0,0.167,3.902,0.293,5.622c0,0,0.461,4.787,2.935,5.5c0,0,1.929,0.846,3.103,0.427c0,0,1.174-0.256,0.797-2.897
	c0,0-0.587-3.721-0.042-9.13c0,0,0.293-2.289,0-3.631c0,0-1.007-3.418-3.355-6.521c0,0-2.515-3.243-2.557-6.85
	c0,0-0.168-1.65,0.503-2.573c0,0,5.477-7.487,8.105-13.628c0,0,2.838-5.162,3.593-8.348c0,0,1.132-4.892,1.216-7.156
	c0,0,3.229-2.783,4.57-3.957c0,0,3.563-1.801,5.828-4.527c0,0,3.145-2.907,3.606-5.59c0,0,0.965,8.681,1.048,18.451
	c0,0,0.713,14.538-0.377,25.44c0,0-2.893,25.332-4.864,34.095c0,0-4.989,26.777-5.576,36.127c0,0-0.881,14.732-0.587,24.67
	c0,0,0.084,3.365,0.713,8.69c0,0,2.935,16.502,6.582,28.075c0,0,4.948,16.104,6.164,19.585c0,0,1.971,6.511,1.593,11.123
	c0,0-0.964,7.44-0.964,9.496c0,0-0.503,9.593,0.838,13.239c0,0,1.79,4.026,4.641,4.319c0,0,2.116,0.084,2.577-0.838
	c0,0,1.101,1.383,3.114,1.383c0,0,2.743-0.335,3.162-1.509c0,0,0.67,0.922,3.018,0.964c0,0,3.153,0.126,3.74-1.803
	c0,0,0.52,1.09,2.407,0.923c0,0,2.888-0.545,3.642-1.803c0,0,1.575,1.425,3.545,1.216c0,0,4.014-0.21,4.349-2.936
	c0,0,0.738-1.761-0.646-4.36c0,0-2.965-6.792-5.02-10.818c0,0-4.031-6.96-4.283-7.966c0,0-0.688-0.881-0.605-3.48
	c0,0,2.274-12.537,1.981-18.112c0,0,0.21-6.038-0.964-12.789c0,0-0.907-6.876-1.829-10.021c0,0-0.567-2.977,0.02-6.205
	c0,0,1.006-4.36,2.473-8.805c0,0,3.367-6.415,4.541-13.963c0,0,3.34-10.251,2.04-15.325c0,0,3.223,1.174,7.185,1.908
	c0,0,3.53,0.629,6.822,0.503c3.291,0.126,6.809-0.503,6.809-0.503c3.962-0.734,7.179-1.908,7.179-1.908
	c-1.3,5.074,2.062,15.325,2.062,15.325c1.174,7.548,4.554,13.963,4.554,13.963c1.468,4.444,2.477,8.805,2.477,8.805
	c0.587,3.229,0.042,6.205,0.042,6.205c-0.922,3.146-1.812,10.021-1.812,10.021c-1.174,6.751-0.933,12.789-0.933,12.789
	c-0.294,5.575,2.02,18.112,2.02,18.112c0.084,2.6-0.595,3.48-0.595,3.48c-0.251,1.006-4.245,7.966-4.245,7.966
	c-2.054,4.026-4.972,10.818-4.972,10.818c-1.385,2.6-0.627,4.36-0.627,4.36c0.335,2.726,4.376,2.936,4.376,2.936
	c1.97,0.209,3.571-1.216,3.571-1.216c0.756,1.258,3.678,1.803,3.678,1.803c1.886,0.167,2.43-0.923,2.43-0.923
	c0.587,1.929,3.77,1.803,3.77,1.803c2.349-0.042,3.04-0.964,3.04-0.964c0.421,1.174,3.2,1.509,3.2,1.509
	c2.014,0,3.158-1.383,3.158-1.383c0.461,0.922,2.617,0.838,2.617,0.838c2.851-0.293,4.674-4.319,4.674-4.319
	c1.342-3.646,0.839-13.183,0.839-13.183c0-2.054-0.965-9.441-0.965-9.441c-0.377-4.611,1.594-11.077,1.594-11.077
	c1.216-3.479,6.163-19.508,6.163-19.508c3.648-11.571,6.583-27.985,6.583-27.985c0.629-5.325,0.713-8.659,0.713-8.659
	c0.293-9.938-0.587-24.576-0.587-24.576c-0.587-9.35-5.577-36.036-5.577-36.036c-1.97-8.763-4.862-33.997-4.862-33.997
	c-1.092-10.901-0.378-25.38-0.378-25.38c0.084-9.769,1.049-18.398,1.049-18.398c0.461,2.684,3.604,5.607,3.604,5.607
	c2.266,2.726,5.828,4.552,5.828,4.552c1.342,1.174,4.571,3.976,4.571,3.976c0.084,2.264,1.216,7.173,1.216,7.173
	c0.754,3.187,3.592,8.378,3.592,8.378c2.629,6.14,8.106,13.659,8.106,13.659c0.671,0.923,0.503,2.574,0.503,2.574
	c-0.042,3.605-2.559,6.86-2.559,6.86c-2.348,3.104-3.354,6.53-3.354,6.53c-0.293,1.341,0,3.633,0,3.633
	c0.545,5.409-0.042,9.131-0.042,9.131c-0.377,2.642,0.797,2.895,0.797,2.895c1.174,0.419,3.103-0.424,3.103-0.424
	c2.474-0.713,2.936-5.496,2.936-5.496c0.125-1.72,0.293-5.611,0.293-5.611c0.084-2.432,2.642-2.817,2.642-2.817
	c2.097-0.126,3.145,1.319,3.145,1.319c1.384,2.6,1.552,5.827,1.552,5.827c0.083,5.031-1.258,7.756-1.258,7.756
	c-1.761,4.738-1.594,5.262-1.594,5.262c0.21,3.647,4.276,2.674,4.276,2.674c3.354,0,4.452-3.795,4.452-3.795
	c0.611,2.037,3.716,1.609,3.716,1.609c3.259-0.102,4.073-3.586,4.073-3.586c1.936,0.56,3.462-1.328,3.462-1.328
	c2.138-1.986,2.291-7.115,2.291-7.115c0.713,0.052,1.782-0.892,1.782-0.892c1.782-1.527,2.036-6.771,2.036-6.771
	c0.662-3.309,0-10.096,0-10.096c-0.254-2.291-3.818-11.957-3.818-11.957c-1.782-4.226-4.175-12.701-4.175-12.701
	c-0.763-3.36-1.985-9.493-1.985-9.493c-2.291-10.335-6.466-26.709-6.466-26.709c-2.495-7.636-8.553-22.309-8.553-22.309
	c-4.786-8.349-11.608-17.398-11.608-17.398c-12.167-12.066-21.483-17.7-21.483-17.7c-7.179-2.902-15.478-6.934-15.478-6.934
	c-3.105-1.273-3.207-4.295-3.207-4.295l0.051-3.077c-0.102-1.222,0.051-2.173,0.051-2.173c2.953-3.004,6.975-9.974,6.975-9.974
	c2.546-4.837,3.971-10.987,3.971-10.987c1.427,0.509,3.157-0.057,3.157-0.057c2.189-0.153,3.513-3.612,3.513-3.612
	c0.865-2.393,1.95-9.255,1.95-9.255c0.893-3.214,1.606-8.513,1.606-8.513c0.517-3.455-1.249-6.546-1.249-6.546
	c-1.442-2.706-4.106-3.228-4.106-3.228c1.963-8.39,0-17.533,0-17.533c-1.785-10.175-12.886-19.458-12.886-19.458
	C24.7-210.571,0-209.95,0-209.95s-24.708-0.621-36.198,14.375C-36.198-195.575-47.292-186.292-49.077-176.117z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-47.44-170.532c0,0-1.87,8.795,0,16.786
	c0,0-2.538,0.485-3.91,3.062c0,0-1.682,2.946-1.19,6.236c0,0,0.68,5.055,1.53,8.115c0,0,1.032,6.569,1.857,8.848
	c0,0,1.26,3.301,3.345,3.446c0,0,1.649,0.555,3.006,0.071c0,0,1.358,5.895,3.782,10.501c0,0,3.831,6.689,6.643,9.55
	c0,0,0.146,0.911,0.049,2.075l0.048,2.938c0,0-0.097,2.902-3.055,4.115c0,0-7.903,3.937-14.739,6.701c0,0-8.874,5.525-20.462,17.016
	c0,0-6.497,8.764-11.055,16.716c0,0-5.77,14.11-8.145,21.383c0,0-3.976,15.746-6.158,25.589c0,0-1.164,5.899-1.891,9.099
	c0,0-2.279,8.146-3.976,12.171c0,0-3.394,9.282-3.637,11.464c0,0-0.63,6.527,0,9.679c0,0,0.243,5.038,1.94,6.493
	c0,0,1.018,0.906,1.697,0.857c0,0,0.145,4.938,2.182,6.829c0,0,1.454,1.826,3.297,1.293c0,0,0.776,3.364,3.879,3.461
	c0,0,2.958,0.446,3.539-1.493c0,0,1.045,3.669,4.24,3.669c0,0,3.873,0.987,4.073-2.487c0,0,0.16-0.446-1.518-4.959
	c0,0-1.277-2.528-1.197-7.32c0,0,0.159-3.021,1.477-5.496c0,0,0.998-1.339,2.995-1.219c0,0,2.436,0.398,2.516,2.715
	c0,0,0.159,3.762,0.279,5.398c0,0,0.439,4.613,2.795,5.292c0,0,1.837,0.832,2.955,0.434c0,0,1.119-0.214,0.759-2.73
	c0,0-0.559-3.453-0.04-8.604c0,0,0.28-2.146,0-3.424c0,0-0.958-3.182-3.194-6.137c0,0-2.396-3.015-2.436-6.45
	c0,0-0.16-1.547,0.479-2.426c0,0,5.216-6.971,7.719-12.818c0,0,2.703-4.825,3.422-7.86c0,0,1.078-4.586,1.158-6.743
	c0,0,3.075-2.592,4.353-3.71c0,0,3.394-1.644,5.55-4.239c0,0,2.995-2.703,3.434-5.258c0,0,0.919,8.421,0.999,17.726
	c0,0,0.679,14.059-0.36,24.441c0,0-2.755,24.415-4.632,32.761c0,0-4.752,25.807-5.311,34.711c0,0-0.838,14.239-0.559,23.703
	c0,0,0.08,3.277,0.679,8.349c0,0,2.795,15.958,6.269,26.979c0,0,4.712,15.511,5.87,18.825c0,0,1.877,6.296,1.518,10.688
	c0,0-0.919,7.167-0.919,9.124c0,0-0.479,9.248,0.799,12.723c0,0,1.729,3.833,4.445,4.112c0,0,2.024,0.08,2.463-0.799
	c0,0,1.061,1.318,2.978,1.318c0,0,2.625-0.32,3.024-1.438c0,0,0.65,0.88,2.886,0.919c0,0,3.018,0.12,3.577-1.717
	c0,0,0.504,1.038,2.301,0.878c0,0,2.765-0.519,3.484-1.717c0,0,1.513,1.358,3.39,1.158c0,0,3.843-0.199,4.162-2.795
	c0,0,0.72-1.677-0.598-4.153c0,0-2.774-6.469-4.73-10.303c0,0-3.803-6.628-4.043-7.587c0,0-0.642-0.838-0.562-3.314
	c0,0,2.241-11.939,1.961-17.251c0,0,0.254-5.75-0.864-12.179c0,0-0.822-6.549-1.701-9.544c0,0-0.515-2.835,0.044-5.91
	c0,0,0.995-4.153,2.393-8.386c0,0,3.268-6.109,4.386-13.297c0,0,3.245-9.765,2.007-14.596c0,0,3.098,1.118,6.872,1.817
	c0,0,3.389,0.599,6.524,0.479c3.134,0.12,6.511-0.479,6.511-0.479c3.773-0.699,6.865-1.817,6.865-1.817
	c-1.238,4.831,2.031,14.596,2.031,14.596c1.117,7.188,4.398,13.297,4.398,13.297c1.398,4.232,2.396,8.386,2.396,8.386
	c0.559,3.075,0.065,5.91,0.065,5.91c-0.878,2.995-1.682,9.544-1.682,9.544c-1.118,6.429-0.834,12.179-0.834,12.179
	c-0.279,5.312,2.004,17.251,2.004,17.251c0.079,2.477-0.552,3.314-0.552,3.314c-0.24,0.959-4.003,7.587-4.003,7.587
	c-1.957,3.834-4.683,10.303-4.683,10.303c-1.316,2.477-0.578,4.153-0.578,4.153c0.319,2.596,4.192,2.795,4.192,2.795
	c1.876,0.2,3.418-1.158,3.418-1.158c0.719,1.198,3.519,1.717,3.519,1.717c1.797,0.16,2.325-0.878,2.325-0.878
	c0.56,1.837,3.609,1.717,3.609,1.717c2.236-0.039,2.909-0.919,2.909-0.919c0.398,1.118,3.062,1.438,3.062,1.438
	c1.917,0,3.024-1.318,3.024-1.318c0.438,0.879,2.506,0.799,2.506,0.799c2.715-0.279,4.479-4.112,4.479-4.112
	c1.278-3.475,0.8-12.662,0.8-12.662c0-1.957-0.919-9.067-0.919-9.067c-0.359-4.392,1.518-10.64,1.518-10.64
	c1.158-3.315,5.87-18.745,5.87-18.745c3.474-11.021,6.269-26.888,6.269-26.888c0.6-5.071,0.68-8.315,0.68-8.315
	c0.278-9.464-0.56-23.604-0.56-23.604c-0.559-8.905-5.311-34.617-5.311-34.617c-1.877-8.346-4.632-32.659-4.632-32.659
	c-1.039-10.382-0.36-24.378-0.36-24.378c0.08-9.304,0.999-17.67,0.999-17.67c0.438,2.555,3.434,5.275,3.434,5.275
	c2.156,2.595,5.551,4.266,5.551,4.266c1.277,1.118,4.353,3.73,4.353,3.73c0.08,2.156,1.158,6.761,1.158,6.761
	c0.719,3.034,3.422,7.89,3.422,7.89c2.503,5.847,7.719,12.852,7.719,12.852c0.639,0.879,0.479,2.428,0.479,2.428
	c-0.04,3.434-2.437,6.461-2.437,6.461c-2.235,2.955-3.193,6.146-3.193,6.146c-0.28,1.278,0,3.425,0,3.425
	c0.519,5.152-0.04,8.606-0.04,8.606c-0.36,2.515,0.759,2.726,0.759,2.726c1.118,0.399,2.955-0.43,2.955-0.43
	c2.355-0.679,2.795-5.288,2.795-5.288c0.12-1.637,0.279-5.387,0.279-5.387c0.079-2.316,2.516-2.718,2.516-2.718
	c1.997-0.12,2.995,1.224,2.995,1.224c1.317,2.476,1.478,5.49,1.478,5.49c0.079,4.792-1.197,7.309-1.197,7.309
	c-1.679,4.513-1.519,4.956-1.519,4.956c0.2,3.475,4.073,2.494,4.073,2.494c3.195,0,4.24-3.666,4.24-3.666
	c0.582,1.94,3.539,1.493,3.539,1.493c3.103-0.097,3.879-3.463,3.879-3.463c1.843,0.534,3.297-1.297,3.297-1.297
	c2.037-1.892,2.182-6.838,2.182-6.838c0.679,0.049,1.697-0.865,1.697-0.865c1.697-1.455,1.939-6.507,1.939-6.507
	c0.631-3.152,0-9.699,0-9.699c-0.242-2.183-3.637-11.492-3.637-11.492c-1.697-4.024-3.976-12.207-3.976-12.207
	c-0.728-3.2-1.892-9.12-1.892-9.12c-2.182-9.843-6.156-25.667-6.156-25.667c-2.377-7.273-8.146-21.448-8.146-21.448
	c-4.558-7.952-11.055-16.746-11.055-16.746c-11.588-11.491-20.461-17.1-20.461-17.1c-6.837-2.764-14.74-6.756-14.74-6.756
	c-2.958-1.212-3.055-4.137-3.055-4.137l0.048-2.955c-0.097-1.164,0.049-2.087,0.049-2.087c2.812-2.861,6.643-9.603,6.643-9.603
	c2.425-4.606,3.782-10.562,3.782-10.562c1.357,0.485,3.006-0.082,3.006-0.082c2.085-0.146,3.346-3.486,3.346-3.486
	c0.824-2.278,1.856-8.893,1.856-8.893c0.851-3.06,1.53-8.182,1.53-8.182c0.492-3.29-1.19-6.293-1.19-6.293
	c-1.372-2.576-3.91-3.123-3.91-3.123c1.87-7.99,0-16.845,0-16.845c-1.699-9.691-12.54-18.532-12.54-18.532
	C23.957-203.345,0-202.754,0-202.754s-23.964-0.591-34.907,13.69C-34.907-189.064-45.74-180.223-47.44-170.532z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-45.804-164.947c0,0-1.777,8.504,0,16.096
	c0,0-2.411,0.507-3.715,2.954c0,0-1.598,2.856-1.13,5.981c0,0,0.646,4.875,1.453,7.782c0,0,0.98,6.319,1.764,8.484
	c0,0,1.198,3.18,3.179,3.318c0,0,1.566,0.556,2.856,0.095c0,0,1.289,5.7,3.592,10.076c0,0,3.639,6.458,6.312,9.176
	c0,0,0.138,0.883,0.046,1.988l0.046,2.815c0,0-0.092,2.805-2.902,3.957c0,0-7.508,3.894-14.003,6.519c0,0-8.429,5.498-19.438,16.415
	c0,0-6.172,8.507-10.502,16.062c0,0-5.481,13.61-7.738,20.519c0,0-3.777,15.194-5.85,24.544c0,0-1.105,5.685-1.797,8.726
	c0,0-2.165,7.854-3.776,11.677c0,0-3.225,8.924-3.455,10.997c0,0-0.6,6.287,0,9.281c0,0,0.23,4.847,1.843,6.229
	c0,0,0.967,0.876,1.612,0.83c0,0,0.138,4.756,2.072,6.552c0,0,1.382,1.769,3.132,1.263c0,0,0.737,3.246,3.686,3.338
	c0,0,2.81,0.465,3.363-1.378c0,0,0.991,3.54,4.026,3.54c0,0,3.681,0.993,3.869-2.307c0,0,0.152-0.368-1.44-4.654
	c0,0-1.215-2.32-1.139-6.872c0,0,0.152-2.808,1.403-5.159c0,0,0.949-1.238,2.846-1.124c0,0,2.314,0.415,2.391,2.615
	c0,0,0.15,3.62,0.265,5.177c0,0,0.417,4.437,2.656,5.082c0,0,1.745,0.818,2.807,0.439c0,0,1.062-0.172,0.721-2.562
	c0,0-0.53-3.186-0.038-8.079c0,0,0.266-2.001,0-3.214c0,0-0.91-2.948-3.034-5.755c0,0-2.276-2.787-2.314-6.049
	c0,0-0.152-1.444,0.455-2.279c0,0,4.955-6.456,7.333-12.011c0,0,2.568-4.488,3.251-7.372c0,0,1.024-4.281,1.1-6.33
	c0,0,2.921-2.401,4.136-3.463c0,0,3.225-1.487,5.272-3.953c0,0,2.845-2.498,3.263-4.926c0,0,0.872,8.163,0.948,17.002
	c0,0,0.646,13.578-0.341,23.442c0,0-2.618,23.497-4.401,31.426c0,0-4.514,24.837-5.045,33.298c0,0-0.797,13.743-0.53,22.733
	c0,0,0.074,3.19,0.644,8.007c0,0,2.656,15.415,5.956,25.886c0,0,4.477,14.917,5.577,18.065c0,0,1.783,6.079,1.44,10.252
	c0,0-0.871,6.894-0.871,8.752c0,0-0.455,8.903,0.759,12.203c0,0,1.669,3.643,4.248,3.907c0,0,1.933,0.076,2.35-0.758
	c0,0,1.021,1.252,2.842,1.252c0,0,2.507-0.305,2.888-1.366c0,0,0.628,0.835,2.753,0.872c0,0,2.883,0.114,3.414-1.631
	c0,0,0.488,0.986,2.195,0.835c0,0,2.643-0.493,3.325-1.631c0,0,1.451,1.289,3.234,1.1c0,0,3.674-0.19,3.977-2.656
	c0,0,0.702-1.593-0.55-3.944c0,0-2.583-6.146-4.442-9.787c0,0-3.573-6.298-3.802-7.208c0,0-0.596-0.797-0.52-3.149
	c0,0,2.209-11.343,1.942-16.388c0,0,0.296-5.463-0.766-11.57c0,0-0.736-6.222-1.571-9.066c0,0-0.464-2.694,0.067-5.615
	c0,0,0.984-3.945,2.312-7.966c0,0,3.168-5.805,4.23-12.634c0,0,3.149-9.274,1.974-13.864c0,0,2.976,1.062,6.561,1.726
	c0,0,3.248,0.569,6.225,0.455c2.978,0.114,6.213-0.455,6.213-0.455c3.585-0.664,6.553-1.726,6.553-1.726
	c-1.176,4.59,1.998,13.864,1.998,13.864c1.062,6.829,4.245,12.634,4.245,12.634c1.328,4.021,2.315,7.966,2.315,7.966
	c0.53,2.921,0.091,5.615,0.091,5.615c-0.835,2.845-1.552,9.066-1.552,9.066c-1.062,6.107-0.734,11.57-0.734,11.57
	c-0.265,5.045,1.987,16.388,1.987,16.388c0.074,2.353-0.511,3.149-0.511,3.149c-0.227,0.91-3.76,7.208-3.76,7.208
	c-1.859,3.641-4.391,9.787-4.391,9.787c-1.252,2.352-0.53,3.944-0.53,3.944c0.304,2.466,4.007,2.656,4.007,2.656
	c1.783,0.189,3.264-1.1,3.264-1.1c0.684,1.138,3.361,1.631,3.361,1.631c1.708,0.151,2.221-0.835,2.221-0.835
	c0.531,1.745,3.448,1.631,3.448,1.631c2.125-0.037,2.777-0.872,2.777-0.872c0.38,1.062,2.928,1.366,2.928,1.366
	c1.821,0,2.89-1.252,2.89-1.252c0.416,0.834,2.394,0.758,2.394,0.758c2.58-0.265,4.285-3.907,4.285-3.907
	c1.214-3.3,0.758-12.14,0.758-12.14c0-1.859-0.872-8.693-0.872-8.693c-0.342-4.173,1.441-10.204,1.441-10.204
	c1.101-3.147,5.576-17.98,5.576-17.98c3.301-10.471,5.956-25.789,5.956-25.789c0.569-4.818,0.646-7.973,0.646-7.973
	c0.265-8.99-0.531-22.634-0.531-22.634c-0.531-8.459-5.046-33.199-5.046-33.199c-1.783-7.928-4.4-31.318-4.4-31.318
	c-0.986-9.864-0.342-23.378-0.342-23.378c0.076-8.839,0.949-16.943,0.949-16.943c0.417,2.428,3.262,4.943,3.262,4.943
	c2.05,2.466,5.273,3.98,5.273,3.98c1.214,1.063,4.135,3.484,4.135,3.484c0.076,2.049,1.101,6.349,1.101,6.349
	c0.683,2.883,3.25,7.403,3.25,7.403c2.379,5.556,7.334,12.046,7.334,12.046c0.606,0.834,0.455,2.279,0.455,2.279
	c-0.037,3.263-2.313,6.062-2.313,6.062c-2.125,2.808-3.035,5.764-3.035,5.764c-0.266,1.214,0,3.218,0,3.218
	c0.493,4.893-0.038,8.079-0.038,8.079c-0.342,2.39,0.72,2.559,0.72,2.559c1.063,0.379,2.809-0.436,2.809-0.436
	c2.238-0.646,2.655-5.079,2.655-5.079c0.113-1.556,0.266-5.165,0.266-5.165c0.076-2.2,2.39-2.618,2.39-2.618
	c1.896-0.113,2.846,1.13,2.846,1.13c1.252,2.352,1.403,5.152,1.403,5.152c0.075,4.552-1.139,6.86-1.139,6.86
	c-1.593,4.286-1.441,4.651-1.441,4.651c0.19,3.3,3.869,2.312,3.869,2.312c3.035,0,4.028-3.535,4.028-3.535
	c0.553,1.843,3.362,1.377,3.362,1.377c2.947-0.093,3.685-3.34,3.685-3.34c1.751,0.507,3.133-1.266,3.133-1.266
	c1.935-1.797,2.072-6.562,2.072-6.562c0.645,0.046,1.613-0.839,1.613-0.839c1.611-1.383,1.842-6.244,1.842-6.244
	c0.599-2.994,0-9.302,0-9.302c-0.23-2.072-3.455-11.025-3.455-11.025c-1.612-3.824-3.777-11.714-3.777-11.714
	c-0.69-3.041-1.796-8.749-1.796-8.749c-2.073-9.35-5.85-24.625-5.85-24.625c-2.257-6.909-7.738-20.586-7.738-20.586
	c-4.33-7.554-10.503-16.093-10.503-16.093C56.735-79.537,48.306-85.122,48.306-85.122c-6.494-2.626-14.003-6.576-14.003-6.576
	c-2.81-1.152-2.901-3.98-2.901-3.98l0.046-2.834c-0.092-1.105,0.046-2,0.046-2c2.672-2.717,6.311-9.232,6.311-9.232
	c2.304-4.376,3.594-10.138,3.594-10.138c1.29,0.46,2.855-0.107,2.855-0.107c1.98-0.139,3.178-3.36,3.178-3.36
	c0.783-2.164,1.765-8.531,1.765-8.531c0.808-2.908,1.454-7.852,1.454-7.852c0.467-3.126-1.131-6.039-1.131-6.039
	c-1.305-2.448-3.716-3.019-3.716-3.019c1.777-7.591,0-16.157,0-16.157c-1.614-9.206-12.193-17.605-12.193-17.605
	C23.213-196.119,0-195.558,0-195.558s-23.221-0.561-33.615,13.006C-33.615-182.552-44.188-174.153-45.804-164.947z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-44.167-159.36c0,0-1.684,8.214,0,15.405
	c0,0-2.284,0.529-3.52,2.848c0,0-1.514,2.764-1.07,5.725c0,0,0.611,4.694,1.377,7.449c0,0,0.929,6.069,1.671,8.12
	c0,0,1.135,3.059,3.011,3.19c0,0,1.484,0.556,2.706,0.12c0,0,1.221,5.503,3.403,9.649c0,0,3.447,6.228,5.979,8.803
	c0,0,0.131,0.854,0.043,1.901l0.044,2.693c0,0-0.087,2.707-2.749,3.798c0,0-7.112,3.851-13.266,6.338c0,0-7.986,5.47-18.415,15.812
	c0,0-5.848,8.252-9.95,15.409c0,0-5.193,13.11-7.331,19.655c0,0-3.578,14.641-5.542,23.499c0,0-1.047,5.471-1.702,8.352
	c0,0-2.051,7.559-3.578,11.181c0,0-3.055,8.566-3.272,10.531c0,0-0.567,6.046,0,8.882c0,0,0.218,4.655,1.746,5.965
	c0,0,0.916,0.848,1.526,0.804c0,0,0.132,4.574,1.965,6.275c0,0,1.309,1.711,2.967,1.23c0,0,0.698,3.127,3.491,3.214
	c0,0,2.661,0.484,3.186-1.261c0,0,0.94,3.411,3.815,3.411c0,0,3.485,1,3.666-2.126c0,0,0.144-0.289-1.366-4.35
	c0,0-1.15-2.112-1.078-6.426c0,0,0.144-2.593,1.33-4.82c0,0,0.897-1.138,2.694-1.03c0,0,2.193,0.431,2.265,2.516
	c0,0,0.144,3.48,0.252,4.954c0,0,0.395,4.264,2.516,4.874c0,0,1.653,0.807,2.659,0.446c0,0,1.007-0.13,0.683-2.396
	c0,0-0.503-2.917-0.035-7.553c0,0,0.252-1.855,0-3.006c0,0-0.862-2.712-2.875-5.371c0,0-2.156-2.559-2.192-5.649
	c0,0-0.144-1.342,0.431-2.132c0,0,4.695-5.939,6.948-11.202c0,0,2.432-4.151,3.079-6.883c0,0,0.97-3.976,1.042-5.916
	c0,0,2.768-2.21,3.918-3.216c0,0,3.054-1.33,4.995-3.666c0,0,2.696-2.294,3.091-4.594c0,0,0.827,7.903,0.898,16.276
	c0,0,0.61,13.099-0.323,22.443c0,0-2.48,22.58-4.169,30.091c0,0-4.277,23.868-4.78,31.883c0,0-0.755,13.25-0.503,21.767
	c0,0,0.072,3.101,0.611,7.666c0,0,2.516,14.87,5.642,24.789c0,0,4.241,14.323,5.283,17.306c0,0,1.689,5.864,1.366,9.817
	c0,0-0.826,6.62-0.826,8.381c0,0-0.432,8.557,0.718,11.683c0,0,1.609,3.451,4.053,3.702c0,0,1.842,0.072,2.236-0.719
	c0,0,0.981,1.186,2.706,1.186c0,0,2.39-0.286,2.749-1.293c0,0,0.608,0.79,2.621,0.826c0,0,2.748,0.108,3.252-1.545
	c0,0,0.472,0.935,2.09,0.79c0,0,2.52-0.467,3.166-1.545c0,0,1.389,1.222,3.078,1.042c0,0,3.504-0.179,3.792-2.515
	c0,0,0.683-1.511-0.502-3.738c0,0-2.394-5.822-4.154-9.272c0,0-3.345-5.966-3.561-6.828c0,0-0.55-0.756-0.479-2.983
	c0,0,2.176-10.746,1.925-15.525c0,0,0.339-5.176-0.668-10.962c0,0-0.649-5.894-1.44-8.589c0,0-0.413-2.552,0.091-5.319
	c0,0,0.974-3.737,2.231-7.547c0,0,3.069-5.499,4.075-11.968c0,0,3.056-8.787,1.941-13.136c0,0,2.85,1.006,6.246,1.635
	c0,0,3.106,0.539,5.928,0.432c2.822,0.107,5.915-0.432,5.915-0.432c3.396-0.629,6.239-1.635,6.239-1.635
	c-1.114,4.349,1.967,13.136,1.967,13.136c1.006,6.469,4.09,11.968,4.09,11.968c1.258,3.81,2.235,7.547,2.235,7.547
	c0.503,2.768,0.114,5.319,0.114,5.319c-0.791,2.695-1.421,8.589-1.421,8.589c-1.007,5.786-0.635,10.962-0.635,10.962
	c-0.251,4.779,1.969,15.525,1.969,15.525c0.072,2.228-0.466,2.983-0.466,2.983c-0.216,0.862-3.518,6.828-3.518,6.828
	c-1.762,3.45-4.101,9.272-4.101,9.272c-1.186,2.228-0.48,3.738-0.48,3.738c0.287,2.336,3.821,2.515,3.821,2.515
	c1.69,0.18,3.11-1.042,3.11-1.042c0.647,1.078,3.203,1.545,3.203,1.545c1.618,0.145,2.117-0.79,2.117-0.79
	c0.503,1.653,3.287,1.545,3.287,1.545c2.012-0.036,2.645-0.826,2.645-0.826c0.359,1.007,2.791,1.293,2.791,1.293
	c1.726,0,2.755-1.186,2.755-1.186c0.396,0.791,2.282,0.719,2.282,0.719c2.444-0.251,4.09-3.702,4.09-3.702
	c1.15-3.126,0.719-11.617,0.719-11.617c0-1.762-0.825-8.319-0.825-8.319c-0.324-3.954,1.364-9.768,1.364-9.768
	c1.042-2.982,5.283-17.218,5.283-17.218c3.127-9.919,5.644-24.689,5.644-24.689c0.539-4.565,0.61-7.63,0.61-7.63
	c0.251-8.518-0.503-21.662-0.503-21.662c-0.504-8.015-4.779-31.78-4.779-31.78c-1.69-7.511-4.17-29.981-4.17-29.981
	c-0.935-9.344-0.323-22.374-0.323-22.374c0.071-8.373,0.898-16.216,0.898-16.216c0.396,2.3,3.091,4.612,3.091,4.612
	c1.94,2.336,4.995,3.694,4.995,3.694c1.15,1.006,3.917,3.238,3.917,3.238c0.072,1.941,1.043,5.936,1.043,5.936
	c0.646,2.73,3.079,6.915,3.079,6.915c2.253,5.263,6.948,11.238,6.948,11.238c0.575,0.79,0.431,2.133,0.431,2.133
	c-0.036,3.09-2.191,5.663-2.191,5.663c-2.014,2.658-2.876,5.38-2.876,5.38c-0.251,1.149,0,3.01,0,3.01
	c0.468,4.636-0.035,7.554-0.035,7.554c-0.324,2.265,0.682,2.392,0.682,2.392c1.007,0.358,2.66-0.443,2.66-0.443
	c2.12-0.611,2.516-4.869,2.516-4.869c0.107-1.474,0.252-4.941,0.252-4.941c0.071-2.086,2.264-2.519,2.264-2.519
	c1.797-0.108,2.695,1.035,2.695,1.035c1.187,2.228,1.329,4.813,1.329,4.813c0.072,4.313-1.077,6.413-1.077,6.413
	c-1.51,4.062-1.365,4.347-1.365,4.347c0.179,3.127,3.665,2.133,3.665,2.133c2.876,0,3.815-3.406,3.815-3.406
	c0.524,1.745,3.187,1.26,3.187,1.26c2.792-0.087,3.491-3.216,3.491-3.216c1.657,0.48,2.967-1.235,2.967-1.235
	c1.833-1.701,1.964-6.285,1.964-6.285c0.611,0.044,1.527-0.812,1.527-0.812c1.526-1.309,1.744-5.979,1.744-5.979
	c0.568-2.836,0-8.904,0-8.904c-0.218-1.963-3.271-10.562-3.271-10.562C91.528,7.91,89.478,0.312,89.478,0.312
	c-0.654-2.88-1.702-8.375-1.702-8.375c-1.963-8.858-5.542-23.583-5.542-23.583c-2.138-6.546-7.331-19.725-7.331-19.725
	c-4.102-7.157-9.949-15.441-9.949-15.441c-10.43-10.342-18.415-15.903-18.415-15.903c-6.152-2.487-13.266-6.397-13.266-6.397
	c-2.662-1.091-2.749-3.822-2.749-3.822l0.043-2.712c-0.087-1.047,0.044-1.913,0.044-1.913c2.531-2.575,5.979-8.861,5.979-8.861
	c2.182-4.146,3.403-9.715,3.403-9.715c1.223,0.436,2.706-0.132,2.706-0.132c1.876-0.131,3.012-3.233,3.012-3.233
	c0.74-2.051,1.671-8.17,1.671-8.17c0.765-2.754,1.377-7.521,1.377-7.521c0.442-2.961-1.071-5.786-1.071-5.786
	c-1.236-2.319-3.519-2.914-3.519-2.914c1.683-7.191,0-15.469,0-15.469c-1.53-8.722-11.85-16.678-11.85-16.678
	C22.47-188.892,0.001-188.36,0.001-188.36s-22.479-0.532-32.326,12.322C-32.325-176.038-42.638-168.082-44.167-159.36z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-42.531-153.775c0,0-1.59,7.923,0,14.715
	c0,0-2.157,0.55-3.324,2.741c0,0-1.429,2.673-1.011,5.469c0,0,0.578,4.514,1.3,7.115c0,0,0.878,5.821,1.579,7.758
	c0,0,1.071,2.938,2.843,3.061c0,0,1.402,0.557,2.556,0.146c0,0,1.154,5.307,3.214,9.222c0,0,3.256,5.999,5.647,8.43
	c0,0,0.123,0.825,0.041,1.814l0.041,2.57c0,0-0.082,2.61-2.596,3.64c0,0-6.718,3.808-12.529,6.157c0,0-7.542,5.442-17.392,15.21
	c0,0-5.523,7.995-9.397,14.754c0,0-4.904,12.61-6.924,18.792c0,0-3.379,14.088-5.234,22.454c0,0-0.989,5.258-1.607,7.978
	c0,0-1.937,7.267-3.38,10.688c0,0-2.885,8.209-3.091,10.063c0,0-0.536,5.806,0,8.484c0,0,0.206,4.464,1.649,5.701
	c0,0,0.865,0.817,1.442,0.776c0,0,0.124,4.392,1.855,5.999c0,0,1.236,1.652,2.802,1.199c0,0,0.66,3.009,3.297,3.091
	c0,0,2.514,0.503,3.009-1.145c0,0,0.888,3.281,3.603,3.281c0,0,3.293,1.008,3.463-1.945c0,0,0.135-0.209-1.29-4.045
	c0,0-1.086-1.904-1.019-5.978c0,0,0.136-2.38,1.256-4.484c0,0,0.849-1.036,2.546-0.935c0,0,2.07,0.447,2.138,2.416
	c0,0,0.136,3.34,0.238,4.731c0,0,0.373,4.088,2.376,4.665c0,0,1.561,0.793,2.512,0.453c0,0,0.95-0.09,0.645-2.228
	c0,0-0.476-2.648-0.034-7.027c0,0,0.237-1.713,0-2.799c0,0-0.815-2.476-2.716-4.987c0,0-2.036-2.33-2.07-5.249
	c0,0-0.136-1.238,0.407-1.985c0,0,4.434-5.424,6.562-10.394c0,0,2.297-3.815,2.908-6.395c0,0,0.917-3.671,0.984-5.504
	c0,0,2.614-2.018,3.7-2.969c0,0,2.885-1.173,4.718-3.379c0,0,2.546-2.089,2.919-4.261c0,0,0.781,7.643,0.849,15.551
	c0,0,0.577,12.62-0.306,21.445c0,0-2.342,21.662-3.937,28.756c0,0-4.039,22.898-4.514,30.468c0,0-0.713,12.756-0.476,20.8
	c0,0,0.068,3.013,0.577,7.324c0,0,2.376,14.325,5.329,23.693c0,0,4.006,13.729,4.99,16.546c0,0,1.595,5.649,1.29,9.384
	c0,0-0.781,6.345-0.781,8.008c0,0-0.407,8.212,0.679,11.165c0,0,1.548,3.258,3.857,3.496c0,0,1.749,0.067,2.122-0.68
	c0,0,0.941,1.12,2.57,1.12c0,0,2.272-0.271,2.611-1.222c0,0,0.587,0.747,2.488,0.781c0,0,2.615,0.102,3.09-1.46
	c0,0,0.457,0.883,1.984,0.747c0,0,2.396-0.441,3.007-1.461c0,0,1.328,1.154,2.923,0.985c0,0,3.335-0.17,3.606-2.376
	c0,0,0.666-1.426-0.454-3.53c0,0-2.201-5.499-3.865-8.757c0,0-3.116-5.635-3.32-6.449c0,0-0.503-0.713-0.436-2.817
	c0,0,2.144-10.148,1.906-14.663c0,0,0.381-4.887-0.569-10.353c0,0-0.565-5.566-1.311-8.111c0,0-0.362-2.41,0.114-5.024
	c0,0,0.963-3.53,2.151-7.128c0,0,2.97-5.192,3.92-11.303c0,0,2.96-8.299,1.908-12.406c0,0,2.727,0.951,5.934,1.545
	c0,0,2.966,0.509,5.63,0.407c2.665,0.102,5.616-0.407,5.616-0.407c3.208-0.594,5.927-1.545,5.927-1.545
	c-1.052,4.107,1.934,12.406,1.934,12.406c0.951,6.11,3.937,11.303,3.937,11.303c1.188,3.598,2.154,7.128,2.154,7.128
	c0.476,2.614,0.14,5.024,0.14,5.024c-0.747,2.545-1.291,8.111-1.291,8.111c-0.951,5.466-0.535,10.353-0.535,10.353
	c-0.238,4.515,1.952,14.663,1.952,14.663c0.068,2.104-0.424,2.817-0.424,2.817c-0.203,0.814-3.275,6.449-3.275,6.449
	c-1.663,3.258-3.81,8.757-3.81,8.757c-1.12,2.104-0.433,3.53-0.433,3.53c0.272,2.206,3.639,2.376,3.639,2.376
	c1.596,0.169,2.955-0.985,2.955-0.985c0.61,1.02,3.046,1.461,3.046,1.461c1.527,0.136,2.012-0.747,2.012-0.747
	c0.475,1.562,3.126,1.46,3.126,1.46c1.901-0.034,2.513-0.781,2.513-0.781c0.34,0.95,2.655,1.222,2.655,1.222
	c1.63,0,2.621-1.12,2.621-1.12c0.374,0.747,2.171,0.68,2.171,0.68c2.308-0.238,3.895-3.496,3.895-3.496
	c1.087-2.953,0.68-11.099,0.68-11.099c0-1.663-0.781-7.944-0.781-7.944c-0.305-3.733,1.29-9.329,1.29-9.329
	c0.984-2.817,4.99-16.455,4.99-16.455c2.953-9.368,5.329-23.592,5.329-23.592c0.509-4.311,0.577-7.286,0.577-7.286
	c0.236-8.044-0.477-20.69-0.477-20.69c-0.475-7.569-4.514-30.361-4.514-30.361c-1.595-7.095-3.938-28.643-3.938-28.643
	c-0.883-8.825-0.306-21.374-0.306-21.374c0.068-7.908,0.849-15.489,0.849-15.489c0.373,2.172,2.919,4.28,2.919,4.28
	c1.833,2.206,4.719,3.409,4.719,3.409c1.086,0.95,3.699,2.991,3.699,2.991c0.067,1.833,0.984,5.523,0.984,5.523
	C56.827,3.75,59.124,7.6,59.124,7.6c2.128,4.97,6.562,10.431,6.562,10.431c0.543,0.747,0.407,1.985,0.407,1.985
	c-0.034,2.919-2.07,5.264-2.07,5.264c-1.9,2.512-2.716,4.997-2.716,4.997c-0.237,1.087,0,2.802,0,2.802
	c0.441,4.379-0.034,7.029-0.034,7.029c-0.305,2.138,0.646,2.223,0.646,2.223c0.951,0.339,2.512-0.449,2.512-0.449
	c2.003-0.576,2.376-4.66,2.376-4.66c0.103-1.393,0.238-4.72,0.238-4.72c0.066-1.968,2.138-2.418,2.138-2.418
	c1.697-0.102,2.546,0.94,2.546,0.94c1.12,2.104,1.255,4.477,1.255,4.477c0.068,4.073-1.018,5.965-1.018,5.965
	c-1.425,3.835-1.29,4.041-1.29,4.041c0.17,2.953,3.463,1.953,3.463,1.953c2.715,0,3.604-3.276,3.604-3.276
	c0.494,1.647,3.009,1.144,3.009,1.144c2.637-0.082,3.297-3.093,3.297-3.093c1.566,0.454,2.802-1.204,2.802-1.204
	c1.731-1.607,1.855-6.009,1.855-6.009c0.577,0.041,1.441-0.786,1.441-0.786c1.443-1.236,1.649-5.717,1.649-5.717
	c0.536-2.679,0-8.506,0-8.506c-0.206-1.854-3.091-10.096-3.091-10.096c-1.443-3.421-3.38-10.727-3.38-10.727
	c-0.618-2.72-1.607-8.002-1.607-8.002c-1.854-8.366-5.234-22.542-5.234-22.542c-2.02-6.182-6.924-18.863-6.924-18.863
	c-3.874-6.759-9.396-14.789-9.396-14.789C52.312-74.773,44.77-80.31,44.77-80.31c-5.811-2.349-12.528-6.217-12.528-6.217
	c-2.515-1.031-2.597-3.665-2.597-3.665l0.041-2.59c-0.082-0.989,0.041-1.827,0.041-1.827c2.392-2.431,5.647-8.49,5.647-8.49
	c2.06-3.915,3.214-9.291,3.214-9.291c1.154,0.412,2.555-0.157,2.555-0.157c1.773-0.124,2.845-3.106,2.845-3.106
	c0.7-1.937,1.578-7.808,1.578-7.808c0.723-2.602,1.301-7.191,1.301-7.191c0.418-2.796-1.012-5.532-1.012-5.532
	c-1.167-2.191-3.323-2.81-3.323-2.81c1.59-6.792,0-14.781,0-14.781c-1.445-8.237-11.503-15.752-11.503-15.752
	C21.726-181.667,0-181.164,0-181.164s-21.734-0.502-31.035,11.637C-31.035-169.527-41.086-162.012-42.531-153.775z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-40.895-148.19c0,0-1.496,7.632,0,14.024
	c0,0-2.03,0.573-3.128,2.634c0,0-1.346,2.582-0.952,5.214c0,0,0.544,4.334,1.224,6.782c0,0,0.826,5.571,1.485,7.394
	c0,0,1.009,2.817,2.677,2.933c0,0,1.319,0.557,2.405,0.169c0,0,1.086,5.111,3.025,8.796c0,0,3.065,5.769,5.314,8.057
	c0,0,0.117,0.796,0.039,1.727l0.039,2.448c0,0-0.078,2.512-2.444,3.481c0,0-6.322,3.765-11.792,5.976c0,0-7.098,5.414-16.369,14.607
	c0,0-5.197,7.74-8.844,14.101c0,0-4.616,12.11-6.516,17.928c0,0-3.181,13.535-4.926,21.409c0,0-0.931,5.044-1.513,7.605
	c0,0-1.823,6.972-3.181,10.191c0,0-2.715,7.852-2.909,9.598c0,0-0.504,5.564,0,8.085c0,0,0.194,4.274,1.551,5.438
	c0,0,0.815,0.788,1.358,0.75c0,0,0.116,4.209,1.746,5.722c0,0,1.163,1.594,2.637,1.168c0,0,0.621,2.89,3.103,2.968
	c0,0,2.367,0.522,2.832-1.03c0,0,0.836,3.152,3.392,3.152c0,0,3.098,1.015,3.258-1.764c0,0,0.128-0.13-1.214-3.74
	c0,0-1.022-1.697-0.958-5.53c0,0,0.128-2.167,1.182-4.146c0,0,0.798-0.936,2.396-0.839c0,0,1.948,0.463,2.012,2.314
	c0,0,0.128,3.2,0.224,4.51c0,0,0.351,3.912,2.236,4.456c0,0,1.47,0.779,2.364,0.459c0,0,0.895-0.047,0.607-2.059
	c0,0-0.447-2.381-0.032-6.502c0,0,0.224-1.568,0-2.591c0,0-0.767-2.24-2.555-4.604c0,0-1.917-2.103-1.949-4.85
	c0,0-0.128-1.134,0.383-1.837c0,0,4.173-4.908,6.176-9.586c0,0,2.162-3.479,2.737-5.906c0,0,0.863-3.365,0.926-5.09
	c0,0,2.46-1.828,3.483-2.722c0,0,2.715-1.016,4.44-3.093c0,0,2.396-1.884,2.747-3.928c0,0,0.735,7.383,0.799,14.826
	c0,0,0.543,12.139-0.288,20.444c0,0-2.204,20.746-3.705,27.423c0,0-3.802,21.929-4.249,29.053c0,0-0.671,12.261-0.447,19.832
	c0,0,0.064,2.925,0.543,6.981c0,0,2.236,13.782,5.015,22.6c0,0,3.77,13.134,4.696,15.786c0,0,1.502,5.434,1.214,8.947
	c0,0-0.734,6.071-0.734,7.637c0,0-0.384,7.866,0.638,10.646c0,0,1.489,3.067,3.661,3.29c0,0,1.658,0.064,2.009-0.639
	c0,0,0.901,1.055,2.434,1.055c0,0,2.154-0.256,2.473-1.15c0,0,0.567,0.702,2.356,0.734c0,0,2.48,0.096,2.927-1.373
	c0,0,0.441,0.83,1.879,0.703c0,0,2.273-0.416,2.848-1.374c0,0,1.266,1.086,2.767,0.926c0,0,3.165-0.159,3.421-2.235
	c0,0,0.648-1.343-0.407-3.322c0,0-2.01-5.175-3.575-8.242c0,0-2.888-5.303-3.08-6.07c0,0-0.457-0.671-0.393-2.651
	c0,0,2.111-9.552,1.887-13.801c0,0,0.423-4.6-0.471-9.743c0,0-0.479-5.239-1.182-7.636c0,0-0.31-2.268,0.138-4.728
	c0,0,0.953-3.322,2.071-6.708c0,0,2.87-4.888,3.765-10.638c0,0,2.865-7.812,1.875-11.677c0,0,2.602,0.895,5.621,1.453
	c0,0,2.825,0.479,5.332,0.384c2.508,0.096,5.318-0.384,5.318-0.384c3.019-0.559,5.612-1.453,5.612-1.453
	c-0.989,3.865,1.903,11.677,1.903,11.677c0.895,5.75,3.781,10.638,3.781,10.638c1.118,3.386,2.074,6.708,2.074,6.708
	c0.446,2.46,0.164,4.728,0.164,4.728c-0.703,2.396-1.161,7.636-1.161,7.636c-0.895,5.144-0.436,9.743-0.436,9.743
	c-0.224,4.249,1.936,13.801,1.936,13.801c0.063,1.98-0.381,2.651-0.381,2.651c-0.192,0.768-3.033,6.07-3.033,6.07
	c-1.565,3.067-3.52,8.242-3.52,8.242c-1.054,1.979-0.383,3.322-0.383,3.322c0.255,2.076,3.453,2.235,3.453,2.235
	c1.502,0.16,2.801-0.926,2.801-0.926c0.575,0.958,2.888,1.374,2.888,1.374c1.438,0.127,1.907-0.703,1.907-0.703
	c0.448,1.469,2.965,1.373,2.965,1.373c1.789-0.032,2.383-0.734,2.383-0.734c0.318,0.895,2.519,1.15,2.519,1.15
	c1.533,0,2.486-1.055,2.486-1.055c0.352,0.703,2.059,0.639,2.059,0.639c2.172-0.223,3.701-3.29,3.701-3.29
	c1.021-2.779,0.639-10.576,0.639-10.576c0-1.564-0.734-7.57-0.734-7.57c-0.288-3.515,1.214-8.894,1.214-8.894
	c0.926-2.65,4.696-15.69,4.696-15.69c2.778-8.817,5.015-22.493,5.015-22.493c0.479-4.058,0.544-6.943,0.544-6.943
	c0.223-7.571-0.448-19.719-0.448-19.719c-0.447-7.124-4.249-28.944-4.249-28.944c-1.501-6.676-3.705-27.303-3.705-27.303
	c-0.831-8.306-0.288-20.372-0.288-20.372c0.064-7.443,0.8-14.762,0.8-14.762c0.351,2.045,2.746,3.949,2.746,3.949
	c1.726,2.076,4.441,3.122,4.441,3.122c1.022,0.895,3.482,2.746,3.482,2.746c0.063,1.725,0.926,5.111,0.926,5.111
	c0.575,2.428,2.738,5.941,2.738,5.941c2.002,4.678,6.175,9.623,6.175,9.623c0.511,0.703,0.383,1.839,0.383,1.839
	c-0.032,2.747-1.948,4.863-1.948,4.863c-1.789,2.364-2.556,4.615-2.556,4.615c-0.224,1.022,0,2.593,0,2.593
	c0.415,4.121-0.032,6.503-0.032,6.503c-0.287,2.014,0.607,2.057,0.607,2.057c0.895,0.318,2.363-0.455,2.363-0.455
	c1.886-0.544,2.236-4.452,2.236-4.452c0.096-1.31,0.224-4.496,0.224-4.496c0.064-1.853,2.013-2.319,2.013-2.319
	c1.598-0.096,2.396,0.847,2.396,0.847c1.056,1.979,1.183,4.139,1.183,4.139c0.063,3.834-0.958,5.518-0.958,5.518
	c-1.343,3.609-1.215,3.735-1.215,3.735c0.16,2.78,3.26,1.772,3.26,1.772c2.555,0,3.391-3.147,3.391-3.147
	c0.466,1.551,2.832,1.028,2.832,1.028c2.482-0.077,3.103-2.969,3.103-2.969c1.475,0.426,2.639-1.174,2.639-1.174
	c1.629-1.513,1.745-5.732,1.745-5.732c0.543,0.038,1.357-0.76,1.357-0.76c1.357-1.164,1.552-5.453,1.552-5.453
	c0.505-2.521,0-8.109,0-8.109c-0.194-1.745-2.909-9.63-2.909-9.63C82.993,5.083,81.17-1.932,81.17-1.932
	c-0.581-2.56-1.512-7.629-1.512-7.629c-1.746-7.875-4.927-21.5-4.927-21.5c-1.9-5.819-6.517-18.002-6.517-18.002
	c-3.646-6.362-8.844-14.136-8.844-14.136c-9.271-9.193-16.369-14.706-16.369-14.706c-5.469-2.211-11.792-6.038-11.792-6.038
	c-2.365-0.97-2.443-3.507-2.443-3.507l0.039-2.468c-0.078-0.931,0.039-1.74,0.039-1.74c2.25-2.289,5.313-8.12,5.313-8.12
	c1.939-3.685,3.025-8.867,3.025-8.867c1.087,0.388,2.404-0.182,2.404-0.182c1.668-0.116,2.678-2.979,2.678-2.979
	c0.658-1.823,1.484-7.447,1.484-7.447c0.682-2.448,1.226-6.86,1.226-6.86c0.393-2.632-0.953-5.279-0.953-5.279
	c-1.099-2.061-3.128-2.705-3.128-2.705c1.496-6.392,0-14.093,0-14.093c-1.36-7.753-11.158-14.825-11.158-14.825
	C20.982-174.44,0-173.968,0-173.968s-20.991-0.472-29.745,10.953C-29.745-163.015-39.535-155.943-40.895-148.19z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-39.258-142.604c0,0-1.403,7.341,0,13.334
	c0,0-1.903,0.594-2.933,2.527c0,0-1.261,2.491-0.892,4.959c0,0,0.51,4.152,1.147,6.448c0,0,0.775,5.321,1.393,7.03
	c0,0,0.946,2.696,2.509,2.805c0,0,1.237,0.557,2.255,0.194c0,0,1.018,4.914,2.836,8.369c0,0,2.873,5.539,4.982,7.685
	c0,0,0.109,0.766,0.037,1.639l0.036,2.325c0,0-0.073,2.414-2.291,3.324c0,0-5.927,3.721-11.055,5.793c0,0-6.655,5.387-15.346,14.005
	c0,0-4.873,7.484-8.291,13.448c0,0-4.327,11.609-6.109,17.064c0,0-2.982,12.982-4.619,20.364c0,0-0.872,4.831-1.418,7.231
	c0,0-1.709,6.678-2.982,9.697c0,0-2.545,7.494-2.727,9.131c0,0-0.473,5.323,0,7.687c0,0,0.182,4.082,1.454,5.173
	c0,0,0.764,0.761,1.273,0.725c0,0,0.109,4.026,1.637,5.444c0,0,1.091,1.536,2.472,1.137c0,0,0.582,2.771,2.91,2.845
	c0,0,2.218,0.542,2.654-0.913c0,0,0.784,3.022,3.18,3.022c0,0,2.905,1.022,3.055-1.583c0,0,0.119-0.052-1.138-3.436
	c0,0-0.959-1.488-0.899-5.083c0,0,0.12-1.953,1.108-3.81c0,0,0.749-0.834,2.246-0.744c0,0,1.827,0.479,1.887,2.216
	c0,0,0.12,3.06,0.21,4.287c0,0,0.329,3.738,2.096,4.247c0,0,1.378,0.766,2.217,0.466c0,0,0.838-0.005,0.569-1.892
	c0,0-0.42-2.113-0.03-5.977c0,0,0.209-1.424,0-2.383c0,0-0.719-2.004-2.396-4.22c0,0-1.797-1.875-1.827-4.451
	c0,0-0.12-1.03,0.359-1.689c0,0,3.912-4.393,5.79-8.777c0,0,2.027-3.142,2.566-5.417c0,0,0.809-3.06,0.869-4.677
	c0,0,2.306-1.637,3.264-2.476c0,0,2.546-0.858,4.163-2.805c0,0,2.246-1.68,2.576-3.596c0,0,0.688,7.123,0.748,14.101
	c0,0,0.509,11.659-0.269,19.446c0,0-2.067,19.827-3.474,26.088c0,0-3.564,20.958-3.984,27.637c0,0-0.628,11.767-0.419,18.865
	c0,0,0.06,2.837,0.509,6.64c0,0,2.097,13.238,4.702,21.504c0,0,3.534,12.54,4.403,15.026c0,0,1.407,5.218,1.138,8.513
	c0,0-0.689,5.797-0.689,7.264c0,0-0.359,7.522,0.599,10.128c0,0,1.428,2.875,3.465,3.085c0,0,1.566,0.06,1.895-0.6
	c0,0,0.861,0.988,2.298,0.988c0,0,2.036-0.239,2.336-1.078c0,0,0.546,0.659,2.223,0.689c0,0,2.345,0.09,2.764-1.288
	c0,0,0.426,0.778,1.774,0.659c0,0,2.15-0.39,2.689-1.288c0,0,1.204,1.019,2.612,0.868c0,0,2.995-0.149,3.234-2.097
	c0,0,0.63-1.258-0.358-3.114c0,0-1.82-4.852-3.287-7.727c0,0-2.659-4.972-2.839-5.691c0,0-0.411-0.629-0.351-2.484
	c0,0,2.078-8.955,1.869-12.938c0,0,0.466-4.312-0.373-9.135c0,0-0.393-4.912-1.052-7.158c0,0-0.259-2.126,0.161-4.432
	c0,0,0.942-3.115,1.99-6.29c0,0,2.772-4.582,3.61-9.974c0,0,2.771-7.321,1.842-10.945c0,0,2.479,0.838,5.309,1.362
	c0,0,2.683,0.449,5.034,0.359c2.352,0.09,5.02-0.359,5.02-0.359c2.829-0.524,5.301-1.362,5.301-1.362
	c-0.93,3.624,1.87,10.945,1.87,10.945c0.839,5.392,3.627,9.974,3.627,9.974c1.048,3.175,1.994,6.29,1.994,6.29
	c0.419,2.306,0.187,4.432,0.187,4.432c-0.659,2.246-1.03,7.158-1.03,7.158c-0.838,4.822-0.335,9.135-0.335,9.135
	c-0.21,3.983,1.918,12.938,1.918,12.938c0.061,1.855-0.338,2.484-0.338,2.484c-0.18,0.72-2.791,5.691-2.791,5.691
	c-1.468,2.875-3.228,7.727-3.228,7.727c-0.989,1.856-0.335,3.114-0.335,3.114c0.239,1.947,3.269,2.097,3.269,2.097
	c1.408,0.15,2.646-0.868,2.646-0.868c0.539,0.898,2.73,1.288,2.73,1.288c1.349,0.119,1.804-0.659,1.804-0.659
	c0.419,1.378,2.803,1.288,2.803,1.288c1.677-0.03,2.251-0.689,2.251-0.689c0.299,0.839,2.382,1.078,2.382,1.078
	c1.438,0,2.353-0.988,2.353-0.988c0.329,0.659,1.946,0.6,1.946,0.6c2.037-0.21,3.506-3.085,3.506-3.085
	c0.959-2.605,0.6-10.055,0.6-10.055c0-1.468-0.688-7.196-0.688-7.196c-0.27-3.295,1.138-8.456,1.138-8.456
	c0.868-2.486,4.402-14.929,4.402-14.929c2.606-8.266,4.702-21.394,4.702-21.394c0.449-3.804,0.509-6.601,0.509-6.601
	c0.21-7.098-0.419-18.748-0.419-18.748c-0.419-6.679-3.983-27.524-3.983-27.524c-1.407-6.259-3.474-25.965-3.474-25.965
	c-0.779-7.786-0.27-19.37-0.27-19.37c0.06-6.978,0.749-14.035,0.749-14.035c0.328,1.917,2.575,3.617,2.575,3.617
	c1.617,1.947,4.162,2.837,4.162,2.837c0.959,0.839,3.266,2.499,3.266,2.499c0.06,1.618,0.868,4.699,0.868,4.699
	c0.539,2.275,2.566,5.453,2.566,5.453c1.877,4.386,5.789,8.817,5.789,8.817c0.48,0.659,0.36,1.69,0.36,1.69
	c-0.03,2.576-1.827,4.466-1.827,4.466c-1.677,2.216-2.396,4.23-2.396,4.23c-0.21,0.958,0,2.386,0,2.386
	c0.39,3.863-0.029,5.978-0.029,5.978c-0.271,1.887,0.568,1.888,0.568,1.888c0.839,0.3,2.217-0.462,2.217-0.462
	c1.767-0.509,2.097-4.242,2.097-4.242c0.09-1.229,0.209-4.273,0.209-4.273c0.06-1.737,1.887-2.218,1.887-2.218
	c1.498-0.09,2.246,0.75,2.246,0.75c0.989,1.856,1.108,3.802,1.108,3.802c0.06,3.594-0.898,5.069-0.898,5.069
	c-1.258,3.384-1.138,3.431-1.138,3.431c0.149,2.606,3.055,1.592,3.055,1.592c2.396,0,3.179-3.018,3.179-3.018
	c0.438,1.455,2.655,0.912,2.655,0.912c2.327-0.073,2.909-2.847,2.909-2.847c1.382,0.4,2.473-1.142,2.473-1.142
	c1.527-1.418,1.637-5.457,1.637-5.457c0.509,0.037,1.272-0.733,1.272-0.733c1.273-1.091,1.455-5.189,1.455-5.189
	c0.472-2.363,0-7.711,0-7.711c-0.182-1.636-2.728-9.165-2.728-9.165c-1.272-3.019-2.982-9.739-2.982-9.739
	c-0.545-2.4-1.418-7.257-1.418-7.257c-1.636-7.382-4.618-20.458-4.618-20.458c-1.782-5.454-6.109-17.14-6.109-17.14
	c-3.419-5.964-8.292-13.484-8.292-13.484c-8.69-8.619-15.346-14.106-15.346-14.106c-5.127-2.073-11.054-5.86-11.054-5.86
	c-2.219-0.909-2.292-3.349-2.292-3.349l0.037-2.347c-0.073-0.873,0.036-1.653,0.036-1.653c2.108-2.145,4.981-7.749,4.981-7.749
	c1.818-3.454,2.837-8.442,2.837-8.442c1.019,0.363,2.254-0.208,2.254-0.208c1.564-0.109,2.51-2.852,2.51-2.852
	c0.618-1.709,1.393-7.085,1.393-7.085c0.638-2.296,1.148-6.529,1.148-6.529c0.368-2.468-0.894-5.027-0.894-5.027
	c-1.029-1.932-2.932-2.6-2.932-2.6c1.401-5.993,0-13.405,0-13.405c-1.276-7.268-10.813-13.899-10.813-13.899
	c-8.207-10.711-28.444-10.268-28.444-10.268s-20.248-0.443-28.455,10.268C-28.454-156.503-37.983-149.872-39.258-142.604z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-37.622-137.019c0,0-1.309,7.05,0,12.644
	c0,0-1.776,0.616-2.737,2.419c0,0-1.178,2.401-0.833,4.704c0,0,0.476,3.972,1.071,6.114c0,0,0.723,5.073,1.3,6.668
	c0,0,0.882,2.575,2.342,2.676c0,0,1.154,0.558,2.104,0.218c0,0,0.95,4.719,2.647,7.943c0,0,2.682,5.309,4.65,7.312
	c0,0,0.102,0.738,0.034,1.552l0.034,2.203c0,0-0.068,2.316-2.138,3.165c0,0-5.533,3.678-10.318,5.612c0,0-6.211,5.359-14.323,13.403
	c0,0-4.548,7.228-7.739,12.794c0,0-4.038,11.109-5.702,16.2c0,0-2.783,12.429-4.31,19.319c0,0-0.815,4.617-1.324,6.857
	c0,0-1.595,6.386-2.783,9.202c0,0-2.376,7.138-2.545,8.665c0,0-0.442,5.082,0,7.289c0,0,0.169,3.892,1.357,4.909
	c0,0,0.713,0.73,1.188,0.696c0,0,0.102,3.845,1.528,5.169c0,0,1.018,1.479,2.307,1.105c0,0,0.544,2.653,2.716,2.722
	c0,0,2.07,0.56,2.477-0.797c0,0,0.732,2.893,2.968,2.893c0,0,2.711,1.029,2.851-1.403c0,0,0.112,0.029-1.062-3.13
	c0,0-0.894-1.28-0.839-4.635c0,0,0.112-1.74,1.035-3.473c0,0,0.698-0.733,2.096-0.649c0,0,1.705,0.495,1.761,2.116
	c0,0,0.112,2.918,0.196,4.063c0,0,0.307,3.563,1.957,4.038c0,0,1.285,0.753,2.068,0.474c0,0,0.783,0.037,0.531-1.725
	c0,0-0.391-1.845-0.028-5.45c0,0,0.196-1.28,0-2.175c0,0-0.671-1.769-2.236-3.838c0,0-1.677-1.646-1.705-4.05
	c0,0-0.112-0.927,0.335-1.542c0,0,3.652-3.877,5.404-7.97c0,0,1.892-2.805,2.395-4.93c0,0,0.755-2.754,0.811-4.264
	c0,0,2.152-1.445,3.046-2.228c0,0,2.376-0.702,3.886-2.519c0,0,2.096-1.475,2.404-3.264c0,0,0.643,6.864,0.699,13.377
	c0,0,0.475,11.179-0.252,18.447c0,0-1.929,18.911-3.242,24.753c0,0-3.327,19.988-3.718,26.223c0,0-0.587,11.272-0.391,17.897
	c0,0,0.055,2.749,0.475,6.299c0,0,1.956,12.692,4.388,20.408c0,0,3.299,11.945,4.109,14.266c0,0,1.314,5.003,1.063,8.078
	c0,0-0.643,5.522-0.643,6.893c0,0-0.336,7.176,0.559,9.608c0,0,1.368,2.683,3.268,2.879c0,0,1.475,0.056,1.782-0.559
	c0,0,0.821,0.922,2.162,0.922c0,0,1.918-0.225,2.198-1.007c0,0,0.525,0.615,2.09,0.644c0,0,2.211,0.083,2.603-1.202
	c0,0,0.41,0.727,1.667,0.615c0,0,2.028-0.364,2.531-1.202c0,0,1.142,0.95,2.456,0.81c0,0,2.825-0.139,3.049-1.955
	c0,0,0.612-1.175-0.311-2.907c0,0-1.628-4.529-2.998-7.212c0,0-2.43-4.641-2.597-5.312c0,0-0.366-0.587-0.31-2.319
	c0,0,2.046-8.358,1.851-12.076c0,0,0.508-4.025-0.275-8.525c0,0-0.307-4.585-0.922-6.681c0,0-0.207-1.985,0.184-4.138
	c0,0,0.932-2.906,1.91-5.869c0,0,2.672-4.277,3.455-9.309c0,0,2.675-6.835,1.809-10.217c0,0,2.354,0.783,4.996,1.271
	c0,0,2.542,0.42,4.736,0.336c2.194,0.084,4.721-0.336,4.721-0.336c2.642-0.488,4.987-1.271,4.987-1.271
	c-0.866,3.382,1.839,10.217,1.839,10.217c0.783,5.031,3.473,9.309,3.473,9.309c0.978,2.963,1.913,5.869,1.913,5.869
	c0.392,2.152,0.212,4.138,0.212,4.138c-0.615,2.096-0.9,6.681-0.9,6.681c-0.782,4.5-0.236,8.525-0.236,8.525
	c-0.194,3.718,1.902,12.076,1.902,12.076c0.056,1.732-0.296,2.319-0.296,2.319c-0.168,0.671-2.548,5.312-2.548,5.312
	c-1.37,2.683-2.938,7.212-2.938,7.212c-0.922,1.732-0.286,2.907-0.286,2.907c0.225,1.816,3.086,1.955,3.086,1.955
	c1.313,0.141,2.491-0.81,2.491-0.81c0.503,0.838,2.573,1.202,2.573,1.202c1.258,0.111,1.698-0.615,1.698-0.615
	c0.391,1.285,2.642,1.202,2.642,1.202c1.566-0.028,2.119-0.644,2.119-0.644c0.28,0.782,2.246,1.007,2.246,1.007
	c1.342,0,2.219-0.922,2.219-0.922c0.308,0.614,1.834,0.559,1.834,0.559c1.901-0.196,3.312-2.879,3.312-2.879
	c0.895-2.433,0.559-9.534,0.559-9.534c0-1.369-0.643-6.822-0.643-6.822c-0.251-3.074,1.062-8.019,1.062-8.019
	c0.811-2.32,4.109-14.165,4.109-14.165c2.431-7.715,4.388-20.295,4.388-20.295c0.419-3.55,0.476-6.258,0.476-6.258
	c0.195-6.624-0.392-17.776-0.392-17.776c-0.391-6.234-3.718-26.106-3.718-26.106c-1.313-5.842-3.242-24.626-3.242-24.626
	c-0.727-7.268-0.252-18.368-0.252-18.368c0.056-6.514,0.699-13.309,0.699-13.309c0.307,1.789,2.404,3.285,2.404,3.285
	c1.509,1.817,3.885,2.552,3.885,2.552c0.895,0.782,3.047,2.253,3.047,2.253c0.056,1.51,0.811,4.286,0.811,4.286
	c0.503,2.125,2.396,4.966,2.396,4.966c1.752,4.094,5.404,8.012,5.404,8.012c0.446,0.614,0.335,1.543,0.335,1.543
	c-0.028,2.403-1.705,4.065-1.705,4.065c-1.565,2.068-2.236,3.849-2.236,3.849c-0.196,0.895,0,2.178,0,2.178
	c0.363,3.605-0.028,5.452-0.028,5.452c-0.252,1.761,0.531,1.72,0.531,1.72c0.782,0.279,2.068-0.468,2.068-0.468
	c1.649-0.477,1.957-4.034,1.957-4.034c0.084-1.146,0.195-4.05,0.195-4.05c0.057-1.621,1.762-2.119,1.762-2.119
	c1.396-0.084,2.096,0.655,2.096,0.655c0.923,1.733,1.034,3.465,1.034,3.465c0.056,3.354-0.838,4.621-0.838,4.621
	c-1.174,3.158-1.062,3.126-1.062,3.126c0.139,2.432,2.852,1.411,2.852,1.411c2.235,0,2.967-2.889,2.967-2.889
	c0.408,1.358,2.478,0.796,2.478,0.796c2.172-0.067,2.715-2.723,2.715-2.723c1.29,0.374,2.309-1.111,2.309-1.111
	c1.426-1.323,1.528-5.18,1.528-5.18c0.475,0.034,1.188-0.707,1.188-0.707c1.188-1.018,1.357-4.926,1.357-4.926
	c0.44-2.206,0-7.314,0-7.314c-0.17-1.526-2.545-8.698-2.545-8.698c-1.188-2.817-2.784-9.247-2.784-9.247
	c-0.51-2.24-1.323-6.884-1.323-6.884c-1.528-6.89-4.312-19.416-4.312-19.416c-1.662-5.091-5.701-16.279-5.701-16.279
	c-3.19-5.567-7.738-12.832-7.738-12.832c-8.112-8.044-14.323-13.507-14.323-13.507c-4.786-1.935-10.318-5.68-10.318-5.68
	c-2.069-0.849-2.138-3.193-2.138-3.193l0.034-2.224c-0.068-0.815,0.034-1.566,0.034-1.566c1.968-2.003,4.649-7.379,4.649-7.379
	c1.697-3.224,2.647-8.018,2.647-8.018c0.95,0.339,2.104-0.233,2.104-0.233c1.46-0.101,2.343-2.725,2.343-2.725
	c0.576-1.595,1.3-6.724,1.3-6.724c0.595-2.142,1.071-6.198,1.071-6.198c0.344-2.303-0.833-4.773-0.833-4.773
	c-0.962-1.804-2.737-2.496-2.737-2.496c1.309-5.593,0-12.717,0-12.717c-1.19-6.784-10.467-12.972-10.467-12.972
	C19.495-159.988,0-159.574,0-159.574s-19.504-0.414-27.164,9.583C-27.164-149.991-36.432-143.803-37.622-137.019z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-35.985-131.433c0,0-1.216,6.759,0,11.953
	c0,0-1.649,0.638-2.542,2.312c0,0-1.093,2.31-0.773,4.448c0,0,0.442,3.792,0.994,5.781c0,0,0.672,4.822,1.207,6.304
	c0,0,0.82,2.454,2.175,2.548c0,0,1.072,0.558,1.954,0.243c0,0,0.882,4.521,2.458,7.516c0,0,2.49,5.079,4.318,6.939
	c0,0,0.095,0.709,0.032,1.464l0.031,2.08c0,0-0.063,2.219-1.986,3.007c0,0-5.137,3.635-9.58,5.431c0,0-5.768,5.331-13.3,12.8
	c0,0-4.223,6.972-7.186,12.141c0,0-3.75,10.608-5.295,15.336c0,0-2.584,11.876-4.002,18.274c0,0-0.757,4.404-1.229,6.484
	c0,0-1.482,6.091-2.585,8.707c0,0-2.206,6.779-2.363,8.198c0,0-0.41,4.842,0,6.891c0,0,0.157,3.699,1.26,4.645
	c0,0,0.662,0.702,1.103,0.67c0,0,0.095,3.663,1.418,4.893c0,0,0.946,1.421,2.144,1.073c0,0,0.504,2.535,2.521,2.599
	c0,0,1.922,0.58,2.301-0.682c0,0,0.679,2.765,2.755,2.765c0,0,2.518,1.036,2.648-1.223c0,0,0.104,0.108-0.987-2.825
	c0,0-0.83-1.072-0.778-4.188c0,0,0.104-1.526,0.96-3.135c0,0,0.649-0.632,1.947-0.555c0,0,1.583,0.511,1.635,2.017
	c0,0,0.104,2.776,0.182,3.842c0,0,0.285,3.388,1.817,3.829c0,0,1.194,0.739,1.92,0.479c0,0,0.727,0.079,0.494-1.557
	c0,0-0.364-1.577-0.026-4.925c0,0,0.181-1.136,0-1.966c0,0-0.623-1.533-2.077-3.454c0,0-1.557-1.419-1.583-3.651
	c0,0-0.104-0.824,0.311-1.395c0,0,3.391-3.361,5.018-7.162c0,0,1.757-2.466,2.224-4.439c0,0,0.701-2.449,0.753-3.851
	c0,0,1.998-1.255,2.829-1.981c0,0,2.206-0.545,3.608-2.232c0,0,1.947-1.271,2.232-2.932c0,0,0.597,6.604,0.649,12.652
	c0,0,0.441,10.699-0.234,17.448c0,0-1.791,17.993-3.011,23.418c0,0-3.088,19.02-3.452,24.808c0,0-0.545,10.779-0.363,16.93
	c0,0,0.052,2.66,0.441,5.957c0,0,1.817,12.15,4.075,19.313c0,0,3.063,11.352,3.816,13.506c0,0,1.22,4.788,0.986,7.644
	c0,0-0.597,5.249-0.597,6.521c0,0-0.311,6.831,0.519,9.089c0,0,1.308,2.492,3.073,2.673c0,0,1.383,0.053,1.669-0.519
	c0,0,0.78,0.856,2.025,0.856c0,0,1.801-0.208,2.06-0.935c0,0,0.505,0.571,1.958,0.597c0,0,2.077,0.078,2.44-1.115
	c0,0,0.394,0.675,1.562,0.57c0,0,1.904-0.337,2.372-1.116c0,0,1.08,0.884,2.3,0.754c0,0,2.656-0.131,2.863-1.817
	c0,0,0.595-1.09-0.262-2.699c0,0-1.438-4.205-2.71-6.697c0,0-2.201-4.309-2.356-4.932c0,0-0.319-0.545-0.267-2.154
	c0,0,2.013-7.761,1.831-11.213c0,0,0.551-3.737-0.176-7.917c0,0-0.221-4.256-0.792-6.203c0,0-0.157-1.843,0.207-3.842
	c0,0,0.921-2.699,1.83-5.45c0,0,2.572-3.972,3.299-8.644c0,0,2.581-6.346,1.776-9.487c0,0,2.231,0.728,4.683,1.182
	c0,0,2.401,0.39,4.438,0.312c2.037,0.078,4.422-0.312,4.422-0.312c2.453-0.454,4.676-1.182,4.676-1.182
	c-0.806,3.142,1.806,9.487,1.806,9.487c0.728,4.672,3.317,8.644,3.317,8.644c0.908,2.751,1.834,5.45,1.834,5.45
	c0.362,1.999,0.235,3.842,0.235,3.842c-0.57,1.947-0.769,6.203-0.769,6.203c-0.728,4.18-0.137,7.917-0.137,7.917
	c-0.182,3.452,1.885,11.213,1.885,11.213c0.052,1.609-0.253,2.154-0.253,2.154c-0.156,0.623-2.307,4.932-2.307,4.932
	c-1.271,2.492-2.646,6.697-2.646,6.697c-0.856,1.609-0.237,2.699-0.237,2.699c0.208,1.687,2.9,1.817,2.9,1.817
	c1.22,0.13,2.337-0.754,2.337-0.754c0.468,0.779,2.416,1.116,2.416,1.116c1.168,0.104,1.593-0.57,1.593-0.57
	c0.364,1.193,2.482,1.115,2.482,1.115c1.453-0.025,1.986-0.597,1.986-0.597c0.26,0.727,2.11,0.935,2.11,0.935
	c1.246,0,2.084-0.856,2.084-0.856c0.285,0.571,1.723,0.519,1.723,0.519c1.766-0.181,3.117-2.673,3.117-2.673
	c0.83-2.258,0.52-9.012,0.52-9.012c0-1.272-0.598-6.449-0.598-6.449c-0.233-2.854,0.986-7.582,0.986-7.582
	c0.753-2.154,3.816-13.402,3.816-13.402c2.258-7.162,4.074-19.195,4.074-19.195c0.39-3.296,0.441-5.914,0.441-5.914
	c0.182-6.151-0.363-16.805-0.363-16.805c-0.364-5.788-3.452-24.688-3.452-24.688c-1.22-5.424-3.011-23.287-3.011-23.287
	C35.938,16.286,36.38,5.667,36.38,5.667c0.052-6.047,0.648-12.581,0.648-12.581c0.286,1.662,2.232,2.954,2.232,2.954
	c1.401,1.687,3.607,2.265,3.607,2.265c0.831,0.727,2.829,2.007,2.829,2.007c0.052,1.402,0.753,3.875,0.753,3.875
	c0.467,1.973,2.225,4.479,2.225,4.479c1.627,3.802,5.018,7.204,5.018,7.204c0.415,0.571,0.311,1.396,0.311,1.396
	c-0.025,2.231-1.583,3.667-1.583,3.667c-1.453,1.921-2.076,3.465-2.076,3.465c-0.182,0.831,0,1.97,0,1.97
	c0.338,3.348-0.025,4.926-0.025,4.926c-0.234,1.637,0.493,1.554,0.493,1.554c0.726,0.259,1.92-0.476,1.92-0.476
	c1.532-0.44,1.817-3.825,1.817-3.825c0.077-1.063,0.182-3.826,0.182-3.826c0.052-1.506,1.635-2.02,1.635-2.02
	c1.298-0.078,1.947,0.562,1.947,0.562c0.856,1.608,0.96,3.127,0.96,3.127c0.052,3.114-0.778,4.173-0.778,4.173
	c-1.09,2.933-0.986,2.822-0.986,2.822c0.13,2.258,2.647,1.229,2.647,1.229c2.076,0,2.756-2.759,2.756-2.759
	c0.378,1.261,2.3,0.68,2.3,0.68c2.018-0.062,2.522-2.599,2.522-2.599c1.197,0.346,2.143-1.08,2.143-1.08
	c1.323-1.23,1.418-4.904,1.418-4.904c0.441,0.031,1.104-0.681,1.104-0.681c1.103-0.945,1.261-4.663,1.261-4.663
	c0.409-2.048,0-6.916,0-6.916c-0.158-1.418-2.364-8.234-2.364-8.234c-1.103-2.614-2.585-8.752-2.585-8.752
	c-0.472-2.08-1.229-6.511-1.229-6.511c-1.418-6.398-4.002-18.375-4.002-18.375c-1.544-4.727-5.295-15.418-5.295-15.418
	c-2.962-5.168-7.187-12.179-7.187-12.179c-7.531-7.469-13.299-12.908-13.299-12.908c-4.443-1.796-9.581-5.501-9.581-5.501
	c-1.923-0.787-1.985-3.035-1.985-3.035l0.031-2.102c-0.062-0.757,0.031-1.479,0.031-1.479c1.828-1.86,4.318-7.007,4.318-7.007
	c1.576-2.994,2.458-7.596,2.458-7.596c0.883,0.315,1.954-0.257,1.954-0.257c1.354-0.095,2.175-2.599,2.175-2.599
	c0.536-1.481,1.207-6.363,1.207-6.363c0.552-1.989,0.994-5.867,0.994-5.867c0.319-2.139-0.773-4.52-0.773-4.52
	c-0.892-1.675-2.542-2.392-2.542-2.392c1.216-5.193,0-12.028,0-12.028c-1.105-6.299-10.121-12.046-10.121-12.046
	C18.751-152.761,0-152.377,0-152.377s-18.761-0.384-25.873,8.898C-25.873-143.479-34.881-137.732-35.985-131.433z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-34.349-125.848c0,0-1.122,6.469,0,11.263
	c0,0-1.523,0.659-2.346,2.205c0,0-1.009,2.219-0.714,4.193c0,0,0.408,3.612,0.918,5.448c0,0,0.619,4.573,1.114,5.941
	c0,0,0.756,2.332,2.007,2.42c0,0,0.99,0.558,1.804,0.267c0,0,0.815,4.326,2.269,7.09c0,0,2.299,4.849,3.986,6.565
	c0,0,0.087,0.68,0.029,1.378l0.029,1.958c0,0-0.058,2.121-1.833,2.848c0,0-4.742,3.592-8.844,5.25c0,0-5.324,5.303-12.276,12.198
	c0,0-3.899,6.716-6.633,11.487c0,0-3.462,10.108-4.888,14.471c0,0-2.385,11.325-3.695,17.23c0,0-0.698,4.19-1.134,6.11
	c0,0-1.367,5.798-2.386,8.212c0,0-2.036,6.422-2.182,7.732c0,0-0.378,4.601,0,6.492c0,0,0.146,3.508,1.164,4.381
	c0,0,0.611,0.672,1.018,0.643c0,0,0.088,3.481,1.309,4.615c0,0,0.873,1.363,1.979,1.043c0,0,0.465,2.417,2.327,2.475
	c0,0,1.775,0.6,2.124-0.564c0,0,0.627,2.634,2.543,2.634c0,0,2.325,1.044,2.444-1.041c0,0,0.096,0.188-0.91-2.52
	c0,0-0.767-0.865-0.719-3.74c0,0,0.096-1.313,0.887-2.799c0,0,0.599-0.531,1.797-0.459c0,0,1.461,0.526,1.509,1.917
	c0,0,0.096,2.636,0.168,3.619c0,0,0.263,3.213,1.677,3.619c0,0,1.102,0.727,1.773,0.486c0,0,0.671,0.12,0.455-1.389
	c0,0-0.335-1.31-0.024-4.4c0,0,0.168-0.991,0-1.758c0,0-0.575-1.297-1.917-3.07c0,0-1.437-1.19-1.461-3.252
	c0,0-0.096-0.72,0.287-1.247c0,0,3.13-2.845,4.632-6.354c0,0,1.622-2.13,2.053-3.951c0,0,0.647-2.144,0.695-3.437
	c0,0,1.845-1.064,2.611-1.735c0,0,2.037-0.387,3.331-1.945c0,0,1.797-1.066,2.06-2.599c0,0,0.551,6.344,0.599,11.927
	c0,0,0.408,10.219-0.215,16.449c0,0-1.654,17.076-2.78,22.083c0,0-2.851,18.05-3.186,23.393c0,0-0.503,10.285-0.336,15.963
	c0,0,0.048,2.572,0.408,5.615c0,0,1.677,11.606,3.761,18.219c0,0,2.827,10.758,3.522,12.745c0,0,1.126,4.572,0.911,7.208
	c0,0-0.551,4.976-0.551,6.149c0,0-0.288,6.486,0.479,8.57c0,0,1.247,2.3,2.877,2.468c0,0,1.291,0.048,1.555-0.479
	c0,0,0.739,0.79,1.889,0.79c0,0,1.683-0.19,1.923-0.861c0,0,0.483,0.526,1.825,0.551c0,0,1.942,0.071,2.277-1.03
	c0,0,0.379,0.623,1.457,0.527c0,0,1.781-0.312,2.212-1.03c0,0,1.019,0.813,2.145,0.694c0,0,2.486-0.119,2.678-1.678
	c0,0,0.576-1.006-0.214-2.491c0,0-1.247-3.882-2.421-6.182c0,0-1.972-3.977-2.116-4.552c0,0-0.273-0.504-0.225-1.989
	c0,0,1.981-7.164,1.813-10.35c0,0,0.593-3.451-0.078-7.309c0,0-0.136-3.929-0.663-5.726c0,0-0.104-1.701,0.231-3.546
	c0,0,0.911-2.492,1.749-5.032c0,0,2.474-3.666,3.145-7.978c0,0,2.486-5.858,1.743-8.757c0,0,2.106,0.67,4.37,1.09
	c0,0,2.26,0.358,4.141,0.287c1.881,0.071,4.124-0.287,4.124-0.287c2.265-0.42,4.361-1.09,4.361-1.09
	c-0.742,2.898,1.775,8.757,1.775,8.757c0.671,4.312,3.161,7.978,3.161,7.978c0.84,2.54,1.754,5.032,1.754,5.032
	c0.336,1.845,0.261,3.546,0.261,3.546c-0.527,1.797-0.64,5.726-0.64,5.726c-0.671,3.857-0.036,7.309-0.036,7.309
	c-0.168,3.186,1.867,10.35,1.867,10.35c0.049,1.485-0.211,1.989-0.211,1.989c-0.144,0.575-2.062,4.552-2.062,4.552
	c-1.174,2.3-2.356,6.182-2.356,6.182c-0.791,1.485-0.188,2.491-0.188,2.491c0.191,1.559,2.716,1.678,2.716,1.678
	c1.126,0.119,2.183-0.694,2.183-0.694c0.432,0.718,2.259,1.03,2.259,1.03c1.077,0.096,1.488-0.527,1.488-0.527
	c0.335,1.102,2.32,1.03,2.32,1.03c1.341-0.024,1.855-0.551,1.855-0.551c0.239,0.671,1.974,0.861,1.974,0.861
	c1.149,0,1.95-0.79,1.95-0.79c0.263,0.527,1.61,0.479,1.61,0.479c1.629-0.168,2.923-2.468,2.923-2.468
	c0.767-2.084,0.479-8.49,0.479-8.49c0-1.174-0.551-6.075-0.551-6.075c-0.216-2.635,0.91-7.146,0.91-7.146
	c0.694-1.987,3.521-12.639,3.521-12.639c2.085-6.612,3.762-18.097,3.762-18.097c0.359-3.043,0.407-5.571,0.407-5.571
	c0.168-5.679-0.335-15.834-0.335-15.834c-0.336-5.343-3.187-23.269-3.187-23.269c-1.126-5.008-2.779-21.948-2.779-21.948
	c-0.623-6.23-0.216-16.366-0.216-16.366c0.048-5.582,0.599-11.853,0.599-11.853c0.264,1.533,2.062,2.621,2.062,2.621
	c1.293,1.558,3.33,1.98,3.33,1.98c0.767,0.671,2.611,1.761,2.611,1.761c0.047,1.294,0.694,3.461,0.694,3.461
	C44.44,6.76,46.062,8.93,46.062,8.93c1.502,3.509,4.632,6.397,4.632,6.397c0.384,0.527,0.288,1.249,0.288,1.249
	c-0.023,2.06-1.462,3.267-1.462,3.267c-1.342,1.774-1.917,3.082-1.917,3.082c-0.167,0.767,0,1.762,0,1.762
	c0.312,3.092-0.023,4.401-0.023,4.401c-0.216,1.51,0.455,1.385,0.455,1.385c0.671,0.239,1.773-0.48,1.773-0.48
	c1.413-0.407,1.677-3.616,1.677-3.616c0.072-0.982,0.167-3.604,0.167-3.604c0.048-1.39,1.511-1.92,1.511-1.92
	c1.197-0.071,1.797,0.466,1.797,0.466c0.791,1.486,0.886,2.79,0.886,2.79c0.048,2.875-0.718,3.726-0.718,3.726
	c-1.007,2.707-0.911,2.517-0.911,2.517c0.12,2.084,2.443,1.049,2.443,1.049c1.918,0,2.545-2.629,2.545-2.629
	c0.349,1.164,2.123,0.564,2.123,0.564c1.861-0.059,2.327-2.477,2.327-2.477c1.105,0.32,1.979-1.049,1.979-1.049
	c1.222-1.135,1.309-4.628,1.309-4.628c0.407,0.029,1.019-0.654,1.019-0.654c1.019-0.871,1.164-4.398,1.164-4.398
	c0.378-1.891,0-6.52,0-6.52c-0.146-1.309-2.183-7.768-2.183-7.768c-1.018-2.415-2.385-8.259-2.385-8.259
	c-0.437-1.92-1.135-6.139-1.135-6.139c-1.31-5.905-3.695-17.332-3.695-17.332c-1.425-4.364-4.887-14.557-4.887-14.557
	c-2.735-4.771-6.633-11.526-6.633-11.526c-6.953-6.895-12.277-12.31-12.277-12.31c-4.102-1.658-8.844-5.321-8.844-5.321
	c-1.774-0.727-1.833-2.878-1.833-2.878l0.028-1.981c-0.058-0.698,0.03-1.393,0.03-1.393c1.688-1.716,3.985-6.636,3.985-6.636
	c1.455-2.764,2.269-7.17,2.269-7.17c0.815,0.29,1.805-0.283,1.805-0.283c1.251-0.087,2.007-2.472,2.007-2.472
	c0.495-1.367,1.114-6.001,1.114-6.001c0.511-1.836,0.918-5.537,0.918-5.537c0.296-1.974-0.714-4.266-0.714-4.266
	c-0.823-1.546-2.347-2.287-2.347-2.287c1.122-4.794,0-11.341,0-11.341c-1.02-5.815-9.775-11.119-9.775-11.119
	c-6.565-8.569-24.572-8.214-24.572-8.214s-18.019-0.355-24.583,8.214C-24.583-136.967-33.329-131.663-34.349-125.848z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-32.713-120.262c0,0-1.029,6.178,0,10.573
	c0,0-1.396,0.681-2.151,2.098c0,0-0.925,2.127-0.654,3.937c0,0,0.374,3.431,0.841,5.115c0,0,0.568,4.324,1.022,5.577
	c0,0,0.693,2.212,1.84,2.292c0,0,0.906,0.558,1.653,0.291c0,0,0.747,4.13,2.08,6.664c0,0,2.107,4.619,3.654,6.192
	c0,0,0.08,0.651,0.026,1.291l0.027,1.835c0,0-0.053,2.024-1.68,2.69c0,0-4.347,3.549-8.107,5.069c0,0-4.88,5.275-11.254,11.595
	c0,0-3.573,6.46-6.08,10.834c0,0-3.173,9.607-4.48,13.607c0,0-2.187,10.772-3.387,16.185c0,0-0.64,3.977-1.04,5.737
	c0,0-1.253,5.503-2.187,7.717c0,0-1.866,6.064-2,7.266c0,0-0.346,4.359,0,6.093c0,0,0.134,3.317,1.067,4.118
	c0,0,0.56,0.643,0.933,0.615c0,0,0.08,3.3,1.2,4.34c0,0,0.8,1.305,1.813,1.011c0,0,0.426,2.298,2.133,2.351
	c0,0,1.627,0.618,1.947-0.447c0,0,0.575,2.505,2.332,2.505c0,0,2.13,1.05,2.24-0.86c0,0,0.088,0.265-0.835-2.216
	c0,0-0.703-0.657-0.659-3.293c0,0,0.088-1.1,0.813-2.461c0,0,0.549-0.431,1.647-0.364c0,0,1.34,0.543,1.384,1.816
	c0,0,0.088,2.496,0.154,3.396c0,0,0.241,3.039,1.537,3.412c0,0,1.01,0.712,1.625,0.492c0,0,0.615,0.162,0.418-1.223
	c0,0-0.308-1.041-0.022-3.873c0,0,0.153-0.848,0-1.551c0,0-0.528-1.061-1.757-2.687c0,0-1.318-0.962-1.34-2.852
	c0,0-0.088-0.616,0.263-1.1c0,0,2.869-2.329,4.246-5.546c0,0,1.487-1.793,1.882-3.462c0,0,0.593-1.839,0.637-3.025
	c0,0,1.691-0.872,2.394-1.487c0,0,1.867-0.231,3.053-1.658c0,0,1.647-0.862,1.888-2.267c0,0,0.506,6.083,0.55,11.201
	c0,0,0.373,9.74-0.198,15.451c0,0-1.516,16.158-2.548,20.748c0,0-2.613,17.081-2.921,21.979c0,0-0.461,9.79-0.307,14.995
	c0,0,0.044,2.484,0.373,5.273c0,0,1.537,11.062,3.448,17.124c0,0,2.592,10.162,3.229,11.984c0,0,1.032,4.357,0.834,6.773
	c0,0-0.505,4.701-0.505,5.777c0,0-0.263,6.141,0.439,8.051c0,0,1.188,2.108,2.681,2.263c0,0,1.2,0.044,1.442-0.439
	c0,0,0.699,0.725,1.754,0.725c0,0,1.564-0.176,1.784-0.791c0,0,0.463,0.484,1.693,0.506c0,0,1.807,0.065,2.115-0.945
	c0,0,0.362,0.571,1.351,0.483c0,0,1.658-0.285,2.053-0.944c0,0,0.957,0.747,1.99,0.638c0,0,2.316-0.11,2.491-1.538
	c0,0,0.559-0.922-0.166-2.284c0,0-1.056-3.558-2.132-5.666c0,0-1.743-3.646-1.875-4.173c0,0-0.227-0.461-0.183-1.823
	c0,0,1.948-6.567,1.795-9.488c0,0,0.635-3.161,0.021-6.697c0,0-0.05-3.603-0.533-5.249c0,0-0.053-1.561,0.254-3.251
	c0,0,0.9-2.284,1.669-4.612c0,0,2.374-3.36,2.989-7.314c0,0,2.391-5.369,1.71-8.026c0,0,1.983,0.615,4.058,0.999
	c0,0,2.119,0.33,3.843,0.264c1.725,0.066,3.825-0.264,3.825-0.264c2.076-0.384,4.05-0.999,4.05-0.999
	c-0.682,2.657,1.741,8.026,1.741,8.026c0.615,3.954,3.009,7.314,3.009,7.314c0.769,2.328,1.673,4.612,1.673,4.612
	c0.308,1.69,0.284,3.251,0.284,3.251c-0.483,1.646-0.509,5.249-0.509,5.249c-0.614,3.536,0.063,6.697,0.063,6.697
	c-0.154,2.921,1.851,9.488,1.851,9.488c0.044,1.362-0.168,1.823-0.168,1.823c-0.132,0.527-1.821,4.173-1.821,4.173
	c-1.075,2.108-2.065,5.666-2.065,5.666c-0.724,1.362-0.139,2.284-0.139,2.284c0.175,1.428,2.529,1.538,2.529,1.538
	c1.033,0.109,2.029-0.638,2.029-0.638c0.396,0.659,2.101,0.944,2.101,0.944c0.988,0.088,1.385-0.483,1.385-0.483
	c0.307,1.011,2.158,0.945,2.158,0.945c1.23-0.021,1.725-0.506,1.725-0.506c0.219,0.615,1.837,0.791,1.837,0.791
	c1.055,0,1.815-0.725,1.815-0.725c0.242,0.483,1.499,0.439,1.499,0.439c1.494-0.154,2.729-2.263,2.729-2.263
	c0.703-1.91,0.439-7.969,0.439-7.969c0-1.076-0.506-5.7-0.506-5.7c-0.196-2.416,0.835-6.708,0.835-6.708
	c0.638-1.823,3.229-11.876,3.229-11.876c1.911-6.062,3.449-16.998,3.449-16.998c0.328-2.79,0.373-5.229,0.373-5.229
	c0.153-5.206-0.308-14.862-0.308-14.862c-0.308-4.897-2.921-21.851-2.921-21.851c-1.033-4.59-2.548-20.609-2.548-20.609
	c-0.571-5.71-0.198-15.364-0.198-15.364c0.044-5.117,0.549-11.126,0.549-11.126c0.242,1.405,1.89,2.29,1.89,2.29
	c1.186,1.427,3.053,1.693,3.053,1.693c0.703,0.615,2.394,1.516,2.394,1.516c0.045,1.186,0.638,3.049,0.638,3.049
	c0.395,1.669,1.882,3.503,1.882,3.503c1.376,3.216,4.245,5.59,4.245,5.59c0.352,0.483,0.264,1.102,0.264,1.102
	c-0.021,1.889-1.34,2.869-1.34,2.869c-1.23,1.625-1.757,2.698-1.757,2.698c-0.154,0.703,0,1.554,0,1.554
	c0.286,2.834-0.022,3.876-0.022,3.876c-0.198,1.384,0.417,1.217,0.417,1.217c0.615,0.219,1.626-0.487,1.626-0.487
	c1.295-0.374,1.537-3.407,1.537-3.407c0.066-0.9,0.154-3.382,0.154-3.382c0.044-1.272,1.383-1.818,1.383-1.818
	c1.099-0.066,1.648,0.37,1.648,0.37c0.724,1.362,0.812,2.452,0.812,2.452c0.044,2.637-0.659,3.277-0.659,3.277
	c-0.922,2.48-0.834,2.212-0.834,2.212c0.11,1.911,2.24,0.869,2.24,0.869c1.757,0,2.332-2.5,2.332-2.5
	c0.32,1.066,1.947,0.448,1.947,0.448c1.706-0.054,2.133-2.354,2.133-2.354c1.013,0.293,1.812-1.018,1.812-1.018
	c1.12-1.04,1.2-4.352,1.2-4.352c0.374,0.026,0.935-0.627,0.935-0.627c0.933-0.8,1.065-4.137,1.065-4.137c0.348-1.733,0-6.12,0-6.12
	c-0.133-1.201-2-7.304-2-7.304c-0.933-2.213-2.186-7.765-2.186-7.765c-0.4-1.76-1.04-5.766-1.04-5.766
	c-1.201-5.413-3.388-16.291-3.388-16.291c-1.307-4-4.479-13.695-4.479-13.695c-2.507-4.373-6.081-10.874-6.081-10.874
	c-6.373-6.32-11.253-11.711-11.253-11.711c-3.76-1.52-8.107-5.142-8.107-5.142c-1.627-0.666-1.68-2.72-1.68-2.72l0.026-1.859
	c-0.054-0.64,0.026-1.306,0.026-1.306c1.548-1.574,3.653-6.266,3.653-6.266c1.334-2.533,2.081-6.746,2.081-6.746
	c0.746,0.266,1.653-0.308,1.653-0.308c1.146-0.08,1.84-2.345,1.84-2.345c0.453-1.253,1.021-5.639,1.021-5.639
	c0.469-1.684,0.843-5.207,0.843-5.207c0.27-1.809-0.655-4.013-0.655-4.013c-0.755-1.417-2.15-2.182-2.15-2.182
	c1.028-4.395,0-10.653,0-10.653c-0.935-5.33-9.43-10.192-9.43-10.192c-6.02-7.855-23.282-7.53-23.282-7.53
	s-17.274-0.325-23.293,7.53C-23.292-130.454-31.778-125.592-32.713-120.262z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-31.077-114.677c0,0-0.935,5.888,0,9.883
	c0,0-1.269,0.702-1.955,1.991c0,0-0.841,2.036-0.595,3.682c0,0,0.34,3.251,0.765,4.781c0,0,0.516,4.074,0.928,5.214
	c0,0,0.631,2.091,1.673,2.164c0,0,0.824,0.559,1.503,0.315c0,0,0.679,3.935,1.891,6.237c0,0,1.915,4.389,3.321,5.82
	c0,0,0.073,0.622,0.025,1.203l0.024,1.713c0,0-0.049,1.925-1.527,2.532c0,0-3.952,3.505-7.37,4.886c0,0-4.437,5.248-10.231,10.994
	c0,0-3.249,6.204-5.527,10.18c0,0-2.885,9.107-4.073,12.743c0,0-1.988,10.219-3.079,15.14c0,0-0.582,3.763-0.946,5.363
	c0,0-1.139,5.21-1.988,7.222c0,0-1.697,5.708-1.818,6.798c0,0-0.315,4.12,0,5.696c0,0,0.121,3.126,0.97,3.853
	c0,0,0.509,0.614,0.848,0.591c0,0,0.073,3.115,1.091,4.062c0,0,0.728,1.247,1.649,0.98c0,0,0.388,2.18,1.939,2.228
	c0,0,1.479,0.637,1.77-0.333c0,0,0.523,2.376,2.12,2.376c0,0,1.937,1.059,2.036-0.679c0,0,0.08,0.345-0.758-1.911
	c0,0-0.639-0.45-0.599-2.845c0,0,0.08-0.887,0.739-2.124c0,0,0.499-0.329,1.497-0.271c0,0,1.218,0.56,1.258,1.717
	c0,0,0.08,2.356,0.14,3.175c0,0,0.219,2.863,1.397,3.203c0,0,0.919,0.698,1.478,0.498c0,0,0.559,0.204,0.379-1.054
	c0,0-0.28-0.772-0.02-3.349c0,0,0.14-0.703,0-1.341c0,0-0.479-0.826-1.597-2.305c0,0-1.198-0.734-1.218-2.452
	c0,0-0.08-0.513,0.239-0.952c0,0,2.608-1.813,3.86-4.737c0,0,1.352-1.456,1.711-2.973c0,0,0.539-1.534,0.579-2.612
	c0,0,1.537-0.682,2.176-1.241c0,0,1.697-0.073,2.776-1.372c0,0,1.497-0.657,1.717-1.934c0,0,0.459,5.825,0.499,10.476
	c0,0,0.339,9.26-0.18,14.452c0,0-1.377,15.241-2.316,19.413c0,0-2.376,16.112-2.655,20.563c0,0-0.42,9.297-0.28,14.028
	c0,0,0.04,2.396,0.339,4.933c0,0,1.398,10.517,3.135,16.027c0,0,2.356,9.568,2.935,11.226c0,0,0.938,4.142,0.759,6.338
	c0,0-0.459,4.427-0.459,5.405c0,0-0.24,5.796,0.399,7.532c0,0,1.127,1.916,2.485,2.057c0,0,1.108,0.04,1.328-0.399
	c0,0,0.659,0.659,1.618,0.659c0,0,1.446-0.16,1.646-0.719c0,0,0.442,0.438,1.56,0.459c0,0,1.674,0.06,1.953-0.858
	c0,0,0.347,0.519,1.245,0.439c0,0,1.535-0.261,1.895-0.859c0,0,0.896,0.679,1.834,0.579c0,0,2.146-0.1,2.306-1.397
	c0,0,0.54-0.839-0.119-2.077c0,0-0.864-3.233-1.843-5.15c0,0-1.514-3.314-1.634-3.793c0,0-0.181-0.42-0.141-1.658
	c0,0,1.916-5.97,1.776-8.625c0,0,0.678-2.875,0.119-6.09c0,0,0.036-3.274-0.403-4.772c0,0-0.002-1.417,0.277-2.955
	c0,0,0.89-2.075,1.589-4.192c0,0,2.274-3.055,2.833-6.648c0,0,2.297-4.882,1.678-7.298c0,0,1.858,0.559,3.745,0.909
	c0,0,1.977,0.299,3.544,0.239c1.567,0.06,3.527-0.239,3.527-0.239c1.886-0.351,3.735-0.909,3.735-0.909
	c-0.619,2.416,1.711,7.298,1.711,7.298c0.559,3.594,2.853,6.648,2.853,6.648c0.699,2.117,1.594,4.192,1.594,4.192
	c0.278,1.538,0.308,2.955,0.308,2.955c-0.439,1.498-0.378,4.772-0.378,4.772c-0.559,3.215,0.163,6.09,0.163,6.09
	c-0.141,2.655,1.834,8.625,1.834,8.625c0.04,1.238-0.126,1.658-0.126,1.658c-0.12,0.479-1.578,3.793-1.578,3.793
	c-0.979,1.917-1.775,5.15-1.775,5.15c-0.658,1.238-0.091,2.077-0.091,2.077c0.16,1.298,2.346,1.397,2.346,1.397
	c0.939,0.1,1.875-0.579,1.875-0.579c0.359,0.599,1.943,0.859,1.943,0.859c0.898,0.079,1.279-0.439,1.279-0.439
	c0.28,0.918,1.998,0.858,1.998,0.858c1.118-0.021,1.592-0.459,1.592-0.459c0.2,0.559,1.702,0.719,1.702,0.719
	c0.958,0,1.681-0.659,1.681-0.659c0.22,0.439,1.388,0.399,1.388,0.399c1.357-0.141,2.533-2.057,2.533-2.057
	c0.64-1.736,0.399-7.448,0.399-7.448c0-0.978-0.459-5.325-0.459-5.325c-0.181-2.196,0.759-6.271,0.759-6.271
	c0.579-1.658,2.935-11.113,2.935-11.113c1.737-5.51,3.135-15.899,3.135-15.899c0.3-2.535,0.34-4.885,0.34-4.885
	c0.14-4.732-0.28-13.892-0.28-13.892c-0.279-4.452-2.655-20.432-2.655-20.432c-0.938-4.173-2.315-19.271-2.315-19.271
	c-0.52-5.19-0.18-14.362-0.18-14.362c0.039-4.652,0.498-10.4,0.498-10.4c0.221,1.279,1.718,1.958,1.718,1.958
	c1.079,1.298,2.775,1.408,2.775,1.408c0.64,0.559,2.177,1.269,2.177,1.269c0.039,1.078,0.578,2.638,0.578,2.638
	c0.359,1.517,1.711,3.016,1.711,3.016c1.252,2.924,3.86,4.783,3.86,4.783c0.319,0.438,0.239,0.954,0.239,0.954
	c-0.021,1.717-1.218,2.469-1.218,2.469c-1.118,1.478-1.598,2.316-1.598,2.316c-0.14,0.639,0,1.346,0,1.346
	c0.259,2.575-0.02,3.35-0.02,3.35c-0.181,1.257,0.379,1.049,0.379,1.049c0.559,0.199,1.478-0.493,1.478-0.493
	c1.179-0.34,1.397-3.198,1.397-3.198c0.06-0.818,0.14-3.158,0.14-3.158c0.04-1.158,1.258-1.72,1.258-1.72
	c0.998-0.061,1.498,0.275,1.498,0.275c0.658,1.238,0.738,2.115,0.738,2.115c0.04,2.396-0.599,2.829-0.599,2.829
	c-0.838,2.256-0.758,1.907-0.758,1.907c0.099,1.736,2.035,0.688,2.035,0.688c1.598,0,2.12-2.371,2.12-2.371
	c0.291,0.971,1.771,0.332,1.771,0.332c1.551-0.048,1.938-2.229,1.938-2.229c0.921,0.267,1.649-0.986,1.649-0.986
	c1.018-0.946,1.091-4.076,1.091-4.076c0.339,0.025,0.848-0.6,0.848-0.6c0.85-0.728,0.971-3.873,0.971-3.873
	c0.314-1.576,0-5.723,0-5.723c-0.121-1.092-1.818-6.839-1.818-6.839c-0.849-2.012-1.988-7.272-1.988-7.272
	c-0.363-1.6-0.945-5.393-0.945-5.393c-1.092-4.922-3.079-15.249-3.079-15.249c-1.188-3.637-4.073-12.834-4.073-12.834
	c-2.278-3.976-5.527-10.222-5.527-10.222c-5.794-5.745-10.23-11.111-10.23-11.111c-3.418-1.382-7.37-4.963-7.37-4.963
	c-1.479-0.606-1.527-2.563-1.527-2.563l0.024-1.737c-0.048-0.582,0.023-1.22,0.023-1.22c1.407-1.43,3.322-5.895,3.322-5.895
	c1.212-2.303,1.892-6.321,1.892-6.321c0.679,0.242,1.503-0.333,1.503-0.333c1.042-0.072,1.673-2.219,1.673-2.219
	c0.412-1.139,0.928-5.277,0.928-5.277c0.425-1.53,0.765-4.876,0.765-4.876c0.246-1.646-0.595-3.761-0.595-3.761
	c-0.686-1.287-1.955-2.076-1.955-2.076c0.936-3.995,0-9.966,0-9.966c-0.85-4.845-9.085-9.266-9.085-9.266
	C16.521-131.083,0-130.788,0-130.788s-16.53-0.295-22.001,6.845C-22.001-123.943-30.227-119.522-31.077-114.677z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-29.44-109.092c0,0-0.842,5.596,0,9.192
	c0,0-1.142,0.725-1.76,1.884c0,0-0.756,1.946-0.535,3.426c0,0,0.306,3.071,0.688,4.448c0,0,0.465,3.825,0.836,4.851
	c0,0,0.567,1.969,1.505,2.035c0,0,0.742,0.559,1.353,0.341c0,0,0.611,3.737,1.702,5.81c0,0,1.724,4.159,2.989,5.447
	c0,0,0.066,0.593,0.022,1.116l0.022,1.59c0,0-0.044,1.828-1.375,2.374c0,0-3.556,3.461-6.633,4.705c0,0-3.992,5.22-9.207,10.391
	c0,0-2.924,5.948-4.975,9.526c0,0-2.596,8.607-3.665,11.88c0,0-1.79,9.666-2.771,14.095c0,0-0.524,3.55-0.851,4.99
	c0,0-1.026,4.916-1.79,6.727c0,0-1.527,5.35-1.636,6.332c0,0-0.284,3.879,0,5.298c0,0,0.109,2.935,0.873,3.589
	c0,0,0.458,0.585,0.763,0.563c0,0,0.066,2.934,0.982,3.785c0,0,0.655,1.188,1.484,0.948c0,0,0.349,2.062,1.746,2.105
	c0,0,1.33,0.656,1.592-0.217c0,0,0.471,2.246,1.908,2.246c0,0,1.743,1.064,1.833-0.498c0,0,0.072,0.424-0.683-1.607
	c0,0-0.575-0.241-0.539-2.396c0,0,0.072-0.674,0.665-1.787c0,0,0.449-0.229,1.348-0.174c0,0,1.096,0.574,1.132,1.616
	c0,0,0.072,2.216,0.125,2.952c0,0,0.198,2.688,1.258,2.994c0,0,0.827,0.685,1.33,0.505c0,0,0.503,0.246,0.342-0.886
	c0,0-0.252-0.506-0.018-2.824c0,0,0.125-0.558,0-1.133c0,0-0.432-0.591-1.438-1.92c0,0-1.078-0.507-1.096-2.052
	c0,0-0.072-0.411,0.216-0.807c0,0,2.347-1.297,3.473-3.929c0,0,1.217-1.119,1.54-2.485c0,0,0.485-1.228,0.521-2.197
	c0,0,1.384-0.491,1.959-0.994c0,0,1.527,0.084,2.498-1.084c0,0,1.347-0.453,1.545-1.604c0,0,0.413,5.566,0.449,9.752
	c0,0,0.306,8.78-0.162,13.452c0,0-1.239,14.324-2.084,18.08c0,0-2.138,15.141-2.39,19.149c0,0-0.377,8.801-0.252,13.06
	c0,0,0.036,2.308,0.306,4.59c0,0,1.258,9.974,2.821,14.934c0,0,2.121,8.974,2.642,10.466c0,0,0.844,3.926,0.683,5.901
	c0,0-0.414,4.154-0.414,5.034c0,0-0.215,5.45,0.36,7.014c0,0,1.067,1.725,2.288,1.851c0,0,1.017,0.036,1.215-0.359
	c0,0,0.619,0.594,1.482,0.594c0,0,1.329-0.145,1.508-0.647c0,0,0.422,0.396,1.428,0.413c0,0,1.539,0.054,1.79-0.773
	c0,0,0.331,0.468,1.14,0.396c0,0,1.412-0.234,1.736-0.773c0,0,0.834,0.611,1.678,0.521c0,0,1.977-0.09,2.12-1.258
	c0,0,0.523-0.755-0.07-1.869c0,0-0.674-2.911-1.554-4.636c0,0-1.286-2.983-1.394-3.414c0,0-0.134-0.377-0.098-1.492
	c0,0,1.883-5.372,1.757-7.762c0,0,0.721-2.589,0.217-5.481c0,0,0.122-2.947-0.273-4.295c0,0,0.049-1.276,0.3-2.659
	c0,0,0.879-1.869,1.508-3.773c0,0,2.176-2.749,2.679-5.984c0,0,2.201-4.394,1.644-6.568c0,0,1.735,0.504,3.433,0.818
	c0,0,1.836,0.27,3.247,0.216c1.409,0.054,3.228-0.216,3.228-0.216c1.698-0.314,3.423-0.818,3.423-0.818
	c-0.557,2.175,1.68,6.568,1.68,6.568c0.503,3.235,2.697,5.984,2.697,5.984c0.629,1.904,1.513,3.773,1.513,3.773
	c0.252,1.383,0.333,2.659,0.333,2.659c-0.396,1.348-0.248,4.295-0.248,4.295c-0.503,2.893,0.263,5.481,0.263,5.481
	c-0.126,2.39,1.817,7.762,1.817,7.762c0.035,1.115-0.083,1.492-0.083,1.492c-0.108,0.431-1.336,3.414-1.336,3.414
	c-0.882,1.725-1.484,4.636-1.484,4.636c-0.593,1.114-0.042,1.869-0.042,1.869c0.143,1.168,2.161,1.258,2.161,1.258
	c0.845,0.09,1.72-0.521,1.72-0.521c0.324,0.539,1.786,0.773,1.786,0.773c0.808,0.071,1.174-0.396,1.174-0.396
	c0.252,0.827,1.837,0.773,1.837,0.773c1.007-0.018,1.461-0.413,1.461-0.413c0.179,0.503,1.565,0.647,1.565,0.647
	c0.863,0,1.547-0.594,1.547-0.594c0.198,0.396,1.276,0.359,1.276,0.359c1.222-0.126,2.339-1.851,2.339-1.851
	c0.574-1.563,0.358-6.927,0.358-6.927c0-0.881-0.413-4.951-0.413-4.951c-0.162-1.978,0.684-5.836,0.684-5.836
	c0.521-1.49,2.641-10.349,2.641-10.349c1.563-4.959,2.821-14.801,2.821-14.801c0.27-2.282,0.306-4.542,0.306-4.542
	c0.126-4.259-0.252-12.919-0.252-12.919c-0.251-4.008-2.39-19.015-2.39-19.015c-0.844-3.756-2.084-17.932-2.084-17.932
	c-0.467-4.672-0.162-13.361-0.162-13.361c0.036-4.187,0.449-9.672,0.449-9.672c0.197,1.15,1.546,1.627,1.546,1.627
	c0.97,1.168,2.498,1.122,2.498,1.122c0.574,0.503,1.958,1.023,1.958,1.023c0.036,0.97,0.521,2.224,0.521,2.224
	c0.324,1.365,1.54,2.528,1.54,2.528c1.127,2.632,3.475,3.977,3.475,3.977c0.286,0.396,0.215,0.807,0.215,0.807
	c-0.019,1.546-1.097,2.069-1.097,2.069c-1.006,1.33-1.437,1.934-1.437,1.934c-0.126,0.575,0,1.138,0,1.138
	c0.233,2.318-0.019,2.824-0.019,2.824c-0.161,1.132,0.342,0.882,0.342,0.882c0.503,0.179,1.33-0.5,1.33-0.5
	c1.06-0.306,1.258-2.989,1.258-2.989c0.054-0.736,0.126-2.936,0.126-2.936c0.035-1.042,1.132-1.62,1.132-1.62
	c0.898-0.054,1.347,0.182,1.347,0.182c0.594,1.114,0.665,1.777,0.665,1.777c0.036,2.157-0.539,2.381-0.539,2.381
	c-0.755,2.03-0.683,1.603-0.683,1.603c0.09,1.562,1.833,0.508,1.833,0.508c1.438,0,1.908-2.24,1.908-2.24
	c0.262,0.872,1.593,0.215,1.593,0.215c1.396-0.044,1.745-2.105,1.745-2.105c0.829,0.239,1.483-0.956,1.483-0.956
	c0.916-0.852,0.982-3.8,0.982-3.8c0.305,0.022,0.764-0.573,0.764-0.573c0.764-0.655,0.872-3.61,0.872-3.61
	c0.284-1.418,0-5.325,0-5.325c-0.108-0.981-1.636-6.373-1.636-6.373c-0.764-1.811-1.789-6.778-1.789-6.778
	c-0.328-1.44-0.851-5.02-0.851-5.02c-0.982-4.43-2.771-14.208-2.771-14.208c-1.068-3.273-3.666-11.972-3.666-11.972
	c-2.051-3.578-4.975-9.569-4.975-9.569c-5.214-5.171-9.207-10.513-9.207-10.513c-3.077-1.244-6.633-4.784-6.633-4.784
	c-1.331-0.545-1.375-2.405-1.375-2.405l0.021-1.616c-0.044-0.523,0.022-1.132,0.022-1.132c1.265-1.288,2.988-5.524,2.988-5.524
	c1.092-2.073,1.702-5.899,1.702-5.899c0.611,0.219,1.354-0.357,1.354-0.357c0.938-0.066,1.505-2.092,1.505-2.092
	c0.371-1.026,0.836-4.917,0.836-4.917c0.383-1.377,0.688-4.545,0.688-4.545c0.222-1.48-0.535-3.506-0.535-3.506
	c-0.618-1.16-1.761-1.973-1.761-1.973c0.843-3.596,0-9.277,0-9.277c-0.765-4.361-8.738-8.339-8.738-8.339
	c-4.925-6.427-20.7-6.161-20.7-6.161s-15.787-0.266-20.712,6.161C-20.711-117.431-28.675-113.453-29.44-109.092z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-27.804-103.505c0,0-0.748,5.305,0,8.501
	c0,0-1.015,0.747-1.564,1.778c0,0-0.673,1.854-0.476,3.17c0,0,0.272,2.891,0.612,4.114c0,0,0.413,3.576,0.743,4.488
	c0,0,0.504,1.849,1.338,1.907c0,0,0.659,0.559,1.202,0.365c0,0,0.543,3.542,1.513,5.384c0,0,1.532,3.93,2.657,5.074
	c0,0,0.058,0.564,0.02,1.029l0.019,1.468c0,0-0.039,1.73-1.222,2.215c0,0-3.161,3.418-5.896,4.524c0,0-3.549,5.192-8.184,9.789
	c0,0-2.599,5.692-4.422,8.872c0,0-2.308,8.107-3.259,11.016c0,0-1.59,9.113-2.463,13.05c0,0-0.465,3.336-0.756,4.616
	c0,0-0.912,4.622-1.59,6.232c0,0-1.358,4.993-1.455,5.865c0,0-0.252,3.638,0,4.898c0,0,0.097,2.744,0.776,3.326
	c0,0,0.407,0.555,0.679,0.536c0,0,0.058,2.752,0.872,3.508c0,0,0.582,1.132,1.319,0.918c0,0,0.31,1.942,1.552,1.981
	c0,0,1.183,0.676,1.415-0.101c0,0,0.418,2.116,1.696,2.116c0,0,1.55,1.073,1.63-0.317c0,0,0.063,0.504-0.607-1.302
	c0,0-0.512-0.033-0.48-1.95c0,0,0.064-0.459,0.591-1.448c0,0,0.4-0.127,1.198-0.079c0,0,0.975,0.59,1.007,1.517
	c0,0,0.064,2.074,0.111,2.729c0,0,0.176,2.514,1.119,2.785c0,0,0.734,0.672,1.182,0.512c0,0,0.447,0.287,0.303-0.719
	c0,0-0.224-0.237-0.016-2.299c0,0,0.112-0.414,0-0.925c0,0-0.383-0.354-1.278-1.537c0,0-0.958-0.277-0.974-1.651
	c0,0-0.064-0.308,0.192-0.658c0,0,2.086-0.782,3.087-3.121c0,0,1.081-0.782,1.369-1.996c0,0,0.431-0.923,0.463-1.786
	c0,0,1.23-0.299,1.741-0.746c0,0,1.358,0.24,2.22-0.798c0,0,1.198-0.248,1.374-1.27c0,0,0.368,5.305,0.399,9.026
	c0,0,0.272,8.3-0.143,12.453c0,0-1.102,13.407-1.853,16.745c0,0-1.901,14.172-2.125,17.734c0,0-0.335,8.307-0.223,12.093
	c0,0,0.032,2.22,0.271,4.248c0,0,1.118,9.43,2.508,13.838c0,0,1.885,8.38,2.348,9.706c0,0,0.751,3.71,0.607,5.467
	c0,0-0.367,3.88-0.367,4.662c0,0-0.192,5.105,0.319,6.494c0,0,1.007,1.534,2.093,1.646c0,0,0.925,0.031,1.101-0.319
	c0,0,0.579,0.526,1.346,0.526c0,0,1.211-0.128,1.371-0.574c0,0,0.4,0.352,1.295,0.367c0,0,1.404,0.047,1.628-0.687
	c0,0,0.315,0.415,1.034,0.351c0,0,1.289-0.208,1.576-0.687c0,0,0.773,0.543,1.523,0.463c0,0,1.807-0.079,1.935-1.118
	c0,0,0.505-0.67-0.022-1.661c0,0-0.484-2.587-1.266-4.121c0,0-1.057-2.65-1.153-3.035c0,0-0.088-0.335-0.056-1.324
	c0,0,1.85-4.776,1.739-6.901c0,0,0.763-2.3,0.315-4.871c0,0,0.208-2.62-0.144-3.817c0,0,0.101-1.135,0.324-2.364
	c0,0,0.869-1.661,1.428-3.354c0,0,2.076-2.443,2.523-5.318c0,0,2.107-3.906,1.612-5.838c0,0,1.61,0.446,3.119,0.726
	c0,0,1.696,0.24,2.951,0.192c1.253,0.048,2.93-0.192,2.93-0.192c1.509-0.279,3.109-0.726,3.109-0.726
	c-0.495,1.932,1.646,5.838,1.646,5.838c0.447,2.875,2.544,5.318,2.544,5.318c0.56,1.693,1.433,3.354,1.433,3.354
	c0.223,1.229,0.356,2.364,0.356,2.364c-0.351,1.197-0.117,3.817-0.117,3.817c-0.447,2.571,0.361,4.871,0.361,4.871
	c-0.111,2.125,1.801,6.901,1.801,6.901c0.032,0.989-0.041,1.324-0.041,1.324c-0.096,0.385-1.094,3.035-1.094,3.035
	c-0.782,1.534-1.193,4.121-1.193,4.121c-0.526,0.991,0.008,1.661,0.008,1.661c0.128,1.039,1.977,1.118,1.977,1.118
	c0.751,0.08,1.566-0.463,1.566-0.463c0.286,0.479,1.628,0.687,1.628,0.687c0.719,0.064,1.069-0.351,1.069-0.351
	c0.224,0.733,1.676,0.687,1.676,0.687c0.895-0.016,1.328-0.367,1.328-0.367c0.16,0.446,1.43,0.574,1.43,0.574
	c0.767,0,1.413-0.526,1.413-0.526c0.176,0.351,1.163,0.319,1.163,0.319c1.087-0.111,2.145-1.646,2.145-1.646
	c0.512-1.389,0.32-6.405,0.32-6.405c0-0.782-0.368-4.578-0.368-4.578c-0.144-1.757,0.606-5.396,0.606-5.396
	c0.465-1.326,2.349-9.586,2.349-9.586c1.39-4.408,2.508-13.702,2.508-13.702c0.24-2.029,0.271-4.199,0.271-4.199
	c0.112-3.786-0.224-11.948-0.224-11.948c-0.224-3.562-2.124-17.595-2.124-17.595C29.292,37.793,28.19,24.54,28.19,24.54
	c-0.415-4.153-0.145-12.36-0.145-12.36c0.032-3.721,0.399-8.945,0.399-8.945c0.176,1.022,1.374,1.296,1.374,1.296
	c0.862,1.037,2.22,0.837,2.22,0.837c0.511,0.446,1.741,0.775,1.741,0.775c0.032,0.863,0.464,1.812,0.464,1.812
	c0.287,1.214,1.368,2.041,1.368,2.041c1.002,2.339,3.088,3.17,3.088,3.17c0.256,0.351,0.191,0.659,0.191,0.659
	c-0.016,1.373-0.975,1.671-0.975,1.671c-0.894,1.182-1.277,1.549-1.277,1.549c-0.111,0.511,0,0.93,0,0.93
	c0.207,2.062-0.016,2.299-0.016,2.299c-0.144,1.007,0.303,0.715,0.303,0.715c0.447,0.159,1.183-0.508,1.183-0.508
	c0.941-0.271,1.118-2.779,1.118-2.779c0.048-0.654,0.111-2.712,0.111-2.712c0.032-0.927,1.006-1.521,1.006-1.521
	c0.8-0.048,1.198,0.086,1.198,0.086c0.527,0.991,0.591,1.44,0.591,1.44c0.032,1.917-0.479,1.933-0.479,1.933
	c-0.671,1.805-0.607,1.297-0.607,1.297c0.08,1.391,1.629,0.328,1.629,0.328c1.278,0,1.696-2.111,1.696-2.111
	c0.233,0.776,1.416,0.1,1.416,0.1c1.241-0.039,1.551-1.983,1.551-1.983c0.737,0.213,1.319-0.925,1.319-0.925
	c0.814-0.756,0.873-3.522,0.873-3.522c0.271,0.02,0.679-0.548,0.679-0.548c0.679-0.582,0.776-3.346,0.776-3.346
	c0.252-1.261,0-4.928,0-4.928c-0.098-0.873-1.455-5.907-1.455-5.907c-0.679-1.61-1.59-6.285-1.59-6.285
	c-0.291-1.28-0.758-4.648-0.758-4.648c-0.871-3.937-2.463-13.165-2.463-13.165c-0.949-2.91-3.258-11.111-3.258-11.111
	c-1.823-3.181-4.422-8.917-4.422-8.917c-4.635-4.597-8.185-9.914-8.185-9.914c-2.734-1.105-5.896-4.604-5.896-4.604
	c-1.183-0.485-1.221-2.248-1.221-2.248l0.019-1.494c-0.039-0.465,0.02-1.046,0.02-1.046c1.125-1.144,2.656-5.153,2.656-5.153
	c0.971-1.843,1.514-5.474,1.514-5.474c0.543,0.194,1.203-0.383,1.203-0.383c0.834-0.058,1.338-1.965,1.338-1.965
	c0.33-0.912,0.743-4.555,0.743-4.555c0.34-1.224,0.611-4.214,0.611-4.214c0.196-1.316-0.476-3.254-0.476-3.254
	c-0.549-1.03-1.564-1.868-1.564-1.868c0.748-3.196,0-8.589,0-8.589c-0.68-3.876-8.394-7.413-8.394-7.413
	C15.033-116.63,0-116.394,0-116.394s-15.043-0.236-19.42,5.476C-19.42-110.918-27.125-107.381-27.804-103.505z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-26.167-97.92c0,0-0.655,5.014,0,7.811
	c0,0-0.888,0.768-1.369,1.67c0,0-0.588,1.764-0.416,2.915c0,0,0.238,2.71,0.535,3.781c0,0,0.362,3.327,0.65,4.124
	c0,0,0.442,1.728,1.171,1.779c0,0,0.577,0.56,1.052,0.39c0,0,0.476,3.345,1.324,4.957c0,0,1.341,3.7,2.325,4.701
	c0,0,0.051,0.535,0.017,0.942l0.017,1.345c0,0-0.034,1.633-1.069,2.057c0,0-2.766,3.375-5.159,4.343c0,0-3.106,5.164-7.161,9.186
	c0,0-2.275,5.436-3.87,8.219c0,0-2.019,7.606-2.851,10.152c0,0-1.391,8.56-2.155,12.005c0,0-0.407,3.123-0.662,4.243
	c0,0-0.797,4.328-1.391,5.737c0,0-1.188,4.635-1.273,5.398c0,0-0.221,3.398,0,4.501c0,0,0.085,2.552,0.679,3.061
	c0,0,0.356,0.526,0.594,0.509c0,0,0.051,2.57,0.763,3.232c0,0,0.509,1.074,1.154,0.887c0,0,0.272,1.824,1.358,1.858
	c0,0,1.035,0.693,1.239,0.015c0,0,0.365,1.988,1.484,1.988c0,0,1.355,1.079,1.425-0.138c0,0,0.056,0.583-0.531-0.997
	c0,0-0.447,0.176-0.419-1.502c0,0,0.056-0.245,0.517-1.111c0,0,0.349-0.027,1.048,0.015c0,0,0.853,0.607,0.881,1.418
	c0,0,0.056,1.934,0.097,2.506c0,0,0.154,2.339,0.979,2.577c0,0,0.643,0.658,1.034,0.519c0,0,0.391,0.329,0.266-0.552
	c0,0-0.196,0.03-0.014-1.771c0,0,0.097-0.271,0-0.718c0,0-0.336-0.119-1.118-1.153c0,0-0.839-0.051-0.853-1.253
	c0,0-0.056-0.203,0.168-0.511c0,0,1.825-0.266,2.701-2.312c0,0,0.946-0.446,1.198-1.508c0,0,0.377-0.617,0.405-1.372
	c0,0,1.076-0.109,1.524-0.5c0,0,1.188,0.398,1.942-0.511c0,0,1.049-0.043,1.202-0.938c0,0,0.322,5.045,0.35,8.303
	c0,0,0.237,7.819-0.126,11.453c0,0-0.964,12.489-1.621,15.41c0,0-1.663,13.203-1.859,16.319c0,0-0.294,7.812-0.196,11.126
	c0,0,0.028,2.131,0.238,3.906c0,0,0.978,8.886,2.194,12.742c0,0,1.649,7.786,2.055,8.946c0,0,0.657,3.495,0.531,5.032
	c0,0-0.322,3.605-0.322,4.29c0,0-0.167,4.76,0.28,5.976c0,0,0.946,1.342,1.897,1.439c0,0,0.833,0.028,0.987-0.279
	c0,0,0.539,0.461,1.21,0.461c0,0,1.093-0.111,1.233-0.503c0,0,0.38,0.308,1.162,0.321c0,0,1.27,0.042,1.466-0.602
	c0,0,0.299,0.364,0.928,0.309c0,0,1.167-0.183,1.418-0.602c0,0,0.711,0.476,1.368,0.405c0,0,1.637-0.07,1.749-0.978
	c0,0,0.486-0.587,0.025-1.454c0,0-0.292-2.265-0.977-3.606c0,0-0.828-2.319-0.912-2.654c0,0-0.042-0.295-0.014-1.16
	c0,0,1.818-4.18,1.72-6.038c0,0,0.806-2.014,0.415-4.264c0,0,0.293-2.292-0.015-3.34c0,0,0.152-0.993,0.347-2.068
	c0,0,0.859-1.453,1.348-2.936c0,0,1.977-2.138,2.368-4.653c0,0,2.012-3.418,1.578-5.108c0,0,1.487,0.391,2.807,0.636
	c0,0,1.554,0.209,2.651,0.167c1.098,0.042,2.632-0.167,2.632-0.167c1.321-0.245,2.797-0.636,2.797-0.636
	c-0.433,1.69,1.615,5.108,1.615,5.108c0.391,2.516,2.389,4.653,2.389,4.653c0.489,1.482,1.351,2.936,1.351,2.936
	c0.196,1.075,0.383,2.068,0.383,2.068c-0.309,1.048,0.013,3.34,0.013,3.34c-0.391,2.25,0.461,4.264,0.461,4.264
	c-0.098,1.858,1.784,6.038,1.784,6.038c0.027,0.865,0.002,1.16,0.002,1.16c-0.084,0.335-0.852,2.654-0.852,2.654
	c-0.685,1.342-0.902,3.606-0.902,3.606c-0.461,0.867,0.055,1.454,0.055,1.454c0.112,0.907,1.793,0.978,1.793,0.978
	c0.657,0.07,1.411-0.405,1.411-0.405c0.252,0.419,1.471,0.602,1.471,0.602c0.629,0.056,0.965-0.309,0.965-0.309
	c0.196,0.644,1.516,0.602,1.516,0.602c0.782-0.014,1.197-0.321,1.197-0.321c0.14,0.392,1.293,0.503,1.293,0.503
	c0.671,0,1.277-0.461,1.277-0.461c0.154,0.308,1.054,0.279,1.054,0.279c0.949-0.098,1.948-1.439,1.948-1.439
	c0.447-1.216,0.28-5.884,0.28-5.884c0-0.685-0.322-4.204-0.322-4.204c-0.126-1.537,0.531-4.96,0.531-4.96
	c0.406-1.161,2.055-8.823,2.055-8.823c1.217-3.856,2.194-12.603,2.194-12.603c0.21-1.775,0.238-3.856,0.238-3.856
	c0.098-3.312-0.196-10.977-0.196-10.977c-0.196-3.117-1.859-16.177-1.859-16.177c-0.656-2.921-1.621-15.254-1.621-15.254
	c-0.362-3.635-0.125-11.358-0.125-11.358c0.027-3.256,0.35-8.218,0.35-8.218c0.153,0.895,1.202,0.964,1.202,0.964
	c0.754,0.908,1.941,0.55,1.941,0.55c0.447,0.393,1.524,0.531,1.524,0.531c0.028,0.754,0.405,1.398,0.405,1.398
	C32.055,9.77,33,10.262,33,10.262c0.876,2.046,2.701,2.361,2.701,2.361c0.225,0.309,0.168,0.513,0.168,0.513
	c-0.014,1.202-0.852,1.271-0.852,1.271c-0.783,1.034-1.119,1.166-1.119,1.166c-0.097,0.448,0,0.723,0,0.723
	c0.182,1.803-0.014,1.773-0.014,1.773c-0.125,0.88,0.266,0.546,0.266,0.546c0.391,0.141,1.034-0.513,1.034-0.513
	c0.825-0.238,0.979-2.571,0.979-2.571c0.041-0.573,0.098-2.49,0.098-2.49c0.027-0.81,0.881-1.42,0.881-1.42
	c0.699-0.042,1.048-0.008,1.048-0.008c0.461,0.866,0.517,1.103,0.517,1.103c0.028,1.677-0.419,1.484-0.419,1.484
	c-0.587,1.579-0.53,0.992-0.53,0.992c0.069,1.216,1.425,0.147,1.425,0.147c1.119,0,1.483-1.981,1.483-1.981
	c0.204,0.679,1.239-0.017,1.239-0.017c1.086-0.034,1.358-1.86,1.358-1.86c0.645,0.188,1.153-0.894,1.153-0.894
	c0.712-0.661,0.764-3.246,0.764-3.246c0.237,0.017,0.594-0.521,0.594-0.521c0.594-0.509,0.679-3.083,0.679-3.083
	c0.222-1.103,0-4.53,0-4.53c-0.085-0.764-1.272-5.442-1.272-5.442c-0.595-1.408-1.392-5.791-1.392-5.791
	c-0.255-1.12-0.662-4.275-0.662-4.275c-0.764-3.445-2.154-12.124-2.154-12.124c-0.832-2.545-2.852-10.249-2.852-10.249
	c-1.595-2.783-3.869-8.265-3.869-8.265c-4.056-4.022-7.162-9.315-7.162-9.315c-2.393-0.967-5.158-4.425-5.158-4.425
	c-1.035-0.424-1.069-2.09-1.069-2.09l0.017-1.372c-0.033-0.408,0.018-0.96,0.018-0.96c0.984-1.001,2.325-4.782,2.325-4.782
	c0.848-1.612,1.322-5.05,1.322-5.05c0.477,0.17,1.054-0.408,1.054-0.408c0.729-0.051,1.171-1.838,1.171-1.838
	c0.288-0.798,0.649-4.194,0.649-4.194c0.297-1.071,0.535-3.883,0.535-3.883c0.172-1.152-0.416-3.001-0.416-3.001
	c-0.48-0.901-1.369-1.763-1.369-1.763c0.655-2.797,0-7.901,0-7.901c-0.595-3.392-8.048-6.486-8.048-6.486
	C14.289-109.405,0-109.198,0-109.198s-14.3-0.207-18.13,4.792C-18.13-104.406-25.573-101.312-26.167-97.92z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-24.532-92.334c0,0-0.561,4.723,0,7.121
	c0,0-0.761,0.79-1.173,1.563c0,0-0.505,1.672-0.357,2.659c0,0,0.204,2.53,0.459,3.448c0,0,0.31,3.077,0.557,3.761
	c0,0,0.378,1.606,1.004,1.65c0,0,0.494,0.56,0.902,0.415c0,0,0.407,3.149,1.134,4.531c0,0,1.149,3.469,1.993,4.327
	c0,0,0.044,0.506,0.015,0.856l0.014,1.222c0,0-0.029,1.535-0.916,1.898c0,0-2.371,3.332-4.422,4.161c0,0-2.662,5.137-6.139,8.585
	c0,0-1.949,5.179-3.316,7.565c0,0-1.731,7.106-2.444,9.288c0,0-1.193,8.007-1.847,10.96c0,0-0.349,2.909-0.568,3.869
	c0,0-0.683,4.035-1.192,5.242c0,0-1.019,4.278-1.091,4.932c0,0-0.189,3.157,0,4.102c0,0,0.072,2.362,0.582,2.798
	c0,0,0.305,0.497,0.509,0.481c0,0,0.043,2.389,0.654,2.955c0,0,0.437,1.017,0.989,0.856c0,0,0.233,1.705,1.164,1.733
	c0,0,0.887,0.715,1.062,0.133c0,0,0.313,1.857,1.272,1.857c0,0,1.162,1.086,1.222,0.044c0,0,0.048,0.662-0.456-0.691
	c0,0-0.383,0.383-0.359-1.056c0,0,0.048-0.031,0.443-0.774c0,0,0.3,0.075,0.899,0.11c0,0,0.731,0.622,0.755,1.317
	c0,0,0.047,1.793,0.083,2.285c0,0,0.132,2.164,0.839,2.367c0,0,0.551,0.645,0.886,0.524c0,0,0.336,0.371,0.228-0.384
	c0,0-0.168,0.299-0.012-1.246c0,0,0.084-0.126,0-0.51c0,0-0.287,0.117-0.958-0.77c0,0-0.719,0.178-0.731-0.853
	c0,0-0.048-0.1,0.144-0.364c0,0,1.565,0.25,2.315-1.504c0,0,0.811-0.108,1.027-1.019c0,0,0.323-0.312,0.347-0.959
	c0,0,0.923,0.082,1.306-0.253c0,0,1.018,0.554,1.665-0.225c0,0,0.899,0.161,1.031-0.604c0,0,0.275,4.786,0.299,7.577
	c0,0,0.204,7.34-0.108,10.455c0,0-0.826,11.57-1.389,14.074c0,0-1.426,12.233-1.594,14.905c0,0-0.251,7.319-0.167,10.158
	c0,0,0.024,2.043,0.203,3.564c0,0,0.839,8.342,1.881,11.647c0,0,1.414,7.19,1.761,8.186c0,0,0.562,3.28,0.455,4.598
	c0,0-0.275,3.332-0.275,3.919c0,0-0.144,4.414,0.239,5.456c0,0,0.887,1.149,1.701,1.233c0,0,0.743,0.024,0.874-0.239
	c0,0,0.499,0.396,1.074,0.396c0,0,0.975-0.096,1.095-0.432c0,0,0.359,0.264,1.03,0.275c0,0,1.136,0.036,1.303-0.515
	c0,0,0.284,0.311,0.823,0.263c0,0,1.043-0.155,1.259-0.515c0,0,0.649,0.407,1.212,0.347c0,0,1.467-0.059,1.563-0.838
	c0,0,0.469-0.503,0.074-1.246c0,0-0.102-1.94-0.689-3.091c0,0-0.599-1.988-0.671-2.276c0,0,0.005-0.251,0.028-0.993
	c0,0,1.786-3.582,1.702-5.176c0,0,0.848-1.725,0.513-3.653c0,0,0.378-1.966,0.115-2.863c0,0,0.203-0.851,0.37-1.773
	c0,0,0.848-1.246,1.267-2.516c0,0,1.878-1.833,2.213-3.989c0,0,1.917-2.929,1.546-4.379c0,0,1.362,0.336,2.494,0.545
	c0,0,1.413,0.181,2.354,0.145c0.94,0.036,2.334-0.145,2.334-0.145c1.132-0.209,2.483-0.545,2.483-0.545
	c-0.372,1.45,1.582,4.379,1.582,4.379C6.277,75.167,8.177,77,8.177,77c0.419,1.27,1.271,2.516,1.271,2.516
	c0.168,0.923,0.405,1.773,0.405,1.773c-0.264,0.897,0.144,2.863,0.144,2.863c-0.335,1.929,0.561,3.653,0.561,3.653
	c-0.084,1.594,1.767,5.176,1.767,5.176c0.023,0.742,0.045,0.993,0.045,0.993c-0.071,0.288-0.608,2.276-0.608,2.276
	c-0.588,1.15-0.612,3.091-0.612,3.091c-0.396,0.743,0.104,1.246,0.104,1.246c0.096,0.779,1.607,0.838,1.607,0.838
	c0.563,0.061,1.258-0.347,1.258-0.347c0.216,0.359,1.312,0.515,1.312,0.515c0.539,0.048,0.86-0.263,0.86-0.263
	c0.168,0.551,1.354,0.515,1.354,0.515c0.671-0.012,1.066-0.275,1.066-0.275c0.119,0.336,1.156,0.432,1.156,0.432
	c0.574,0,1.145-0.396,1.145-0.396c0.131,0.264,0.94,0.239,0.94,0.239c0.813-0.084,1.755-1.233,1.755-1.233
	c0.383-1.042,0.239-5.362,0.239-5.362c0-0.587-0.275-3.83-0.275-3.83c-0.108-1.318,0.455-4.524,0.455-4.524
	c0.348-0.993,1.761-8.059,1.761-8.059c1.042-3.306,1.881-11.505,1.881-11.505c0.181-1.521,0.204-3.513,0.204-3.513
	c0.083-2.84-0.168-10.005-0.168-10.005c-0.168-2.673-1.593-14.759-1.593-14.759c-0.563-2.504-1.39-13.916-1.39-13.916
	c-0.312-3.113-0.108-10.355-0.108-10.355c0.023-2.791,0.3-7.491,0.3-7.491c0.131,0.767,1.03,0.632,1.03,0.632
	c0.646,0.779,1.665,0.266,1.665,0.266c0.383,0.335,1.306,0.283,1.306,0.283c0.024,0.647,0.347,0.987,0.347,0.987
	c0.217,0.911,1.027,1.067,1.027,1.067c0.751,1.754,2.316,1.555,2.316,1.555c0.19,0.264,0.143,0.365,0.143,0.365
	c-0.012,1.029-0.729,0.872-0.729,0.872c-0.671,0.887-0.959,0.784-0.959,0.784c-0.084,0.383,0,0.513,0,0.513
	c0.155,1.546-0.013,1.248-0.013,1.248c-0.107,0.755,0.229,0.379,0.229,0.379c0.335,0.12,0.886-0.52,0.886-0.52
	c0.707-0.204,0.839-2.361,0.839-2.361c0.036-0.492,0.084-2.268,0.084-2.268c0.024-0.694,0.755-1.32,0.755-1.32
	c0.6-0.036,0.898-0.104,0.898-0.104c0.395,0.743,0.442,0.765,0.442,0.765c0.024,1.438-0.358,1.037-0.358,1.037
	c-0.503,1.354-0.455,0.688-0.455,0.688c0.059,1.043,1.222-0.033,1.222-0.033c0.958,0,1.271-1.852,1.271-1.852
	c0.175,0.582,1.062-0.134,1.062-0.134c0.932-0.028,1.164-1.735,1.164-1.735c0.553,0.16,0.989-0.863,0.989-0.863
	c0.611-0.567,0.655-2.97,0.655-2.97c0.202,0.015,0.509-0.495,0.509-0.495c0.509-0.437,0.582-2.819,0.582-2.819
	c0.188-0.946,0-4.133,0-4.133c-0.073-0.655-1.091-4.976-1.091-4.976c-0.511-1.208-1.193-5.298-1.193-5.298
	c-0.218-0.96-0.567-3.902-0.567-3.902C38.413-20.001,37.22-28.13,37.22-28.13c-0.713-2.182-2.444-9.388-2.444-9.388
	c-1.366-2.386-3.315-7.613-3.315-7.613c-3.477-3.447-6.139-8.716-6.139-8.716c-2.051-0.829-4.422-4.245-4.422-4.245
	c-0.888-0.364-0.917-1.933-0.917-1.933l0.016-1.251c-0.029-0.349,0.014-0.872,0.014-0.872c0.844-0.858,1.993-4.412,1.993-4.412
	c0.727-1.382,1.135-4.626,1.135-4.626c0.407,0.146,0.902-0.433,0.902-0.433c0.625-0.044,1.003-1.711,1.003-1.711
	c0.248-0.684,0.557-3.832,0.557-3.832c0.255-0.918,0.459-3.553,0.459-3.553c0.148-0.987-0.356-2.747-0.356-2.747
	c-0.411-0.773-1.174-1.659-1.174-1.659c0.562-2.397,0-7.213,0-7.213c-0.51-2.907-7.701-5.56-7.701-5.56
	c-3.283-4.284-16.828-4.107-16.828-4.107s-13.558-0.177-16.841,4.107C-16.84-97.895-24.022-95.242-24.532-92.334z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-22.895-86.749c0,0-0.468,4.433,0,6.43
	c0,0-0.634,0.812-0.978,1.456c0,0-0.42,1.582-0.297,2.404c0,0,0.17,2.35,0.382,3.115c0,0,0.259,2.827,0.465,3.397
	c0,0,0.315,1.485,0.836,1.522c0,0,0.412,0.561,0.752,0.439c0,0,0.339,2.953,0.945,4.105c0,0,0.958,3.239,1.661,3.954
	c0,0,0.036,0.478,0.012,0.769l0.012,1.1c0,0-0.024,1.436-0.764,1.739c0,0-1.975,3.289-3.685,3.98c0,0-2.218,5.109-5.115,7.982
	c0,0-1.624,4.924-2.764,6.912c0,0-1.442,6.605-2.036,8.424c0,0-0.994,7.455-1.54,9.915c0,0-0.29,2.696-0.472,3.496
	c0,0-0.57,3.74-0.994,4.746c0,0-0.849,3.921-0.909,4.466c0,0-0.158,2.916,0,3.704c0,0,0.06,2.17,0.484,2.534
	c0,0,0.255,0.467,0.425,0.455c0,0,0.036,2.206,0.545,2.679c0,0,0.364,0.957,0.824,0.824c0,0,0.194,1.587,0.97,1.61
	c0,0,0.74,0.733,0.885,0.248c0,0,0.261,1.729,1.06,1.729c0,0,0.968,1.094,1.018,0.225c0,0,0.04,0.741-0.379-0.387
	c0,0-0.32,0.591-0.3-0.607c0,0,0.04,0.182,0.37-0.438c0,0,0.249,0.176,0.748,0.206c0,0,0.609,0.638,0.629,1.217
	c0,0,0.04,1.653,0.07,2.062c0,0,0.11,1.989,0.699,2.159c0,0,0.459,0.631,0.739,0.531c0,0,0.279,0.413,0.19-0.216
	c0,0-0.14,0.566-0.01-0.722c0,0,0.069,0.019,0-0.301c0,0-0.24,0.353-0.799-0.387c0,0-0.599,0.406-0.609-0.453
	c0,0-0.04,0.004,0.12-0.216c0,0,1.304,0.766,1.93-0.696c0,0,0.675,0.229,0.855-0.531c0,0,0.27-0.007,0.29-0.546
	c0,0,0.768,0.274,1.088-0.006c0,0,0.848,0.712,1.387,0.063c0,0,0.749,0.365,0.859-0.273c0,0,0.229,4.527,0.249,6.854
	c0,0,0.17,6.859-0.089,9.456c0,0-0.689,10.653-1.158,12.739c0,0-1.188,11.265-1.328,13.49c0,0-0.21,6.825-0.14,9.191
	c0,0,0.02,1.955,0.17,3.223c0,0,0.699,7.797,1.567,10.552c0,0,1.178,6.598,1.468,7.427c0,0,0.469,3.063,0.379,4.162
	c0,0-0.23,3.058-0.23,3.547c0,0-0.119,4.068,0.2,4.937c0,0,0.826,0.959,1.505,1.028c0,0,0.651,0.02,0.76-0.199
	c0,0,0.459,0.329,0.938,0.329c0,0,0.858-0.08,0.957-0.359c0,0,0.339,0.219,0.898,0.229c0,0,1.001,0.029,1.141-0.43
	c0,0,0.268,0.261,0.717,0.221c0,0,0.92-0.13,1.1-0.43c0,0,0.587,0.34,1.056,0.289c0,0,1.298-0.05,1.378-0.698
	c0,0,0.451-0.42,0.121-1.038c0,0,0.09-1.617-0.399-2.576c0,0-0.371-1.657-0.431-1.896c0,0,0.051-0.21,0.071-0.829
	c0,0,1.753-2.984,1.683-4.312c0,0,0.89-1.438,0.611-3.045c0,0,0.464-1.637,0.245-2.386c0,0,0.254-0.708,0.393-1.478
	c0,0,0.838-1.038,1.187-2.096c0,0,1.778-1.528,2.058-3.325c0,0,1.822-2.441,1.513-3.649c0,0,1.237,0.28,2.181,0.455
	c0,0,1.272,0.149,2.055,0.119c0.784,0.03,2.035-0.119,2.035-0.119c0.943-0.175,2.171-0.455,2.171-0.455
	c-0.31,1.208,1.551,3.649,1.551,3.649c0.279,1.797,2.08,3.325,2.08,3.325c0.349,1.058,1.19,2.096,1.19,2.096
	c0.14,0.77,0.431,1.478,0.431,1.478c-0.22,0.749,0.272,2.386,0.272,2.386c-0.278,1.607,0.661,3.045,0.661,3.045
	c-0.069,1.328,1.749,4.312,1.749,4.312c0.021,0.619,0.088,0.829,0.088,0.829c-0.06,0.239-0.367,1.896-0.367,1.896
	c-0.488,0.959-0.32,2.576-0.32,2.576c-0.329,0.618,0.152,1.038,0.152,1.038c0.08,0.648,1.425,0.698,1.425,0.698
	c0.469,0.051,1.102-0.289,1.102-0.289c0.18,0.3,1.156,0.43,1.156,0.43c0.449,0.04,0.756-0.221,0.756-0.221
	c0.139,0.459,1.192,0.43,1.192,0.43c0.559-0.011,0.934-0.229,0.934-0.229c0.1,0.279,1.02,0.359,1.02,0.359
	c0.48,0,1.012-0.329,1.012-0.329c0.108,0.219,0.828,0.199,0.828,0.199c0.679-0.069,1.561-1.028,1.561-1.028
	c0.319-0.868,0.199-4.841,0.199-4.841c0-0.489-0.229-3.455-0.229-3.455c-0.09-1.099,0.379-4.087,0.379-4.087
	c0.289-0.829,1.468-7.296,1.468-7.296c0.869-2.756,1.567-10.406,1.567-10.406c0.15-1.268,0.17-3.17,0.17-3.17
	c0.069-2.366-0.14-9.034-0.14-9.034c-0.14-2.226-1.328-13.339-1.328-13.339c-0.469-2.087-1.158-12.577-1.158-12.577
	c-0.26-2.596-0.09-9.354-0.09-9.354c0.021-2.326,0.25-6.765,0.25-6.765c0.11,0.64,0.858,0.3,0.858,0.3
	c0.539,0.649,1.388-0.02,1.388-0.02c0.319,0.279,1.088,0.038,1.088,0.038c0.021,0.539,0.29,0.574,0.29,0.574
	c0.179,0.759,0.855,0.579,0.855,0.579c0.626,1.462,1.93,0.749,1.93,0.749c0.16,0.22,0.12,0.217,0.12,0.217
	c-0.01,0.858-0.609,0.473-0.609,0.473c-0.559,0.739-0.799,0.401-0.799,0.401c-0.07,0.318,0,0.306,0,0.306
	c0.13,1.287-0.01,0.722-0.01,0.722c-0.09,0.629,0.189,0.211,0.189,0.211c0.279,0.101,0.738-0.525,0.738-0.525
	c0.589-0.17,0.699-2.153,0.699-2.153c0.03-0.409,0.07-2.043,0.07-2.043c0.02-0.579,0.629-1.222,0.629-1.222
	c0.499-0.03,0.749-0.197,0.749-0.197c0.329,0.619,0.368,0.427,0.368,0.427c0.021,1.198-0.299,0.589-0.299,0.589
	c-0.42,1.129-0.38,0.384-0.38,0.384c0.05,0.867,1.02-0.216,1.02-0.216c0.798,0,1.06-1.722,1.06-1.722
	c0.146,0.485,0.884-0.249,0.884-0.249c0.776-0.023,0.971-1.613,0.971-1.613C35.566,5.465,35.929,4.5,35.929,4.5
	c0.51-0.473,0.547-2.692,0.547-2.692c0.17,0.012,0.424-0.469,0.424-0.469c0.424-0.363,0.484-2.556,0.484-2.556
	c0.158-0.787,0-3.735,0-3.735c-0.061-0.546-0.908-4.511-0.908-4.511c-0.425-1.006-0.994-4.804-0.994-4.804
	c-0.183-0.8-0.474-3.53-0.474-3.53c-0.545-2.46-1.539-10.04-1.539-10.04c-0.594-1.818-2.037-8.526-2.037-8.526
	c-1.139-1.988-2.763-6.96-2.763-6.96c-2.897-2.873-5.116-8.117-5.116-8.117c-1.709-0.691-3.685-4.067-3.685-4.067
	c-0.739-0.303-0.763-1.775-0.763-1.775l0.012-1.129c-0.025-0.291,0.012-0.786,0.012-0.786c0.703-0.715,1.66-4.04,1.66-4.04
	c0.607-1.152,0.946-4.202,0.946-4.202c0.339,0.121,0.752-0.459,0.752-0.459c0.521-0.036,0.836-1.584,0.836-1.584
	c0.206-0.57,0.464-3.471,0.464-3.471c0.213-0.765,0.383-3.222,0.383-3.222c0.123-0.822-0.298-2.494-0.298-2.494
	c-0.343-0.644-0.977-1.554-0.977-1.554c0.467-1.998,0-6.525,0-6.525c-0.426-2.423-7.357-4.633-7.357-4.633
	c-2.736-3.57-15.537-3.424-15.537-3.424s-12.814-0.146-15.55,3.424C-15.549-91.381-22.47-89.171-22.895-86.749z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-21.258-81.164c0,0-0.374,4.142,0,5.74
	c0,0-0.508,0.834-0.782,1.349c0,0-0.336,1.49-0.238,2.148c0,0,0.136,2.169,0.306,2.782c0,0,0.206,2.578,0.371,3.033
	c0,0,0.252,1.365,0.669,1.394c0,0,0.33,0.561,0.602,0.464c0,0,0.271,2.757,0.756,3.678c0,0,0.766,3.01,1.329,3.582
	c0,0,0.029,0.448,0.009,0.681l0.01,0.977c0,0-0.019,1.339-0.611,1.582c0,0-1.581,3.245-2.948,3.798c0,0-1.775,5.081-4.092,7.38
	c0,0-1.3,4.667-2.211,6.258c0,0-1.154,6.105-1.629,7.56c0,0-0.795,6.902-1.232,8.87c0,0-0.233,2.482-0.378,3.122
	c0,0-0.456,3.447-0.795,4.252c0,0-0.679,3.563-0.727,3.999c0,0-0.127,2.675,0,3.305c0,0,0.048,1.979,0.387,2.27
	c0,0,0.204,0.439,0.34,0.429c0,0,0.029,2.023,0.436,2.402c0,0,0.291,0.899,0.66,0.792c0,0,0.155,1.469,0.775,1.488
	c0,0,0.592,0.751,0.708,0.363c0,0,0.209,1.6,0.848,1.6c0,0,0.775,1.101,0.815,0.405c0,0,0.032,0.82-0.304-0.082
	c0,0-0.255,0.799-0.239-0.16c0,0,0.032,0.396,0.295-0.1c0,0,0.2,0.275,0.599,0.3c0,0,0.487,0.655,0.503,1.118
	c0,0,0.032,1.512,0.056,1.839c0,0,0.088,1.813,0.559,1.95c0,0,0.368,0.618,0.591,0.538c0,0,0.224,0.455,0.152-0.05
	c0,0-0.112,0.835-0.008-0.194c0,0,0.056,0.162,0-0.093c0,0-0.192,0.588-0.639-0.004c0,0-0.479,0.634-0.487-0.054
	c0,0-0.032,0.107,0.096-0.067c0,0,1.043,1.28,1.544,0.111c0,0,0.54,0.565,0.684-0.042c0,0,0.216,0.298,0.232-0.133
	c0,0,0.615,0.465,0.87,0.241c0,0,0.679,0.869,1.11,0.35c0,0,0.599,0.57,0.687,0.06c0,0,0.184,4.267,0.2,6.128
	c0,0,0.136,6.38-0.072,8.457c0,0-0.551,9.735-0.927,11.405c0,0-0.95,10.294-1.062,12.075c0,0-0.167,6.33-0.112,8.224
	c0,0,0.016,1.866,0.136,2.881c0,0,0.559,7.253,1.254,9.457c0,0,0.943,6.003,1.174,6.666c0,0,0.375,2.849,0.304,3.728
	c0,0-0.184,2.783-0.184,3.174c0,0-0.096,3.725,0.16,4.418c0,0,0.765,0.768,1.309,0.823c0,0,0.559,0.016,0.646-0.16
	c0,0,0.419,0.265,0.802,0.265c0,0,0.74-0.064,0.82-0.288c0,0,0.317,0.176,0.765,0.184c0,0,0.866,0.024,0.978-0.343
	c0,0,0.252,0.207,0.611,0.175c0,0,0.798-0.103,0.941-0.343c0,0,0.526,0.271,0.901,0.231c0,0,1.128-0.04,1.192-0.56
	c0,0,0.433-0.335,0.17-0.83c0,0,0.28-1.294-0.111-2.061c0,0-0.142-1.325-0.19-1.518c0,0,0.097-0.168,0.113-0.663
	c0,0,1.72-2.388,1.665-3.45c0,0,0.932-1.149,0.709-2.436c0,0,0.55-1.31,0.374-1.909c0,0,0.306-0.566,0.418-1.182
	c0,0,0.826-0.83,1.106-1.677c0,0,1.679-1.223,1.902-2.659c0,0,1.728-1.953,1.48-2.919c0,0,1.114,0.223,1.869,0.362
	c0,0,1.13,0.12,1.757,0.097c0.627,0.023,1.737-0.097,1.737-0.097c0.754-0.14,1.857-0.362,1.857-0.362
	c-0.248,0.966,1.519,2.919,1.519,2.919c0.224,1.437,1.925,2.659,1.925,2.659c0.28,0.847,1.11,1.677,1.11,1.677
	c0.112,0.615,0.454,1.182,0.454,1.182c-0.175,0.6,0.405,1.909,0.405,1.909c-0.224,1.286,0.76,2.436,0.76,2.436
	c-0.056,1.062,1.732,3.45,1.732,3.45c0.016,0.495,0.13,0.663,0.13,0.663c-0.047,0.192-0.124,1.518-0.124,1.518
	c-0.391,0.767-0.03,2.061-0.03,2.061c-0.263,0.495,0.202,0.83,0.202,0.83c0.063,0.52,1.239,0.56,1.239,0.56
	c0.375,0.039,0.948-0.231,0.948-0.231c0.144,0.24,0.998,0.343,0.998,0.343c0.358,0.032,0.65-0.175,0.65-0.175
	c0.112,0.367,1.031,0.343,1.031,0.343c0.447-0.008,0.803-0.184,0.803-0.184c0.08,0.224,0.885,0.288,0.885,0.288
	c0.383,0,0.875-0.265,0.875-0.265c0.089,0.176,0.717,0.16,0.717,0.16c0.543-0.056,1.365-0.823,1.365-0.823
	c0.257-0.693,0.16-4.318,0.16-4.318c0-0.392-0.184-3.082-0.184-3.082c-0.072-0.878,0.304-3.649,0.304-3.649
	c0.231-0.663,1.174-6.533,1.174-6.533c0.695-2.205,1.255-9.307,1.255-9.307c0.118-1.015,0.135-2.827,0.135-2.827
	c0.056-1.893-0.111-8.062-0.111-8.062c-0.112-1.781-1.062-11.922-1.062-11.922c-0.375-1.669-0.927-11.237-0.927-11.237
	c-0.208-2.076-0.071-8.354-0.071-8.354c0.016-1.86,0.199-6.037,0.199-6.037c0.088,0.513,0.688-0.03,0.688-0.03
	c0.431,0.519,1.109-0.308,1.109-0.308c0.256,0.225,0.87-0.208,0.87-0.208c0.017,0.432,0.232,0.162,0.232,0.162
	c0.144,0.607,0.684,0.092,0.684,0.092c0.501,1.169,1.544-0.058,1.544-0.058c0.129,0.176,0.097,0.07,0.097,0.07
	c-0.008,0.687-0.487,0.073-0.487,0.073c-0.447,0.592-0.639,0.018-0.639,0.018c-0.057,0.256,0,0.098,0,0.098
	c0.104,1.03-0.008,0.197-0.008,0.197C25.597,11.96,25.82,11.5,25.82,11.5c0.224,0.08,0.591-0.532,0.591-0.532
	c0.472-0.136,0.56-1.943,0.56-1.943c0.023-0.328,0.056-1.821,0.056-1.821c0.016-0.463,0.503-1.121,0.503-1.121
	c0.399-0.024,0.6-0.293,0.6-0.293c0.263,0.496,0.295,0.09,0.295,0.09c0.016,0.959-0.239,0.141-0.239,0.141
	c-0.336,0.902-0.304,0.078-0.304,0.078c0.04,0.694,0.814-0.395,0.814-0.395c0.64,0,0.849-1.593,0.849-1.593
	c0.115,0.388,0.707-0.365,0.707-0.365c0.62-0.02,0.775-1.49,0.775-1.49c0.369,0.107,0.66-0.801,0.66-0.801
	c0.407-0.378,0.436-2.417,0.436-2.417c0.137,0.01,0.341-0.442,0.341-0.442c0.339-0.291,0.387-2.292,0.387-2.292
	c0.126-0.63,0-3.338,0-3.338c-0.048-0.437-0.728-4.045-0.728-4.045c-0.339-0.805-0.795-4.311-0.795-4.311
	c-0.146-0.64-0.378-3.157-0.378-3.157c-0.437-1.969-1.231-8.999-1.231-8.999C29.242-29,28.089-35.21,28.089-35.21
	c-0.912-1.591-2.211-6.308-2.211-6.308c-2.318-2.298-4.093-7.518-4.093-7.518c-1.368-0.553-2.947-3.887-2.947-3.887
	c-0.593-0.243-0.611-1.619-0.611-1.619l0.01-1.006c-0.02-0.233,0.009-0.699,0.009-0.699c0.563-0.572,1.329-3.67,1.329-3.67
	c0.485-0.921,0.756-3.778,0.756-3.778c0.272,0.097,0.602-0.484,0.602-0.484c0.417-0.029,0.67-1.457,0.67-1.457
	c0.164-0.456,0.371-3.109,0.371-3.109c0.17-0.612,0.306-2.892,0.306-2.892c0.098-0.658-0.238-2.24-0.238-2.24
	c-0.274-0.516-0.781-1.45-0.781-1.45c0.374-1.598,0-5.837,0-5.837c-0.34-1.938-7.013-3.706-7.013-3.706
	c-2.188-2.857-14.245-2.738-14.245-2.738s-12.07-0.119-14.259,2.738C-14.258-84.87-20.918-83.102-21.258-81.164z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-19.622-75.578c0,0-0.281,3.851,0,5.05
	c0,0-0.381,0.855-0.587,1.242c0,0-0.252,1.399-0.178,1.893c0,0,0.102,1.988,0.229,2.447c0,0,0.155,2.329,0.279,2.671
	c0,0,0.189,1.243,0.502,1.265c0,0,0.247,0.561,0.451,0.489c0,0,0.203,2.56,0.567,3.251c0,0,0.575,2.78,0.996,3.209
	c0,0,0.022,0.419,0.008,0.594l0.007,0.855c0,0-0.015,1.241-0.458,1.423c0,0-1.186,3.202-2.211,3.617c0,0-1.331,5.053-3.069,6.777
	c0,0-0.975,4.412-1.659,5.605c0,0-0.865,5.605-1.221,6.695c0,0-0.597,6.35-0.924,7.826c0,0-0.175,2.269-0.284,2.749
	c0,0-0.342,3.153-0.596,3.756c0,0-0.509,3.206-0.546,3.533c0,0-0.094,2.434,0,2.907c0,0,0.037,1.788,0.291,2.006
	c0,0,0.153,0.409,0.255,0.402c0,0,0.022,1.841,0.327,2.125c0,0,0.218,0.842,0.495,0.762c0,0,0.116,1.35,0.582,1.364
	c0,0,0.443,0.771,0.53,0.48c0,0,0.157,1.47,0.636,1.47c0,0,0.581,1.107,0.611,0.586c0,0,0.024,0.899-0.227,0.223
	c0,0-0.192,1.006-0.18,0.288c0,0,0.024,0.608,0.222,0.236c0,0,0.149,0.378,0.449,0.396c0,0,0.365,0.67,0.377,1.019
	c0,0,0.024,1.371,0.042,1.617c0,0,0.066,1.639,0.419,1.74c0,0,0.276,0.604,0.444,0.544c0,0,0.167,0.496,0.114,0.119
	c0,0-0.084,1.104-0.006,0.33c0,0,0.041,0.308,0,0.115c0,0-0.144,0.824-0.48,0.381c0,0-0.359,0.861-0.365,0.346
	c0,0-0.024,0.21,0.072,0.078c0,0,0.782,1.798,1.158,0.921c0,0,0.405,0.902,0.513,0.446c0,0,0.162,0.604,0.174,0.281
	c0,0,0.461,0.655,0.653,0.487c0,0,0.509,1.025,0.832,0.637c0,0,0.449,0.774,0.515,0.392c0,0,0.138,4.007,0.15,5.402
	c0,0,0.102,5.9-0.054,7.459c0,0-0.413,8.819-0.695,10.071c0,0-0.712,9.323-0.796,10.659c0,0-0.126,5.836-0.084,7.257
	c0,0,0.012,1.778,0.102,2.538c0,0,0.419,6.709,0.94,8.363c0,0,0.707,5.408,0.881,5.905c0,0,0.281,2.634,0.227,3.293
	c0,0-0.138,2.509-0.138,2.803c0,0-0.071,3.378,0.12,3.899c0,0,0.706,0.575,1.113,0.617c0,0,0.468,0.012,0.534-0.12
	c0,0,0.378,0.197,0.665,0.197c0,0,0.622-0.048,0.682-0.216c0,0,0.297,0.132,0.632,0.139c0,0,0.732,0.018,0.816-0.259
	c0,0,0.237,0.156,0.506,0.133c0,0,0.674-0.078,0.782-0.259c0,0,0.464,0.204,0.746,0.175c0,0,0.958-0.03,1.006-0.42
	c0,0,0.415-0.252,0.217-0.622c0,0,0.472-0.972,0.178-1.547c0,0,0.087-0.993,0.051-1.138c0,0,0.143-0.125,0.155-0.497
	c0,0,1.688-1.791,1.646-2.587c0,0,0.976-0.863,0.808-1.827c0,0,0.636-0.982,0.504-1.432c0,0,0.357-0.425,0.441-0.886
	c0,0,0.816-0.623,1.025-1.259c0,0,1.58-0.917,1.748-1.994c0,0,1.632-1.465,1.447-2.189c0,0,0.989,0.168,1.555,0.272
	c0,0,0.99,0.09,1.459,0.071C-0.023,64.089,0.944,64,0.944,64c0.566-0.104,1.546-0.272,1.546-0.272
	c-0.187,0.725,1.486,2.189,1.486,2.189c0.168,1.077,1.771,1.994,1.771,1.994c0.21,0.636,1.03,1.259,1.03,1.259
	c0.084,0.461,0.479,0.886,0.479,0.886c-0.132,0.449,0.535,1.432,0.535,1.432c-0.168,0.964,0.859,1.827,0.859,1.827
	c-0.042,0.796,1.716,2.587,1.716,2.587c0.012,0.372,0.173,0.497,0.173,0.497c-0.036,0.145,0.118,1.138,0.118,1.138
	c-0.293,0.575,0.261,1.547,0.261,1.547c-0.198,0.37,0.25,0.622,0.25,0.622c0.048,0.39,1.054,0.42,1.054,0.42
	c0.282,0.029,0.794-0.175,0.794-0.175c0.108,0.181,0.841,0.259,0.841,0.259c0.27,0.023,0.546-0.133,0.546-0.133
	c0.084,0.276,0.87,0.259,0.87,0.259c0.336-0.007,0.671-0.139,0.671-0.139c0.061,0.168,0.748,0.216,0.748,0.216
	c0.288,0,0.742-0.197,0.742-0.197c0.066,0.132,0.605,0.12,0.605,0.12c0.407-0.042,1.171-0.617,1.171-0.617
	c0.191-0.521,0.12-3.798,0.12-3.798c0-0.294-0.139-2.708-0.139-2.708c-0.054-0.659,0.229-3.213,0.229-3.213
	c0.173-0.497,0.88-5.77,0.88-5.77c0.521-1.654,0.941-8.209,0.941-8.209c0.089-0.76,0.101-2.483,0.101-2.483
	c0.042-1.42-0.084-7.092-0.084-7.092c-0.083-1.336-0.796-10.502-0.796-10.502c-0.282-1.252-0.695-9.898-0.695-9.898
	c-0.156-1.559-0.054-7.353-0.054-7.353c0.012-1.396,0.149-5.309,0.149-5.309c0.066,0.383,0.516-0.364,0.516-0.364
	c0.323,0.39,0.833-0.592,0.833-0.592c0.19,0.168,0.651-0.454,0.651-0.454c0.013,0.323,0.175-0.251,0.175-0.251
	c0.107,0.456,0.513-0.396,0.513-0.396c0.376,0.877,1.158-0.864,1.158-0.864c0.096,0.132,0.072-0.078,0.072-0.078
	c-0.007,0.515-0.365-0.325-0.365-0.325c-0.336,0.443-0.479-0.366-0.479-0.366c-0.042,0.192,0-0.109,0-0.109
	c0.077,0.772-0.006-0.329-0.006-0.329c-0.054,0.378,0.113-0.124,0.113-0.124c0.168,0.06,0.443-0.539,0.443-0.539
	c0.354-0.102,0.419-1.735,0.419-1.735c0.019-0.245,0.043-1.597,0.043-1.597c0.012-0.349,0.377-1.022,0.377-1.022
	c0.3-0.018,0.449-0.387,0.449-0.387c0.197,0.371,0.222-0.248,0.222-0.248c0.012,0.719-0.181-0.307-0.181-0.307
	c-0.251,0.677-0.227-0.228-0.227-0.228c0.03,0.521,0.611-0.575,0.611-0.575c0.479,0,0.636-1.464,0.636-1.464
	c0.087,0.291,0.531-0.48,0.531-0.48c0.465-0.016,0.581-1.366,0.581-1.366c0.276,0.08,0.494-0.77,0.494-0.77
	c0.307-0.284,0.327-2.141,0.327-2.141c0.103,0.007,0.255-0.415,0.255-0.415c0.254-0.219,0.291-2.03,0.291-2.03
	c0.095-0.472,0-2.94,0-2.94c-0.037-0.328-0.546-3.58-0.546-3.58c-0.254-0.603-0.596-3.817-0.596-3.817
	c-0.109-0.48-0.284-2.784-0.284-2.784c-0.327-1.477-0.923-7.957-0.923-7.957c-0.357-1.091-1.222-6.804-1.222-6.804
	c-0.685-1.192-1.658-5.655-1.658-5.655c-1.739-1.723-3.07-6.919-3.07-6.919c-1.024-0.414-2.211-3.708-2.211-3.708
	c-0.443-0.182-0.458-1.461-0.458-1.461l0.007-0.885c-0.014-0.174,0.008-0.612,0.008-0.612c0.423-0.429,0.996-3.299,0.996-3.299
	c0.364-0.691,0.567-3.354,0.567-3.354c0.204,0.073,0.451-0.508,0.451-0.508c0.312-0.022,0.502-1.331,0.502-1.331
	c0.124-0.342,0.279-2.748,0.279-2.748c0.127-0.459,0.229-2.561,0.229-2.561c0.074-0.493-0.178-1.987-0.178-1.987
	c-0.206-0.386-0.587-1.345-0.587-1.345c0.28-1.198,0-5.149,0-5.149c-0.255-1.454-6.666-2.78-6.666-2.78
	C11.314-80.5,0.001-80.411,0.001-80.411s-11.327-0.089-12.968,2.053C-12.967-78.358-19.367-77.032-19.622-75.578z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-17.985-69.993c0,0-0.187,3.56,0,4.359
	c0,0-0.254,0.877-0.391,1.135c0,0-0.168,1.309-0.119,1.638c0,0,0.068,1.808,0.153,2.114c0,0,0.103,2.079,0.186,2.307
	c0,0,0.126,1.122,0.334,1.137c0,0,0.165,0.562,0.301,0.513c0,0,0.136,2.365,0.378,2.825c0,0,0.383,2.55,0.664,2.836
	c0,0,0.015,0.39,0.005,0.507l0.005,0.732c0,0-0.01,1.144-0.305,1.265c0,0-0.791,3.159-1.474,3.435c0,0-0.888,5.026-2.047,6.176
	c0,0-0.649,4.155-1.105,4.951c0,0-0.577,5.104-0.815,5.831c0,0-0.397,5.797-0.615,6.781c0,0-0.117,2.055-0.19,2.375
	c0,0-0.227,2.859-0.397,3.262c0,0-0.339,2.848-0.364,3.066c0,0-0.063,2.193,0,2.509c0,0,0.025,1.596,0.194,1.742
	c0,0,0.102,0.379,0.17,0.375c0,0,0.014,1.659,0.218,1.848c0,0,0.146,0.784,0.33,0.731c0,0,0.077,1.231,0.388,1.241
	c0,0,0.295,0.79,0.354,0.596c0,0,0.104,1.34,0.424,1.34c0,0,0.387,1.115,0.407,0.768c0,0,0.016,0.978-0.152,0.527
	c0,0-0.128,1.214-0.12,0.735c0,0,0.016,0.821,0.148,0.574c0,0,0.1,0.479,0.3,0.491c0,0,0.243,0.686,0.251,0.917
	c0,0,0.016,1.23,0.028,1.395c0,0,0.044,1.464,0.28,1.532c0,0,0.183,0.591,0.295,0.551c0,0,0.112,0.538,0.076,0.286
	c0,0-0.056,1.371-0.004,0.855c0,0,0.028,0.451,0,0.323c0,0-0.096,1.061-0.319,0.765c0,0-0.24,1.09-0.244,0.745
	c0,0-0.016,0.314,0.048,0.227c0,0,0.521,2.312,0.772,1.729c0,0,0.27,1.238,0.342,0.936c0,0,0.108,0.909,0.116,0.692
	c0,0,0.307,0.848,0.435,0.735c0,0,0.34,1.183,0.555,0.924c0,0,0.3,0.979,0.344,0.725c0,0,0.091,3.747,0.099,4.677
	c0,0,0.068,5.421-0.036,6.46c0,0-0.275,7.901-0.463,8.736c0,0-0.475,8.354-0.531,9.244c0,0-0.084,5.343-0.056,6.289
	c0,0,0.008,1.69,0.068,2.198c0,0,0.28,6.164,0.627,7.268c0,0,0.471,4.813,0.587,5.145c0,0,0.188,2.418,0.152,2.858
	c0,0-0.092,2.234-0.092,2.431c0,0-0.048,3.033,0.08,3.38c0,0,0.645,0.383,0.917,0.411c0,0,0.376,0.008,0.42-0.08
	c0,0,0.337,0.132,0.529,0.132c0,0,0.504-0.032,0.544-0.143c0,0,0.276,0.087,0.5,0.091c0,0,0.598,0.012,0.654-0.171
	c0,0,0.22,0.103,0.4,0.087c0,0,0.551-0.051,0.623-0.171c0,0,0.402,0.136,0.59,0.116c0,0,0.788-0.021,0.82-0.28
	c0,0,0.397-0.168,0.266-0.415c0,0,0.662-0.647,0.466-1.031c0,0,0.316-0.662,0.293-0.758c0,0,0.189-0.084,0.197-0.332
	c0,0,1.655-1.194,1.627-1.725c0,0,1.018-0.575,0.906-1.219c0,0,0.722-0.654,0.634-0.954c0,0,0.408-0.283,0.464-0.591
	c0,0,0.805-0.415,0.945-0.839c0,0,1.48-0.611,1.592-1.329c0,0,1.538-0.977,1.414-1.46c0,0,0.866,0.112,1.243,0.183
	c0,0,0.849,0.06,1.162,0.048c0.312,0.012,1.14-0.048,1.14-0.048c0.377-0.07,1.232-0.183,1.232-0.183
	c-0.124,0.483,1.454,1.46,1.454,1.46c0.111,0.718,1.616,1.329,1.616,1.329c0.14,0.424,0.949,0.839,0.949,0.839
	C5.943,66.027,6.39,66.31,6.39,66.31c-0.088,0.3,0.665,0.954,0.665,0.954c-0.111,0.644,0.96,1.219,0.96,1.219
	c-0.028,0.53,1.698,1.725,1.698,1.725c0.008,0.248,0.216,0.332,0.216,0.332c-0.023,0.096,0.36,0.758,0.36,0.758
	c-0.195,0.384,0.551,1.031,0.551,1.031c-0.131,0.247,0.3,0.415,0.3,0.415c0.031,0.26,0.869,0.28,0.869,0.28
	c0.188,0.02,0.641-0.116,0.641-0.116c0.071,0.12,0.683,0.171,0.683,0.171c0.179,0.016,0.442-0.087,0.442-0.087
	c0.055,0.183,0.709,0.171,0.709,0.171c0.223-0.004,0.539-0.091,0.539-0.091c0.04,0.11,0.61,0.143,0.61,0.143
	c0.192,0,0.608-0.132,0.608-0.132c0.044,0.088,0.493,0.08,0.493,0.08c0.271-0.028,0.977-0.411,0.977-0.411
	c0.127-0.347,0.08-3.277,0.08-3.277c0-0.194-0.092-2.333-0.092-2.333c-0.036-0.438,0.151-2.775,0.151-2.775
	c0.115-0.332,0.587-5.006,0.587-5.006c0.348-1.104,0.627-7.11,0.627-7.11c0.06-0.507,0.067-2.141,0.067-2.141
	c0.028-0.946-0.056-6.12-0.056-6.12c-0.056-0.891-0.531-9.083-0.531-9.083c-0.187-0.835-0.463-8.562-0.463-8.562
	c-0.104-1.038-0.036-6.35-0.036-6.35c0.008-0.93,0.101-4.582,0.101-4.582c0.044,0.255,0.343-0.695,0.343-0.695
	c0.216,0.259,0.555-0.878,0.555-0.878c0.128,0.111,0.437-0.701,0.437-0.701c0.008,0.217,0.114-0.662,0.114-0.662
	c0.072,0.304,0.344-0.884,0.344-0.884c0.25,0.585,0.771-1.671,0.771-1.671c0.063,0.087,0.048-0.225,0.048-0.225
	c-0.004,0.343-0.243-0.726-0.243-0.726c-0.225,0.296-0.32-0.748-0.32-0.748c-0.027,0.127,0-0.318,0-0.318
	C20.246,8.419,20.19,7.05,20.19,7.05c-0.035,0.252,0.076-0.292,0.076-0.292c0.111,0.04,0.296-0.545,0.296-0.545
	c0.234-0.067,0.278-1.525,0.278-1.525c0.013-0.164,0.028-1.375,0.028-1.375c0.008-0.231,0.252-0.923,0.252-0.923
	c0.2-0.012,0.299-0.481,0.299-0.481c0.132,0.248,0.148-0.585,0.148-0.585c0.008,0.479-0.12-0.755-0.12-0.755
	c-0.167,0.451-0.151-0.532-0.151-0.532c0.021,0.347,0.407-0.756,0.407-0.756c0.319,0,0.424-1.334,0.424-1.334
	c0.059,0.194,0.354-0.597,0.354-0.597c0.31-0.01,0.388-1.243,0.388-1.243c0.184,0.053,0.329-0.739,0.329-0.739
	c0.204-0.189,0.219-1.864,0.219-1.864c0.067,0.004,0.169-0.389,0.169-0.389c0.17-0.146,0.194-1.766,0.194-1.766
	c0.062-0.315,0-2.543,0-2.543c-0.024-0.218-0.363-3.114-0.363-3.114c-0.17-0.403-0.397-3.324-0.397-3.324
	c-0.073-0.32-0.189-2.412-0.189-2.412c-0.218-0.984-0.616-6.915-0.616-6.915c-0.236-0.727-0.813-5.942-0.813-5.942
	c-0.456-0.795-1.106-5.002-1.106-5.002c-1.159-1.15-2.046-6.321-2.046-6.321c-0.684-0.276-1.474-3.529-1.474-3.529
	c-0.296-0.121-0.307-1.303-0.307-1.303l0.005-0.763c-0.009-0.116,0.006-0.526,0.006-0.526c0.28-0.286,0.664-2.928,0.664-2.928
	c0.242-0.46,0.379-2.93,0.379-2.93c0.135,0.049,0.3-0.533,0.3-0.533c0.209-0.015,0.335-1.204,0.335-1.204
	c0.082-0.228,0.185-2.386,0.185-2.386c0.086-0.306,0.154-2.23,0.154-2.23c0.049-0.329-0.12-1.734-0.12-1.734
	c-0.137-0.258-0.391-1.241-0.391-1.241c0.188-0.799,0-4.461,0-4.461c-0.17-0.969-6.32-1.853-6.32-1.853
	c-1.094-1.428-11.664-1.369-11.664-1.369s-10.583-0.059-11.677,1.369C-11.676-71.845-17.815-70.961-17.985-69.993z"/>
<path fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" d="M-16.35-64.407c0,0-0.094,3.269,0,3.669
	c0,0-0.127,0.899-0.195,1.028c0,0-0.085,1.217-0.06,1.382c0,0,0.034,1.628,0.076,1.781c0,0,0.052,1.83,0.093,1.943
	c0,0,0.063,1.002,0.168,1.009c0,0,0.082,0.562,0.15,0.538c0,0,0.068,2.168,0.189,2.398c0,0,0.192,2.32,0.332,2.463
	c0,0,0.007,0.361,0.003,0.42l0.002,0.61c0,0-0.005,1.046-0.153,1.106c0,0-0.395,3.116-0.737,3.254c0,0-0.443,4.998-1.023,5.573
	c0,0-0.325,3.9-0.553,4.297c0,0-0.288,4.605-0.407,4.968c0,0-0.199,5.244-0.308,5.736c0,0-0.058,1.841-0.094,2.001
	c0,0-0.114,2.566-0.199,2.767c0,0-0.17,2.491-0.182,2.6c0,0-0.031,1.953,0,2.11c0,0,0.012,1.405,0.097,1.478
	c0,0,0.051,0.351,0.085,0.348c0,0,0.007,1.478,0.109,1.572c0,0,0.073,0.727,0.165,0.7c0,0,0.039,1.112,0.194,1.117
	c0,0,0.148,0.809,0.177,0.712c0,0,0.052,1.211,0.212,1.211c0,0,0.193,1.122,0.203,0.949c0,0,0.008,1.057-0.075,0.832
	c0,0-0.064,1.422-0.06,1.182c0,0,0.008,1.035,0.074,0.912c0,0,0.049,0.579,0.149,0.585c0,0,0.122,0.702,0.126,0.818
	c0,0,0.008,1.09,0.014,1.172c0,0,0.022,1.29,0.14,1.323c0,0,0.092,0.577,0.148,0.559c0,0,0.055,0.579,0.038,0.453
	c0,0-0.028,1.639-0.002,1.381c0,0,0.013,0.595,0,0.532c0,0-0.048,1.295-0.16,1.146c0,0-0.12,1.317-0.122,1.146
	c0,0-0.008,0.418,0.024,0.373c0,0,0.261,2.829,0.386,2.536c0,0,0.135,1.576,0.171,1.425c0,0,0.054,1.215,0.058,1.106
	c0,0,0.154,1.038,0.218,0.982c0,0,0.169,1.34,0.277,1.21c0,0,0.15,1.184,0.172,1.057c0,0,0.046,3.487,0.05,3.952
	c0,0,0.034,4.941-0.018,5.46c0,0-0.138,6.985-0.232,7.402c0,0-0.237,7.386-0.265,7.831c0,0-0.042,4.847-0.028,5.319
	c0,0,0.004,1.604,0.034,1.857c0,0,0.139,5.621,0.313,6.172c0,0,0.236,4.22,0.294,4.385c0,0,0.093,2.203,0.075,2.423
	c0,0-0.046,1.961-0.046,2.06c0,0-0.024,2.688,0.04,2.86c0,0,0.586,0.192,0.721,0.206c0,0,0.285,0.004,0.307-0.04
	c0,0,0.297,0.066,0.393,0.066c0,0,0.387-0.016,0.407-0.072c0,0,0.255,0.044,0.367,0.046c0,0,0.463,0.006,0.491-0.086
	c0,0,0.205,0.053,0.295,0.044c0,0,0.428-0.025,0.464-0.086c0,0,0.34,0.068,0.434,0.059c0,0,0.619-0.011,0.635-0.141
	c0,0,0.379-0.084,0.313-0.207c0,0,0.854-0.323,0.756-0.515c0,0,0.545-0.332,0.533-0.38c0,0,0.235-0.042,0.239-0.165
	c0,0,1.623-0.597,1.609-0.863c0,0,1.06-0.288,1.004-0.608c0,0,0.807-0.327,0.764-0.478c0,0,0.459-0.142,0.487-0.296
	c0,0,0.795-0.207,0.865-0.419c0,0,1.381-0.305,1.437-0.665c0,0,1.443-0.488,1.381-0.729c0,0,0.741,0.056,0.93,0.091
	c0,0,0.707,0.029,0.864,0.023c0.157,0.006,0.841-0.023,0.841-0.023c0.189-0.035,0.919-0.091,0.919-0.091
	c-0.062,0.241,1.424,0.729,1.424,0.729c0.056,0.36,1.461,0.665,1.461,0.665c0.069,0.212,0.869,0.419,0.869,0.419
	c0.028,0.154,0.527,0.296,0.527,0.296c-0.044,0.15,0.795,0.478,0.795,0.478c-0.056,0.32,1.06,0.608,1.06,0.608
	c-0.015,0.267,1.682,0.863,1.682,0.863c0.004,0.123,0.258,0.165,0.258,0.165c-0.012,0.048,0.604,0.38,0.604,0.38
	c-0.099,0.191,0.842,0.515,0.842,0.515c-0.066,0.123,0.348,0.207,0.348,0.207c0.017,0.13,0.686,0.141,0.686,0.141
	c0.094,0.01,0.484-0.059,0.484-0.059c0.036,0.061,0.525,0.086,0.525,0.086c0.09,0.009,0.338-0.044,0.338-0.044
	c0.028,0.092,0.548,0.086,0.548,0.086c0.112-0.002,0.407-0.046,0.407-0.046c0.02,0.057,0.476,0.072,0.476,0.072
	c0.097,0,0.474-0.066,0.474-0.066c0.021,0.044,0.381,0.04,0.381,0.04c0.136-0.014,0.782-0.206,0.782-0.206
	c0.063-0.173,0.039-2.755,0.039-2.755c0-0.098-0.046-1.959-0.046-1.959c-0.018-0.22,0.076-2.339,0.076-2.339
	c0.059-0.166,0.294-4.243,0.294-4.243c0.173-0.552,0.313-6.011,0.313-6.011c0.03-0.254,0.034-1.798,0.034-1.798
	c0.014-0.473-0.028-5.149-0.028-5.149c-0.028-0.444-0.265-7.665-0.265-7.665c-0.095-0.417-0.232-7.221-0.232-7.221
	c-0.052-0.519-0.018-5.349-0.018-5.349c0.004-0.465,0.05-3.855,0.05-3.855c0.021,0.128,0.172-1.026,0.172-1.026
	c0.108,0.13,0.277-1.164,0.277-1.164c0.063,0.056,0.218-0.946,0.218-0.946c0.004,0.107,0.058-1.075,0.058-1.075
	c0.036,0.151,0.171-1.371,0.171-1.371c0.125,0.292,0.387-2.479,0.387-2.479c0.031,0.044,0.023-0.372,0.023-0.372
	c-0.002,0.172-0.122-1.123-0.122-1.123c-0.112,0.146-0.16-1.132-0.16-1.132c-0.014,0.063,0-0.527,0-0.527
	c0.026,0.258-0.002-1.379-0.002-1.379c-0.018,0.126,0.038-0.46,0.038-0.46c0.057,0.02,0.148-0.551,0.148-0.551
	c0.118-0.034,0.14-1.318,0.14-1.318c0.006-0.081,0.015-1.151,0.015-1.151c0.004-0.115,0.125-0.822,0.125-0.822
	c0.1-0.007,0.149-0.576,0.149-0.576c0.066,0.124,0.074-0.923,0.074-0.923c0.004,0.24-0.061-1.203-0.061-1.203
	c-0.084,0.226-0.075-0.837-0.075-0.837c0.01,0.174,0.203-0.936,0.203-0.936c0.16,0,0.213-1.205,0.213-1.205
	c0.028,0.097,0.177-0.713,0.177-0.713c0.155-0.005,0.194-1.12,0.194-1.12c0.092,0.027,0.164-0.708,0.164-0.708
	c0.103-0.094,0.109-1.588,0.109-1.588C19.1-9.262,19.15-9.627,19.15-9.627c0.085-0.073,0.097-1.503,0.097-1.503
	c0.031-0.157,0-2.145,0-2.145c-0.012-0.109-0.182-2.649-0.182-2.649c-0.085-0.201-0.199-2.83-0.199-2.83
	c-0.036-0.16-0.095-2.039-0.095-2.039c-0.109-0.492-0.307-5.873-0.307-5.873c-0.119-0.364-0.408-5.081-0.408-5.081
	c-0.229-0.397-0.552-4.35-0.552-4.35c-0.58-0.575-1.023-5.722-1.023-5.722c-0.342-0.138-0.737-3.349-0.737-3.349
	c-0.147-0.061-0.152-1.146-0.152-1.146l0.002-0.641c-0.005-0.058,0.003-0.439,0.003-0.439c0.14-0.143,0.332-2.558,0.332-2.558
	c0.121-0.23,0.188-2.505,0.188-2.505c0.068,0.024,0.15-0.559,0.15-0.559c0.104-0.007,0.167-1.078,0.167-1.078
	c0.042-0.113,0.093-2.024,0.093-2.024c0.043-0.153,0.077-1.899,0.077-1.899c0.024-0.165-0.06-1.481-0.06-1.481
	c-0.068-0.129-0.195-1.136-0.195-1.136c0.093-0.399,0-3.773,0-3.773c-0.085-0.485-5.976-0.927-5.976-0.927
	c-0.547-0.714-10.373-0.684-10.373-0.684s-9.84-0.03-10.388,0.684C-10.387-65.334-16.265-64.892-16.35-64.407z"/>
<rect x="-14.713" y="-58.822" fill="none" stroke="#000000" stroke-width="0.3" stroke-miterlimit="10" width="29.426" height="117.644"/>
</svg>
`
},{}],140:[function(require,module,exports){
var parse = require('./parse');
var transform = require('./transform');

var bodySmall = require('../assets/body_s');
var bodyMedium = require('../assets/body_m');
var bodyLarge = require('../assets/body_l');

module.exports = [{
    svg: bodySmall,
    position: [ 156, -22 ],
    rotation: -18.5
},{
    svg: bodySmall,
    position: [ -29, 60 ],
    rotation: -41.8
},{
    svg: bodyMedium,
    position: [ -70, 233 ],
    rotation: -6.6
},{
    svg: bodyLarge,
    position: [ -15, -172 ],
    rotation: 9.4
},{
    svg: bodyLarge,
    position: [ 51, 51 ],
    rotation: -10.5
}].map( ( o, i ) => {
    
    var svg = o.svg;
    var position = o.position;
    var rotation = o.rotation;
    
    var paths = parse( svg ).reverse();
    
    var x = position[ 0 ];
    var y = position[ 1 ];
    
    transform.translate( paths[ 0 ], x, y );
    paths[ 0 ].rotation = ( rotation / 360 ) * Math.PI * 2;
    
    paths[ paths.length - 1 ].visible = i === 0;
    
    transform.lerpPaths( paths );
    
    return paths;
    
})
},{"../assets/body_l":137,"../assets/body_m":138,"../assets/body_s":139,"./parse":145,"./transform":149}],141:[function(require,module,exports){
function drawPath( ctx, path ) {
    
    if ( !path.visible ) return;
    
    ctx.save();
    
    ctx.translate( path.position[ 0 ], path.position[ 1 ] );
    ctx.rotate( path.rotation );
    
    path.draws.forEach( draw => {
        
        var method = draw[ 0 ];
        var args = draw[ 1 ];
        
        ctx[ method ].apply( ctx, args );
        
    })
    
    ctx.restore();
    
}

function draw ( ctx, bodies, options ) {
    
    ctx.fillStyle = options.backgroundColor;
    ctx.fillRect( 0, 0, ctx.canvas.width, ctx.canvas.height );
    
    ctx.save();
    
    ctx.translate( ctx.canvas.width / 2, ctx.canvas.height / 2 );
    // ctx.scale( options.scale, options.scale );
    
    ctx.strokeStyle = options.strokeColor;
    ctx.lineWidth = options.strokeWidth;
    
    ctx.beginPath();
    
    bodies.forEach( paths => {
        
        paths.forEach( path => drawPath( ctx, path ) );
        
    })
    
    ctx.stroke();
    
    if ( options.fill ) {
        
        ctx.fillStyle = options.fillColor;
        
        bodies.forEach( paths => {
            
            var rect = paths[ 0 ];
            
            ctx.beginPath();
            drawPath( ctx, rect );
            ctx.fill();
            
            ctx.beginPath();
            drawPath( ctx, rect );
            ctx.stroke();
            
        })

    }
    
    ctx.restore();
    
}

draw.drawPath = drawPath;

module.exports = draw;
},{}],142:[function(require,module,exports){
/* global dat */

var gui = new dat.GUI;

module.exports = gui;
},{}],143:[function(require,module,exports){
var draw = require('./draw');
// var drawFast = require('./drawFast');
var bodies = require('./bodies');
var update = require('./physics')( bodies );
var recorder = require('./recorder');
var options = require('./options');

var canvas = document.createElement('canvas');
var ctx = canvas.getContext('2d');
document.body.appendChild( canvas );

function onResize() {

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    
}

window.addEventListener('resize', onResize);

onResize();

// var draw = drawFast( bodies, options );

var tick = () => {
    
    update( bodies );
    
    draw( ctx, bodies, options );
    
    requestAnimationFrame( tick );
    
    recorder.frame( bodies );
    
};

tick();
},{"./bodies":140,"./draw":141,"./options":144,"./physics":146,"./recorder":147}],144:[function(require,module,exports){
var gui = require('./gui');

var options = {
    strokeWidth: .3,
    backgroundColor: '#000000',
    strokeColor: '#FFFFFF',
    fill: true,
    fillColor: '#FFFFFF'
}

gui.add( options, 'strokeWidth' ).min(.1).max(1).step(.01).name('Stroke width');
gui.addColor( options, 'backgroundColor' ).name('Background');
gui.addColor( options, 'strokeColor' ).name('Stroke');
gui.add( options, 'fill' ).name('Fill');
gui.addColor( options, 'fillColor' ).name('Fill color');

gui.remember( options );

module.exports = options;
},{"./gui":142}],145:[function(require,module,exports){
var DOMParser = DOMParser || require('xmldom').DOMParser;
var parsePathData = require('parse-svg-path');
var absPath = require( 'abs-svg-path' );
var normalizePath = require('normalize-svg-path');

var cmds = {
  'M': 'moveTo',
  'C': 'bezierCurveTo'
};

function parsePath ( node ) {
    
    var data = node.getAttribute( 'd' );
    
    return normalizePath( absPath( parsePathData( data ) ) ).map( path => {
        
        var cmd = cmds[ path[ 0 ] ];
        
        var args = path.slice( 1 );
        
        return [ cmd, args ];
        
    })
    
}

function parseRect( node ) {
    
    var x = Number( node.getAttribute('x') );
    var y = Number( node.getAttribute('y') );
    var hw = Number( node.getAttribute('width') ) / 2;
    var hh = Number( node.getAttribute('height') ) / 2;
    
    return [ 
        [ 'moveTo', [ -hw, -hh ] ],
        [ 'lineTo', [ hw, -hh ] ],
        [ 'lineTo', [ hw, hh ] ],
        [ 'lineTo', [ -hw, hh ] ]
    ];
    
}

module.exports = function parse ( svgString ) {
    
    var parser = new DOMParser();
    var doc = parser.parseFromString( svgString, "image/svg+xml" );
    
    var nodes = doc.getElementsByTagName('svg')[0].childNodes;
    
    return Array.prototype.slice.call( nodes )
        .filter( node => node.nodeType !== 3 )
        .map( node => {
            
            var draws;
            
            switch ( node.nodeName ) {
                
                case 'path':
                    draws = parsePath( node );
                    break;
                    
                case 'rect':
                    draws = parseRect( node );
                    break;
                
            }
            
            return {
                draws,
                position: [0, 0],
                rotation: 0,
                visible: true
            };
            
        })
    
}
},{"abs-svg-path":1,"normalize-svg-path":64,"parse-svg-path":126,"xmldom":134}],146:[function(require,module,exports){
var vec2 = require('gl-vec2');
var gui = require('./gui');
var zip = require('lodash/zip');
var transform = require('./transform');

var { World, Body, Box, LinearSpring, RotationalSpring } = require('p2');

module.exports = function( bodies ) {
    
    var options = {
        linear: {
            stiffness: 100,
            damping: 500
        },
        rotational: {
            stiffness: 500000,
            damping: 50000
        },
        collisionResponse: true,
        delay: 0,
        power: 5,
        memory: 0
    }
    
    var center = vec2.fromValues( window.innerWidth / 2, window.innerHeight / 2 );
    
    var world = new World({
        gravity: [ 0, 0 ]
    });
    
    var [ origins, rects, linearSprings, rotationalSprings ] = zip( ...bodies.map( paths => {
        
        var { position, rotation, draws } = paths[ 0 ];
        
        var w = draws[ 0 ][ 1 ][ 0 ] * -2
        var h = draws[ 0 ][ 1 ][ 1 ] * -2
        
        var origin = {
            position: position.slice(),
            angle: rotation
        }
        
        var body = new Body({
            mass: 100,//( w * h ) / 1000,
            position: position.slice(),
            angle: rotation
        })
        
        var shape = new Box({
            width: w,
            height: h
        })
        
        body.addShape( shape );
        
        world.addBody( body );
        
        var pin = new Body({
            mass: 0,
            position: position.slice()
        })
        
        world.addBody( pin );
        
        var lSpring = new LinearSpring( body, pin, options.linear );
        world.addSpring( lSpring );
        
        var rSpring = new RotationalSpring( body, pin, options.rotational );
        world.addSpring( rSpring );
        
        return [ origin, body, lSpring, rSpring ];
        
    }))
    
    var mousedown = false;
    var mouse = vec2.create();
    
    window.addEventListener( 'mousedown', () => mousedown = true );
    window.addEventListener( 'touchstart', () => mousedown = true );
    window.addEventListener( 'mouseup', () => mousedown = false );
    window.addEventListener( 'touchend', () => mousedown = false );
    window.addEventListener( 'mousemove', e => vec2.set( mouse, e.clientX, e.clientY ) );
    window.addEventListener( 'touchmove', e => {
        var t = e.touches[ 0 ];
        vec2.set( mouse, t.clientX, t.clientY )
    })
    
    var updateArray = ( array, property ) => value => {
        array.forEach( obj => obj[ property ] = value );
    }
    var addArrayGUI = ( gui, array, obj, prop, min, max, step ) => {
        var ctrl = gui.add( obj, prop, min, max );
        if ( step !== undefined ) ctrl.step( step );
        ctrl.onChange( updateArray( array, prop ) )
        return ctrl;
    }
    
    addArrayGUI( gui, linearSprings, options.linear, 'stiffness', 0, 1000 ).name('Snap Position');
    // fl.add( options.linear, 'stiffness', 0, 1000 );
    // fl.add( options.linear, 'damping', 0, 2 ).step(.01);
    addArrayGUI( gui, rotationalSprings, options.rotational, 'stiffness', 0, 1000000 ).name('Snap Rotation');
    // fr.add( options.rotational, 'stiffness', 0, 1000 );
    // fr.add( options.rotational, 'damping', 0, 2 ).step(.01);
    
    addArrayGUI( gui, rects, options, 'collisionResponse' ).name( 'Collisions' )
    
    gui.add(options, 'delay', 0, .95 ).step(.01);
    gui.add(options, 'power', 1, 20 );
    gui.add(options, 'memory', 0, 1 );
    
    var then;
    
    return function update ( bodies ) {
        
        var now = Date.now();
        
        var dT = then ? Math.min( now - then, 16 ) / 1000 : 0;
        
        world.step( 1 / 60, dT );
        
        rects.forEach( ( rect, i ) => {
            
            var paths = bodies[ i ];
            var origin = origins[ i ];
            var rectPath = paths[ 0 ];
            
            rect.angularVelocity *= .95;
            
            var f = vec2.create();
            vec2.subtract( f, origin.position, rect.position );
            vec2.scale( f, f, 10 );
            rect.applyImpulse( f );
            
            vec2.scale( rect.velocity, rect.velocity, .99 )
            
            rectPath.position = rect.interpolatedPosition.slice();
            rectPath.rotation = rect.interpolatedAngle;
            
            transform.lerpPaths( paths, options.delay, options.power, options.memory );
            
        })
        
        if ( mousedown ) {
        
            var click = vec2.create();
            vec2.subtract( click, mouse, center );
            
            rects.forEach( rect => {
                
                var force = vec2.create();
                
                vec2.subtract( force, rect.position, click );
                
                var d = vec2.length( force );
                
                vec2.normalize( force, force );
                
                var power = Math.max( 400 - d, 0 ) / 400;
                
                vec2.scale( force, force, power * 100000 )
                
                var localClick = vec2.create();
                
                rect.toLocalFrame( localClick, click );
                
                rect.applyImpulse( force, localClick );
                
            })
        
        }
    
        then = now;
        
    }
    
}
},{"./gui":142,"./transform":149,"gl-vec2":12,"lodash/zip":63,"p2":100}],147:[function(require,module,exports){
var gui = require('./gui');
var options = require('./options');
var render = require('./render');

var recorder = {
    recording: false,
    tape: [],
    frame: ( bodies, options ) => {
        if( !recorder.recording ) return;
        recorder.tape.push(bodies.map( paths => paths.map( path => {
            return {
                position: [ path.position[0], path.position[1] ],
                rotation: path.rotation,
                visible: path.visible
            }
        })))
    },
    record: () => {
        if( recorder.recording ) {
            recorder.recording = false;
            render(options, recorder.tape);
            
        } else {
            recorder.tape = [];
            recorder.recording = true;
        }
    }
}

gui.add( recorder, 'record' );

module.exports = recorder;
},{"./gui":142,"./options":144,"./render":148}],148:[function(require,module,exports){
var xhr = require('xhr');

module.exports = ( options, tape ) => {
    
    var form = document.getElementById('form');
    var input = document.getElementById('data');
    
    var data = JSON.stringify( { options, tape } );
    
    input.value = data;
    
    form.submit();
    
    // xhr({
    //     method: 'POST',
    //     uri: '/render',
    //     body: { options, tape },
    //     json: true
    // }, ( err, res ) => {
    //     location.href = '/download';
    // })
    
}
},{"xhr":127}],149:[function(require,module,exports){
var translate = ( path, x, y ) => {
    
    path.position[ 0 ] += x;
    path.position[ 1 ] += y;
    return path;
    
}

var translateAll = ( paths, x, y ) => paths.map( path => translate( path, x, y ) );

var setPosition = ( path, x, y ) => {
    
    path.position[ 0 ] = x;
    path.position[ 1 ] = y;
    return path;
    
}

var lerp = ( a, b, t ) => a + ( b - a ) * t;

var lerpVectors = ( v1, v2, t ) => v1.map( ( x, i ) => lerp( x, v2[ i ], t ) );

var lerpPath = ( path, from, to, t ) => {
    
    path.position = lerpVectors( from.position, to.position, t );
    
    path.rotation = lerp( from.rotation, to.rotation, t );
    
    return path;
    
}

var lerpPaths = ( paths, delay, power, memory ) => {
    
    delay = delay || 0;
    power = power || 5;
    memory = memory || 0;
    
    var count = paths.length - 1;
    var from = paths[ 0 ];
    var to = { position: [0, 0], rotation: 0 }
    
    var prev = paths[ 0 ];
    
    return paths.map( ( path, i ) => {
        var dummy = { position: path.position, rotation: path.rotation }
        var target = lerpPath( dummy, from, to, i / count );
        var d = delay * (1 - Math.pow( 1 - ( i / count ), power ) );
        path.position = lerpVectors( target.position, path.position, d );
        path.rotation = lerp( target.rotation, path.rotation, d );
        var m = memory * Math.pow(  i / count, power );
        path.position = lerpVectors( path.position, prev.position, m );
        path.rotation = lerp( path.rotation, prev.rotation, m );
        return path;
    })
    
}

module.exports = {
    setPosition,
    translate,
    translateAll,
    lerpPaths
}
},{}]},{},[143]);
